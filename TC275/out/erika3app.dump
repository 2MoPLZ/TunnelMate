
erika3app.elf:     file format elf32-tricore
erika3app.elf
architecture: TriCore:V1_6_1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000020

Program Header:
    LOAD off    0x00004020 vaddr 0x80000020 paddr 0x80000020 align 2**14
         filesz 0x0000e860 memsz 0x0000e860 flags r-x
    LOAD off    0x00014000 vaddr 0x70000000 paddr 0x8000e880 align 2**14
         filesz 0x00000958 memsz 0x00000958 flags rw-
    LOAD off    0x00016600 vaddr 0x5001a600 paddr 0x8000f1d8 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x5001b700 paddr 0x8000f1d8 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00016600 vaddr 0x6001a600 paddr 0x8000f1d8 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x6001b700 paddr 0x8000f1d8 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00014958 vaddr 0x70000958 paddr 0x8000f1d8 align 2**14
         filesz 0x00000000 memsz 0x000005d8 flags rw-
    LOAD off    0x00018600 vaddr 0x70018600 paddr 0x8000f1d8 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00015700 vaddr 0x70019700 paddr 0x8000f1d8 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00017c00 vaddr 0x5001bc00 paddr 0x8000f200 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00017c00 vaddr 0x6001bc00 paddr 0x8000f200 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00015c00 vaddr 0x70019c00 paddr 0x8000f200 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .startup      00000006  80000020  80000020  00004020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000011d8  80000028  80000028  00004028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          000005d8  70000958  8000f1d8  00014958  2**3
                  ALLOC
  3 .data         00000958  70000000  8000e880  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .traptab      00000100  80001200  80001200  00005200  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .ctors        00000008  80001300  80001300  00005300  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .dtors        00000008  80001308  80001308  00005308  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .inttab_cpu0  00002000  80002000  80002000  00006000  2**13
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text         0000a880  80004000  80004000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .CPU2.ustack  00001000  5001a600  8000f1d8  00016600  2**3
                  ALLOC, CPU2
 10 .CPU2.istack  00000400  5001b700  8000f1d8  00017700  2**3
                  ALLOC, CPU2
 11 .CPU2.csa     00002000  5001bc00  8000f200  00017c00  2**6
                  ALLOC, CPU2
 12 .CPU1.ustack  00001000  6001a600  8000f1d8  00016600  2**3
                  ALLOC, CPU1
 13 .CPU1.istack  00000400  6001b700  8000f1d8  00017700  2**3
                  ALLOC, CPU1
 14 .CPU1.csa     00002000  6001bc00  8000f200  00017c00  2**6
                  ALLOC, CPU1
 15 .CPU0.ustack  00001000  70018600  8000f1d8  00018600  2**3
                  ALLOC, CPU0
 16 .CPU0.istack  00000400  70019700  8000f1d8  00015700  2**3
                  ALLOC, CPU0
 17 .CPU0.csa     00002000  70019c00  8000f200  00015c00  2**6
                  ALLOC, CPU0
 18 .comment      00000053  00000000  00000000  00014958  2**0
                  CONTENTS, READONLY
 19 .debug_aranges 00000d28  00000000  00000000  000149b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_info   000cb928  00000000  00000000  000156d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_abbrev 0000c375  00000000  00000000  000e1000  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0000d03b  00000000  00000000  000ed375  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_frame  00002390  00000000  00000000  000fa3b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    0000219c  00000000  00000000  000fc740  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_loc    00014081  00000000  00000000  000fe8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_ranges 00001370  00000000  00000000  0011295d  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .version_info 0004ad67  00000000  00000000  00113ccd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
80000020 l    d  .startup	00000000 .startup
80000028 l    d  .rodata	00000000 .rodata
70000958 l    d  .bss	00000000 .bss
70000000 l    d  .data	00000000 .data
80001200 l    d  .traptab	00000000 .traptab
80001300 l    d  .ctors	00000000 .ctors
80001308 l    d  .dtors	00000000 .dtors
80002000 l    d  .inttab_cpu0	00000000 .inttab_cpu0
80004000 l    d  .text	00000000 .text
5001a600 l    d  .CPU2.ustack	00000000 .CPU2.ustack
5001b700 l    d  .CPU2.istack	00000000 .CPU2.istack
5001bc00 l    d  .CPU2.csa	00000000 .CPU2.csa
6001a600 l    d  .CPU1.ustack	00000000 .CPU1.ustack
6001b700 l    d  .CPU1.istack	00000000 .CPU1.istack
6001bc00 l    d  .CPU1.csa	00000000 .CPU1.csa
70018600 l    d  .CPU0.ustack	00000000 .CPU0.ustack
70019700 l    d  .CPU0.istack	00000000 .CPU0.istack
70019c00 l    d  .CPU0.csa	00000000 .CPU0.csa
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .version_info	00000000 .version_info
00000000 l    df *ABS*	00000000 ee_tc_cstart.c
00000000 l    df *ABS*	00000000 Button_Driver.c
00000000 l    df *ABS*	00000000 asw.c
70000000 l     O .data	00000004 c.16159
00000000 l    df *ABS*	00000000 bsw.c
00000000 l    df *ABS*	00000000 ee_applcfg.c
8000015c l     O .rodata	0000001c osEE_tdb_ptr_array
80000150 l     O .rodata	00000004 osEE_res_db_ptr_array
80000178 l     O .rodata	000000e0 osEE_tdb_array
70000038 l     O .data	00000030 osEE_sn_array
80000154 l     O .rodata	00000008 osEE_res_db_array
70000c0c l     O .bss	0000000c osEE_res_cb_array
80000258 l     O .rodata	00000008 osEE_sdb_array
70000c18 l     O .bss	00000004 osEE_scb_array
70000068 l     O .data	0000008c osEE_tcb_array
00000000 l    df *ABS*	00000000 IfxVadc.c
80000260 l     O .rodata	00000006 CSWTCH.25
00000000 l    df *ABS*	00000000 IfxVadc_cfg.c
00000000 l    df *ABS*	00000000 IfxAsclin_PinMap.c
00000000 l    df *ABS*	00000000 IfxAsclin_cfg.c
00000000 l    df *ABS*	00000000 IfxPort_cfg.c
00000000 l    df *ABS*	00000000 IfxScuCcu.c
700000f8 l     O .data	00000004 IfxScuCcu_xtalFrequency
800060d0 l     F .text	00000034 IfxScuCcu_wait
80000b34 l     O .rodata	00000024 IfxScuCcu_aDefaultPllConfigSteps
00000000 l    df *ABS*	00000000 IfxScu_PinMap.c
00000000 l    df *ABS*	00000000 IfxVadc_Adc.c
80000dd0 l     O .rodata	00000040 IfxVadc_Adc_masterIndex
00000000 l    df *ABS*	00000000 infotainment_System.c
70000c20 l     O .bss	00000020 buf
70000c40 l     O .bss	00000004 infoState
70000c44 l     O .bss	0000001c infotainmentArr
80000eb0 l     O .rodata	0000001c stateMaxArr
00000000 l    df *ABS*	00000000 uart_Driver.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 impure.c
7000052c l     O .data	00000424 impure_data
00000000 l    df *ABS*	00000000 vfprintf.c
80000f4c l     O .rodata	00000010 blanks.4035
80000f3c l     O .rodata	00000010 zeroes.4036
00000000 l    df *ABS*	00000000 dtoa.c
8000ca98 l     F .text	0000011a quorem
00000000 l    df *ABS*	00000000 locale.c
80000f78 l     O .rodata	00000038 lconv
00000000 l    df *ABS*	00000000 mprec.c
80000fb0 l     O .rodata	0000000c p05.2553
00000000 l    df *ABS*	00000000 ultrasonic_Driver.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_sbrk.c
70000950 l     O .data	00000004 heap_top.2289
00000000 l    df *ABS*	00000000 ee_tc_trapvec.c
00000000 l    df *ABS*	00000000 ee_tc_intvec.c
8000994e l     F .text	0000000e osEE_tc_isr2_wrapper
00000000 l    df *ABS*	00000000 Lcd_Driver.c
8000404e l     F .text	00000060 lcd_write4bits
800040ae l     F .text	00000020 lcd_command
00000000 l    df *ABS*	00000000 IfxAsclin.c
00000000 l    df *ABS*	00000000 IfxAsclin_Asc.c
00000000 l    df *ABS*	00000000 IfxPort.c
00000000 l    df *ABS*	00000000 IfxScuEru.c
00000000 l    df *ABS*	00000000 IfxScuWdt.c
00000000 l    df *ABS*	00000000 Ifx_CircularBuffer.c
00000000 l    df *ABS*	00000000 Ifx_Fifo.c
00000000 l    df *ABS*	00000000 ee_tc_system.c
8000947e l     F .text	00000054 osEE_tc_stm_us_ticks
70000ee0 l     O .bss	00000004 osEE_tc_stm_freq_khz
00000000 l    df *ABS*	00000000 ee_oo_api_osek.c
8000995c l     F .text	0000001e osEE_shutdown_os
00000000 l    df *ABS*	00000000 ee_oo_sched_entry_points.c
8000a220 l     F .text	00000022 osEE_release_all_m
00000000 l    df *ABS*	00000000 ee_oo_scheduler.c
00000000 l    df *ABS*	00000000 ee_oo_kernel.c
00000000 l    df *ABS*	00000000 ee_oo_sched_partitioned.c
00000000 l    df *ABS*	00000000 ee_std_change_context.c
00000000 l    df *ABS*	00000000 ee_tc_hal.c
00000000 l    df *ABS*	00000000 ee_tc_ctx.c
8000a716 l     F .text	00000022 osEE_tc_change_context_from_task_end
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
8000a8a2 l     F .text	0000019c _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_exit.c
00000000 l    df *ABS*	00000000 libos.c
00000000 l    df *ABS*	00000000 libos_abort.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udivdi3.c
00000000 l    df *ABS*	00000000 umoddi3.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udiv6432.c
00000000 l    df *ABS*	00000000 Bsp.c
00000000 l    df *ABS*	00000000 CompilerGnuc.c
00000000 l    df *ABS*	00000000 IfxCpu.c
00000000 l    df *ABS*	00000000 IfxCpu_Irq.c
00000000 l    df *ABS*	00000000 IfxCpu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc.c
00000000 l    df *ABS*	00000000 IfxStdIf_DPipe.c
00000000 l    df *ABS*	00000000 IfxStm.c
00000000 l    df *ABS*	00000000 IfxStm_cfg.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 IfxScu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc_cfg.c
80000468 g     O .rodata	00000010 IfxAsclin1_TX_P33_12_OUT
80008988 g     F .text	0000001c printStateBlue
800031c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_142
80002d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_105
70000018 g     O .data	00000020 osEE_ccb_var
70000f30 g     O .text	00000001 __HEAP
80003980 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_204
800058c4 g     F .text	00000062 IfxAsclin_Asc_write
80008f06 g     F .text	000000ce measureEchoTick
80005162 g     F .text	0000000a IfxAsclin_Asc_getWriteEvent
800071ec g     F .text	00000032 IfxScuWdt_clearSafetyEndinit
80002c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_100
80007420 g     F .text	00000036 IfxScuWdt_setCpuEndinit
80000fbc g     O .rodata	00000028 __mprec_tinytens
80000b78 g     O .rodata	00000010 IfxScu_WDT1LCK_P20_7_OUT
8000ae14 g     F .text	0000001a .hidden __ashldi3
80007182 g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogReload
800021e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_15
80009ccc g     F .text	0000005a TerminateTask
800051de g     F .text	00000006 IfxAsclin_Asc_resetSendCount
80000268 g     O .rodata	000000a0 IfxVadc_cfg_srcAddresses
70000c08 g     O .bss	00000004 osEE_kcb_var
80000418 g     O .rodata	00000010 IfxAsclin2_TX_P14_2_OUT
80002f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_123
800081ca g     F .text	00000020 Ifx_CircularBuffer_addDataIncr
80004c8e g     F .text	00000014 IfxVadc_setScan
8000e4b8 g     F .text	00000040 .hidden __eqdf2
800057f4 g     F .text	00000088 IfxAsclin_Asc_initModuleConfig
80007116 g     F .text	00000038 IfxScuWdt_changeCpuWatchdogReload
80004900 g     F .text	00000010 IfxVadc_getQueueStatus
00000000 g       *ABS*	00000000 __HEAP_SIZE
80008480 g     F .text	00000176 Ifx_Fifo_read
80004ce8 g     F .text	0000001c IfxAsclin_disableModule
800007b8 g     O .rodata	00000010 IfxAsclin3_RXC_P20_3_IN
8000a2f6 g     F .text	00000022 osEE_idle_hook_wrapper
6001a600 g       .CPU1.ustack	00000000 __USTACK1_AREA_END
80008c2e g     F .text	0000006e myprintfSerial
80003e40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_242
80002300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_24
80003580 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_172
80009012 g     F .text	0000046c osEE_tc_core0_start
800024c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_38
80008346 g     F .text	00000004 Ifx_Fifo_destroy
70019b00 g     O .CPU0.istack	00000000 __ISTACK0
8000765a g     F .text	00000108 IfxVadc_Adc_getChannelConfig
800048b0 g     F .text	00000018 IfxVadc_getAdcAnalogFrequency
70000000 g       *ABS*	00000000 __DSPR0_START
80002be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_95
80002740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_58
8000a776 g     F .text	00000024 osEE_hal_save_ctx_and_ready2stacked
80002c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_97
8000698c g     F .text	00000012 IfxScuCcu_initErayPllConfig
8000a63e g     F .text	00000028 osEE_change_context_from_running
80005154 g     F .text	0000000e IfxAsclin_Asc_getWriteCount
800007d8 g     O .rodata	00000010 IfxAsclin3_RXA_P15_7_IN
800070ac g     F .text	00000032 IfxScuEru_setInterruptGatingPattern
800052a0 g     F .text	00000014 IfxAsclin_Asc_clearTx
80005942 g     F .text	000000c6 IfxAsclin_Asc_stdIfDPipeInit
80002560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_43
8000b5f8 g     F .text	00000002 __malloc_unlock
8000513e g     F .text	0000000a IfxAsclin_Asc_getReadEvent
80004250 g     F .text	000000dc TimerISR
8000862c g     F .text	000000f0 Ifx_Fifo_canWriteCount
80007f92 g     F .text	000000e8 IfxVadc_Adc_initModule
800032e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_151
70000c60 g     O .bss	0000000b g_RecievedActuatorPacket
80002ec0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_118
80002c60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_99
800047ca g     F .text	0000003c IfxVadc_disablePostCalibration
80002680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_52
800049ae g     F .text	00000028 IfxVadc_getSrcAddress
800049fa g     F .text	00000024 IfxVadc_initialiseAdcConverterClock
80004e12 g     F .text	00000024 IfxAsclin_getOvsFrequency
8000a0e6 g     F .text	00000096 SetEvent
80007762 g     F .text	00000038 IfxVadc_Adc_getChannelConversionTime
80003e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_244
80002380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_28
8000706e g     F .text	00000012 IfxScuEru_setEventFlag
80003920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_201
8000a242 g     F .text	0000000a osEE_scheduler_task_wrapper_restore
80000d80 g     O .rodata	00000010 IfxScu_EVRWUPA_P14_1_IN
80000588 g     O .rodata	00000010 IfxAsclin3_SLSO_P12_1_OUT
70019600 g     O .CPU0.ustack	00000000 __USTACK0
80003720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_185
8000e000 g     F .text	00000050 memmove
800088a4 g     F .text	00000002 syncInfoState
70018600 g       .CPU0.ustack	00000000 __USTACK0_AREA_END
8000d8c6 g     F .text	00000056 _Balloc
80000d60 g     O .rodata	00000010 IfxScu_EXTCLK0_P23_1_OUT
80003b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_216
80000878 g     O .rodata	00000010 IfxAsclin1_RXE_P11_10_IN
80000658 g     O .rodata	00000010 IfxAsclin3_SCLK_P15_8_OUT
800062a6 g     F .text	0000004a IfxScuCcu_getModuleFrequency
80003aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_213
800028e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_71
80006418 g     F .text	000003be IfxScuCcu_init
8000e538 g     F .text	00000040 .hidden __gtdf2
8000e49c  w    F .text	0000000a __errno
800037e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_191
80003380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_156
800099ac g     F .text	00000042 SuspendAllInterrupts
800051e4 g     F .text	00000008 IfxAsclin_Asc_canReadCount
80003180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_140
80002ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_103
00001000 g       *ABS*	00000000 __USTACK0_SIZE
80000858 g     O .rodata	00000010 IfxAsclin1_RXG_P02_3_IN
8000a7e4 g     F .text	00000066 osEE_hal_terminate_ctx
80000308 g     O .rodata	00000010 IfxAsclin3_TX_P32_3_OUT
8000a388 g     F .text	00000048 osEE_sn_priority_insert
80003480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_164
80003ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_215
80009ff4 g     F .text	00000078 GetTaskState
80008188 g     F .text	00000020 Ifx_CircularBuffer_get32
8000a43a g     F .text	00000022 osEE_task_event_set_mask
80000398 g     O .rodata	00000010 IfxAsclin3_TX_P11_1_OUT
800007c8 g     O .rodata	00000010 IfxAsclin3_RXB_P11_0_IN
80007456 g     F .text	0000009e IfxScuWdt_initCpuWatchdog
80005ba8 g     F .text	00000092 IfxPort_setGroupModeOutput
00000400 g       *ABS*	00000000 __ISTACK1_SIZE
80005ff6 g     F .text	00000072 IfxScuCcu_getPllFrequency
80002a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_82
70000f20 g     O .bss	00000004 errno
8000adba g     F .text	0000001e .hidden __make_dp
80002e40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_114
0001a600 g       *ABS*	00000000 __USTACK1_OFFSET
800022a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_21
80001260 g       .traptab	00000000 osEE_tc_trap_context
800075d8 g     F .text	00000040 IfxScuWdt_enableWatchdogWithDebugger
80002ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_117
80000768 g     O .rodata	00000010 IfxAsclin3_RXG_P21_3_IN
80000908 g     O .rodata	00000010 IfxAsclin2_RTS_P33_4_OUT
800005c8 g     O .rodata	00000010 IfxAsclin2_SLSO_P02_3_OUT
800027e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_63
8000aea8 g     F .text	00000016 .hidden __make_fp
80003560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_171
80004534 g     F .text	0000007e initVADCChannels
800023c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_30
80000338 g     O .rodata	00000010 IfxAsclin3_TX_P22_0_OUT
800020c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_6
80003780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_188
80000c60 g     O .rodata	00000014 IfxScu_REQ15_P14_1_IN
80000cd8 g     O .rodata	00000014 IfxScu_REQ0_P15_4_IN
80002260 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_19
800070de g     F .text	00000038 IfxScuWdt_changeCpuWatchdogPassword
8000a1ae g     F .text	00000058 ClearEvent
8000636a g     F .text	00000042 IfxScuCcu_getCpuFrequency
80003d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_232
800028a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_69
8000a24c g     F .text	000000aa osEE_scheduler_task_wrapper_run
80003f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_251
800035c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_174
800006a8 g     O .rodata	00000010 IfxAsclin3_SCLK_P00_0_OUT
80003700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_184
800009d8 g     O .rodata	00000080 IfxPort_cfg_indexMap
80005446 g     F .text	000003ae IfxAsclin_Asc_initModule
8000a5da g     F .text	00000026 osEE_scheduler_task_preemption_point
8000421a g     F .text	00000036 FuncTaskUltrasonic
8000d8aa g     F .text	0000001c memcpy
800021c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_14
8000b8f4 g     F .text	000011a4 _svfprintf_r
8000ad72 g     F .text	00000048 .hidden __floatsidf
8000779a g     F .text	0000023e IfxVadc_Adc_getGroupConfig
80006f40 g     F .text	00000026 IfxScuEru_enablePatternDetectionTrigger
8000a3d0 g     F .text	0000000e osEE_scheduler_rq_insert
80002940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_74
8000e5b8 g     F .text	00000040 .hidden __ltdf2
800049a4 g     F .text	0000000a IfxVadc_getScanStatus
80001310 g       .dtors	00000000 __DTOR_END__
8000699e g     F .text	00000076 IfxScuCcu_setCpuFrequency
80007080 g     F .text	0000002c IfxScuEru_setFlagPatternDetection
8000a686 g     F .text	00000026 osEE_idle_task_terminate
80000cc4 g     O .rodata	00000014 IfxScu_REQ10_P14_3_IN
80003c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_228
800088a6 g     F .text	00000002 updatePacket
800008f8 g     O .rodata	00000010 IfxAsclin3_RTS_P00_9_OUT
80000728 g     O .rodata	00000010 IfxAsclin1_SCLK_P20_10_OUT
8000de6c g     F .text	00000042 __fpclassifyd
800023a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_29
8000714e g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogPassword
80003a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_211
80002340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_26
800072e8 g     F .text	0000005c IfxScuWdt_enableCpuWatchdog
80002540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_42
8000a514 g     F .text	0000003c osEE_scheduler_task_unblocked
80002960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_75
80003820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_193
800033c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_158
8000b142 g     F .text	0000000c malloc
80002cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_102
80006db0 g     F .text	00000028 IfxScuEru_clearInputChannelConfiguration
00000000 g       *ABS*	00000000 NULL
80000788 g     O .rodata	00000010 IfxAsclin3_RXF_P21_6_IN
8000985c g     F .text	0000001e osEE_tc_stm_set_sr0_next_match
80001240 g       .traptab	00000000 osEE_tc_trap_instruction
8000100c g     O .rodata	000000c8 __mprec_tens
70000010 g     O .data	00000004 g_vadcChannelIDs
80005288 g     F .text	00000008 IfxAsclin_Asc_canWriteCount
800041ec g     F .text	0000002e ButtonISR
80009d9a g     F .text	000000b2 GetResource
80000428 g     O .rodata	00000010 IfxAsclin2_TX_P10_5_OUT
80000518 g     O .rodata	00000010 IfxAsclin0_TX_P15_2_OUT
8000b676 g     F .text	00000016 vsnprintf
80003ac0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_214
800029a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_77
80000958 g     O .rodata	00000010 IfxAsclin3_CTSA_P00_12_IN
800038a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_197
70000f18 g     O .bss	00000004 __malloc_top_pad
800045d4 g     F .text	00000026 readADCValue
80008918 g     F .text	0000001c printStateOn
80006a14 g     F .text	0000008e IfxScuCcu_setGtmFrequency
80005d34 g     F .text	00000064 IfxPort_setPinModeLvdsHigh
8000a79a g     F .text	0000002c osEE_hal_ready2stacked
80002660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_51
80000c38 g     O .rodata	00000014 IfxScu_REQ1_P15_8_IN
800082f6 g     F .text	00000050 Ifx_CircularBuffer_write32
8000d888 g     F .text	0000000a _localeconv_r
80003460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_163
80004dd8 g     F .text	00000022 IfxAsclin_getIndex
8000da58 g     F .text	00000010 __i2b
80009d26 g     F .text	00000074 Schedule
80004e36 g     F .text	00000016 IfxAsclin_getShiftFrequency
800079d8 g     F .text	000001ec IfxVadc_Adc_initChannel
80003f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_250
80000328 g     O .rodata	00000010 IfxAsclin3_TX_P22_1_OUT
80006c76 g     F .text	00000112 IfxScuCcu_switchToBackupClock
80003100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_136
80000748 g     O .rodata	00000010 IfxAsclin0_SCLK_P15_2_OUT
80007344 g     F .text	00000072 IfxScuWdt_enableSafetyWatchdog
80002060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_3
80003e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_240
8000b5fa g     F .text	0000001e _sbrk_r
800004d8 g     O .rodata	00000010 IfxAsclin1_TX_P11_12_OUT
80000cf8 g     O .rodata	0000000c IfxScu_HWCFG5_P10_6_IN
800004e8 g     O .rodata	00000010 IfxAsclin1_TX_P02_2_OUT
80003040 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_130
8000896c g     F .text	0000001c printStateGreen
80002b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_89
800025c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_46
70000978 g     O .bss	0000000c g_vadcGroup
80006ef4 g     F .text	00000026 IfxScuEru_enableAutoClear
80000738 g     O .rodata	00000010 IfxAsclin1_SCLK_P15_0_OUT
80008d98 g     F .text	0000001a serialize_sensor_packet
800027a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_61
80002800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_64
8000afd0 g     F .text	000000ac .hidden __unpack_d
00002700 g     O *ABS*	00000000 __TRICORE_DERIVATE_NAME__
80005dda g     F .text	0000003c IfxPort_setPinPadDriver
80003ec0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_246
80002480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_36
80000498 g     O .rodata	00000010 IfxAsclin1_TX_P15_4_OUT
70000f14 g     O .bss	00000004 __malloc_max_sbrked_mem
80002a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_81
800012a0 g       .traptab	00000000 osEE_tc_trap_assertion
80002ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_93
80008000 g       *ABS*	00000000 __A1_MEM
8000a870 g     F .text	00000032 .hidden __extendsfdf2
80002700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_56
80008d28 g     F .text	00000048 readActuatorPacket
80004d4e g     F .text	00000016 IfxAsclin_getAddress
8000aa3e g     F .text	00000038 .hidden __adddf3
800041a8 g     F .text	0000000e lcd_goto
80009b58 g     F .text	0000001a GetActiveApplicationMode
800062f0 g     F .text	0000007a IfxScuCcu_getSriFrequency
80008ea0 g     F .text	00000066 sendTrigger
800030c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_134
800099ee g     F .text	00000026 ResumeAllInterrupts
800036c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_182
800038e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_199
80006bf6 g     F .text	00000080 IfxScuCcu_setSriFrequency
8000e718 g     F .text	00000026 .hidden __umoddi3
80003740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_186
70019c00 g     O .CPU0.csa	00000000 __CSA0
80003840 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_194
800033e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_159
80003280 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_148
80002180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_12
80000928 g     O .rodata	00000010 IfxAsclin1_RTS_P23_1_OUT
80000f00 g     O .rodata	00000004 _global_impure_ptr
80006e00 g     F .text	00000036 IfxScuEru_connectTrigger
70000958 g     O .bss	00000020 g_vadcChannel
800063ac g     F .text	00000036 IfxScuCcu_getFsi2Frequency
8000e060 g     F .text	000003f0 _realloc_r
80000708 g     O .rodata	00000010 IfxAsclin1_SCLK_P33_12_OUT
80004e88 g     F .text	00000012 IfxAsclin_read16
800088a8 g     F .text	0000001c printStateLv1
80005adc g     F .text	0000003c IfxPort_enableEmergencyStop
80000358 g     O .rodata	00000010 IfxAsclin3_TX_P20_3_OUT
80003fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_254
8000e678 g     F .text	000000a0 .hidden __udivdi3
800008d8 g     O .rodata	00000010 IfxAsclin0_RXB_P15_3_IN
80000368 g     O .rodata	00000010 IfxAsclin3_TX_P20_0_OUT
70008000 g       *ABS*	00000000 __A0_MEM
8000a318 g     F .text	00000070 osEE_scheduler_core_rq_preempt_stk
80000528 g     O .rodata	00000010 IfxAsclin0_TX_P14_1_OUT
800040ce g     F .text	0000000a lcd_clear
80000fe4 g     O .rodata	00000028 __mprec_bigtens
8000e4a6 g     F .text	00000012 abort
8000e646 g     F .text	00000032 .hidden __floatunsidf
80002aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_85
8000dcb8 g     F .text	00000042 __mcmp
800038c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_198
800052b4 g     F .text	0000001c IfxAsclin_Asc_read
80009b72 g     F .text	00000084 ActivateTask
80000c74 g     O .rodata	00000014 IfxScu_REQ14_P02_1_IN
80003300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_152
80006e5c g     F .text	00000026 IfxScuEru_disableFallingEdgeDetection
80002040 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_2
80002de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_111
8000834a g     F .text	0000003a Ifx_Fifo_init
80008950 g     F .text	0000001c printStateRed
80002420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_33
70000f28  w    O .bss	00000004 _my_errno
80000568 g     O .rodata	00000010 IfxAsclin3_SLSO_P21_2_OUT
80005a08 g     F .text	00000030 IfxPort_getAddress
80003760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_187
00019c00 g       *ABS*	00000000 __CSA0_OFFSET
80000988 g     O .rodata	00000010 IfxAsclin1_CTSB_P32_4_IN
80009f9c g     F .text	00000058 GetTaskID
800067ea g     F .text	000001a2 IfxScuCcu_initErayPll
80000408 g     O .rodata	00000010 IfxAsclin2_TX_P14_3_OUT
80003de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_239
800003a8 g     O .rodata	00000010 IfxAsclin3_TX_P11_0_OUT
80000ae0 g     O .rodata	00000054 IfxScuCcu_defaultClockConfig
0001bc00 g       *ABS*	00000000 __CSA1_OFFSET
80006fb2 g     F .text	0000000e IfxScuEru_getAllEventFlagsStatus
80000d1c g     O .rodata	0000000c IfxScu_HWCFG2EVR13_P14_2_IN
80009a14 g     F .text	0000005c SuspendOSInterrupts
80003a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_210
8000721e g     F .text	0000005a IfxScuWdt_disableCpuWatchdog
80008d70 g     F .text	00000028 asclin0RxISR
8000ae2e g     F .text	0000007a .hidden __unpack_f
800097a4 g     F .text	00000034 osEE_tc_stm_set_clockpersec
80003a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_208
800045b2 g     F .text	00000022 initADC
800031e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_143
80002d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_106
8000a600 g     F .text	0000003e osEE_scheduler_task_set_running
b0008000 g     O *ABS*	00000000 _SMALL_DATA4_
8000987a g     F .text	0000008e osEE_tc_stm_set_sr1
800007a8 g     O .rodata	00000010 IfxAsclin3_RXD_P32_2_IN
80008c9c g     F .text	0000000c asclin0TxISR
80000688 g     O .rodata	00000010 IfxAsclin3_SCLK_P11_1_OUT
80007278 g     F .text	00000070 IfxScuWdt_disableSafetyWatchdog
80002c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_96
800075d4 g     F .text	00000004 IfxScuWdt_serviceSafetyWatchdog
80000808 g     O .rodata	00000010 IfxAsclin2_RXE_P33_8_IN
800006b8 g     O .rodata	00000010 IfxAsclin2_SCLK_P33_9_OUT
8000d9b0 g     F .text	00000042 __hi0bits
80002760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_59
800008a8 g     O .rodata	00000010 IfxAsclin1_RXB_P15_5_IN
80002e60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_115
80000478 g     O .rodata	00000010 IfxAsclin1_TX_P20_10_OUT
80000488 g     O .rodata	00000010 IfxAsclin1_TX_P15_5_OUT
8000e5f8 g     F .text	0000004e .hidden __fixdfsi
80003160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_139
8000a47e g     F .text	00000068 osEE_scheduler_task_activated
80006104 g     F .text	00000078 IfxScuCcu_getBbbFrequency
0001bc00 g       *ABS*	00000000 __CSA2_OFFSET
0001e000 g       *ABS*	00000000 __DSPR2_SIZE
800003b8 g     O .rodata	00000010 IfxAsclin3_TX_P00_1_OUT
80000538 g     O .rodata	00000010 IfxAsclin0_TX_P14_0_OUT
80002f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_121
8000469c g     F .text	0000000c asclin3TxISR
800063e2 g     F .text	00000036 IfxScuCcu_getFsiFrequency
80000b88 g     O .rodata	00000010 IfxScu_WDT0LCK_P20_8_OUT
80002100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_8
80002580 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_44
80003d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_234
800032a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_149
800071b6 g     F .text	00000036 IfxScuWdt_clearCpuEndinit
80008fd4 g     F .text	00000028 getUltrasonic
80002e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_113
80003320 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_153
800025e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_47
800022e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_23
800006d8 g     O .rodata	00000010 IfxAsclin2_SCLK_P14_2_OUT
80004f7e g     F .text	00000182 IfxAsclin_setBitTiming
80000d40 g     O .rodata	00000010 IfxScu_EXTCLK1_P32_4_OUT
80000548 g     O .rodata	00000010 IfxAsclin3_SLSO_P33_1_OUT
80000378 g     O .rodata	00000010 IfxAsclin3_TX_P15_7_OUT
800088c4 g     F .text	0000001c printStateLv2
80000888 g     O .rodata	00000010 IfxAsclin1_RXD_P14_8_IN
80000d04 g     O .rodata	0000000c IfxScu_HWCFG4_P10_5_IN
80008db2 g     F .text	00000048 sendSensorPacket
80007618 g     F .text	00000026 IfxVadc_Adc_deInitGroup
8000a84a g     F .text	00000026 .hidden __lshrdi3
80000798 g     O .rodata	00000010 IfxAsclin3_RXE_P00_1_IN
80008b06 g     F .text	00000008 initInfotainment
800039a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_205
800008c8 g     O .rodata	00000010 IfxAsclin0_RXD_P34_2_IN
80000628 g     O .rodata	00000010 IfxAsclin3_SCLK_P21_7_OUT
80007bda g     F .text	0000038a IfxVadc_Adc_initGroup
8000db82 g     F .text	0000007c __pow5mult
80002140 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_10
70000988 g     O .bss	0000000c g_ERUconfig
80003fe0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_255
80002860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_67
80002e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_112
80006ea8 g     F .text	00000026 IfxScuEru_disableRisingEdgeDetection
800005e8 g     O .rodata	00000010 IfxAsclin1_SLSO_P20_8_OUT
8000a550 g     F .text	0000008a osEE_scheduler_task_terminated
800003c8 g     O .rodata	00000010 IfxAsclin3_TX_P00_0_OUT
80002460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_35
800036a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_181
8000b07c g     F .text	000000c6 .hidden __pack_f
80003ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_245
800081ea g     F .text	0000005e Ifx_CircularBuffer_read8
80000918 g     O .rodata	00000010 IfxAsclin2_RTS_P10_8_OUT
00002700 g       *ABS*	00000000 __TRICORE_DERIVATE_MEMORY_MAP__
80003b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_219
80002360 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_27
800037a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_189
80007406 g     F .text	0000001a IfxScuWdt_initConfig
80001300 g       .ctors	00000000 __CTOR_LIST__
80009700 g     F .text	000000a4 osEE_tc_get_fsource
80004e9a g     F .text	00000012 IfxAsclin_read32
80000c9c g     O .rodata	00000014 IfxScu_REQ12_P11_10_IN
800074f4 g     F .text	00000004 IfxScuWdt_serviceCpuWatchdog
80003ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_247
80000948 g     O .rodata	00000010 IfxAsclin0_RTS_P14_7_OUT
80002ac0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_86
80000818 g     O .rodata	00000010 IfxAsclin2_RXD_P10_6_IN
800097d8 g     F .text	00000084 osEE_tc_stm_set_sr0
80000b98 g     O .rodata	00000014 IfxScu_REQ9_P20_0_IN
800006e8 g     O .rodata	00000010 IfxAsclin2_SCLK_P10_6_OUT
80002e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_116
8000a7c6 g     F .text	0000001e osEE_tc_change_context_from_isr2_end
80002a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_83
8000d892 g     F .text	00000018 memchr
80003400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_160
8000b746 g     F .text	000001ac _free_r
8000587c g     F .text	00000048 IfxAsclin_Asc_initiateTransmission
80002220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_17
800023e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_31
8000a206 g     F .text	00000018 GetISRID
800088e0 g     F .text	0000001c printStateLv3
8000a738 g     F .text	00000024 osEE_hal_save_ctx_and_restore_ctx
800020a0 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_5
80001280 g       .traptab	00000000 osEE_tc_trap_bus
80005e18 g     F .text	000000f8 IfxScuCcu_calculateSysPllDividers
80000968 g     O .rodata	00000010 IfxAsclin2_CTSB_P33_5_IN
70000118 g     O .data	00000004 __malloc_sbrk_base
80000020 g     F .startup	00000006 _start
80003520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_169
80008b0e g     F .text	0000009c updateInfoState
80008384 g     F .text	00000022 Ifx_Fifo_create
80003f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_249
800073d6 g     F .text	0000001c IfxScuWdt_getCpuWatchdogEndInit
00001000 g       *ABS*	00000000 __USTACK2_SIZE
800012e0 g       .traptab	00000000 osEE_tc_trap_nmi
8000dbfe g     F .text	000000ba __lshift
80003600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_176
800006c8 g     O .rodata	00000010 IfxAsclin2_SCLK_P33_7_OUT
8000763e g     F .text	0000001c IfxVadc_Adc_disableModule
80008e04 g     F .text	00000048 readSensorPacket
00002000 g       *ABS*	00000000 __CSA_SIZE
8000deae g     F .text	000000f0 __ssprint_r
800048c8 g     F .text	0000001a IfxVadc_getAdcDigitalFrequency
5001bc00 g       .CPU2.csa	00000000 __CSA2
800034a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_165
80003c60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_227
7001bc00 g     O .CPU0.csa	00000000 __CSA0_END
8000474c g     F .text	00000038 IfxVadc_enableAccess
800027c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_62
8000da68 g     F .text	0000011a __multiply
00000001 g       *ABS*	00000000 _.
80006fc0 g     F .text	00000012 IfxScuEru_getEventFlagStatus
800041b6 g     F .text	00000036 lcd_print
800005a8 g     O .rodata	00000010 IfxAsclin2_SLSO_P33_6_OUT
800003f8 g     O .rodata	00000010 IfxAsclin2_TX_P32_5_OUT
80004c14 g     F .text	00000024 IfxVadc_selectPowerSupplyVoltage
80006e82 g     F .text	00000026 IfxScuEru_disablePatternDetectionTrigger
70000ee8 g     O .bss	00000028 __malloc_current_mallinfo
8000ddc4 g     F .text	000000a8 __d2b
80003c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_226
800037c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_190
80003360 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_155
800026c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_54
80002fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_125
80008934 g     F .text	0000001c printStateOff
80002b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_91
80000bd4 g     O .rodata	00000014 IfxScu_REQ6_P02_0_IN
800081a8 g     F .text	00000022 Ifx_CircularBuffer_get16
800004c8 g     O .rodata	00000010 IfxAsclin1_TX_P14_10_OUT
80003680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_180
80005fb2 g     F .text	00000044 IfxScuCcu_getPllErayVcoFrequency
80001300 g       .ctors	00000000 __EH_FRAME_END__
80006e36 g     F .text	00000026 IfxScuEru_disableAutoClear
80006aa2 g     F .text	00000050 IfxScuCcu_setPll2ErayFrequency
6001bb00 g       .CPU1.istack	00000000 __ISTACK1
80003800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_192
800033a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_157
8000620c g     F .text	00000022 IfxScuCcu_getBaud2Frequency
80003240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_146
80002da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_109
80000668 g     O .rodata	00000010 IfxAsclin3_SCLK_P15_6_OUT
8000e73e g     F .text	000000a6 .hidden __fpcmp_parts_d
80004d32 g     F .text	0000001c IfxAsclin_enableModule
0001a600 g       *ABS*	00000000 __USTACK2_OFFSET
8000a3de g     F .text	00000026 osEE_scheduler_core_pop_running
800021a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_13
80003f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_252
8000a6ac g     F .text	0000006a osEE_cpu_startos
80003b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_218
80006f66 g     F .text	00000026 IfxScuEru_enableRisingEdgeDetection
80000848 g     O .rodata	00000010 IfxAsclin2_RXA_P14_3_IN
80003e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_241
800029c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_78
80005a38 g     F .text	00000022 IfxPort_getIndex
800030a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_133
8000a17c g     F .text	00000032 GetEvent
8000542a g     F .text	0000001c IfxAsclin_Asc_disableModule
6001b600 g       .CPU1.ustack	00000000 __USTACK1
80004eac g     F .text	00000012 IfxAsclin_read8
8000a4e6 g     F .text	0000002e osEE_scheduler_task_insert
80003be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_223
80002620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_49
8000ac5a g     F .text	00000118 .hidden __divdf3
80000da0 g     O .rodata	00000010 IfxScu_EMGSTOPA_P33_8_IN
80000d50 g     O .rodata	00000010 IfxScu_EXTCLK1_P11_12_OUT
80005926 g     F .text	0000001c IfxAsclin_Asc_blockingWrite
8000807a g     F .text	0000003a IfxVadc_Adc_initModuleConfig
70000120 g     O .data	00000408 __malloc_av_
80002f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_120
80009f38 g     F .text	00000064 ShutdownOS
80003060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_131
8000b62c g     F .text	0000004a _vsnprintf_r
800035e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_175
70018600 g     O .CPU0.ustack	00000000 __USTACK0_END
80003900 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_200
80002120 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_9
8000aab6 g     F .text	000001a4 .hidden __muldf3
80002500 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_40
80000758 g     O .rodata	00000010 IfxAsclin0_SCLK_P14_0_OUT
80002520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_41
80004396 g     F .text	0000006e delay_us
80000d90 g     O .rodata	00000010 IfxScu_EMGSTOPB_P21_2_IN
8000b5f6 g     F .text	00000002 __malloc_lock
8000e460 g     F .text	0000003c sbrk
80005f10 g     F .text	0000000e IfxScuCcu_getOsc0Frequency
80004714 g     F .text	00000038 IfxVadc_disableAccess
80008bac g     F .text	00000082 initUartDriver
80000000 g       .startup	00000000 BootModeHeader0
800012c0 g       .traptab	00000000 osEE_tc_trap_system
80000d10 g     O .rodata	0000000c IfxScu_HWCFG3_BMI_P14_3_IN
80004e74 g     F .text	00000014 IfxAsclin_getSrcPointerTx
80004910 g     F .text	00000094 IfxVadc_getResultBasedOnRequestSource
8000df9e g     F .text	00000062 _calloc_r
00002000 g       *ABS*	00000000 __CSA0_SIZE
8000622e g     F .text	00000078 IfxScuCcu_getSpbFrequency
80002820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_65
80000838 g     O .rodata	00000010 IfxAsclin2_RXB_P02_1_IN
80004806 g     F .text	000000aa IfxVadc_enableGroupSync
8000701a g     F .text	00000012 IfxScuEru_getPatternDetectionResult
800024a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_37
800052d0 g     F .text	0000009e IfxAsclin_Asc_isrTransmit
800003e8 g     O .rodata	00000010 IfxAsclin2_TX_P33_8_OUT
80003d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_233
80003960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_203
8000e050 g     F .text	00000010 memset
800034e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_167
80002640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_50
800040d8 g     F .text	000000d0 lcd_init
800046a8 g     F .text	0000006c main
800073b6 g     F .text	00000020 IfxScuWdt_getCpuWatchdogPassword
8000432c g     F .text	0000006a delay_ms
80006f8c g     F .text	00000026 IfxScuEru_enableTriggerPulse
80002200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_16
70000f10 g     O .bss	00000004 __malloc_max_total_mem
80003540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_170
80004d04 g     F .text	0000002e IfxAsclin_enableAscErrorFlags
8000e7e4 g     F .text	0000009c .hidden __udiv6432
80008cd6 g     F .text	00000048 sendActuatorPacket
00000400 g       *ABS*	00000000 __ISTACK_SIZE
800061ec g     F .text	00000020 IfxScuCcu_getBaud1Frequency
800025a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_45
800080f6 g     F .text	00000092 IfxVadc_Adc_initExternalMultiplexerMode
80000c4c g     O .rodata	00000014 IfxScu_REQ16_P15_1_IN
70000994 g     O .bss	00000274 g_AsclinAsc
80002b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_88
80000cec g     O .rodata	0000000c IfxScu_HWCFG6_P14_4_IN
8000a404 g     F .text	00000018 osEE_task_activated
5001bb00 g       .CPU2.istack	00000000 __ISTACK2
80000134 g     O .rodata	00000014 osEE_kdb_var
00018600 g       *ABS*	00000000 __USTACK0_OFFSET
800073f2 g     F .text	00000014 IfxScuWdt_getSafetyWatchdogPassword
8000add8 g     F .text	0000003c .hidden __truncdfsf2
80003b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_220
80003020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_129
8000cbb4 g     F .text	00000cd2 _dtoa_r
0001b700 g       *ABS*	00000000 __ISTACK1_OFFSET
8000b15c g     F .text	0000049a _malloc_r
80000558 g     O .rodata	00000010 IfxAsclin3_SLSO_P21_6_OUT
80005d98 g     F .text	00000042 IfxPort_setPinModeLvdsMedium
80000828 g     O .rodata	00000010 IfxAsclin2_RXC_P02_10_IN
800039e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_207
80005404 g     F .text	00000026 IfxAsclin_Asc_blockingRead
80003d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_235
800024e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_39
80002020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_1
80000618 g     O .rodata	00000010 IfxAsclin3_SCLK_P32_3_OUT
80005138 g     F .text	00000006 IfxAsclin_Asc_getReadCount
80002a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_80
80008000 g       *ABS*	00000000 __A8_MEM
80000608 g     O .rodata	00000010 IfxAsclin3_SCLK_P33_2_OUT
b0008000 g       *ABS*	00000000 __A9_MEM
80005114 g     F .text	00000012 IfxAsclin_write32
80003ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_231
80003340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_154
70000100 g     O .data	0000000a g_FrontUltrasonic
80002c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_98
80004476 g     F .text	0000006e printfSerial
80000eec g     O .rodata	00000014 .hidden __thenan_df
8000b68c g     F .text	000000ba _malloc_trim_r
80001308 g       .ctors	00000000 __CTOR_END__
80008000 g     O *ABS*	00000000 _SMALL_DATA2_
80000438 g     O .rodata	00000010 IfxAsclin2_TX_P02_9_OUT
80004b18 g     F .text	000000aa IfxVadc_getChannelConversionTime
50000000 g       *ABS*	00000000 __DSPR2_START
800028c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_70
80004784 g     F .text	00000046 IfxVadc_configExternalMultiplexerMode
80009e4c g     F .text	000000ec ReleaseResource
800080b4 g     F .text	00000042 IfxVadc_Adc_initExternalMultiplexerModeConfig
80004dfa g     F .text	00000018 IfxAsclin_getPdFrequency
800048e6 g     F .text	0000001a IfxVadc_getBackgroundScanStatus
80003da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_237
80001308 g       .dtors	00000000 __DTOR_LIST__
60000000 g       *ABS*	00000000 __DSPR1_START
80003c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_224
800026a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_53
00001000 g       *ABS*	00000000 __USTACK1_SIZE
80002b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_90
80004bc2 g     F .text	00000052 IfxVadc_resetKernel
80000938 g     O .rodata	00000010 IfxAsclin1_RTS_P20_6_OUT
80008d1e g     F .text	0000000a deserialize_actuator_packet
80000d34 g     O .rodata	0000000c IfxScu_HWCFG0DCLDO_P14_6_IN
8000e4f8 g     F .text	00000040 .hidden __nedf2
80004f2c g     F .text	00000052 IfxAsclin_setBaudrateBitFields
80003a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_209
80003880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_196
80006068 g     F .text	00000044 IfxScuCcu_getPllVcoFrequency
80006b42 g     F .text	000000b4 IfxScuCcu_setSpbFrequency
80003220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_145
80002d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_108
80006ff6 g     F .text	00000024 IfxScuEru_getOutputChannelConfiguration
80000b68 g     O .rodata	00000010 IfxScu_WDT2LCK_P20_6_OUT
80000a58 g     O .rodata	00000080 IfxPort_cfg_esrMasks
80002a80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_84
80000778 g     O .rodata	00000010 IfxAsclin3_RXG_P21_2_IN
80003500 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_168
80005290 g     F .text	00000010 IfxAsclin_Asc_clearRx
800009a8 g     O .rodata	00000010 IfxAsclin0_CTSA_P14_9_IN
80002400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_32
80003000 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_128
80000dc0 g     O .rodata	00000010 IfxScu_DCDCSYNC_P32_2_OUT
80005ab2 g     F .text	0000002a IfxPort_setESR
80000578 g     O .rodata	00000010 IfxAsclin3_SLSO_P14_3_OUT
80003620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_177
800004b8 g     O .rodata	00000010 IfxAsclin1_TX_P15_0_OUT
80003120 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_137
80002900 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_72
80008cbc g     F .text	0000001a serialize_actuator_packet
80000998 g     O .rodata	00000010 IfxAsclin1_CTSA_P20_7_IN
80002600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_48
80000c10 g     O .rodata	00000014 IfxScu_REQ3_P10_3_IN
800004a8 g     O .rodata	00000010 IfxAsclin1_TX_P15_1_OUT
70000528 g     O .data	00000004 _impure_ptr
80003660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_179
80005a5a g     F .text	00000028 IfxPort_resetESR
8000516c g     F .text	00000072 IfxAsclin_Asc_isrError
800049d6 g     F .text	00000024 IfxVadc_initialiseAdcArbiterClock
80008ca8 g     F .text	00000014 calculate_checksum
80004e60 g     F .text	00000014 IfxAsclin_getSrcPointerRx
800036e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_183
80000508 g     O .rodata	00000010 IfxAsclin0_TX_P15_3_OUT
80008e4c g     F .text	00000054 initUltrasonic
70000c6c g     O .bss	00000274 g_AsclinStm
80003cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_230
80004e4c g     F .text	00000014 IfxAsclin_getSrcPointerEr
00002000 g       *ABS*	00000000 __CSA1_SIZE
800022c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_22
80000458 g     O .rodata	00000010 IfxAsclin1_TX_P33_13_OUT
80000898 g     O .rodata	00000010 IfxAsclin1_RXC_P20_9_IN
8000997a g     F .text	00000016 DisableAllInterrupts
80008298 g     F .text	0000005e Ifx_CircularBuffer_write8
8000536e g     F .text	00000096 IfxAsclin_Asc_isrReceive
80005b18 g     F .text	00000090 IfxPort_setGroupModeInput
800083a6 g     F .text	000000da Ifx_Fifo_canReadCount
00001000 g       *ABS*	00000000 __USTACK_SIZE
80009bf6 g     F .text	000000d6 ChainTask
8000703a g     F .text	00000034 IfxScuEru_selectExternalInput
80006f1a g     F .text	00000026 IfxScuEru_enableFallingEdgeDetection
80002ca0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_101
70000004 g     O .data	0000000b sendActuatorPkt
80000978 g     O .rodata	00000010 IfxAsclin2_CTSA_P10_7_IN
5001a600 g       .CPU2.ustack	00000000 __USTACK2_AREA_END
800007f8 g     O .rodata	00000010 IfxAsclin2_RXF_P32_6_IN
80002fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_126
80000678 g     O .rodata	00000010 IfxAsclin3_SCLK_P11_4_OUT
800067d6 g     F .text	00000014 IfxScuCcu_initConfig
80003b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_217
80003ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_221
80000348 g     O .rodata	00000010 IfxAsclin3_TX_P21_7_OUT
80004a48 g     F .text	00000066 IfxVadc_initializeFAdcI
800005b8 g     O .rodata	00000010 IfxAsclin2_SLSO_P10_5_OUT
80000bac g     O .rodata	00000014 IfxScu_REQ8_P33_7_IN
80000318 g     O .rodata	00000010 IfxAsclin3_TX_P32_2_OUT
80001200 g       .traptab	00000000 osEE_tc_trap_mmu
80008248 g     F .text	00000050 Ifx_CircularBuffer_read32
80002ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_87
800051ec g     F .text	0000009c IfxAsclin_Asc_flushTx
80009926 g     F .text	00000028 osEE_tc_delay
80000698 g     O .rodata	00000010 IfxAsclin3_SCLK_P00_2_OUT
800010d4 g     O .rodata	00000000 __clear_table
80005f4e g     F .text	00000064 IfxScuCcu_getPllErayFrequency
80000868 g     O .rodata	00000010 IfxAsclin1_RXF_P33_13_IN
8000a41c g     F .text	0000001e osEE_task_end
80000648 g     O .rodata	00000010 IfxAsclin3_SCLK_P20_0_OUT
80002dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_110
80002f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_124
80003bc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_222
80002240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_18
80002440 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_34
800008b8 g     O .rodata	00000010 IfxAsclin1_RXA_P15_1_IN
80001300 g       .ctors	00000000 __EH_FRAME_BEGIN__
80000598 g     O .rodata	00000010 IfxAsclin3_SLSO_P00_3_OUT
80002840 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_66
80003140 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_138
80003e60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_243
800060ac g     F .text	00000024 IfxScuCcu_getSourceFrequency
800004f8 g     O .rodata	00000010 IfxAsclin0_TX_P34_1_OUT
80000db0 g     O .rodata	00000010 IfxScu_DCDCSYNC_P33_13_OUT
80000c88 g     O .rodata	00000014 IfxScu_REQ13_P15_5_IN
8000a666 g     F .text	00000020 osEE_change_context_from_task_end
8000a06c g     F .text	0000007a WaitEvent
80002080 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_4
80005a82 g     F .text	00000030 IfxPort_disableEmergencyStop
80003fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_253
80003c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_225
80008ffc g     F .text	00000016 calculateDistanceCm
80000388 g     O .rodata	00000010 IfxAsclin3_TX_P15_6_OUT
80002880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_68
80007f64 g     F .text	0000002e IfxVadc_Adc_initGroupConfig
00000400 g       *ABS*	00000000 __ISTACK0_SIZE
80002980 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_76
5001b600 g       .CPU2.ustack	00000000 __USTACK2
80003940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_202
80009908 g     F .text	0000001e osEE_tc_stm_set_sr1_next_match
0001e000 g       *ABS*	00000000 __DSPR1_SIZE
80003260 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_147
80000020 g       .startup	00000000 BootModeIndex
800032c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_150
80003d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_236
7000011c g     O .data	00000004 __malloc_trim_threshold
800031a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_141
80002d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_104
800048e2 g     F .text	00000004 IfxVadc_getAdcModuleFrequency
8000871c g     F .text	00000186 Ifx_Fifo_write
8000dcfa g     F .text	000000ca __mdiff
800020e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_7
80002920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_73
8000a45c g     F .text	00000022 osEE_activate_isr2
80007bc4 g     F .text	00000016 IfxVadc_Adc_initChannelConfig
80004d64 g     F .text	00000074 IfxAsclin_getFaFrequency
80006af2 g     F .text	00000050 IfxScuCcu_setPll2Frequency
80003dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_238
80020000 g       .startup	00000000 BootModeHeader1
800094d2 g     F .text	0000022e osEE_tc_set_pll_fsource
80004a1e g     F .text	0000002a IfxVadc_initializeFAdcD
80004404 g     F .text	00000072 UART_init
80005c3a g     F .text	000000a4 IfxPort_setGroupPadDriver
800026e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_55
0001c000 g       *ABS*	00000000 __DSPR0_SIZE
80002fe0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_127
80002b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_92
80000d70 g     O .rodata	00000010 IfxScu_EVRWUPB_P15_1_IN
800008e8 g     O .rodata	00000010 IfxAsclin0_RXA_P14_1_IN
800088fc g     F .text	0000001c printStateLv4
80005126 g     F .text	00000012 IfxAsclin_write8
8000702c g     F .text	0000000e IfxScuEru_getWholePatternDetectionResult
80002320 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_25
800039c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_206
800029e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_79
8000113c g     O .rodata	00000000 __copy_table
00019700 g       *ABS*	00000000 __ISTACK0_OFFSET
80005100 g     F .text	00000014 IfxAsclin_write16
800085f6 g     F .text	00000036 Ifx_Fifo_clear
80000c24 g     O .rodata	00000014 IfxScu_REQ2_P10_2_IN
7000010a g     O .data	0000000a g_UpperUltrasonic
00000400 g       *ABS*	00000000 __ISTACK2_SIZE
80002ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_119
8000e450 g     F .text	00000010 _exit
80002280 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_20
80001220 g       .traptab	00000000 osEE_tc_trap_protection
80001200 g     F .traptab	00000000 __TRAPTAB
80000cb0 g     O .rodata	00000014 IfxScu_REQ11_P20_9_IN
00002000 g       *ABS*	00000000 __CSA2_SIZE
80006dd8 g     F .text	00000028 IfxScuEru_clearOutputChannelConfiguration
800035a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_173
80006ece g     F .text	00000026 IfxScuEru_disableTriggerPulse
8000752a g     F .text	000000aa IfxScuWdt_initSafetyWatchdog
80005148 g     F .text	00000006 IfxAsclin_Asc_getSendCount
8000b618 g     F .text	00000014 strlen
80003860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_195
0001b700 g       *ABS*	00000000 __ISTACK2_OFFSET
80004f0a g     F .text	00000022 IfxAsclin_setClockSource
8000e578 g     F .text	00000040 .hidden __gedf2
80000ad8 g     O .rodata	00000008 IfxScuCcu_defaultErayPllConfig
800045fa g     F .text	000000a2 initPeripheralsAndERU
800007e8 g     O .rodata	00000010 IfxAsclin2_RXG_P02_0_IN
80002bc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_94
80002720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_57
80003420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_161
80000448 g     O .rodata	00000010 IfxAsclin2_TX_P02_0_OUT
80002f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_122
80000be8 g     O .rodata	00000014 IfxScu_REQ5_P10_8_IN
80004c38 g     F .text	00000056 IfxVadc_setArbiterPriority
70000f30 g     O .text	00000001 __HEAP_END
800005d8 g     O .rodata	00000010 IfxAsclin1_SLSO_P33_10_OUT
6001bc00 g       .CPU1.csa	00000000 __CSA1
8000617c g     F .text	00000070 IfxScuCcu_getMaxFrequency
80009990 g     F .text	0000001c EnableAllInterrupts
800005f8 g     O .rodata	00000010 IfxAsclin1_SLSO_P14_3_OUT
80004ca2 g     F .text	00000044 IfxVadc_startupCalibration
70000984 g     O .bss	00000004 g_vadc
80005cde g     F .text	00000056 IfxPort_setPinMode
80003640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_178
80002780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_60
80000bc0 g     O .rodata	00000014 IfxScu_REQ7_P00_4_IN
8000a75c g     F .text	0000001a osEE_hal_restore_ctx
80004502 g     F .text	00000032 initVADCGroup
80000638 g     O .rodata	00000010 IfxAsclin3_SCLK_P21_5_OUT
8000aa76 g     F .text	00000040 .hidden __subdf3
70008000 g     O *ABS*	00000000 _SMALL_DATA_
8000514e g     F .text	00000006 IfxAsclin_Asc_getTxTimeStamp
80004aae g     F .text	0000006a IfxVadc_isPostCalibration
800044e4 g     F .text	0000001e initVADCModule
80003f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_248
80006d9a g     F .text	00000016 IfxScuEru_clearEventFlag
800074f8 g     F .text	00000032 IfxScuWdt_setSafetyEndinit
8000d9f2 g     F .text	00000066 __lo0bits
800034c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_166
80002000 g     F .inttab_cpu0	00002000 __INTTAB0
800003d8 g     O .rodata	00000010 IfxAsclin2_TX_P33_9_OUT
80003080 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_132
80005f1e g     F .text	00000030 IfxScuCcu_getOscFrequency
80009a70 g     F .text	0000003c ResumeOSInterrupts
80004000 g     F .text	0000004e readLcdButtons
800030e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_135
80004ebe g     F .text	0000004c IfxAsclin_resetModule
80008dfa g     F .text	0000000a deserialize_sensor_packet
80006fd2 g     F .text	00000024 IfxScuEru_getInputChannelConfiguration
800006f8 g     O .rodata	00000010 IfxAsclin2_SCLK_P02_4_OUT
80006d88 g     F .text	00000012 IfxScuEru_clearAllEventFlags
80003200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_144
80002d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_107
80002160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_11
80000148 g     O .rodata	00000008 osEE_cdb_var
8000aebe g     F .text	00000112 .hidden __pack_d
800009b8 g     O .rodata	00000020 IfxAsclin_cfg_indexMap
80009aac g     F .text	000000ac StartOS
80003ca0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_229
80000d28 g     O .rodata	0000000c IfxScu_HWCFG1EVR33_P14_5_IN
80000bfc g     O .rodata	00000014 IfxScu_REQ4_P10_7_IN
80003440 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_162
8000b14e g     F .text	0000000e free
80000b58 g     O .rodata	00000010 IfxScu_WDTSLCK_P20_9_OUT
8000d92e g     F .text	00000082 __multadd
8000d91c g     F .text	00000012 _Bfree
80000718 g     O .rodata	00000010 IfxAsclin1_SCLK_P33_11_OUT
80008000 g     O *ABS*	00000000 _SMALL_DATA3_
800089a4 g     F .text	00000162 printInfoDisplay
80003a80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_212



Disassembly of section .startup:

80000020 <_start>:
#endif

void _start(void)
{
  /* asm instruction to jump to the core startup */
  osEE_tc_jump_abs(osEE_tc_core0_start);
80000020:	9d 80 09 48 	ja 80009012 <osEE_tc_core0_start>
80000024:	00 90       	ret 

Disassembly of section .traptab:

80001200 <__TRAPTAB>:
80001200:	00 a0       	debug 
80001202:	1d ff ff ff 	j 80001200 <__TRAPTAB>
	...

80001220 <osEE_tc_trap_protection>:
80001220:	00 a0       	debug 
80001222:	1d ff ff ff 	j 80001220 <osEE_tc_trap_protection>
	...

80001240 <osEE_tc_trap_instruction>:
80001240:	00 a0       	debug 
80001242:	1d ff ff ff 	j 80001240 <osEE_tc_trap_instruction>
	...

80001260 <osEE_tc_trap_context>:
80001260:	00 a0       	debug 
80001262:	1d ff ff ff 	j 80001260 <osEE_tc_trap_context>
	...

80001280 <osEE_tc_trap_bus>:
80001280:	00 a0       	debug 
80001282:	1d ff ff ff 	j 80001280 <osEE_tc_trap_bus>
	...

800012a0 <osEE_tc_trap_assertion>:
800012a0:	00 a0       	debug 
800012a2:	1d ff ff ff 	j 800012a0 <osEE_tc_trap_assertion>
	...

800012c0 <osEE_tc_trap_system>:
800012c0:	00 a0       	debug 
800012c2:	1d ff ff ff 	j 800012c0 <osEE_tc_trap_system>
	...

800012e0 <osEE_tc_trap_nmi>:
800012e0:	00 a0       	debug 
800012e2:	1d ff ff ff 	j 800012e0 <osEE_tc_trap_nmi>
	...

Disassembly of section .ctors:

80001300 <__CTOR_LIST__>:
	...

Disassembly of section .dtors:

80001308 <__DTOR_LIST__>:
	...

Disassembly of section .inttab_cpu0:

80002000 <__INTTAB0>:
	...

80002020 <osEE_tc_isr_dummy_entry_1>:
80002020:	3c 00       	j 80002020 <osEE_tc_isr_dummy_entry_1>
	...

80002040 <osEE_tc_isr2_entry_2>:
80002040:	0d 00 00 02 	svlcx 
80002044:	82 44       	mov %d4,4
80002046:	1d 00 84 3c 	j 8000994e <osEE_tc_isr2_wrapper>
	...

80002060 <osEE_tc_isr_dummy_entry_3>:
80002060:	3c 00       	j 80002060 <osEE_tc_isr_dummy_entry_3>
	...

80002080 <osEE_tc_isr2_entry_4>:
80002080:	0d 00 00 02 	svlcx 
80002084:	82 14       	mov %d4,1
80002086:	1d 00 64 3c 	j 8000994e <osEE_tc_isr2_wrapper>
	...

800020a0 <osEE_tc_isr2_entry_5>:
800020a0:	0d 00 00 02 	svlcx 
800020a4:	82 24       	mov %d4,2
800020a6:	1d 00 54 3c 	j 8000994e <osEE_tc_isr2_wrapper>
	...

800020c0 <osEE_tc_isr_dummy_entry_6>:
800020c0:	3c 00       	j 800020c0 <osEE_tc_isr_dummy_entry_6>
	...

800020e0 <osEE_tc_isr_dummy_entry_7>:
800020e0:	3c 00       	j 800020e0 <osEE_tc_isr_dummy_entry_7>
	...

80002100 <osEE_tc_isr_dummy_entry_8>:
80002100:	3c 00       	j 80002100 <osEE_tc_isr_dummy_entry_8>
	...

80002120 <osEE_tc_isr_dummy_entry_9>:
80002120:	3c 00       	j 80002120 <osEE_tc_isr_dummy_entry_9>
	...

80002140 <osEE_tc_isr2_entry_10>:
80002140:	0d 00 00 02 	svlcx 
80002144:	82 34       	mov %d4,3
80002146:	1d 00 04 3c 	j 8000994e <osEE_tc_isr2_wrapper>
	...

80002160 <osEE_tc_isr_dummy_entry_11>:
80002160:	3c 00       	j 80002160 <osEE_tc_isr_dummy_entry_11>
	...

80002180 <osEE_tc_isr_dummy_entry_12>:
80002180:	3c 00       	j 80002180 <osEE_tc_isr_dummy_entry_12>
	...

800021a0 <osEE_tc_isr_dummy_entry_13>:
800021a0:	3c 00       	j 800021a0 <osEE_tc_isr_dummy_entry_13>
	...

800021c0 <osEE_tc_isr_dummy_entry_14>:
800021c0:	3c 00       	j 800021c0 <osEE_tc_isr_dummy_entry_14>
	...

800021e0 <osEE_tc_isr_dummy_entry_15>:
800021e0:	3c 00       	j 800021e0 <osEE_tc_isr_dummy_entry_15>
	...

80002200 <osEE_tc_isr_dummy_entry_16>:
80002200:	3c 00       	j 80002200 <osEE_tc_isr_dummy_entry_16>
	...

80002220 <osEE_tc_isr_dummy_entry_17>:
80002220:	3c 00       	j 80002220 <osEE_tc_isr_dummy_entry_17>
	...

80002240 <osEE_tc_isr_dummy_entry_18>:
80002240:	3c 00       	j 80002240 <osEE_tc_isr_dummy_entry_18>
	...

80002260 <osEE_tc_isr2_entry_19>:
80002260:	0d 00 00 02 	svlcx 
80002264:	82 04       	mov %d4,0
80002266:	1d 00 74 3b 	j 8000994e <osEE_tc_isr2_wrapper>
	...

80002280 <osEE_tc_isr_dummy_entry_20>:
80002280:	3c 00       	j 80002280 <osEE_tc_isr_dummy_entry_20>
	...

800022a0 <osEE_tc_isr_dummy_entry_21>:
800022a0:	3c 00       	j 800022a0 <osEE_tc_isr_dummy_entry_21>
	...

800022c0 <osEE_tc_isr_dummy_entry_22>:
800022c0:	3c 00       	j 800022c0 <osEE_tc_isr_dummy_entry_22>
	...

800022e0 <osEE_tc_isr_dummy_entry_23>:
800022e0:	3c 00       	j 800022e0 <osEE_tc_isr_dummy_entry_23>
	...

80002300 <osEE_tc_isr_dummy_entry_24>:
80002300:	3c 00       	j 80002300 <osEE_tc_isr_dummy_entry_24>
	...

80002320 <osEE_tc_isr_dummy_entry_25>:
80002320:	3c 00       	j 80002320 <osEE_tc_isr_dummy_entry_25>
	...

80002340 <osEE_tc_isr_dummy_entry_26>:
80002340:	3c 00       	j 80002340 <osEE_tc_isr_dummy_entry_26>
	...

80002360 <osEE_tc_isr_dummy_entry_27>:
80002360:	3c 00       	j 80002360 <osEE_tc_isr_dummy_entry_27>
	...

80002380 <osEE_tc_isr_dummy_entry_28>:
80002380:	3c 00       	j 80002380 <osEE_tc_isr_dummy_entry_28>
	...

800023a0 <osEE_tc_isr_dummy_entry_29>:
800023a0:	3c 00       	j 800023a0 <osEE_tc_isr_dummy_entry_29>
	...

800023c0 <osEE_tc_isr_dummy_entry_30>:
800023c0:	3c 00       	j 800023c0 <osEE_tc_isr_dummy_entry_30>
	...

800023e0 <osEE_tc_isr_dummy_entry_31>:
800023e0:	3c 00       	j 800023e0 <osEE_tc_isr_dummy_entry_31>
	...

80002400 <osEE_tc_isr_dummy_entry_32>:
80002400:	3c 00       	j 80002400 <osEE_tc_isr_dummy_entry_32>
	...

80002420 <osEE_tc_isr_dummy_entry_33>:
80002420:	3c 00       	j 80002420 <osEE_tc_isr_dummy_entry_33>
	...

80002440 <osEE_tc_isr_dummy_entry_34>:
80002440:	3c 00       	j 80002440 <osEE_tc_isr_dummy_entry_34>
	...

80002460 <osEE_tc_isr_dummy_entry_35>:
80002460:	3c 00       	j 80002460 <osEE_tc_isr_dummy_entry_35>
	...

80002480 <osEE_tc_isr_dummy_entry_36>:
80002480:	3c 00       	j 80002480 <osEE_tc_isr_dummy_entry_36>
	...

800024a0 <osEE_tc_isr_dummy_entry_37>:
800024a0:	3c 00       	j 800024a0 <osEE_tc_isr_dummy_entry_37>
	...

800024c0 <osEE_tc_isr_dummy_entry_38>:
800024c0:	3c 00       	j 800024c0 <osEE_tc_isr_dummy_entry_38>
	...

800024e0 <osEE_tc_isr_dummy_entry_39>:
800024e0:	3c 00       	j 800024e0 <osEE_tc_isr_dummy_entry_39>
	...

80002500 <osEE_tc_isr_dummy_entry_40>:
80002500:	3c 00       	j 80002500 <osEE_tc_isr_dummy_entry_40>
	...

80002520 <osEE_tc_isr_dummy_entry_41>:
80002520:	3c 00       	j 80002520 <osEE_tc_isr_dummy_entry_41>
	...

80002540 <osEE_tc_isr_dummy_entry_42>:
80002540:	3c 00       	j 80002540 <osEE_tc_isr_dummy_entry_42>
	...

80002560 <osEE_tc_isr_dummy_entry_43>:
80002560:	3c 00       	j 80002560 <osEE_tc_isr_dummy_entry_43>
	...

80002580 <osEE_tc_isr_dummy_entry_44>:
80002580:	3c 00       	j 80002580 <osEE_tc_isr_dummy_entry_44>
	...

800025a0 <osEE_tc_isr_dummy_entry_45>:
800025a0:	3c 00       	j 800025a0 <osEE_tc_isr_dummy_entry_45>
	...

800025c0 <osEE_tc_isr_dummy_entry_46>:
800025c0:	3c 00       	j 800025c0 <osEE_tc_isr_dummy_entry_46>
	...

800025e0 <osEE_tc_isr_dummy_entry_47>:
800025e0:	3c 00       	j 800025e0 <osEE_tc_isr_dummy_entry_47>
	...

80002600 <osEE_tc_isr_dummy_entry_48>:
80002600:	3c 00       	j 80002600 <osEE_tc_isr_dummy_entry_48>
	...

80002620 <osEE_tc_isr_dummy_entry_49>:
80002620:	3c 00       	j 80002620 <osEE_tc_isr_dummy_entry_49>
	...

80002640 <osEE_tc_isr_dummy_entry_50>:
80002640:	3c 00       	j 80002640 <osEE_tc_isr_dummy_entry_50>
	...

80002660 <osEE_tc_isr_dummy_entry_51>:
80002660:	3c 00       	j 80002660 <osEE_tc_isr_dummy_entry_51>
	...

80002680 <osEE_tc_isr_dummy_entry_52>:
80002680:	3c 00       	j 80002680 <osEE_tc_isr_dummy_entry_52>
	...

800026a0 <osEE_tc_isr_dummy_entry_53>:
800026a0:	3c 00       	j 800026a0 <osEE_tc_isr_dummy_entry_53>
	...

800026c0 <osEE_tc_isr_dummy_entry_54>:
800026c0:	3c 00       	j 800026c0 <osEE_tc_isr_dummy_entry_54>
	...

800026e0 <osEE_tc_isr_dummy_entry_55>:
800026e0:	3c 00       	j 800026e0 <osEE_tc_isr_dummy_entry_55>
	...

80002700 <osEE_tc_isr_dummy_entry_56>:
80002700:	3c 00       	j 80002700 <osEE_tc_isr_dummy_entry_56>
	...

80002720 <osEE_tc_isr_dummy_entry_57>:
80002720:	3c 00       	j 80002720 <osEE_tc_isr_dummy_entry_57>
	...

80002740 <osEE_tc_isr_dummy_entry_58>:
80002740:	3c 00       	j 80002740 <osEE_tc_isr_dummy_entry_58>
	...

80002760 <osEE_tc_isr_dummy_entry_59>:
80002760:	3c 00       	j 80002760 <osEE_tc_isr_dummy_entry_59>
	...

80002780 <osEE_tc_isr_dummy_entry_60>:
80002780:	3c 00       	j 80002780 <osEE_tc_isr_dummy_entry_60>
	...

800027a0 <osEE_tc_isr_dummy_entry_61>:
800027a0:	3c 00       	j 800027a0 <osEE_tc_isr_dummy_entry_61>
	...

800027c0 <osEE_tc_isr_dummy_entry_62>:
800027c0:	3c 00       	j 800027c0 <osEE_tc_isr_dummy_entry_62>
	...

800027e0 <osEE_tc_isr_dummy_entry_63>:
800027e0:	3c 00       	j 800027e0 <osEE_tc_isr_dummy_entry_63>
	...

80002800 <osEE_tc_isr_dummy_entry_64>:
80002800:	3c 00       	j 80002800 <osEE_tc_isr_dummy_entry_64>
	...

80002820 <osEE_tc_isr_dummy_entry_65>:
80002820:	3c 00       	j 80002820 <osEE_tc_isr_dummy_entry_65>
	...

80002840 <osEE_tc_isr_dummy_entry_66>:
80002840:	3c 00       	j 80002840 <osEE_tc_isr_dummy_entry_66>
	...

80002860 <osEE_tc_isr_dummy_entry_67>:
80002860:	3c 00       	j 80002860 <osEE_tc_isr_dummy_entry_67>
	...

80002880 <osEE_tc_isr_dummy_entry_68>:
80002880:	3c 00       	j 80002880 <osEE_tc_isr_dummy_entry_68>
	...

800028a0 <osEE_tc_isr_dummy_entry_69>:
800028a0:	3c 00       	j 800028a0 <osEE_tc_isr_dummy_entry_69>
	...

800028c0 <osEE_tc_isr_dummy_entry_70>:
800028c0:	3c 00       	j 800028c0 <osEE_tc_isr_dummy_entry_70>
	...

800028e0 <osEE_tc_isr_dummy_entry_71>:
800028e0:	3c 00       	j 800028e0 <osEE_tc_isr_dummy_entry_71>
	...

80002900 <osEE_tc_isr_dummy_entry_72>:
80002900:	3c 00       	j 80002900 <osEE_tc_isr_dummy_entry_72>
	...

80002920 <osEE_tc_isr_dummy_entry_73>:
80002920:	3c 00       	j 80002920 <osEE_tc_isr_dummy_entry_73>
	...

80002940 <osEE_tc_isr_dummy_entry_74>:
80002940:	3c 00       	j 80002940 <osEE_tc_isr_dummy_entry_74>
	...

80002960 <osEE_tc_isr_dummy_entry_75>:
80002960:	3c 00       	j 80002960 <osEE_tc_isr_dummy_entry_75>
	...

80002980 <osEE_tc_isr_dummy_entry_76>:
80002980:	3c 00       	j 80002980 <osEE_tc_isr_dummy_entry_76>
	...

800029a0 <osEE_tc_isr_dummy_entry_77>:
800029a0:	3c 00       	j 800029a0 <osEE_tc_isr_dummy_entry_77>
	...

800029c0 <osEE_tc_isr_dummy_entry_78>:
800029c0:	3c 00       	j 800029c0 <osEE_tc_isr_dummy_entry_78>
	...

800029e0 <osEE_tc_isr_dummy_entry_79>:
800029e0:	3c 00       	j 800029e0 <osEE_tc_isr_dummy_entry_79>
	...

80002a00 <osEE_tc_isr_dummy_entry_80>:
80002a00:	3c 00       	j 80002a00 <osEE_tc_isr_dummy_entry_80>
	...

80002a20 <osEE_tc_isr_dummy_entry_81>:
80002a20:	3c 00       	j 80002a20 <osEE_tc_isr_dummy_entry_81>
	...

80002a40 <osEE_tc_isr_dummy_entry_82>:
80002a40:	3c 00       	j 80002a40 <osEE_tc_isr_dummy_entry_82>
	...

80002a60 <osEE_tc_isr_dummy_entry_83>:
80002a60:	3c 00       	j 80002a60 <osEE_tc_isr_dummy_entry_83>
	...

80002a80 <osEE_tc_isr_dummy_entry_84>:
80002a80:	3c 00       	j 80002a80 <osEE_tc_isr_dummy_entry_84>
	...

80002aa0 <osEE_tc_isr_dummy_entry_85>:
80002aa0:	3c 00       	j 80002aa0 <osEE_tc_isr_dummy_entry_85>
	...

80002ac0 <osEE_tc_isr_dummy_entry_86>:
80002ac0:	3c 00       	j 80002ac0 <osEE_tc_isr_dummy_entry_86>
	...

80002ae0 <osEE_tc_isr_dummy_entry_87>:
80002ae0:	3c 00       	j 80002ae0 <osEE_tc_isr_dummy_entry_87>
	...

80002b00 <osEE_tc_isr_dummy_entry_88>:
80002b00:	3c 00       	j 80002b00 <osEE_tc_isr_dummy_entry_88>
	...

80002b20 <osEE_tc_isr_dummy_entry_89>:
80002b20:	3c 00       	j 80002b20 <osEE_tc_isr_dummy_entry_89>
	...

80002b40 <osEE_tc_isr_dummy_entry_90>:
80002b40:	3c 00       	j 80002b40 <osEE_tc_isr_dummy_entry_90>
	...

80002b60 <osEE_tc_isr_dummy_entry_91>:
80002b60:	3c 00       	j 80002b60 <osEE_tc_isr_dummy_entry_91>
	...

80002b80 <osEE_tc_isr_dummy_entry_92>:
80002b80:	3c 00       	j 80002b80 <osEE_tc_isr_dummy_entry_92>
	...

80002ba0 <osEE_tc_isr_dummy_entry_93>:
80002ba0:	3c 00       	j 80002ba0 <osEE_tc_isr_dummy_entry_93>
	...

80002bc0 <osEE_tc_isr_dummy_entry_94>:
80002bc0:	3c 00       	j 80002bc0 <osEE_tc_isr_dummy_entry_94>
	...

80002be0 <osEE_tc_isr_dummy_entry_95>:
80002be0:	3c 00       	j 80002be0 <osEE_tc_isr_dummy_entry_95>
	...

80002c00 <osEE_tc_isr_dummy_entry_96>:
80002c00:	3c 00       	j 80002c00 <osEE_tc_isr_dummy_entry_96>
	...

80002c20 <osEE_tc_isr_dummy_entry_97>:
80002c20:	3c 00       	j 80002c20 <osEE_tc_isr_dummy_entry_97>
	...

80002c40 <osEE_tc_isr_dummy_entry_98>:
80002c40:	3c 00       	j 80002c40 <osEE_tc_isr_dummy_entry_98>
	...

80002c60 <osEE_tc_isr_dummy_entry_99>:
80002c60:	3c 00       	j 80002c60 <osEE_tc_isr_dummy_entry_99>
	...

80002c80 <osEE_tc_isr_dummy_entry_100>:
80002c80:	3c 00       	j 80002c80 <osEE_tc_isr_dummy_entry_100>
	...

80002ca0 <osEE_tc_isr_dummy_entry_101>:
80002ca0:	3c 00       	j 80002ca0 <osEE_tc_isr_dummy_entry_101>
	...

80002cc0 <osEE_tc_isr_dummy_entry_102>:
80002cc0:	3c 00       	j 80002cc0 <osEE_tc_isr_dummy_entry_102>
	...

80002ce0 <osEE_tc_isr_dummy_entry_103>:
80002ce0:	3c 00       	j 80002ce0 <osEE_tc_isr_dummy_entry_103>
	...

80002d00 <osEE_tc_isr_dummy_entry_104>:
80002d00:	3c 00       	j 80002d00 <osEE_tc_isr_dummy_entry_104>
	...

80002d20 <osEE_tc_isr_dummy_entry_105>:
80002d20:	3c 00       	j 80002d20 <osEE_tc_isr_dummy_entry_105>
	...

80002d40 <osEE_tc_isr_dummy_entry_106>:
80002d40:	3c 00       	j 80002d40 <osEE_tc_isr_dummy_entry_106>
	...

80002d60 <osEE_tc_isr_dummy_entry_107>:
80002d60:	3c 00       	j 80002d60 <osEE_tc_isr_dummy_entry_107>
	...

80002d80 <osEE_tc_isr_dummy_entry_108>:
80002d80:	3c 00       	j 80002d80 <osEE_tc_isr_dummy_entry_108>
	...

80002da0 <osEE_tc_isr_dummy_entry_109>:
80002da0:	3c 00       	j 80002da0 <osEE_tc_isr_dummy_entry_109>
	...

80002dc0 <osEE_tc_isr_dummy_entry_110>:
80002dc0:	3c 00       	j 80002dc0 <osEE_tc_isr_dummy_entry_110>
	...

80002de0 <osEE_tc_isr_dummy_entry_111>:
80002de0:	3c 00       	j 80002de0 <osEE_tc_isr_dummy_entry_111>
	...

80002e00 <osEE_tc_isr_dummy_entry_112>:
80002e00:	3c 00       	j 80002e00 <osEE_tc_isr_dummy_entry_112>
	...

80002e20 <osEE_tc_isr_dummy_entry_113>:
80002e20:	3c 00       	j 80002e20 <osEE_tc_isr_dummy_entry_113>
	...

80002e40 <osEE_tc_isr_dummy_entry_114>:
80002e40:	3c 00       	j 80002e40 <osEE_tc_isr_dummy_entry_114>
	...

80002e60 <osEE_tc_isr_dummy_entry_115>:
80002e60:	3c 00       	j 80002e60 <osEE_tc_isr_dummy_entry_115>
	...

80002e80 <osEE_tc_isr_dummy_entry_116>:
80002e80:	3c 00       	j 80002e80 <osEE_tc_isr_dummy_entry_116>
	...

80002ea0 <osEE_tc_isr_dummy_entry_117>:
80002ea0:	3c 00       	j 80002ea0 <osEE_tc_isr_dummy_entry_117>
	...

80002ec0 <osEE_tc_isr_dummy_entry_118>:
80002ec0:	3c 00       	j 80002ec0 <osEE_tc_isr_dummy_entry_118>
	...

80002ee0 <osEE_tc_isr_dummy_entry_119>:
80002ee0:	3c 00       	j 80002ee0 <osEE_tc_isr_dummy_entry_119>
	...

80002f00 <osEE_tc_isr_dummy_entry_120>:
80002f00:	3c 00       	j 80002f00 <osEE_tc_isr_dummy_entry_120>
	...

80002f20 <osEE_tc_isr_dummy_entry_121>:
80002f20:	3c 00       	j 80002f20 <osEE_tc_isr_dummy_entry_121>
	...

80002f40 <osEE_tc_isr_dummy_entry_122>:
80002f40:	3c 00       	j 80002f40 <osEE_tc_isr_dummy_entry_122>
	...

80002f60 <osEE_tc_isr_dummy_entry_123>:
80002f60:	3c 00       	j 80002f60 <osEE_tc_isr_dummy_entry_123>
	...

80002f80 <osEE_tc_isr_dummy_entry_124>:
80002f80:	3c 00       	j 80002f80 <osEE_tc_isr_dummy_entry_124>
	...

80002fa0 <osEE_tc_isr_dummy_entry_125>:
80002fa0:	3c 00       	j 80002fa0 <osEE_tc_isr_dummy_entry_125>
	...

80002fc0 <osEE_tc_isr_dummy_entry_126>:
80002fc0:	3c 00       	j 80002fc0 <osEE_tc_isr_dummy_entry_126>
	...

80002fe0 <osEE_tc_isr_dummy_entry_127>:
80002fe0:	3c 00       	j 80002fe0 <osEE_tc_isr_dummy_entry_127>
	...

80003000 <osEE_tc_isr_dummy_entry_128>:
80003000:	3c 00       	j 80003000 <osEE_tc_isr_dummy_entry_128>
	...

80003020 <osEE_tc_isr_dummy_entry_129>:
80003020:	3c 00       	j 80003020 <osEE_tc_isr_dummy_entry_129>
	...

80003040 <osEE_tc_isr_dummy_entry_130>:
80003040:	3c 00       	j 80003040 <osEE_tc_isr_dummy_entry_130>
	...

80003060 <osEE_tc_isr_dummy_entry_131>:
80003060:	3c 00       	j 80003060 <osEE_tc_isr_dummy_entry_131>
	...

80003080 <osEE_tc_isr_dummy_entry_132>:
80003080:	3c 00       	j 80003080 <osEE_tc_isr_dummy_entry_132>
	...

800030a0 <osEE_tc_isr_dummy_entry_133>:
800030a0:	3c 00       	j 800030a0 <osEE_tc_isr_dummy_entry_133>
	...

800030c0 <osEE_tc_isr_dummy_entry_134>:
800030c0:	3c 00       	j 800030c0 <osEE_tc_isr_dummy_entry_134>
	...

800030e0 <osEE_tc_isr_dummy_entry_135>:
800030e0:	3c 00       	j 800030e0 <osEE_tc_isr_dummy_entry_135>
	...

80003100 <osEE_tc_isr_dummy_entry_136>:
80003100:	3c 00       	j 80003100 <osEE_tc_isr_dummy_entry_136>
	...

80003120 <osEE_tc_isr_dummy_entry_137>:
80003120:	3c 00       	j 80003120 <osEE_tc_isr_dummy_entry_137>
	...

80003140 <osEE_tc_isr_dummy_entry_138>:
80003140:	3c 00       	j 80003140 <osEE_tc_isr_dummy_entry_138>
	...

80003160 <osEE_tc_isr_dummy_entry_139>:
80003160:	3c 00       	j 80003160 <osEE_tc_isr_dummy_entry_139>
	...

80003180 <osEE_tc_isr_dummy_entry_140>:
80003180:	3c 00       	j 80003180 <osEE_tc_isr_dummy_entry_140>
	...

800031a0 <osEE_tc_isr_dummy_entry_141>:
800031a0:	3c 00       	j 800031a0 <osEE_tc_isr_dummy_entry_141>
	...

800031c0 <osEE_tc_isr_dummy_entry_142>:
800031c0:	3c 00       	j 800031c0 <osEE_tc_isr_dummy_entry_142>
	...

800031e0 <osEE_tc_isr_dummy_entry_143>:
800031e0:	3c 00       	j 800031e0 <osEE_tc_isr_dummy_entry_143>
	...

80003200 <osEE_tc_isr_dummy_entry_144>:
80003200:	3c 00       	j 80003200 <osEE_tc_isr_dummy_entry_144>
	...

80003220 <osEE_tc_isr_dummy_entry_145>:
80003220:	3c 00       	j 80003220 <osEE_tc_isr_dummy_entry_145>
	...

80003240 <osEE_tc_isr_dummy_entry_146>:
80003240:	3c 00       	j 80003240 <osEE_tc_isr_dummy_entry_146>
	...

80003260 <osEE_tc_isr_dummy_entry_147>:
80003260:	3c 00       	j 80003260 <osEE_tc_isr_dummy_entry_147>
	...

80003280 <osEE_tc_isr_dummy_entry_148>:
80003280:	3c 00       	j 80003280 <osEE_tc_isr_dummy_entry_148>
	...

800032a0 <osEE_tc_isr_dummy_entry_149>:
800032a0:	3c 00       	j 800032a0 <osEE_tc_isr_dummy_entry_149>
	...

800032c0 <osEE_tc_isr_dummy_entry_150>:
800032c0:	3c 00       	j 800032c0 <osEE_tc_isr_dummy_entry_150>
	...

800032e0 <osEE_tc_isr_dummy_entry_151>:
800032e0:	3c 00       	j 800032e0 <osEE_tc_isr_dummy_entry_151>
	...

80003300 <osEE_tc_isr_dummy_entry_152>:
80003300:	3c 00       	j 80003300 <osEE_tc_isr_dummy_entry_152>
	...

80003320 <osEE_tc_isr_dummy_entry_153>:
80003320:	3c 00       	j 80003320 <osEE_tc_isr_dummy_entry_153>
	...

80003340 <osEE_tc_isr_dummy_entry_154>:
80003340:	3c 00       	j 80003340 <osEE_tc_isr_dummy_entry_154>
	...

80003360 <osEE_tc_isr_dummy_entry_155>:
80003360:	3c 00       	j 80003360 <osEE_tc_isr_dummy_entry_155>
	...

80003380 <osEE_tc_isr_dummy_entry_156>:
80003380:	3c 00       	j 80003380 <osEE_tc_isr_dummy_entry_156>
	...

800033a0 <osEE_tc_isr_dummy_entry_157>:
800033a0:	3c 00       	j 800033a0 <osEE_tc_isr_dummy_entry_157>
	...

800033c0 <osEE_tc_isr_dummy_entry_158>:
800033c0:	3c 00       	j 800033c0 <osEE_tc_isr_dummy_entry_158>
	...

800033e0 <osEE_tc_isr_dummy_entry_159>:
800033e0:	3c 00       	j 800033e0 <osEE_tc_isr_dummy_entry_159>
	...

80003400 <osEE_tc_isr_dummy_entry_160>:
80003400:	3c 00       	j 80003400 <osEE_tc_isr_dummy_entry_160>
	...

80003420 <osEE_tc_isr_dummy_entry_161>:
80003420:	3c 00       	j 80003420 <osEE_tc_isr_dummy_entry_161>
	...

80003440 <osEE_tc_isr_dummy_entry_162>:
80003440:	3c 00       	j 80003440 <osEE_tc_isr_dummy_entry_162>
	...

80003460 <osEE_tc_isr_dummy_entry_163>:
80003460:	3c 00       	j 80003460 <osEE_tc_isr_dummy_entry_163>
	...

80003480 <osEE_tc_isr_dummy_entry_164>:
80003480:	3c 00       	j 80003480 <osEE_tc_isr_dummy_entry_164>
	...

800034a0 <osEE_tc_isr_dummy_entry_165>:
800034a0:	3c 00       	j 800034a0 <osEE_tc_isr_dummy_entry_165>
	...

800034c0 <osEE_tc_isr_dummy_entry_166>:
800034c0:	3c 00       	j 800034c0 <osEE_tc_isr_dummy_entry_166>
	...

800034e0 <osEE_tc_isr_dummy_entry_167>:
800034e0:	3c 00       	j 800034e0 <osEE_tc_isr_dummy_entry_167>
	...

80003500 <osEE_tc_isr_dummy_entry_168>:
80003500:	3c 00       	j 80003500 <osEE_tc_isr_dummy_entry_168>
	...

80003520 <osEE_tc_isr_dummy_entry_169>:
80003520:	3c 00       	j 80003520 <osEE_tc_isr_dummy_entry_169>
	...

80003540 <osEE_tc_isr_dummy_entry_170>:
80003540:	3c 00       	j 80003540 <osEE_tc_isr_dummy_entry_170>
	...

80003560 <osEE_tc_isr_dummy_entry_171>:
80003560:	3c 00       	j 80003560 <osEE_tc_isr_dummy_entry_171>
	...

80003580 <osEE_tc_isr_dummy_entry_172>:
80003580:	3c 00       	j 80003580 <osEE_tc_isr_dummy_entry_172>
	...

800035a0 <osEE_tc_isr_dummy_entry_173>:
800035a0:	3c 00       	j 800035a0 <osEE_tc_isr_dummy_entry_173>
	...

800035c0 <osEE_tc_isr_dummy_entry_174>:
800035c0:	3c 00       	j 800035c0 <osEE_tc_isr_dummy_entry_174>
	...

800035e0 <osEE_tc_isr_dummy_entry_175>:
800035e0:	3c 00       	j 800035e0 <osEE_tc_isr_dummy_entry_175>
	...

80003600 <osEE_tc_isr_dummy_entry_176>:
80003600:	3c 00       	j 80003600 <osEE_tc_isr_dummy_entry_176>
	...

80003620 <osEE_tc_isr_dummy_entry_177>:
80003620:	3c 00       	j 80003620 <osEE_tc_isr_dummy_entry_177>
	...

80003640 <osEE_tc_isr_dummy_entry_178>:
80003640:	3c 00       	j 80003640 <osEE_tc_isr_dummy_entry_178>
	...

80003660 <osEE_tc_isr_dummy_entry_179>:
80003660:	3c 00       	j 80003660 <osEE_tc_isr_dummy_entry_179>
	...

80003680 <osEE_tc_isr_dummy_entry_180>:
80003680:	3c 00       	j 80003680 <osEE_tc_isr_dummy_entry_180>
	...

800036a0 <osEE_tc_isr_dummy_entry_181>:
800036a0:	3c 00       	j 800036a0 <osEE_tc_isr_dummy_entry_181>
	...

800036c0 <osEE_tc_isr_dummy_entry_182>:
800036c0:	3c 00       	j 800036c0 <osEE_tc_isr_dummy_entry_182>
	...

800036e0 <osEE_tc_isr_dummy_entry_183>:
800036e0:	3c 00       	j 800036e0 <osEE_tc_isr_dummy_entry_183>
	...

80003700 <osEE_tc_isr_dummy_entry_184>:
80003700:	3c 00       	j 80003700 <osEE_tc_isr_dummy_entry_184>
	...

80003720 <osEE_tc_isr_dummy_entry_185>:
80003720:	3c 00       	j 80003720 <osEE_tc_isr_dummy_entry_185>
	...

80003740 <osEE_tc_isr_dummy_entry_186>:
80003740:	3c 00       	j 80003740 <osEE_tc_isr_dummy_entry_186>
	...

80003760 <osEE_tc_isr_dummy_entry_187>:
80003760:	3c 00       	j 80003760 <osEE_tc_isr_dummy_entry_187>
	...

80003780 <osEE_tc_isr_dummy_entry_188>:
80003780:	3c 00       	j 80003780 <osEE_tc_isr_dummy_entry_188>
	...

800037a0 <osEE_tc_isr_dummy_entry_189>:
800037a0:	3c 00       	j 800037a0 <osEE_tc_isr_dummy_entry_189>
	...

800037c0 <osEE_tc_isr_dummy_entry_190>:
800037c0:	3c 00       	j 800037c0 <osEE_tc_isr_dummy_entry_190>
	...

800037e0 <osEE_tc_isr_dummy_entry_191>:
800037e0:	3c 00       	j 800037e0 <osEE_tc_isr_dummy_entry_191>
	...

80003800 <osEE_tc_isr_dummy_entry_192>:
80003800:	3c 00       	j 80003800 <osEE_tc_isr_dummy_entry_192>
	...

80003820 <osEE_tc_isr_dummy_entry_193>:
80003820:	3c 00       	j 80003820 <osEE_tc_isr_dummy_entry_193>
	...

80003840 <osEE_tc_isr_dummy_entry_194>:
80003840:	3c 00       	j 80003840 <osEE_tc_isr_dummy_entry_194>
	...

80003860 <osEE_tc_isr_dummy_entry_195>:
80003860:	3c 00       	j 80003860 <osEE_tc_isr_dummy_entry_195>
	...

80003880 <osEE_tc_isr_dummy_entry_196>:
80003880:	3c 00       	j 80003880 <osEE_tc_isr_dummy_entry_196>
	...

800038a0 <osEE_tc_isr_dummy_entry_197>:
800038a0:	3c 00       	j 800038a0 <osEE_tc_isr_dummy_entry_197>
	...

800038c0 <osEE_tc_isr_dummy_entry_198>:
800038c0:	3c 00       	j 800038c0 <osEE_tc_isr_dummy_entry_198>
	...

800038e0 <osEE_tc_isr_dummy_entry_199>:
800038e0:	3c 00       	j 800038e0 <osEE_tc_isr_dummy_entry_199>
	...

80003900 <osEE_tc_isr_dummy_entry_200>:
80003900:	3c 00       	j 80003900 <osEE_tc_isr_dummy_entry_200>
	...

80003920 <osEE_tc_isr_dummy_entry_201>:
80003920:	3c 00       	j 80003920 <osEE_tc_isr_dummy_entry_201>
	...

80003940 <osEE_tc_isr_dummy_entry_202>:
80003940:	3c 00       	j 80003940 <osEE_tc_isr_dummy_entry_202>
	...

80003960 <osEE_tc_isr_dummy_entry_203>:
80003960:	3c 00       	j 80003960 <osEE_tc_isr_dummy_entry_203>
	...

80003980 <osEE_tc_isr_dummy_entry_204>:
80003980:	3c 00       	j 80003980 <osEE_tc_isr_dummy_entry_204>
	...

800039a0 <osEE_tc_isr_dummy_entry_205>:
800039a0:	3c 00       	j 800039a0 <osEE_tc_isr_dummy_entry_205>
	...

800039c0 <osEE_tc_isr_dummy_entry_206>:
800039c0:	3c 00       	j 800039c0 <osEE_tc_isr_dummy_entry_206>
	...

800039e0 <osEE_tc_isr_dummy_entry_207>:
800039e0:	3c 00       	j 800039e0 <osEE_tc_isr_dummy_entry_207>
	...

80003a00 <osEE_tc_isr_dummy_entry_208>:
80003a00:	3c 00       	j 80003a00 <osEE_tc_isr_dummy_entry_208>
	...

80003a20 <osEE_tc_isr_dummy_entry_209>:
80003a20:	3c 00       	j 80003a20 <osEE_tc_isr_dummy_entry_209>
	...

80003a40 <osEE_tc_isr_dummy_entry_210>:
80003a40:	3c 00       	j 80003a40 <osEE_tc_isr_dummy_entry_210>
	...

80003a60 <osEE_tc_isr_dummy_entry_211>:
80003a60:	3c 00       	j 80003a60 <osEE_tc_isr_dummy_entry_211>
	...

80003a80 <osEE_tc_isr_dummy_entry_212>:
80003a80:	3c 00       	j 80003a80 <osEE_tc_isr_dummy_entry_212>
	...

80003aa0 <osEE_tc_isr_dummy_entry_213>:
80003aa0:	3c 00       	j 80003aa0 <osEE_tc_isr_dummy_entry_213>
	...

80003ac0 <osEE_tc_isr_dummy_entry_214>:
80003ac0:	3c 00       	j 80003ac0 <osEE_tc_isr_dummy_entry_214>
	...

80003ae0 <osEE_tc_isr_dummy_entry_215>:
80003ae0:	3c 00       	j 80003ae0 <osEE_tc_isr_dummy_entry_215>
	...

80003b00 <osEE_tc_isr_dummy_entry_216>:
80003b00:	3c 00       	j 80003b00 <osEE_tc_isr_dummy_entry_216>
	...

80003b20 <osEE_tc_isr_dummy_entry_217>:
80003b20:	3c 00       	j 80003b20 <osEE_tc_isr_dummy_entry_217>
	...

80003b40 <osEE_tc_isr_dummy_entry_218>:
80003b40:	3c 00       	j 80003b40 <osEE_tc_isr_dummy_entry_218>
	...

80003b60 <osEE_tc_isr_dummy_entry_219>:
80003b60:	3c 00       	j 80003b60 <osEE_tc_isr_dummy_entry_219>
	...

80003b80 <osEE_tc_isr_dummy_entry_220>:
80003b80:	3c 00       	j 80003b80 <osEE_tc_isr_dummy_entry_220>
	...

80003ba0 <osEE_tc_isr_dummy_entry_221>:
80003ba0:	3c 00       	j 80003ba0 <osEE_tc_isr_dummy_entry_221>
	...

80003bc0 <osEE_tc_isr_dummy_entry_222>:
80003bc0:	3c 00       	j 80003bc0 <osEE_tc_isr_dummy_entry_222>
	...

80003be0 <osEE_tc_isr_dummy_entry_223>:
80003be0:	3c 00       	j 80003be0 <osEE_tc_isr_dummy_entry_223>
	...

80003c00 <osEE_tc_isr_dummy_entry_224>:
80003c00:	3c 00       	j 80003c00 <osEE_tc_isr_dummy_entry_224>
	...

80003c20 <osEE_tc_isr_dummy_entry_225>:
80003c20:	3c 00       	j 80003c20 <osEE_tc_isr_dummy_entry_225>
	...

80003c40 <osEE_tc_isr_dummy_entry_226>:
80003c40:	3c 00       	j 80003c40 <osEE_tc_isr_dummy_entry_226>
	...

80003c60 <osEE_tc_isr_dummy_entry_227>:
80003c60:	3c 00       	j 80003c60 <osEE_tc_isr_dummy_entry_227>
	...

80003c80 <osEE_tc_isr_dummy_entry_228>:
80003c80:	3c 00       	j 80003c80 <osEE_tc_isr_dummy_entry_228>
	...

80003ca0 <osEE_tc_isr_dummy_entry_229>:
80003ca0:	3c 00       	j 80003ca0 <osEE_tc_isr_dummy_entry_229>
	...

80003cc0 <osEE_tc_isr_dummy_entry_230>:
80003cc0:	3c 00       	j 80003cc0 <osEE_tc_isr_dummy_entry_230>
	...

80003ce0 <osEE_tc_isr_dummy_entry_231>:
80003ce0:	3c 00       	j 80003ce0 <osEE_tc_isr_dummy_entry_231>
	...

80003d00 <osEE_tc_isr_dummy_entry_232>:
80003d00:	3c 00       	j 80003d00 <osEE_tc_isr_dummy_entry_232>
	...

80003d20 <osEE_tc_isr_dummy_entry_233>:
80003d20:	3c 00       	j 80003d20 <osEE_tc_isr_dummy_entry_233>
	...

80003d40 <osEE_tc_isr_dummy_entry_234>:
80003d40:	3c 00       	j 80003d40 <osEE_tc_isr_dummy_entry_234>
	...

80003d60 <osEE_tc_isr_dummy_entry_235>:
80003d60:	3c 00       	j 80003d60 <osEE_tc_isr_dummy_entry_235>
	...

80003d80 <osEE_tc_isr_dummy_entry_236>:
80003d80:	3c 00       	j 80003d80 <osEE_tc_isr_dummy_entry_236>
	...

80003da0 <osEE_tc_isr_dummy_entry_237>:
80003da0:	3c 00       	j 80003da0 <osEE_tc_isr_dummy_entry_237>
	...

80003dc0 <osEE_tc_isr_dummy_entry_238>:
80003dc0:	3c 00       	j 80003dc0 <osEE_tc_isr_dummy_entry_238>
	...

80003de0 <osEE_tc_isr_dummy_entry_239>:
80003de0:	3c 00       	j 80003de0 <osEE_tc_isr_dummy_entry_239>
	...

80003e00 <osEE_tc_isr_dummy_entry_240>:
80003e00:	3c 00       	j 80003e00 <osEE_tc_isr_dummy_entry_240>
	...

80003e20 <osEE_tc_isr_dummy_entry_241>:
80003e20:	3c 00       	j 80003e20 <osEE_tc_isr_dummy_entry_241>
	...

80003e40 <osEE_tc_isr_dummy_entry_242>:
80003e40:	3c 00       	j 80003e40 <osEE_tc_isr_dummy_entry_242>
	...

80003e60 <osEE_tc_isr_dummy_entry_243>:
80003e60:	3c 00       	j 80003e60 <osEE_tc_isr_dummy_entry_243>
	...

80003e80 <osEE_tc_isr_dummy_entry_244>:
80003e80:	3c 00       	j 80003e80 <osEE_tc_isr_dummy_entry_244>
	...

80003ea0 <osEE_tc_isr_dummy_entry_245>:
80003ea0:	3c 00       	j 80003ea0 <osEE_tc_isr_dummy_entry_245>
	...

80003ec0 <osEE_tc_isr_dummy_entry_246>:
80003ec0:	3c 00       	j 80003ec0 <osEE_tc_isr_dummy_entry_246>
	...

80003ee0 <osEE_tc_isr_dummy_entry_247>:
80003ee0:	3c 00       	j 80003ee0 <osEE_tc_isr_dummy_entry_247>
	...

80003f00 <osEE_tc_isr_dummy_entry_248>:
80003f00:	3c 00       	j 80003f00 <osEE_tc_isr_dummy_entry_248>
	...

80003f20 <osEE_tc_isr_dummy_entry_249>:
80003f20:	3c 00       	j 80003f20 <osEE_tc_isr_dummy_entry_249>
	...

80003f40 <osEE_tc_isr_dummy_entry_250>:
80003f40:	3c 00       	j 80003f40 <osEE_tc_isr_dummy_entry_250>
	...

80003f60 <osEE_tc_isr_dummy_entry_251>:
80003f60:	3c 00       	j 80003f60 <osEE_tc_isr_dummy_entry_251>
	...

80003f80 <osEE_tc_isr_dummy_entry_252>:
80003f80:	3c 00       	j 80003f80 <osEE_tc_isr_dummy_entry_252>
	...

80003fa0 <osEE_tc_isr_dummy_entry_253>:
80003fa0:	3c 00       	j 80003fa0 <osEE_tc_isr_dummy_entry_253>
	...

80003fc0 <osEE_tc_isr_dummy_entry_254>:
80003fc0:	3c 00       	j 80003fc0 <osEE_tc_isr_dummy_entry_254>
	...

80003fe0 <osEE_tc_isr_dummy_entry_255>:
80003fe0:	3c 00       	j 80003fe0 <osEE_tc_isr_dummy_entry_255>
	...

Disassembly of section .text:

80004000 <readLcdButtons>:
#include "bsw.h"



int readLcdButtons(void)
{
80004000:	20 08       	sub.a %sp,8
    unsigned adc_key_in;
    int button_state;
    adc_key_in = readADCValue(BUTTON_CH);
80004002:	82 34       	mov %d4,3
80004004:	6d 00 e8 02 	call 800045d4 <readADCValue>
    printfSerial("%d",adc_key_in);
80004008:	91 00 00 48 	movh.a %a4,32768
8000400c:	74 a2       	st.w [%sp],%d2
8000400e:	d9 44 28 00 	lea %a4,[%a4]40 <80000028 <_start+0x8>>

int readLcdButtons(void)
{
    unsigned adc_key_in;
    int button_state;
    adc_key_in = readADCValue(BUTTON_CH);
80004012:	02 2f       	mov %d15,%d2
    printfSerial("%d",adc_key_in);
80004014:	6d 00 31 02 	call 80004476 <printfSerial>

    //adc_key_in = readADCValue(BUTTON_CH);
    if (adc_key_in < 100) {
80004018:	8b 4f 66 32 	lt.u %d3,%d15,100
        button_state = btnUP;
8000401c:	82 02       	mov %d2,0
    int button_state;
    adc_key_in = readADCValue(BUTTON_CH);
    printfSerial("%d",adc_key_in);

    //adc_key_in = readADCValue(BUTTON_CH);
    if (adc_key_in < 100) {
8000401e:	df 03 17 80 	jne %d3,0,8000404c <readLcdButtons+0x4c>
        button_state = btnUP;
     
    } 
    else if (adc_key_in < 1000){
80004022:	3b 80 3e 30 	mov %d3,1000
        button_state = btnRIGHT; 
80004026:	82 32       	mov %d2,3
    //adc_key_in = readADCValue(BUTTON_CH);
    if (adc_key_in < 100) {
        button_state = btnUP;
     
    } 
    else if (adc_key_in < 1000){
80004028:	3f 3f 12 80 	jlt.u %d15,%d3,8000404c <readLcdButtons+0x4c>
        button_state = btnRIGHT; 
    }     
    else if (adc_key_in < 2500){ 
8000402c:	3b 40 9c 30 	mov %d3,2500
        button_state = btnLEFT; 
80004030:	82 22       	mov %d2,2
     
    } 
    else if (adc_key_in < 1000){
        button_state = btnRIGHT; 
    }     
    else if (adc_key_in < 2500){ 
80004032:	3f 3f 0d 80 	jlt.u %d15,%d3,8000404c <readLcdButtons+0x4c>
        button_state = btnLEFT; 
    } 
    else if (adc_key_in < 3500){ 
80004036:	3b c0 da 30 	mov %d3,3500
8000403a:	3f 3f 08 80 	jlt.u %d15,%d3,8000404a <readLcdButtons+0x4a>
        button_state = btnDOWN; 
    }  
    else if (adc_key_in >= 4000){ 
        button_state = btnNONE;  
8000403e:	3b 00 fa 30 	mov %d3,4000
80004042:	0b 3f 30 f1 	lt.u %d15,%d15,%d3
80004046:	ea 42       	cmovn %d2,%d15,4
80004048:	00 90       	ret 
    }     
    else if (adc_key_in < 2500){ 
        button_state = btnLEFT; 
    } 
    else if (adc_key_in < 3500){ 
        button_state = btnDOWN; 
8000404a:	82 12       	mov %d2,1
    }  
    else if (adc_key_in >= 4000){ 
        button_state = btnNONE;  
    } 
    return button_state;
8000404c:	00 90       	ret 

8000404e <lcd_write4bits>:
    delay_ms(2);       
}

static void lcd_write4bits(uint8 data)
{
    IfxPort_setPinState(LCD_D4, (data & 0x01) ? IfxPort_State_high : IfxPort_State_low);
8000404e:	8f 14 00 21 	and %d2,%d4,1
80004052:	7b 10 00 f0 	movh %d15,1
80004056:	ab 1f a0 f2 	seln %d15,%d2,%d15,1
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
8000405a:	91 40 00 ff 	movh.a %a15,61444
8000405e:	06 4f       	sh %d15,4
80004060:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80004064:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D5, (data & 0x02) ? IfxPort_State_high : IfxPort_State_low);
80004066:	8f 24 00 21 	and %d2,%d4,2
8000406a:	7b 80 00 f0 	movh %d15,8
8000406e:	91 40 00 ff 	movh.a %a15,61444
80004072:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004076:	ab 8f a0 f2 	seln %d15,%d2,%d15,8
8000407a:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D6, (data & 0x04) ? IfxPort_State_high : IfxPort_State_low);
8000407c:	8f 44 00 21 	and %d2,%d4,4
80004080:	7b 00 01 f0 	movh %d15,16
80004084:	ab 0f a1 f2 	seln %d15,%d2,%d15,16
80004088:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D7, (data & 0x08) ? IfxPort_State_high : IfxPort_State_low);
8000408a:	8f 84 00 41 	and %d4,%d4,8
8000408e:	7b 00 02 f0 	movh %d15,32
80004092:	ab 0f a2 44 	seln %d4,%d4,%d15,32
80004096:	68 14       	st.w [%a15]4,%d4
80004098:	da 80       	mov %d15,128
8000409a:	68 1f       	st.w [%a15]4,%d15
#include "bsw.h"

static void lcd_pulse_enable(void)
{
    IfxPort_setPinHigh(LCD_E);
    delay_ms(2);       
8000409c:	82 24       	mov %d4,2
8000409e:	6d 00 47 01 	call 8000432c <delay_ms>
800040a2:	7b 00 08 f0 	movh %d15,128
800040a6:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinLow(LCD_E);
    delay_ms(2);       
800040a8:	82 24       	mov %d4,2
800040aa:	1d 00 41 01 	j 8000432c <delay_ms>

800040ae <lcd_command>:
800040ae:	91 40 00 ff 	movh.a %a15,61444
800040b2:	7b 00 04 20 	movh %d2,64
800040b6:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
    lcd_pulse_enable();
}


static void lcd_command(uint8 cmd)
{
800040ba:	02 4f       	mov %d15,%d4
800040bc:	68 12       	st.w [%a15]4,%d2
    IfxPort_setPinLow(LCD_RS);
    lcd_write4bits(cmd >> 4);
800040be:	06 c4       	sh %d4,-4
800040c0:	5c c7       	call 8000404e <lcd_write4bits>
    lcd_write4bits(cmd & 0x0F);
800040c2:	8f ff 00 41 	and %d4,%d15,15
800040c6:	5c c4       	call 8000404e <lcd_write4bits>
    delay_ms(5);       
800040c8:	82 54       	mov %d4,5
800040ca:	1d 00 31 01 	j 8000432c <delay_ms>

800040ce <lcd_clear>:
}


void lcd_clear(void)
{
    lcd_command(0x01);
800040ce:	82 14       	mov %d4,1
800040d0:	5c ef       	call 800040ae <lcd_command>
    delay_ms(5);       
800040d2:	82 54       	mov %d4,5
800040d4:	1d 00 2c 01 	j 8000432c <delay_ms>

800040d8 <lcd_init>:
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
800040d8:	91 40 00 4f 	movh.a %a4,61444
800040dc:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800040e0:	82 64       	mov %d4,6
800040e2:	3b 00 08 50 	mov %d5,128
800040e6:	6d 00 fc 0d 	call 80005cde <IfxPort_setPinMode>
800040ea:	91 40 00 4f 	movh.a %a4,61444
800040ee:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800040f2:	82 74       	mov %d4,7
800040f4:	3b 00 08 50 	mov %d5,128
800040f8:	6d 00 f3 0d 	call 80005cde <IfxPort_setPinMode>
800040fc:	91 40 00 4f 	movh.a %a4,61444
80004100:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80004104:	82 44       	mov %d4,4
80004106:	3b 00 08 50 	mov %d5,128
8000410a:	6d 00 ea 0d 	call 80005cde <IfxPort_setPinMode>
8000410e:	91 40 00 4f 	movh.a %a4,61444
80004112:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004116:	82 34       	mov %d4,3
80004118:	3b 00 08 50 	mov %d5,128
8000411c:	6d 00 e1 0d 	call 80005cde <IfxPort_setPinMode>
80004120:	91 40 00 4f 	movh.a %a4,61444
80004124:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004128:	82 44       	mov %d4,4
8000412a:	3b 00 08 50 	mov %d5,128
8000412e:	6d 00 d8 0d 	call 80005cde <IfxPort_setPinMode>
80004132:	91 40 00 4f 	movh.a %a4,61444
80004136:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
8000413a:	3b 00 08 50 	mov %d5,128
8000413e:	82 54       	mov %d4,5
80004140:	6d 00 cf 0d 	call 80005cde <IfxPort_setPinMode>
    IfxPort_setPinModeOutput(LCD_D4, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D5, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D6, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D7, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);

    delay_ms(100);  
80004144:	3b 40 06 40 	mov %d4,100
80004148:	6d 00 f2 00 	call 8000432c <delay_ms>
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
8000414c:	91 40 00 ff 	movh.a %a15,61444
80004150:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004154:	7b 00 04 f0 	movh %d15,64
80004158:	68 1f       	st.w [%a15]4,%d15
8000415a:	7b 00 08 f0 	movh %d15,128
8000415e:	68 1f       	st.w [%a15]4,%d15

    IfxPort_setPinLow(LCD_RS);
    IfxPort_setPinLow(LCD_E);

    lcd_write4bits(0x03); delay_ms(10);  
80004160:	82 34       	mov %d4,3
80004162:	6d ff 76 ff 	call 8000404e <lcd_write4bits>
80004166:	3b a0 00 40 	mov %d4,10
8000416a:	6d 00 e1 00 	call 8000432c <delay_ms>
    lcd_write4bits(0x03); delay_ms(10);  
8000416e:	82 34       	mov %d4,3
80004170:	6d ff 6f ff 	call 8000404e <lcd_write4bits>
80004174:	3b a0 00 40 	mov %d4,10
80004178:	6d 00 da 00 	call 8000432c <delay_ms>
    lcd_write4bits(0x03); delay_ms(5);   
8000417c:	82 34       	mov %d4,3
8000417e:	6d ff 68 ff 	call 8000404e <lcd_write4bits>
80004182:	82 54       	mov %d4,5
80004184:	6d 00 d4 00 	call 8000432c <delay_ms>
    lcd_write4bits(0x02); delay_ms(5);   
80004188:	82 24       	mov %d4,2
8000418a:	6d ff 62 ff 	call 8000404e <lcd_write4bits>
8000418e:	82 54       	mov %d4,5
80004190:	6d 00 ce 00 	call 8000432c <delay_ms>

    lcd_command(0x28);
80004194:	3b 80 02 40 	mov %d4,40
80004198:	5c 8b       	call 800040ae <lcd_command>
    lcd_command(0x0C);
8000419a:	3b c0 00 40 	mov %d4,12
8000419e:	5c 88       	call 800040ae <lcd_command>
    lcd_command(0x06);
800041a0:	82 64       	mov %d4,6
800041a2:	5c 86       	call 800040ae <lcd_command>
    lcd_clear();
800041a4:	1d ff 95 ff 	j 800040ce <lcd_clear>

800041a8 <lcd_goto>:
}


void lcd_goto(uint8 row, uint8 col)
{
    uint8 address = (row == 0) ? 0x00 : 0x40;
800041a8:	ab 04 a4 44 	seln %d4,%d4,%d4,64
    address += col;
800041ac:	42 54       	add %d4,%d5
    lcd_command(0x80 | address);
800041ae:	b7 14 99 43 	insert %d4,%d4,1,7,25
800041b2:	1d ff 7e ff 	j 800040ae <lcd_command>

800041b6 <lcd_print>:
800041b6:	91 40 00 cf 	movh.a %a12,61444
}


void lcd_print(const char *str)
{
800041ba:	40 4f       	mov.aa %a15,%a4
800041bc:	d9 cc 00 8a 	lea %a12,[%a12]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800041c0:	3b 00 04 80 	mov %d8,64
    while (*str)
800041c4:	79 ff 00 00 	ld.b %d15,[%a15]0
800041c8:	6e 11       	jz %d15,800041ea <lcd_print+0x34>
        lcd_data(*str++);
800041ca:	16 ff       	and %d15,255


static void lcd_data(uint8 data)
{
    IfxPort_setPinHigh(LCD_RS);
    lcd_write4bits(data >> 4);
800041cc:	8f cf 1f 40 	sh %d4,%d15,-4
800041d0:	59 c8 04 00 	st.w [%a12]4 <f0040004 <_SMALL_DATA4_+0x40038004>>,%d8
800041d4:	6d ff 3d ff 	call 8000404e <lcd_write4bits>
    lcd_write4bits(data & 0x0F);
800041d8:	8f ff 00 41 	and %d4,%d15,15
800041dc:	6d ff 39 ff 	call 8000404e <lcd_write4bits>
    delay_ms(5);       
800041e0:	82 54       	mov %d4,5


void lcd_print(const char *str)
{
    while (*str)
        lcd_data(*str++);
800041e2:	b0 1f       	add.a %a15,1
static void lcd_data(uint8 data)
{
    IfxPort_setPinHigh(LCD_RS);
    lcd_write4bits(data >> 4);
    lcd_write4bits(data & 0x0F);
    delay_ms(5);       
800041e4:	6d 00 a4 00 	call 8000432c <delay_ms>
800041e8:	3c ee       	j 800041c4 <lcd_print+0xe>

void lcd_print(const char *str)
{
    while (*str)
        lcd_data(*str++);
}
800041ea:	00 90       	ret 

800041ec <ButtonISR>:


ISR2(ButtonISR)
{
    unsigned int buttonState;
    DisableAllInterrupts();
800041ec:	6d 00 c7 2b 	call 8000997a <DisableAllInterrupts>
    osEE_tc_delay(5000);
800041f0:	3b 80 38 41 	mov %d4,5000
800041f4:	6d 00 99 2b 	call 80009926 <osEE_tc_delay>
    printfSerial("interuppt");
800041f8:	91 00 00 48 	movh.a %a4,32768
800041fc:	d9 44 2b 00 	lea %a4,[%a4]43 <8000002b <_start+0xb>>
80004200:	6d 00 3b 01 	call 80004476 <printfSerial>
    buttonState = readLcdButtons();
80004204:	6d ff fe fe 	call 80004000 <readLcdButtons>
    updateInfoState(buttonState);
80004208:	02 24       	mov %d4,%d2
8000420a:	6d 00 82 24 	call 80008b0e <updateInfoState>

    osEE_tc_delay(3000);
8000420e:	3b 80 bb 40 	mov %d4,3000
80004212:	6d 00 8a 2b 	call 80009926 <osEE_tc_delay>
    EnableAllInterrupts();
80004216:	1d 00 bd 2b 	j 80009990 <EnableAllInterrupts>

8000421a <FuncTaskUltrasonic>:
}

TASK(TaskUltrasonic)
{
    printfSerial("upperUltrasonic:(%d)", getUltrasonic(&g_UpperUltrasonic));
8000421a:	91 00 00 47 	movh.a %a4,28672
    osEE_tc_delay(3000);
    EnableAllInterrupts();
}

TASK(TaskUltrasonic)
{
8000421e:	20 08       	sub.a %sp,8
    printfSerial("upperUltrasonic:(%d)", getUltrasonic(&g_UpperUltrasonic));
80004220:	d9 44 0a 40 	lea %a4,[%a4]266
80004224:	6d 00 d8 26 	call 80008fd4 <getUltrasonic>
80004228:	91 00 00 48 	movh.a %a4,32768
8000422c:	74 a2       	st.w [%sp],%d2
8000422e:	d9 44 35 00 	lea %a4,[%a4]53 <80000035 <_start+0x15>>
80004232:	6d 00 22 01 	call 80004476 <printfSerial>
    printfSerial("frontUltrasonic:(%d)", getUltrasonic(&g_FrontUltrasonic));
80004236:	91 00 00 47 	movh.a %a4,28672
8000423a:	d9 44 00 40 	lea %a4,[%a4]256 <70000100 <g_FrontUltrasonic>>
8000423e:	6d 00 cb 26 	call 80008fd4 <getUltrasonic>
80004242:	91 00 00 48 	movh.a %a4,32768
80004246:	74 a2       	st.w [%sp],%d2
80004248:	d9 44 0a 10 	lea %a4,[%a4]74 <8000004a <_start+0x2a>>
8000424c:	1d 00 15 01 	j 80004476 <printfSerial>

80004250 <TimerISR>:
}

ISR2(TimerISR)
{
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
80004250:	7b f0 00 40 	movh %d4,15
    printfSerial("upperUltrasonic:(%d)", getUltrasonic(&g_UpperUltrasonic));
    printfSerial("frontUltrasonic:(%d)", getUltrasonic(&g_FrontUltrasonic));
}

ISR2(TimerISR)
{
80004254:	20 28       	sub.a %sp,40
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
80004256:	1b 04 24 44 	addi %d4,%d4,16960
8000425a:	6d 00 01 2b 	call 8000985c <osEE_tc_stm_set_sr0_next_match>

    /************** ONE-TIME-TASK ********************/

    // code for packet uart send test//
    if (c % 2 == 1)
8000425e:	91 00 00 c7 	movh.a %a12,28672
80004262:	19 cf 00 00 	ld.w %d15,[%a12]0 <70000000 <__DSPR0_START>>
80004266:	82 22       	mov %d2,2
80004268:	4b 2f 01 22 	div %e2,%d15,%d2
8000426c:	df 13 4f 80 	jne %d3,1,8000430a <TimerISR+0xba>
    {
        sendActuatorPacket(&sendActuatorPkt);
80004270:	91 00 00 f7 	movh.a %a15,28672
80004274:	d9 ff 04 00 	lea %a15,[%a15]4 <70000004 <sendActuatorPkt>>
80004278:	40 f4       	mov.aa %a4,%a15
8000427a:	6d 00 2e 25 	call 80008cd6 <sendActuatorPacket>
        printfSerial("ActuatorPacket sent, chair=%d...",sendActuatorPkt.servo_chair++);
8000427e:	08 52       	ld.bu %d2,[%a15]5
80004280:	0c f4       	ld.bu %d15,[%a15]4
80004282:	8f 82 00 20 	sh %d2,%d2,8
80004286:	a6 f2       	or %d2,%d15
80004288:	9a 12       	add %d15,%d2,1
8000428a:	37 0f 70 f0 	extr.u %d15,%d15,0,16
8000428e:	91 00 00 48 	movh.a %a4,32768
80004292:	28 4f       	st.b [%a15]4,%d15
80004294:	06 8f       	sh %d15,-8
80004296:	28 5f       	st.b [%a15]5,%d15
80004298:	74 a2       	st.w [%sp],%d2
8000429a:	d9 44 1f 10 	lea %a4,[%a4]95 <8000005f <_start+0x3f>>
8000429e:	6d 00 ec 00 	call 80004476 <printfSerial>
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
            g_RecievedActuatorPacket.start_byte,
800042a2:	91 00 00 27 	movh.a %a2,28672
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042a6:	39 2f e0 10 	ld.bu %d15,[%a2]3168 <70000c60 <g_RecievedActuatorPacket>>
            g_RecievedActuatorPacket.start_byte,
800042aa:	d9 2f e0 10 	lea %a15,[%a2]3168 <70000c60 <g_RecievedActuatorPacket>>
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042ae:	78 00       	st.w [%sp]0,%d15
800042b0:	0c f1       	ld.bu %d15,[%a15]1
800042b2:	91 00 00 48 	movh.a %a4,32768
800042b6:	78 01       	st.w [%sp]4,%d15
            g_RecievedActuatorPacket.start_byte,
            g_RecievedActuatorPacket.packet_id,
            g_RecievedActuatorPacket.led_rgb,
800042b8:	0c f2       	ld.bu %d15,[%a15]2
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042ba:	d9 44 00 20 	lea %a4,[%a4]128 <80000080 <_start+0x60>>
800042be:	16 07       	and %d15,7
800042c0:	78 02       	st.w [%sp]8,%d15
            g_RecievedActuatorPacket.start_byte,
            g_RecievedActuatorPacket.packet_id,
            g_RecievedActuatorPacket.led_rgb,
            g_RecievedActuatorPacket.fan,
800042c2:	0c f3       	ld.bu %d15,[%a15]3
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042c4:	8f 3f 00 21 	and %d2,%d15,3
800042c8:	59 a2 0c 00 	st.w [%sp]12,%d2
800042cc:	37 0f 61 21 	extr.u %d2,%d15,2,1
800042d0:	59 a2 10 00 	st.w [%sp]16,%d2
800042d4:	37 0f e1 21 	extr.u %d2,%d15,3,1
800042d8:	37 0f 64 f2 	extr.u %d15,%d15,4,4
800042dc:	59 a2 14 00 	st.w [%sp]20,%d2
800042e0:	78 06       	st.w [%sp]24,%d15
            g_RecievedActuatorPacket.led_rgb,
            g_RecievedActuatorPacket.fan,
            g_RecievedActuatorPacket.led,
            g_RecievedActuatorPacket.buzzer,
            g_RecievedActuatorPacket.driving_mode,
            g_RecievedActuatorPacket.servo_chair,
800042e2:	0c f5       	ld.bu %d15,[%a15]5
800042e4:	08 42       	ld.bu %d2,[%a15]4
800042e6:	8f 8f 00 f0 	sh %d15,%d15,8
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042ea:	a6 2f       	or %d15,%d2
800042ec:	78 07       	st.w [%sp]28,%d15
            g_RecievedActuatorPacket.fan,
            g_RecievedActuatorPacket.led,
            g_RecievedActuatorPacket.buzzer,
            g_RecievedActuatorPacket.driving_mode,
            g_RecievedActuatorPacket.servo_chair,
            g_RecievedActuatorPacket.servo_window,
800042ee:	0c f7       	ld.bu %d15,[%a15]7
800042f0:	08 62       	ld.bu %d2,[%a15]6
800042f2:	8f 8f 00 f0 	sh %d15,%d15,8
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042f6:	a6 2f       	or %d15,%d2
800042f8:	78 08       	st.w [%sp]32,%d15
            g_RecievedActuatorPacket.led,
            g_RecievedActuatorPacket.buzzer,
            g_RecievedActuatorPacket.driving_mode,
            g_RecievedActuatorPacket.servo_chair,
            g_RecievedActuatorPacket.servo_window,
            g_RecievedActuatorPacket.servo_air);   
800042fa:	0c f9       	ld.bu %d15,[%a15]9
800042fc:	08 82       	ld.bu %d2,[%a15]8
800042fe:	8f 8f 00 f0 	sh %d15,%d15,8
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
80004302:	a6 2f       	or %d15,%d2
80004304:	78 09       	st.w [%sp]36,%d15
80004306:	6d 00 b8 00 	call 80004476 <printfSerial>
            g_RecievedActuatorPacket.servo_air);   
    }
    // code for packet uart send test end//

    /************** basic-TASK (every 1s) ********************/
    printfSerial("\n%4ld: ", c++);
8000430a:	19 cf 00 00 	ld.w %d15,[%a12]0 <70000000 <__DSPR0_START>>
8000430e:	91 00 00 48 	movh.a %a4,32768
80004312:	78 00       	st.w [%sp]0,%d15
80004314:	d9 44 17 30 	lea %a4,[%a4]215 <800000d7 <_start+0xb7>>
80004318:	c2 1f       	add %d15,1
8000431a:	59 cf 00 00 	st.w [%a12]0 <70000000 <__DSPR0_START>>,%d15
8000431e:	6d 00 ac 00 	call 80004476 <printfSerial>
    ActivateTask(TaskUltrasonic);
80004322:	82 54       	mov %d4,5

    
80004324:	d9 aa 28 00 	lea %sp,[%sp]40
    }
    // code for packet uart send test end//

    /************** basic-TASK (every 1s) ********************/
    printfSerial("\n%4ld: ", c++);
    ActivateTask(TaskUltrasonic);
80004328:	1d 00 25 2c 	j 80009b72 <ActivateTask>

8000432c <delay_ms>:
                                        IfxVadc_ChannelId_6,  /* AN38: channel 6 of group 4                         */
                                        IfxVadc_ChannelId_7}; /* AN39: channel 7 of group 4                         */


void delay_ms(unsigned long delay)
{
8000432c:	02 4a       	mov %d10,%d4
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
8000432e:	6d 00 bf 0e 	call 800060ac <IfxScuCcu_getSourceFrequency>
80004332:	91 30 00 ff 	movh.a %a15,61443
80004336:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000433a:	48 04       	ld.w %d4,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000433c:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80004340:	37 04 64 44 	extr.u %d4,%d4,8,4
80004344:	53 1f 40 00 	mul.u %e0,%d15,1
80004348:	4b 04 41 41 	itof %d4,%d4
    result |= ((uint64)stm->CAP.U) << 32;
8000434c:	8f 0f 40 61 	or %d6,%d15,0
80004350:	4b 42 51 20 	div.f %d2,%d2,%d4
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
    uint64 ticks_per_ms = freq / 1000;
80004354:	3b 80 3e 40 	mov %d4,1000
                                        IfxVadc_ChannelId_7}; /* AN39: channel 7 of group 4                         */


void delay_ms(unsigned long delay)
{
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
80004358:	4b 02 71 21 	ftouz %d2,%d2
    uint64 ticks_per_ms = freq / 1000;
8000435c:	4b 42 11 22 	div.u %e2,%d2,%d4
80004360:	85 f3 2c 00 	ld.w %d3,f000002c <_SMALL_DATA4_+0x3fff802c>
    uint64 start = IfxStm_get(&MODULE_STM0);
    uint64 wait_ticks = delay * ticks_per_ms;
80004364:	73 a2 68 40 	mul.u %e4,%d2,%d10
80004368:	0f 13 a0 70 	or %d7,%d3,%d1

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000436c:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80004370:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80004374:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
80004378:	8f 0f 40 81 	or %d8,%d15,0
8000437c:	0f 32 a0 90 	or %d9,%d2,%d3

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
80004380:	0b 68 c0 20 	subx %d2,%d8,%d6
80004384:	0b 79 d0 30 	subc %d3,%d9,%d7
80004388:	3a 53       	eq %d15,%d3,%d5
8000438a:	0b 42 30 f2 	and.lt.u %d15,%d2,%d4
8000438e:	0b 53 a0 f2 	or.lt.u %d15,%d3,%d5
80004392:	ee ed       	jnz %d15,8000436c <delay_ms+0x40>
}
80004394:	00 90       	ret 

80004396 <delay_us>:

void delay_us(unsigned long delay)
{
80004396:	02 4a       	mov %d10,%d4
80004398:	6d 00 8a 0e 	call 800060ac <IfxScuCcu_getSourceFrequency>
8000439c:	91 30 00 ff 	movh.a %a15,61443
800043a0:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800043a4:	48 04       	ld.w %d4,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800043a6:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
800043aa:	37 04 64 44 	extr.u %d4,%d4,8,4
800043ae:	53 1f 40 00 	mul.u %e0,%d15,1
800043b2:	4b 04 41 41 	itof %d4,%d4
    result |= ((uint64)stm->CAP.U) << 32;
800043b6:	8f 0f 40 61 	or %d6,%d15,0
800043ba:	4b 42 51 20 	div.f %d2,%d2,%d4
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
    uint64 ticks_per_us = freq / 1000000;
800043be:	7b f0 00 40 	movh %d4,15
800043c2:	1b 04 24 44 	addi %d4,%d4,16960
    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
}

void delay_us(unsigned long delay)
{
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
800043c6:	4b 02 71 21 	ftouz %d2,%d2
    uint64 ticks_per_us = freq / 1000000;
800043ca:	4b 42 11 22 	div.u %e2,%d2,%d4
800043ce:	85 f3 2c 00 	ld.w %d3,f000002c <_SMALL_DATA4_+0x3fff802c>
    uint64 start = IfxStm_get(&MODULE_STM0);
    uint64 wait_ticks = delay * ticks_per_us;
800043d2:	73 a2 68 40 	mul.u %e4,%d2,%d10
800043d6:	0f 13 a0 70 	or %d7,%d3,%d1

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800043da:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
800043de:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
800043e2:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
800043e6:	8f 0f 40 81 	or %d8,%d15,0
800043ea:	0f 32 a0 90 	or %d9,%d2,%d3

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
800043ee:	0b 68 c0 20 	subx %d2,%d8,%d6
800043f2:	0b 79 d0 30 	subc %d3,%d9,%d7
800043f6:	3a 53       	eq %d15,%d3,%d5
800043f8:	0b 42 30 f2 	and.lt.u %d15,%d2,%d4
800043fc:	0b 53 a0 f2 	or.lt.u %d15,%d3,%d5
80004400:	ee ed       	jnz %d15,800043da <delay_us+0x44>
}
80004402:	00 90       	ret 

80004404 <UART_init>:

void UART_init(void)
{
80004404:	20 60       	sub.a %sp,96

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
80004406:	d9 a4 24 00 	lea %a4,[%sp]36
8000440a:	c5 f5 80 40 	lea %a5,f0000900 <_SMALL_DATA4_+0x3fff8900>
    ascConfig.baudrate.prescaler    = 1;
8000440e:	82 1f       	mov %d15,1

void UART_init(void)
{

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
80004410:	6d 00 f2 09 	call 800057f4 <IfxAsclin_Asc_initModuleConfig>
    ascConfig.baudrate.prescaler    = 1;
80004414:	f9 af 2c 00 	st.h [%sp]44,%d15
    ascConfig.baudrate.baudrate     = 115200;
80004418:	7b 10 7e f4 	movh %d15,18401
8000441c:	78 0a       	st.w [%sp]40,%d15
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
8000441e:	82 3f       	mov %d15,3
80004420:	e9 af 2e 00 	st.b [%sp]46,%d15

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;
80004424:	da 13       	mov %d15,19
80004426:	f9 af 00 10 	st.h [%sp]64,%d15


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000442a:	4d c0 e1 ff 	mfcr %d15,$core_id
    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
8000442e:	7b 00 00 28 	movh %d2,32768
80004432:	60 23       	mov.a %a3,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80004434:	37 0f 63 f0 	extr.u %d15,%d15,0,3
80004438:	d9 af 04 00 	lea %a15,[%sp]4
8000443c:	40 f4       	mov.aa %a4,%a15
8000443e:	d9 32 20 30 	lea %a2,[%a3]224
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
80004442:	e9 af 06 10 	st.b [%sp]70,%d15
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
80004446:	a0 33       	mov.a %a3,3
80004448:	09 22 48 01 	ld.d %e2,[%a2+]8
8000444c:	89 42 48 01 	st.d [%a4+]8,%e2
80004450:	fc 3c       	loop %a3,80004448 <UART_init+0x44>

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
80004452:	7b 00 00 f7 	movh %d15,28672
80004456:	1b 4f 99 f0 	addi %d15,%d15,2452
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
8000445a:	91 00 00 47 	movh.a %a4,28672

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
8000445e:	78 14       	st.w [%sp]80,%d15
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004460:	d9 44 a8 f0 	lea %a4,[%a4]3048 <70000be8 <g_AsclinAsc+0x254>>
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80004464:	3b 20 10 f0 	mov %d15,258
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004468:	d9 a5 24 00 	lea %a5,[%sp]36
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
8000446c:	f9 af 0e 10 	st.h [%sp]78,%d15
        &IfxAsclin3_RXD_P32_2_IN, IfxPort_InputMode_pullUp,        /* Rx pin */
        NULL_PTR,                     IfxPort_OutputMode_pushPull,     /* RTS pin not used */
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
80004470:	f8 12       	st.a [%sp]72,%a15
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004472:	1d 00 ea 07 	j 80005446 <IfxAsclin_Asc_initModule>

80004476 <printfSerial>:
    //printf("Asclin Asc is initialised\n");
}


void printfSerial(const char *fmt,...)
{
80004476:	20 e8       	sub.a %sp,232
80004478:	40 4f       	mov.aa %a15,%a4
    EnableAllInterrupts();
8000447a:	6d 00 8b 2a 	call 80009990 <EnableAllInterrupts>
    char buf[LEN_BUF];
    va_list args;
    va_start (args, fmt );
    vsnprintf(buf, LEN_BUF, fmt, args);
8000447e:	40 f5       	mov.aa %a5,%a15
80004480:	d9 a4 28 10 	lea %a4,[%sp]104
80004484:	3b 00 08 40 	mov %d4,128
80004488:	d9 a6 28 30 	lea %a6,[%sp]232
8000448c:	6d 00 f5 38 	call 8000b676 <vsnprintf>
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
80004490:	d9 a4 28 10 	lea %a4,[%sp]104
80004494:	6d 00 c2 38 	call 8000b618 <strlen>
80004498:	91 00 00 f7 	movh.a %a15,28672
8000449c:	d9 ff 94 60 	lea %a15,[%a15]2452 <70000994 <g_AsclinAsc>>
800044a0:	f9 f2 30 90 	st.h [%a15]624 <70000270 <__malloc_av_+0x150>>,%d2
    unsigned int i =0;
800044a4:	82 0f       	mov %d15,0
    for(; i<strlen(buf);i++) {
800044a6:	d9 a4 28 10 	lea %a4,[%sp]104
800044aa:	6d 00 b7 38 	call 8000b618 <strlen>
800044ae:	7f 2f 0c 80 	jge.u %d15,%d2,800044c6 <printfSerial+0x50>
        txData[i] = buf[i];
800044b2:	d9 a3 04 00 	lea %a3,[%sp]4
800044b6:	10 32       	addsc.a %a2,%a3,%d15,0
800044b8:	d9 a3 28 10 	lea %a3,[%sp]104
800044bc:	10 3f       	addsc.a %a15,%a3,%d15,0
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
    unsigned int i =0;
    for(; i<strlen(buf);i++) {
800044be:	c2 1f       	add %d15,1
        txData[i] = buf[i];
800044c0:	08 02       	ld.bu %d2,[%a15]0
800044c2:	34 22       	st.b [%a2],%d2
800044c4:	3c f1       	j 800044a6 <printfSerial+0x30>
    }
    /* Transmit data */
    IfxAsclin_Asc_write(&g_AsclinAsc.drivers.asc, txData, &g_AsclinAsc.count, TIME_INFINITE);
800044c6:	91 00 00 47 	movh.a %a4,28672
800044ca:	91 00 00 67 	movh.a %a6,28672
800044ce:	82 f4       	mov %d4,-1
800044d0:	d9 44 a8 f0 	lea %a4,[%a4]3048 <70000be8 <g_AsclinAsc+0x254>>
800044d4:	d9 a5 04 00 	lea %a5,[%sp]4 <70000be8 <g_AsclinAsc+0x254>>
800044d8:	d9 66 c4 00 	lea %a6,[%a6]3076 <70000c04 <g_AsclinAsc+0x270>>
800044dc:	9b 04 00 58 	addih %d5,%d4,32768
800044e0:	1d 00 f2 09 	j 800058c4 <IfxAsclin_Asc_write>

800044e4 <initVADCModule>:
    IfxVadc_Adc_startBackgroundScan(&g_vadc);
}

/* Function to initialize the VADC module with default parameters */
void initVADCModule(void)
{
800044e4:	20 28       	sub.a %sp,40
    IfxVadc_Adc_Config adcConf;                                         /* Define a configuration structure         */
    IfxVadc_Adc_initModuleConfig(&adcConf, &MODULE_VADC);               /* Fill it with default values              */
800044e6:	d9 a4 04 00 	lea %a4,[%sp]4
800044ea:	91 20 00 5f 	movh.a %a5,61442
800044ee:	6d 00 c6 1d 	call 8000807a <IfxVadc_Adc_initModuleConfig>
    IfxVadc_Adc_initModule(&g_vadc, &adcConf);                          /* Apply the configuration                  */
800044f2:	91 00 00 47 	movh.a %a4,28672
800044f6:	d9 44 84 60 	lea %a4,[%a4]2436 <70000984 <g_vadc>>
800044fa:	d9 a5 04 00 	lea %a5,[%sp]4 <70000984 <g_vadc>>
800044fe:	1d 00 4a 1d 	j 80007f92 <IfxVadc_Adc_initModule>

80004502 <initVADCGroup>:
}

/* Function to initialize the VADC group */
void initVADCGroup(void)
{
80004502:	20 38       	sub.a %sp,56
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */
80004504:	91 00 00 57 	movh.a %a5,28672
80004508:	40 a4       	mov.aa %a4,%sp
8000450a:	d9 55 84 60 	lea %a5,[%a5]2436 <70000984 <g_vadc>>
8000450e:	6d 00 2b 1d 	call 80007f64 <IfxVadc_Adc_initGroupConfig>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
80004512:	82 4f       	mov %d15,4
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
80004514:	91 00 00 47 	movh.a %a4,28672
void initVADCGroup(void)
{
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
80004518:	2c a4       	st.b [%sp]4,%d15
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */
8000451a:	2c a5       	st.b [%sp]5,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
8000451c:	d9 44 b8 50 	lea %a4,[%a4]2424 <70000978 <g_vadcGroup>>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
80004520:	82 1f       	mov %d15,1
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
80004522:	40 a5       	mov.aa %a5,%sp

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
80004524:	e9 af 35 00 	st.b [%sp]53,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;
80004528:	e9 af 28 00 	st.b [%sp]40,%d15

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
8000452c:	e9 af 2c 00 	st.b [%sp]44,%d15

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
80004530:	1d 00 55 1b 	j 80007bda <IfxVadc_Adc_initGroup>

80004534 <initVADCChannels>:
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
80004534:	91 00 00 e7 	movh.a %a14,28672

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004538:	7b 00 00 b7 	movh %d11,28672
8000453c:	7b 00 00 a7 	movh %d10,28672
}


IFX_INLINE void IfxVadc_Adc_setBackgroundScan(IfxVadc_Adc *vadc, IfxVadc_Adc_Group *group, uint32 channels, uint32 mask)
{
    IfxVadc_setBackgroundScan(vadc->vadc, group->groupId, channels, mask);
80004540:	91 00 00 d7 	movh.a %a13,28672
    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
}

/* Function to initialize the VADC used channels */
void initVADCChannels(void)
{
80004544:	20 60       	sub.a %sp,96
80004546:	82 0f       	mov %d15,0
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
80004548:	d9 ee b8 50 	lea %a14,[%a14]2424 <70000978 <g_vadcGroup>>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
8000454c:	1b 0b 01 b0 	addi %d11,%d11,16
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
80004550:	82 19       	mov %d9,1
80004552:	1b 8a 95 a0 	addi %d10,%d10,2392
80004556:	d9 dd 84 60 	lea %a13,[%a13]2436
8000455a:	53 8f 21 80 	mul %d8,%d15,24
8000455e:	40 ac       	mov.aa %a12,%sp
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
80004560:	40 e5       	mov.aa %a5,%a14
80004562:	60 82       	mov.a %a2,%d8

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004564:	d9 af 20 10 	lea %a15,[%sp]96
80004568:	30 2c       	add.a %a12,%a2
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
8000456a:	40 c4       	mov.aa %a4,%a12
8000456c:	6d 00 2c 1b 	call 80007bc4 <IfxVadc_Adc_initChannelConfig>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004570:	60 83       	mov.a %a3,%d8
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
80004572:	40 c5       	mov.aa %a5,%a12
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004574:	30 3f       	add.a %a15,%a3
80004576:	60 b3       	mov.a %a3,%d11
80004578:	10 32       	addsc.a %a2,%a3,%d15,0
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
8000457a:	e9 ff ef ef 	st.b [%a15]-81,%d15
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
8000457e:	14 22       	ld.bu %d2,[%a2]
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
80004580:	60 a2       	mov.a %a2,%d10
80004582:	d0 24       	addsc.a %a4,%a2,%d15,3
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004584:	e9 f2 ec ef 	st.b [%a15]-84,%d2
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
80004588:	e9 f9 e2 ef 	st.b [%a15]-94,%d9


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
8000458c:	6d 00 26 1a 	call 800079d8 <IfxVadc_Adc_initChannel>
80004590:	d4 d2       	ld.a %a2,[%a13]
80004592:	39 e2 08 00 	ld.bu %d2,[%a14]8 <70000008 <sendActuatorPkt+0x4>>
80004596:	c2 1f       	add %d15,1
80004598:	01 22 02 26 	addsc.a %a2,%a2,%d2,2

        /* Add the channel to background scan */
        unsigned chnEnableBit = (1 << adcChannelConf[chn].channelId);   /* Set the the corresponding input channel  */
8000459c:	79 f2 ec ef 	ld.b %d2,[%a15]-84
}


IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask)
{
    channels                = (vadc->BRSSEL[groupId].U & ~mask) | channels;
800045a0:	19 23 00 60 	ld.w %d3,[%a2]384
800045a4:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
    vadc->BRSSEL[groupId].U = channels;
800045a8:	59 22 00 60 	st.w [%a2]384,%d2
void initVADCChannels(void)
{
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
800045ac:	df 4f d7 ff 	jne %d15,4,8000455a <initVADCChannels+0x26>
        unsigned mask = chnEnableBit;                                   /* of the respective group to be added in   */
        IfxVadc_Adc_setBackgroundScan(&g_vadc, &g_vadcGroup, chnEnableBit, mask); /* the background scan sequence.  */

    }

}
800045b0:	00 90       	ret 

800045b2 <initADC>:
}


IFX_INLINE void IfxVadc_Adc_startBackgroundScan(IfxVadc_Adc *vadc)
{
    IfxVadc_startBackgroundScan(vadc->vadc);
800045b2:	91 00 00 f7 	movh.a %a15,28672
}

/* Function to initialize the VADC module */
void initADC(void)
{
    initVADCModule();                                                   /* Initialize the VADC module               */
800045b6:	6d ff 97 ff 	call 800044e4 <initVADCModule>
    initVADCGroup();                                                    /* Initialize the VADC group                */
800045ba:	6d ff a4 ff 	call 80004502 <initVADCGroup>
    initVADCChannels();                                                 /* Initialize the used channels             */
800045be:	6d ff bb ff 	call 80004534 <initVADCChannels>
800045c2:	99 ff 84 60 	ld.a %a15,[%a15]2436 <70000984 <g_vadc>>
}


IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.LDEV = 1;     /* execute Load event to start the conversion */
800045c6:	19 ff 04 80 	ld.w %d15,[%a15]516 <70000984 <g_vadc>>
800045ca:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
800045ce:	59 ff 04 80 	st.w [%a15]516,%d15
800045d2:	00 90       	ret 

800045d4 <readADCValue>:
}


IFX_INLINE Ifx_VADC_RES IfxVadc_Adc_getResult(IfxVadc_Adc_Channel *channel)
{
    return IfxVadc_getResult(channel->group->group, channel->resultreg);
800045d4:	91 00 00 f7 	movh.a %a15,28672
800045d8:	d9 ff 98 50 	lea %a15,[%a15]2392 <70000958 <g_vadcChannel>>
800045dc:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
800045e0:	c8 12       	ld.a %a2,[%a15]4
800045e2:	0c f1       	ld.bu %d15,[%a15]1
800045e4:	99 22 04 00 	ld.a %a2,[%a2]4

IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx)
{
    Ifx_VADC_RES tmpResult;

    tmpResult.U = group->RES[resultIdx].U;
800045e8:	1b 0f 0a f0 	addi %d15,%d15,160
800045ec:	90 2f       	addsc.a %a15,%a2,%d15,2
800045ee:	4c f0       	ld.w %d15,[%a15]0
800045f0:	37 0f 70 20 	extr.u %d2,%d15,0,16
{
    Ifx_VADC_RES conversionResult;
    do
    {
        conversionResult = IfxVadc_Adc_getResult(&g_vadcChannel[channel]);
    } while(!conversionResult.B.VF);
800045f4:	ff 0f fd 7f 	jge %d15,0,800045ee <readADCValue+0x1a>

    return conversionResult.B.RESULT;
}
800045f8:	00 90       	ret 

800045fa <initPeripheralsAndERU>:

void initPeripheralsAndERU(void)
{
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */
800045fa:	91 40 00 4f 	movh.a %a4,61444
800045fe:	d9 44 00 0e 	lea %a4,[%a4]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
80004602:	82 74       	mov %d4,7
80004604:	3b 00 01 50 	mov %d5,16
80004608:	6d 00 6b 0b 	call 80005cde <IfxPort_setPinMode>


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
8000460c:	91 00 00 f8 	movh.a %a15,32768
80004610:	d9 ff 94 f0 	lea %a15,[%a15]3028 <80000bd4 <IfxScu_REQ6_P02_0_IN>>
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
80004614:	c8 24       	ld.a %a4,[%a15]8
80004616:	91 00 00 d7 	movh.a %a13,28672
8000461a:	08 c4       	ld.bu %d4,[%a15]12
8000461c:	3b 80 00 50 	mov %d5,8
80004620:	b5 df 88 60 	st.a [%a13]2440 <70000988 <g_ERUconfig>>,%a15
80004624:	6d 00 5d 0b 	call 80005cde <IfxPort_setPinMode>
/******************************************************************************/

IFX_INLINE void IfxScuEru_initReqPin(IfxScu_Req_In *req, IfxPort_InputMode inputMode)
{
    IfxPort_setPinModeInput(req->pin.port, req->pin.pinIndex, inputMode);
    IfxScuEru_selectExternalInput((IfxScuEru_InputChannel)req->channelId, (IfxScuEru_ExternalInputSelection)req->select);
80004628:	39 f5 10 00 	ld.bu %d5,[%a15]16 <80000010 <BootModeHeader0+0x10>>
8000462c:	08 44       	ld.bu %d4,[%a15]4
8000462e:	6d 00 06 15 	call 8000703a <IfxScuEru_selectExternalInput>
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
80004632:	99 df 88 60 	ld.a %a15,[%a13]2440 <70000988 <g_ERUconfig>>
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
80004636:	d9 dc 88 60 	lea %a12,[%a13]2440 <70000988 <g_ERUconfig>>
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
8000463a:	82 0f       	mov %d15,0
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
8000463c:	08 44       	ld.bu %d4,[%a15]4
8000463e:	e9 c4 04 00 	st.b [%a12]4 <70000004 <sendActuatorPkt>>,%d4

    /* Input channel configuration */
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */
80004642:	6d 00 6c 14 	call 80006f1a <IfxScuEru_enableFallingEdgeDetection>
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
80004646:	39 c4 04 00 	ld.bu %d4,[%a12]4
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
8000464a:	2c c6       	st.b [%a12]6,%d15
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;
8000464c:	2c c5       	st.b [%a12]5,%d15

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
8000464e:	6d 00 9f 14 	call 80006f8c <IfxScuEru_enableTriggerPulse>
    /* Determination of output channel for trigger event (Register INPx) */
    IfxScuEru_connectTrigger(g_ERUconfig.inputChannel, g_ERUconfig.triggerSelect);
80004652:	39 c4 04 00 	ld.bu %d4,[%a12]4
80004656:	39 c5 05 00 	ld.bu %d5,[%a12]5
8000465a:	6d 00 d3 13 	call 80006e00 <IfxScuEru_connectTrigger>

    /* Configure Output channels, OutputGating Unit OGU (Register IGPy) */
    IfxScuEru_setInterruptGatingPattern(g_ERUconfig.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);
8000465e:	39 c4 06 00 	ld.bu %d4,[%a12]6
80004662:	82 15       	mov %d5,1
80004664:	6d 00 24 15 	call 800070ac <IfxScuEru_setInterruptGatingPattern>

    /* Service request configuration */
    /* Get source pointer depending on outputChannel (SRC_SCUERU0 for outputChannel0) */
    g_ERUconfig.src = &MODULE_SRC.SCU.SCU.ERU[(int) g_ERUconfig.outputChannel % 4];
80004668:	0c c6       	ld.bu %d15,[%a12]6
8000466a:	16 03       	and %d15,3
8000466c:	06 2f       	sh %d15,2
8000466e:	60 f2       	mov.a %a2,%d15
80004670:	d9 2f d4 38 	lea %a15,[%a2]-29484
80004674:	11 4f 00 ff 	addih.a %a15,%a15,61444
80004678:	ec c2       	st.a [%a12]8,%a15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
8000467a:	4c f0       	ld.w %d15,[%a15]0
8000467c:	b7 af 08 f0 	insert %d15,%d15,10,0,8
80004680:	68 0f       	st.w [%a15]0,%d15
    src->B.TOS  = typOfService;
80004682:	4c f0       	ld.w %d15,[%a15]0
80004684:	b7 0f 82 f5 	insert %d15,%d15,0,11,2
80004688:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
8000468a:	4c f0       	ld.w %d15,[%a15]0
8000468c:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80004690:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80004692:	4c f0       	ld.w %d15,[%a15]0
80004694:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80004698:	68 0f       	st.w [%a15]0,%d15
8000469a:	00 90       	ret 

8000469c <asclin3TxISR>:
    IfxSrc_enable(g_ERUconfig.src);
}

ISR(asclin3TxISR)
{
    IfxAsclin_Asc_isrTransmit(&g_AsclinAsc.drivers.asc);
8000469c:	91 00 00 47 	movh.a %a4,28672
800046a0:	d9 44 a8 f0 	lea %a4,[%a4]3048 <70000be8 <g_AsclinAsc+0x254>>
800046a4:	1d 00 16 06 	j 800052d0 <IfxAsclin_Asc_isrTransmit>

800046a8 <main>:
}

int main(void)
{
    osEE_tc_stm_set_clockpersec();
800046a8:	6d 00 7e 28 	call 800097a4 <osEE_tc_stm_set_clockpersec>
    osEE_tc_stm_set_sr0(1000000U, 1U);
800046ac:	7b f0 00 40 	movh %d4,15
800046b0:	82 15       	mov %d5,1
800046b2:	1b 04 24 44 	addi %d4,%d4,16960
800046b6:	6d 00 91 28 	call 800097d8 <osEE_tc_stm_set_sr0>

    UART_init();
800046ba:	6d ff a5 fe 	call 80004404 <UART_init>
    initADC();
800046be:	6d ff 7a ff 	call 800045b2 <initADC>
    initPeripheralsAndERU();
800046c2:	6d ff 9c ff 	call 800045fa <initPeripheralsAndERU>
    
    /* custom driver init() added start*/
    lcd_init();
800046c6:	6d ff 09 fd 	call 800040d8 <lcd_init>
    initUltrasonic(&g_UpperUltrasonic);
800046ca:	91 00 00 47 	movh.a %a4,28672
800046ce:	d9 44 0a 40 	lea %a4,[%a4]266 <7000010a <g_UpperUltrasonic>>
800046d2:	6d 00 bd 23 	call 80008e4c <initUltrasonic>
    initUltrasonic(&g_FrontUltrasonic);
800046d6:	91 00 00 47 	movh.a %a4,28672
800046da:	d9 44 00 40 	lea %a4,[%a4]256 <70000100 <g_FrontUltrasonic>>
800046de:	6d 00 b7 23 	call 80008e4c <initUltrasonic>
    initUartDriver();
800046e2:	6d 00 65 22 	call 80008bac <initUartDriver>
    /* custom driver added end*/

    printfSerial("\n...............\n");
800046e6:	91 00 00 48 	movh.a %a4,32768
800046ea:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <_start+0xe0>>
800046ee:	6d ff c4 fe 	call 80004476 <printfSerial>
    printfSerial("...OS Starts...\n");
800046f2:	91 00 00 48 	movh.a %a4,32768
800046f6:	d9 44 12 40 	lea %a4,[%a4]274 <80000112 <_start+0xf2>>
800046fa:	6d ff be fe 	call 80004476 <printfSerial>
    printfSerial("...............\n");
800046fe:	91 00 00 48 	movh.a %a4,32768
80004702:	d9 44 23 40 	lea %a4,[%a4]291 <80000123 <_start+0x103>>
80004706:	6d ff b8 fe 	call 80004476 <printfSerial>

    StartOS(OSDEFAULTAPPMODE);
8000470a:	82 04       	mov %d4,0
8000470c:	6d 00 d0 29 	call 80009aac <StartOS>
    return 0;
}
80004710:	82 02       	mov %d2,0
80004712:	00 90       	ret 

80004714 <IfxVadc_disableAccess>:
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
80004714:	02 4f       	mov %d15,%d4
80004716:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80004718:	6d 00 6d 16 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
8000471c:	02 24       	mov %d4,%d2
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
8000471e:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
80004720:	6d 00 66 15 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
80004724:	8b 0f a2 22 	ge.u %d2,%d15,32
80004728:	f6 28       	jnz %d2,80004738 <IfxVadc_disableAccess+0x24>
    {
        vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
8000472a:	19 f2 08 20 	ld.w %d2,[%a15]136
8000472e:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
80004732:	59 ff 08 20 	st.w [%a15]136,%d15
80004736:	3c 08       	j 80004746 <IfxVadc_disableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
80004738:	19 f2 0c 20 	ld.w %d2,[%a15]140
8000473c:	16 1f       	and %d15,31
8000473e:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
80004742:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
80004746:	02 84       	mov %d4,%d8
80004748:	1d 00 d8 16 	j 800074f8 <IfxScuWdt_setSafetyEndinit>

8000474c <IfxVadc_enableAccess>:
    }
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
8000474c:	02 4f       	mov %d15,%d4
8000474e:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80004750:	6d 00 51 16 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
80004754:	02 24       	mov %d4,%d2
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80004756:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
80004758:	6d 00 4a 15 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
8000475c:	8b 0f a2 22 	ge.u %d2,%d15,32
80004760:	f6 28       	jnz %d2,80004770 <IfxVadc_enableAccess+0x24>
    {
        vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
80004762:	19 f2 08 20 	ld.w %d2,[%a15]136
80004766:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
8000476a:	59 ff 08 20 	st.w [%a15]136,%d15
8000476e:	3c 08       	j 8000477e <IfxVadc_enableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
80004770:	19 f2 0c 20 	ld.w %d2,[%a15]140
80004774:	16 1f       	and %d15,31
80004776:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
8000477a:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
8000477e:	02 84       	mov %d4,%d8
80004780:	1d 00 bc 16 	j 800074f8 <IfxScuWdt_setSafetyEndinit>

80004784 <IfxVadc_configExternalMultiplexerMode>:

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
80004784:	82 0f       	mov %d15,0
80004786:	b7 1f 81 ff 	insert %d15,%d15,1,31,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
8000478a:	39 a3 04 00 	ld.bu %d3,[%sp]4
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
8000478e:	37 4f 02 fd 	insert %d15,%d15,%d4,26,2
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
80004792:	14 a2       	ld.bu %d2,[%sp]
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
80004794:	67 3f 1e f0 	ins.t %d15,%d15,30,%d3,0
    emuxctr.B.EMUXCH   = channels;
80004798:	37 5f 0a f8 	insert %d15,%d15,%d5,16,10
    emuxctr.B.EMUXSET  = startChannel;
8000479c:	37 6f 03 f0 	insert %d15,%d15,%d6,0,3
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
800047a0:	3b f0 00 40 	mov %d4,15
    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
800047a4:	67 7f 1c f0 	ins.t %d15,%d15,28,%d7,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
800047a8:	40 5f       	mov.aa %a15,%a5
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
800047aa:	67 2f 1d f0 	ins.t %d15,%d15,29,%d2,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
800047ae:	40 4c       	mov.aa %a12,%a4
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
800047b0:	6d ff ce ff 	call 8000474c <IfxVadc_enableAccess>
    vadcG->EMUXCTR.U   = emuxctr.U;
800047b4:	59 ff 30 50 	st.w [%a15]368,%d15
    emuxctr.B.EMXWC    = 0;
800047b8:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
    vadcG->EMUXCTR.U   = emuxctr.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
800047bc:	40 c4       	mov.aa %a4,%a12
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
    vadcG->EMUXCTR.U   = emuxctr.U;
    emuxctr.B.EMXWC    = 0;
    vadcG->EMUXCTR.U   = emuxctr.U;
800047be:	59 ff 30 50 	st.w [%a15]368,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
800047c2:	3b f0 00 40 	mov %d4,15
800047c6:	1d ff a7 ff 	j 80004714 <IfxVadc_disableAccess>

800047ca <IfxVadc_disablePostCalibration>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable)
{
800047ca:	40 4f       	mov.aa %a15,%a4
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
800047cc:	ff 84 1c 80 	jge.u %d4,8,80004804 <IfxVadc_disablePostCalibration+0x3a>
800047d0:	02 4f       	mov %d15,%d4
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800047d2:	3b f0 01 40 	mov %d4,31
800047d6:	02 58       	mov %d8,%d5
800047d8:	6d ff ba ff 	call 8000474c <IfxVadc_enableAccess>

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
800047dc:	1b 0f 01 40 	addi %d4,%d15,16

        if (disable == TRUE)
        {
            vadc->GLOBCFG.U |= mask;
800047e0:	19 f2 00 20 	ld.w %d2,[%a15]128
{
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
800047e4:	82 1f       	mov %d15,1
800047e6:	0f 4f 00 f0 	sh %d15,%d15,%d4

        if (disable == TRUE)
800047ea:	df 18 04 80 	jne %d8,1,800047f2 <IfxVadc_disablePostCalibration+0x28>
        {
            vadc->GLOBCFG.U |= mask;
800047ee:	a6 2f       	or %d15,%d2
800047f0:	3c 03       	j 800047f6 <IfxVadc_disablePostCalibration+0x2c>
        }
        else
        {
            vadc->GLOBCFG.U &= ~mask;
800047f2:	0f f2 e0 f0 	andn %d15,%d2,%d15
800047f6:	59 ff 00 20 	st.w [%a15]128,%d15
        }

        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800047fa:	40 f4       	mov.aa %a4,%a15
800047fc:	3b f0 01 40 	mov %d4,31
80004800:	1d ff 8a ff 	j 80004714 <IfxVadc_disableAccess>
80004804:	00 90       	ret 

80004806 <IfxVadc_enableGroupSync>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
80004806:	40 4f       	mov.aa %a15,%a4
80004808:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
8000480a:	6d 00 d6 15 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
8000480e:	02 24       	mov %d4,%d2
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004810:	02 29       	mov %d9,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80004812:	6d 00 d2 14 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004816:	40 f4       	mov.aa %a4,%a15
80004818:	3b f0 01 40 	mov %d4,31
    IfxScuWdt_clearCpuEndinit(passwd);

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
8000481c:	19 ff 00 20 	ld.w %d15,[%a15]128
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004820:	6d ff 96 ff 	call 8000474c <IfxVadc_enableAccess>

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
80004824:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
        vadcGlobCfg.B.DCMSB = 1;
80004828:	b7 1f 81 f3 	insert %d15,%d15,1,7,1

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000482c:	40 f4       	mov.aa %a4,%a15
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
8000482e:	59 ff 00 20 	st.w [%a15]128,%d15
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004832:	3b f0 01 40 	mov %d4,31
80004836:	6d ff 6f ff 	call 80004714 <IfxVadc_disableAccess>
    }

    if (ccu6Num == 0)
8000483a:	df 08 1a 80 	jne %d8,0,8000486e <IfxVadc_enableGroupSync+0x68>
    {
        // CCU60 Config
        CCU60_CLC.U = 0;
8000483e:	a5 f8 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d8

        if (CCU60_CLC.U)
80004842:	85 ff 80 82 	ld.w %d15,f0002a00 <_SMALL_DATA4_+0x3fffaa00>
        {}

        CCU60_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
80004846:	82 4f       	mov %d15,4
80004848:	a5 ff 94 92 	st.w f0002a54 <_SMALL_DATA4_+0x3fffaa54>,%d15
        CCU60_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
8000484c:	a5 ff 9c 92 	st.w f0002a5c <_SMALL_DATA4_+0x3fffaa5c>,%d15
        CCU60_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
80004850:	85 ff 80 a2 	ld.w %d15,f0002a80 <_SMALL_DATA4_+0x3fffaa80>
80004854:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
80004858:	a5 ff 80 a2 	st.w f0002a80 <_SMALL_DATA4_+0x3fffaa80>,%d15
        CCU60_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
8000485c:	3b 00 20 f4 	mov %d15,16896
80004860:	a5 ff b8 92 	st.w f0002a78 <_SMALL_DATA4_+0x3fffaa78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 0;                                                                  // CCU60_COUT63 routed to output signal CCU6061 TRIG1
80004864:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
80004868:	8f 8f c3 f1 	andn %d15,%d15,56
8000486c:	3c 1d       	j 800048a6 <IfxVadc_enableGroupSync+0xa0>
    }
    else if (ccu6Num == 1)
8000486e:	df 18 1e 80 	jne %d8,1,800048aa <IfxVadc_enableGroupSync+0xa4>
    {
        // CCU60 + CCU61 Config
        CCU60_CLC.U = 0;
80004872:	82 0f       	mov %d15,0
80004874:	a5 ff 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d15
        CCU61_CLC.U = 0;
80004878:	a5 ff 80 c2 	st.w f0002b00 <_SMALL_DATA4_+0x3fffab00>,%d15

        if (CCU61_CLC.U)
8000487c:	85 ff 80 c2 	ld.w %d15,f0002b00 <_SMALL_DATA4_+0x3fffab00>
        {}

        CCU61_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
80004880:	82 4f       	mov %d15,4
80004882:	a5 ff 94 d2 	st.w f0002b54 <_SMALL_DATA4_+0x3fffab54>,%d15
        CCU61_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
80004886:	a5 ff 9c d2 	st.w f0002b5c <_SMALL_DATA4_+0x3fffab5c>,%d15
        CCU61_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
8000488a:	85 ff 80 e2 	ld.w %d15,f0002b80 <_SMALL_DATA4_+0x3fffab80>
8000488e:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
80004892:	a5 ff 80 e2 	st.w f0002b80 <_SMALL_DATA4_+0x3fffab80>,%d15
        CCU61_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
80004896:	3b 00 20 f4 	mov %d15,16896
8000489a:	a5 ff b8 d2 	st.w f0002b78 <_SMALL_DATA4_+0x3fffab78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 1;                                                                  // CCU61_COUT63 routed to output signal CCU6061 TRIG1
8000489e:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
800048a2:	b7 1f 83 f1 	insert %d15,%d15,1,3,3
800048a6:	a5 ff 8c 82 	st.w f0002a0c <_SMALL_DATA4_+0x3fffaa0c>,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
800048aa:	02 94       	mov %d4,%d9
800048ac:	1d 00 ba 15 	j 80007420 <IfxScuWdt_setCpuEndinit>

800048b0 <IfxVadc_getAdcAnalogFrequency>:
}


float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
{
800048b0:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
800048b2:	6d 00 be 0c 	call 8000622e <IfxScuCcu_getSpbFrequency>
800048b6:	19 ff 00 20 	ld.w %d15,[%a15]128
800048ba:	16 1f       	and %d15,31
800048bc:	c2 1f       	add %d15,1
800048be:	4b 0f 41 f1 	itof %d15,%d15
}
800048c2:	4b f2 51 20 	div.f %d2,%d2,%d15
800048c6:	00 90       	ret 

800048c8 <IfxVadc_getAdcDigitalFrequency>:


float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
{
800048c8:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
800048ca:	6d 00 b2 0c 	call 8000622e <IfxScuCcu_getSpbFrequency>
800048ce:	19 ff 00 20 	ld.w %d15,[%a15]128
800048d2:	37 0f 62 f4 	extr.u %d15,%d15,8,2
800048d6:	c2 1f       	add %d15,1
800048d8:	4b 0f 41 f1 	itof %d15,%d15
}
800048dc:	4b f2 51 20 	div.f %d2,%d2,%d15
800048e0:	00 90       	ret 

800048e2 <IfxVadc_getAdcModuleFrequency>:


float32 IfxVadc_getAdcModuleFrequency(void)
{
    return IfxScuCcu_getSpbFrequency();
800048e2:	1d 00 a6 0c 	j 8000622e <IfxScuCcu_getSpbFrequency>

800048e6 <IfxVadc_getBackgroundScanStatus>:
}


IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
800048e6:	82 0f       	mov %d15,0
800048e8:	a0 7f       	mov.a %a15,7
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
    {
        if (vadc->BRSPND[i].U)
800048ea:	1b 0f 07 20 	addi %d2,%d15,112
800048ee:	01 42 02 26 	addsc.a %a2,%a4,%d2,2
800048f2:	54 22       	ld.w %d2,[%a2]
800048f4:	f6 24       	jnz %d2,800048fc <IfxVadc_getBackgroundScanStatus+0x16>
800048f6:	c2 1f       	add %d15,1
IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
800048f8:	fc f9       	loop %a15,800048ea <IfxVadc_getBackgroundScanStatus+0x4>
800048fa:	00 90       	ret 
    {
        if (vadc->BRSPND[i].U)
        {
            return IfxVadc_Status_channelsStillPending;
800048fc:	82 62       	mov %d2,6
            continue;
        }
    }

    return status;
}
800048fe:	00 90       	ret 

80004900 <IfxVadc_getQueueStatus>:
IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    /* just fill level is checked */
    if (0x7 == group->QSR0.B.FILL)
80004900:	19 42 08 20 	ld.w %d2,[%a4]136
80004904:	8f f2 00 21 	and %d2,%d2,15
    {
        status = IfxVadc_Status_queueFull;
    }
    else
    {
        status = IfxVadc_Status_noError;
80004908:	8b 72 00 22 	eq %d2,%d2,7
    }

    return status;
}
8000490c:	06 22       	sh %d2,2
8000490e:	00 90       	ret 

80004910 <IfxVadc_getResultBasedOnRequestSource>:
Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType)
{
    sint32       sourceResultRegister = -1;
    Ifx_VADC_RES tmpResult;

    switch (sourceType)
80004910:	df 15 09 00 	jeq %d5,1,80004922 <IfxVadc_getResultBasedOnRequestSource+0x12>
80004914:	76 54       	jz %d5,8000491c <IfxVadc_getResultBasedOnRequestSource+0xc>
80004916:	df 25 0b 00 	jeq %d5,2,8000492c <IfxVadc_getResultBasedOnRequestSource+0x1c>
8000491a:	3c 39       	j 8000498c <IfxVadc_getResultBasedOnRequestSource+0x7c>
    {
    case IfxVadc_RequestSource_queue:
        sourceResultRegister = group->QCTRL0.B.SRCRESREG;
8000491c:	19 5f 00 20 	ld.w %d15,[%a5]128
80004920:	3c 03       	j 80004926 <IfxVadc_getResultBasedOnRequestSource+0x16>
        break;

    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
80004922:	19 5f 20 20 	ld.w %d15,[%a5]160
80004926:	16 0f       	and %d15,15
    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
        break;
    }

    if (sourceResultRegister > 0)
80004928:	ee 39       	jnz %d15,8000499a <IfxVadc_getResultBasedOnRequestSource+0x8a>
8000492a:	3c 31       	j 8000498c <IfxVadc_getResultBasedOnRequestSource+0x7c>
    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
        break;

    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
8000492c:	19 4f 00 80 	ld.w %d15,[%a4]512
80004930:	16 0f       	and %d15,15
        break;
    }

    if (sourceResultRegister > 0)
80004932:	ee 34       	jnz %d15,8000499a <IfxVadc_getResultBasedOnRequestSource+0x8a>

        return tmpResult;
    }
    else
    {
        if ((sourceType == IfxVadc_RequestSource_background) && (group->CHCTR[channel].B.RESTBS == 1))
80004934:	1b 04 06 f0 	addi %d15,%d4,96
80004938:	90 5f       	addsc.a %a15,%a5,%d15,2
8000493a:	4c f0       	ld.w %d15,[%a15]0
8000493c:	ef 4f 28 00 	jz.t %d15,20,8000498c <IfxVadc_getResultBasedOnRequestSource+0x7c>
        {
            tmpResult.B.VF     = vadc->GLOBRES.B.VF;
80004940:	19 42 00 c0 	ld.w %d2,[%a4]768
80004944:	82 0f       	mov %d15,0
80004946:	67 2f 9f ff 	ins.t %d15,%d15,31,%d2,31
            tmpResult.B.FCR    = vadc->GLOBRES.B.FCR;
8000494a:	19 42 00 c0 	ld.w %d2,[%a4]768
8000494e:	67 2f 1e ff 	ins.t %d15,%d15,30,%d2,30
            tmpResult.B.CRS    = vadc->GLOBRES.B.CRS;
80004952:	19 42 00 c0 	ld.w %d2,[%a4]768
80004956:	37 02 62 2e 	extr.u %d2,%d2,28,2
8000495a:	37 2f 02 fe 	insert %d15,%d15,%d2,28,2
            tmpResult.B.EMUX   = vadc->GLOBRES.B.EMUX;
8000495e:	19 42 00 c0 	ld.w %d2,[%a4]768
80004962:	37 02 e3 2c 	extr.u %d2,%d2,25,3
80004966:	37 2f 83 fc 	insert %d15,%d15,%d2,25,3
            tmpResult.B.CHNR   = vadc->GLOBRES.B.CHNR;
8000496a:	19 42 00 c0 	ld.w %d2,[%a4]768
8000496e:	37 02 65 2a 	extr.u %d2,%d2,20,5
80004972:	37 2f 05 fa 	insert %d15,%d15,%d2,20,5
            tmpResult.B.DRC    = vadc->GLOBRES.B.GNR; //The bitfields are the same but interpretation is different. TODO- define a generic result register type.
80004976:	19 42 00 c0 	ld.w %d2,[%a4]768
8000497a:	37 02 64 28 	extr.u %d2,%d2,16,4
8000497e:	37 2f 04 f8 	insert %d15,%d15,%d2,16,4
            tmpResult.B.RESULT = vadc->GLOBRES.B.RESULT;
80004982:	19 42 00 c0 	ld.w %d2,[%a4]768
80004986:	37 2f 10 20 	insert %d2,%d15,%d2,0,16

            return tmpResult;
8000498a:	00 90       	ret 
        }
        else
        {
            tmpResult.U = group->RES[group->CHCTR[channel].B.RESREG].U;
8000498c:	1b 04 06 40 	addi %d4,%d4,96
80004990:	01 54 02 f6 	addsc.a %a15,%a5,%d4,2
80004994:	4c f0       	ld.w %d15,[%a15]0
80004996:	37 0f 64 f8 	extr.u %d15,%d15,16,4
8000499a:	1b 0f 0a f0 	addi %d15,%d15,160
8000499e:	90 55       	addsc.a %a5,%a5,%d15,2
800049a0:	54 52       	ld.w %d2,[%a5]

            return tmpResult;
800049a2:	00 90       	ret 

800049a4 <IfxVadc_getScanStatus>:

IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    if (group->ASPND.U)
800049a4:	19 42 2c 20 	ld.w %d2,[%a4]172
    }
    else
    {
        return status;
    }
}
800049a8:	ab 62 a0 22 	seln %d2,%d2,%d2,6
800049ac:	00 90       	ret 

800049ae <IfxVadc_getSrcAddress>:

volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
{
    Ifx_SRC_SRCR *base;

    if (IfxVadc_SrcNr_shared0 <= index)
800049ae:	bf 45 0a 80 	jlt.u %d5,4,800049c2 <IfxVadc_getSrcAddress+0x14>
    {
        index -= 4;
800049b2:	9a c5       	add %d15,%d5,-4
800049b4:	8f ff 0f 51 	and %d5,%d15,255

        if ((group & 0x1) != 0)
800049b8:	8f 14 00 41 	and %d4,%d4,1
        {
            group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
800049bc:	da 08       	mov %d15,8
800049be:	ab 9f a0 44 	seln %d4,%d4,%d15,9
    else
    {
        /* do nothing */
    }

    base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
800049c2:	13 44 20 45 	madd %d4,%d5,%d4,4
800049c6:	91 00 00 f8 	movh.a %a15,32768
800049ca:	d9 ff 28 90 	lea %a15,[%a15]616 <80000268 <IfxVadc_cfg_srcAddresses>>
800049ce:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2

    return &(base[0]);
}
800049d2:	c8 02       	ld.a %a2,[%a15]0
800049d4:	00 90       	ret 

800049d6 <IfxVadc_initialiseAdcArbiterClock>:


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
800049d6:	19 4f 00 20 	ld.w %d15,[%a4]128
    return &(base[0]);
}


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
800049da:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
800049dc:	37 4f 02 f4 	insert %d15,%d15,%d4,8,2
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800049e0:	3b f0 01 40 	mov %d4,31
800049e4:	6d ff b4 fe 	call 8000474c <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
800049e8:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049ec:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
800049ee:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049f2:	3b f0 01 40 	mov %d4,31
800049f6:	1d ff 8f fe 	j 80004714 <IfxVadc_disableAccess>

800049fa <IfxVadc_initialiseAdcConverterClock>:


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
800049fa:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
}


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
800049fe:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
80004a00:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a04:	3b f0 01 40 	mov %d4,31
80004a08:	6d ff a2 fe 	call 8000474c <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
80004a0c:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a10:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80004a12:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a16:	3b f0 01 40 	mov %d4,31
80004a1a:	1d ff 7d fe 	j 80004714 <IfxVadc_disableAccess>

80004a1e <IfxVadc_initializeFAdcD>:
}


uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
{
80004a1e:	02 4f       	mov %d15,%d4
80004a20:	40 4f       	mov.aa %a15,%a4
    uint32 divD;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
80004a22:	6d 00 06 0c 	call 8000622e <IfxScuCcu_getSpbFrequency>
80004a26:	4b 02 71 21 	ftouz %d2,%d2

    divD   = (fadc / fAdcD - 1);
80004a2a:	4b f2 11 42 	div.u %e4,%d2,%d15
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80004a2e:	82 3f       	mov %d15,3
80004a30:	c2 f4       	add %d4,-1
80004a32:	0b f4 90 41 	min.u %d4,%d4,%d15

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
80004a36:	1b 14 00 80 	addi %d8,%d4,1
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
80004a3a:	40 f4       	mov.aa %a4,%a15

    divD   = (fadc / fAdcD - 1);

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
80004a3c:	4b 82 11 82 	div.u %e8,%d2,%d8
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
80004a40:	6d ff cb ff 	call 800049d6 <IfxVadc_initialiseAdcArbiterClock>
    return result;
}
80004a44:	02 82       	mov %d2,%d8
80004a46:	00 90       	ret 

80004a48 <IfxVadc_initializeFAdcI>:


uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
{
80004a48:	02 4f       	mov %d15,%d4
80004a4a:	40 4f       	mov.aa %a15,%a4
    uint32 divA;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
80004a4c:	6d 00 f1 0b 	call 8000622e <IfxScuCcu_getSpbFrequency>
80004a50:	4b 02 71 21 	ftouz %d2,%d2

    /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
    divA   = (fadc << 2) / fAdcI;
80004a54:	8f 22 00 40 	sh %d4,%d2,2
80004a58:	4b f4 11 42 	div.u %e4,%d4,%d15
80004a5c:	3b f0 01 50 	mov %d5,31

    divA   = (divA + 2) >> 2; /* Round to nearest integer */
80004a60:	c2 24       	add %d4,2
80004a62:	06 e4       	sh %d4,-2
    divA   = __minu(divA - 1, 0x1Fu);
80004a64:	c2 f4       	add %d4,-1
80004a66:	0b 54 90 41 	min.u %d4,%d4,%d5
    result = fadc / (divA + 1);
80004a6a:	1b 14 00 30 	addi %d3,%d4,1
80004a6e:	4b 32 11 62 	div.u %e6,%d2,%d3
80004a72:	02 6f       	mov %d15,%d6

    if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
80004a74:	7b 10 13 60 	movh %d6,305
80004a78:	1b 16 d0 62 	addi %d6,%d6,11521
80004a7c:	3f 6f 08 80 	jlt.u %d15,%d6,80004a8c <IfxVadc_initializeFAdcI+0x44>
80004a80:	0b 53 90 41 	min.u %d4,%d3,%d5
    {
        divA   = __minu(divA + 1, 0x1Fu);

        result = fadc / (divA + 1);
80004a84:	9a 14       	add %d15,%d4,1
80004a86:	4b f2 11 22 	div.u %e2,%d2,%d15
80004a8a:	02 2f       	mov %d15,%d2
    else
    {
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
80004a8c:	1b 0f ee 25 	addi %d2,%d15,24288
80004a90:	7b a0 12 30 	movh %d3,298
80004a94:	9b 82 ff 2f 	addih %d2,%d2,65528
80004a98:	1b 13 be 38 	addi %d3,%d3,-29727
80004a9c:	7f 32 06 80 	jge.u %d2,%d3,80004aa8 <IfxVadc_initializeFAdcI+0x60>
    {
        result = 0;             /* Min / Max FAdcI frequency */
    }
    else
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
80004aa0:	40 f4       	mov.aa %a4,%a15
80004aa2:	6d ff ac ff 	call 800049fa <IfxVadc_initialiseAdcConverterClock>
80004aa6:	3c 02       	j 80004aaa <IfxVadc_initializeFAdcI+0x62>
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
    {
        result = 0;             /* Min / Max FAdcI frequency */
80004aa8:	82 0f       	mov %d15,0
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
    }

    return result;
}
80004aaa:	02 f2       	mov %d2,%d15
80004aac:	00 90       	ret 

80004aae <IfxVadc_isPostCalibration>:
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
        break;
    default: pcEnabled                = FALSE;
80004aae:	82 02       	mov %d2,0

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
80004ab0:	ff 84 33 80 	jge.u %d4,8,80004b16 <IfxVadc_isPostCalibration+0x68>
80004ab4:	91 00 00 f8 	movh.a %a15,32768
80004ab8:	d9 ff 88 b4 	lea %a15,[%a15]19144 <80004ac8 <IfxVadc_isPostCalibration+0x1a>>
80004abc:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
        break;
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
80004ac0:	19 42 00 20 	ld.w %d2,[%a4]128

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
80004ac4:	dc 0f       	ji %a15
80004ac6:	00 00       	nop 
80004ac8:	1d 00 10 00 	j 80004ae8 <IfxVadc_isPostCalibration+0x3a>
80004acc:	1d 00 11 00 	j 80004aee <IfxVadc_isPostCalibration+0x40>
80004ad0:	1d 00 12 00 	j 80004af4 <IfxVadc_isPostCalibration+0x46>
80004ad4:	1d 00 13 00 	j 80004afa <IfxVadc_isPostCalibration+0x4c>
80004ad8:	1d 00 14 00 	j 80004b00 <IfxVadc_isPostCalibration+0x52>
80004adc:	1d 00 15 00 	j 80004b06 <IfxVadc_isPostCalibration+0x58>
80004ae0:	1d 00 16 00 	j 80004b0c <IfxVadc_isPostCalibration+0x5e>
80004ae4:	1d 00 17 00 	j 80004b12 <IfxVadc_isPostCalibration+0x64>
    {
    case IfxVadc_GroupId_0: pcEnabled = vadc->GLOBCFG.B.DPCAL0 == 0;
80004ae8:	07 22 10 28 	nand.t %d2,%d2,16,%d2,16
        break;
80004aec:	00 90       	ret 
    case IfxVadc_GroupId_1: pcEnabled = vadc->GLOBCFG.B.DPCAL1 == 0;
80004aee:	07 22 91 28 	nand.t %d2,%d2,17,%d2,17
        break;
80004af2:	00 90       	ret 
    case IfxVadc_GroupId_2: pcEnabled = vadc->GLOBCFG.B.DPCAL2 == 0;
80004af4:	07 22 12 29 	nand.t %d2,%d2,18,%d2,18
        break;
80004af8:	00 90       	ret 
    case IfxVadc_GroupId_3: pcEnabled = vadc->GLOBCFG.B.DPCAL3 == 0;
80004afa:	07 22 93 29 	nand.t %d2,%d2,19,%d2,19
        break;
80004afe:	00 90       	ret 
    case IfxVadc_GroupId_4: pcEnabled = vadc->GLOBCFG.B.DPCAL4 == 0;
80004b00:	07 22 14 2a 	nand.t %d2,%d2,20,%d2,20
        break;
80004b04:	00 90       	ret 
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
80004b06:	07 22 95 2a 	nand.t %d2,%d2,21,%d2,21
        break;
80004b0a:	00 90       	ret 
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
80004b0c:	07 22 16 2b 	nand.t %d2,%d2,22,%d2,22
        break;
80004b10:	00 90       	ret 
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
80004b12:	07 22 97 2b 	nand.t %d2,%d2,23,%d2,23
    default: pcEnabled                = FALSE;
        break;
    }

    return pcEnabled;
}
80004b16:	00 90       	ret 

80004b18 <IfxVadc_getChannelConversionTime>:
    return status;
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
80004b18:	02 40       	mov %d0,%d4
80004b1a:	02 68       	mov %d8,%d6
80004b1c:	02 7a       	mov %d10,%d7
80004b1e:	14 a4       	ld.bu %d4,[%sp]
    IfxVadc_ChannelResolution resolution;
    uint32                    n;

    uint32                    inputClassNum;

    if (inputClass <= IfxVadc_InputClasses_group1)
80004b20:	ff 25 08 80 	jge.u %d5,2,80004b30 <IfxVadc_getChannelConversionTime+0x18>
    {
        inputClassNum = inputClass;
        stcs          = vadcG->ICLASS[inputClassNum].B.STCS;
80004b24:	8f 80 00 f0 	sh %d15,%d0,8
80004b28:	42 f5       	add %d5,%d15
80004b2a:	1b 85 12 50 	addi %d5,%d5,296
80004b2e:	3c 03       	j 80004b34 <IfxVadc_getChannelConversionTime+0x1c>
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
80004b30:	1b 65 02 50 	addi %d5,%d5,38
80004b34:	01 45 02 f6 	addsc.a %a15,%a4,%d5,2
80004b38:	4c f0       	ld.w %d15,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
80004b3a:	48 03       	ld.w %d3,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
80004b3c:	16 1f       	and %d15,31
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
    }

    if (stcs > 16)
80004b3e:	8b 1f 61 22 	lt.u %d2,%d15,17
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
80004b42:	37 03 63 34 	extr.u %d3,%d3,8,3
    }

    if (stcs > 16)
80004b46:	f6 24       	jnz %d2,80004b4e <IfxVadc_getChannelConversionTime+0x36>
    {
        stcs = (stcs - 15) * 16; // Reference for the logic: Table 28-4 of TC29xB User Manual v1.3
80004b48:	1b 1f ff ff 	addi %d15,%d15,-15
80004b4c:	06 4f       	sh %d15,4
80004b4e:	ff 63 35 80 	jge.u %d3,6,80004bb8 <IfxVadc_getChannelConversionTime+0xa0>
80004b52:	91 00 00 f8 	movh.a %a15,32768
80004b56:	d9 ff 20 90 	lea %a15,[%a15]608 <80000260 <CSWTCH.25>>
80004b5a:	01 f3 00 f6 	addsc.a %a15,%a15,%d3,0
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
80004b5e:	82 02       	mov %d2,0
80004b60:	08 09       	ld.bu %d9,[%a15]0
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
80004b62:	df 04 2f 80 	jne %d4,0,80004bc0 <IfxVadc_getChannelConversionTime+0xa8>
    {
        if (resolution != IfxVadc_ChannelResolution_10bitFast)
80004b66:	df 53 0d 00 	jeq %d3,5,80004b80 <IfxVadc_getChannelConversionTime+0x68>
        {
            /* Standard conversion */
            uint32 pc = IfxVadc_isPostCalibration(vadc, group) ? 2 : 0;
80004b6a:	02 04       	mov %d4,%d0
80004b6c:	6d ff a1 ff 	call 80004aae <IfxVadc_isPostCalibration>
80004b70:	92 24       	add %d4,%d15,2
80004b72:	ab 22 a0 22 	seln %d2,%d2,%d2,2
80004b76:	42 94       	add %d4,%d9
            conversionTime = (float32)(2 + stcs + n + pc) / analogFrequency + 2.0 / moduleFrequency;
80004b78:	42 24       	add %d4,%d2
80004b7a:	4b 04 41 41 	itof %d4,%d4
80004b7e:	3c 04       	j 80004b86 <IfxVadc_getChannelConversionTime+0x6e>
        }
        else
        {
            /* Fast compare mode */
            conversionTime = (float32)(2 + stcs + 2) / analogFrequency + 2.0 / moduleFrequency;
80004b80:	c2 4f       	add %d15,4
80004b82:	4b 0f 41 41 	itof %d4,%d15
80004b86:	4b 84 51 40 	div.f %d4,%d4,%d8
80004b8a:	6d 00 73 2e 	call 8000a870 <__extendsfdf2>
80004b8e:	02 a4       	mov %d4,%d10
80004b90:	0b 23 10 88 	mov %e8,%d3,%d2
80004b94:	6d 00 6e 2e 	call 8000a870 <__extendsfdf2>
80004b98:	b7 00 21 4f 	imask %e4,0,30,1
80004b9c:	0b 23 10 68 	mov %e6,%d3,%d2
80004ba0:	6d 00 5d 30 	call 8000ac5a <__divdf3>
80004ba4:	0b 89 10 48 	mov %e4,%d9,%d8
80004ba8:	0b 23 10 68 	mov %e6,%d3,%d2
80004bac:	6d 00 49 2f 	call 8000aa3e <__adddf3>
80004bb0:	0b 23 10 48 	mov %e4,%d3,%d2
80004bb4:	1d 00 12 31 	j 8000add8 <__truncdfsf2>
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
80004bb8:	82 09       	mov %d9,0
80004bba:	df 04 d8 7f 	jeq %d4,0,80004b6a <IfxVadc_getChannelConversionTime+0x52>
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
80004bbe:	82 02       	mov %d2,0
    {
        // do nothing
    }

    return conversionTime;
}
80004bc0:	00 90       	ret 

80004bc2 <IfxVadc_resetKernel>:
    return pcEnabled;
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
80004bc2:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004bc4:	6d 00 f9 13 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80004bc8:	02 24       	mov %d4,%d2
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004bca:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80004bcc:	6d 00 f5 12 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004bd0:	3b f0 01 40 	mov %d4,31
80004bd4:	40 f4       	mov.aa %a4,%a15
80004bd6:	6d ff bb fd 	call 8000474c <IfxVadc_enableAccess>
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004bda:	48 c2       	ld.w %d2,[%a15]48
    vadc->KRST0.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004bdc:	02 f4       	mov %d4,%d15
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004bde:	8f 12 40 21 	or %d2,%d2,1
80004be2:	68 c2       	st.w [%a15]48,%d2
    vadc->KRST0.B.RST = 1;
80004be4:	48 d2       	ld.w %d2,[%a15]52
80004be6:	8f 12 40 21 	or %d2,%d2,1
80004bea:	68 d2       	st.w [%a15]52,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004bec:	6d 00 1a 14 	call 80007420 <IfxScuWdt_setCpuEndinit>

    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */
80004bf0:	48 d2       	ld.w %d2,[%a15]52
80004bf2:	6f 12 ff 7f 	jz.t %d2,1,80004bf0 <IfxVadc_resetKernel+0x2e>

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004bf6:	02 f4       	mov %d4,%d15
80004bf8:	6d 00 df 12 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004bfc:	48 b2       	ld.w %d2,[%a15]44
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004bfe:	3b f0 01 40 	mov %d4,31
    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004c02:	8f 12 40 21 	or %d2,%d2,1
80004c06:	68 b2       	st.w [%a15]44,%d2
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c08:	40 f4       	mov.aa %a4,%a15
80004c0a:	6d ff 85 fd 	call 80004714 <IfxVadc_disableAccess>
    IfxScuWdt_setCpuEndinit(passwd);
80004c0e:	02 f4       	mov %d4,%d15
80004c10:	1d 00 08 14 	j 80007420 <IfxScuWdt_setCpuEndinit>

80004c14 <IfxVadc_selectPowerSupplyVoltage>:


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80004c14:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
80004c18:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
80004c1a:	67 4f 0e f0 	ins.t %d15,%d15,14,%d4,0
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c1e:	3b f0 01 40 	mov %d4,31
80004c22:	6d ff 95 fd 	call 8000474c <IfxVadc_enableAccess>
void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
80004c26:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c2a:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80004c2c:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c30:	3b f0 01 40 	mov %d4,31
80004c34:	1d ff 70 fd 	j 80004714 <IfxVadc_disableAccess>

80004c38 <IfxVadc_setArbiterPriority>:
}


void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
{
80004c38:	1b 87 01 f0 	addi %d15,%d7,24
    if (slotEnable != FALSE)
80004c3c:	df 04 23 00 	jeq %d4,0,80004c82 <IfxVadc_setArbiterPriority+0x4a>
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
80004c40:	19 42 04 00 	ld.w %d2,[%a4]4
80004c44:	0f f4 00 40 	sh %d4,%d4,%d15
80004c48:	a6 24       	or %d4,%d2
80004c4a:	59 44 04 00 	st.w [%a4]4,%d4
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
80004c4e:	19 42 04 00 	ld.w %d2,[%a4]4
80004c52:	06 27       	sh %d7,2
80004c54:	82 3f       	mov %d15,3
80004c56:	0f 7f 00 f0 	sh %d15,%d15,%d7
80004c5a:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004c5e:	6c 41       	st.w [%a4]4,%d15
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
80004c60:	4c 41       	ld.w %d15,[%a4]4
80004c62:	0f 75 00 50 	sh %d5,%d5,%d7
80004c66:	a6 f5       	or %d5,%d15
80004c68:	59 45 04 00 	st.w [%a4]4,%d5

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004c6c:	4c 41       	ld.w %d15,[%a4]4
80004c6e:	c2 37       	add %d7,3
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
80004c70:	76 64       	jz %d6,80004c78 <IfxVadc_setArbiterPriority+0x40>
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004c72:	d7 1f 01 77 	insert %d7,%d15,1,%d7,1
80004c76:	3c 03       	j 80004c7c <IfxVadc_setArbiterPriority+0x44>
        }
        else
        {
            vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
80004c78:	d7 0f 01 77 	insert %d7,%d15,0,%d7,1
80004c7c:	59 47 04 00 	st.w [%a4]4,%d7
80004c80:	00 90       	ret 
        }
    }
    else
    {
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
80004c82:	19 44 04 00 	ld.w %d4,[%a4]4
80004c86:	d7 04 01 ff 	insert %d15,%d4,0,%d15,1
80004c8a:	6c 41       	st.w [%a4]4,%d15
80004c8c:	00 90       	ret 

80004c8e <IfxVadc_setScan>:

void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
{
    /* select channels which should take part in the scan sequence */
    /* the mask allows to specify the channels which should be enabled/disabled */
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
80004c8e:	19 4f 28 20 	ld.w %d15,[%a4]168
80004c92:	26 54       	and %d4,%d5
80004c94:	0f 5f e0 f0 	andn %d15,%d15,%d5
80004c98:	0f 4f a0 50 	or %d5,%d15,%d4
80004c9c:	59 45 28 20 	st.w [%a4]168,%d5
80004ca0:	00 90       	ret 

80004ca2 <IfxVadc_startupCalibration>:
{
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004ca2:	3b f0 01 40 	mov %d4,31
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004ca6:	40 4f       	mov.aa %a15,%a4
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004ca8:	6d ff 52 fd 	call 8000474c <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
{
    vadc->GLOBCFG.B.SUCAL = 1;
80004cac:	19 ff 00 20 	ld.w %d15,[%a15]128
    /* Set SUCAL bit */
    IfxVadc_initiateStartupCalibration(vadc);
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004cb0:	40 f4       	mov.aa %a4,%a15
80004cb2:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80004cb6:	3b f0 01 40 	mov %d4,31
80004cba:	59 ff 00 20 	st.w [%a15]128,%d15
80004cbe:	6d ff 2b fd 	call 80004714 <IfxVadc_disableAccess>
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004cc2:	82 02       	mov %d2,0

    /* Wait for hardware self-test and calibration to complete */
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;
80004cc4:	82 0f       	mov %d15,0
80004cc6:	a0 72       	mov.a %a2,7


IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
{
    uint8 status;
    status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
80004cc8:	8f a2 00 30 	sh %d3,%d2,10
80004ccc:	01 f3 00 36 	addsc.a %a3,%a15,%d3,0
80004cd0:	c2 12       	add %d2,1
80004cd2:	19 33 40 20 	ld.w %d3,[%a3]1152
80004cd6:	37 03 61 3e 	extr.u %d3,%d3,28,1

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
        {
            if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
            {
                calibrationRunning = TRUE;
80004cda:	ab 1f a0 f3 	seln %d15,%d3,%d15,1
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80004cde:	fc 25       	loop %a2,80004cc8 <IfxVadc_startupCalibration+0x26>
            else
            {
                /* do nothing */
            }
        }
    } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
80004ce0:	df 1f f1 7f 	jeq %d15,1,80004cc2 <IfxVadc_startupCalibration+0x20>
}
80004ce4:	00 90       	ret 
	...

80004ce8 <IfxAsclin_disableModule>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
80004ce8:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004cea:	6d 00 66 13 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004cee:	02 24       	mov %d4,%d2
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004cf0:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004cf2:	6d 00 62 12 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
80004cf6:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclin); /* disables the module*/
    IfxScuWdt_setCpuEndinit(psw);              /* sets the endinit protection back on*/
80004cf8:	02 f4       	mov %d4,%d15
80004cfa:	8f 12 40 21 	or %d2,%d2,1
80004cfe:	68 02       	st.w [%a15]0,%d2
80004d00:	1d 00 90 13 	j 80007420 <IfxScuWdt_setCpuEndinit>

80004d04 <IfxAsclin_enableAscErrorFlags>:
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80004d04:	7b 10 00 f0 	movh %d15,1
80004d08:	ab 0f 80 44 	sel %d4,%d4,%d15,0
80004d0c:	19 4f 00 10 	ld.w %d15,[%a4]64
80004d10:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80004d14:	a6 f4       	or %d4,%d15
80004d16:	59 44 00 10 	st.w [%a4]64,%d4
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
80004d1a:	7b 00 40 f0 	movh %d15,1024
80004d1e:	ab 0f 80 55 	sel %d5,%d5,%d15,0
80004d22:	19 4f 00 10 	ld.w %d15,[%a4]64
80004d26:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80004d2a:	a6 f5       	or %d5,%d15
80004d2c:	59 45 00 10 	st.w [%a4]64,%d5
80004d30:	00 90       	ret 

80004d32 <IfxAsclin_enableModule>:
    IfxAsclin_enableRxFifoOverflowFlag(asclin, rfoEnable);  /* enables Rx fifo Overflow error*/
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
80004d32:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004d34:	6d 00 41 13 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004d38:	02 24       	mov %d4,%d2
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004d3a:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004d3c:	6d 00 3d 12 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 0;
80004d40:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setEnableModuleRequest(asclin); /* enables the module*/
    IfxScuWdt_setCpuEndinit(psw);             /* sets the endinit protection back on*/
80004d42:	02 f4       	mov %d4,%d15
80004d44:	8f 12 c0 21 	andn %d2,%d2,1
80004d48:	68 02       	st.w [%a15]0,%d2
80004d4a:	1d 00 6b 13 	j 80007420 <IfxScuWdt_setCpuEndinit>

80004d4e <IfxAsclin_getAddress>:
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
    }
    else
    {
        module = NULL_PTR;
80004d4e:	a0 02       	mov.a %a2,0

Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin)
{
    Ifx_ASCLIN *module;

    if (asclin < IFXASCLIN_NUM_MODULES)
80004d50:	ff 44 09 00 	jge %d4,4,80004d62 <IfxAsclin_getAddress+0x14>
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
80004d54:	91 00 00 f8 	movh.a %a15,32768
80004d58:	d9 ff b8 60 	lea %a15,[%a15]2488 <800009b8 <IfxAsclin_cfg_indexMap>>
80004d5c:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004d60:	c8 02       	ld.a %a2,[%a15]0
    {
        module = NULL_PTR;
    }

    return module;
}
80004d62:	00 90       	ret 

80004d64 <IfxAsclin_getFaFrequency>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004d64:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004d68:	16 1f       	and %d15,31
float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin)
{
    float32               frequency;
    IfxAsclin_ClockSource clockSource = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin);    /* gets the current clock source*/

    switch (clockSource)
80004d6a:	c2 ff       	add %d15,-1
80004d6c:	8b 0f a1 22 	ge.u %d2,%d15,16
80004d70:	df 02 32 80 	jne %d2,0,80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004d74:	91 00 00 f8 	movh.a %a15,32768
80004d78:	d9 ff c0 64 	lea %a15,[%a15]19840 <80004d80 <IfxAsclin_getFaFrequency+0x1c>>
80004d7c:	90 ff       	addsc.a %a15,%a15,%d15,2
80004d7e:	dc 0f       	ji %a15
80004d80:	1d 00 20 00 	j 80004dc0 <IfxAsclin_getFaFrequency+0x5c>
80004d84:	1d 00 20 00 	j 80004dc4 <IfxAsclin_getFaFrequency+0x60>
80004d88:	1d 00 26 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004d8c:	1d 00 1e 00 	j 80004dc8 <IfxAsclin_getFaFrequency+0x64>
80004d90:	1d 00 22 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004d94:	1d 00 20 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004d98:	1d 00 1e 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004d9c:	1d 00 18 00 	j 80004dcc <IfxAsclin_getFaFrequency+0x68>
80004da0:	1d 00 1a 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004da4:	1d 00 18 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004da8:	1d 00 16 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004dac:	1d 00 14 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004db0:	1d 00 12 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004db4:	1d 00 10 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004db8:	1d 00 0e 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004dbc:	1d 00 0a 00 	j 80004dd0 <IfxAsclin_getFaFrequency+0x6c>
    {
    case IfxAsclin_ClockSource_noClock: /* gets the respective frequency*/
        frequency = 0.0;
        break;
    case IfxAsclin_ClockSource_kernelClock:
        frequency = IfxScuCcu_getSpbFrequency();
80004dc0:	1d 00 37 0a 	j 8000622e <IfxScuCcu_getSpbFrequency>
        break;
    case IfxAsclin_ClockSource_oscillatorClock:
        frequency = IfxScuCcu_getOsc0Frequency();
80004dc4:	1d 00 a6 08 	j 80005f10 <IfxScuCcu_getOsc0Frequency>
        break;
    case IfxAsclin_ClockSource_flexRayClock:
        frequency = IfxScuCcu_getPllErayFrequency();
80004dc8:	1d 00 c3 08 	j 80005f4e <IfxScuCcu_getPllErayFrequency>
        break;
    case IfxAsclin_ClockSource_ascFastClock:
        frequency = IfxScuCcu_getBaud2Frequency();
80004dcc:	1d 00 20 0a 	j 8000620c <IfxScuCcu_getBaud2Frequency>
        break;
    case IfxAsclin_ClockSource_ascSlowClock:
        frequency = IfxScuCcu_getBaud1Frequency();
80004dd0:	1d 00 0e 0a 	j 800061ec <IfxScuCcu_getBaud1Frequency>
        frequency = 0.0;
        break;
    }

    return frequency;
}
80004dd4:	82 02       	mov %d2,0
80004dd6:	00 90       	ret 

80004dd8 <IfxAsclin_getIndex>:

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004dd8:	91 00 00 38 	movh.a %a3,32768
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004ddc:	82 0f       	mov %d15,0
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004dde:	d9 33 b8 60 	lea %a3,[%a3]2488 <800009b8 <IfxAsclin_cfg_indexMap>>
80004de2:	a0 3f       	mov.a %a15,3
80004de4:	d0 32       	addsc.a %a2,%a3,%d15,3
80004de6:	d4 25       	ld.a %a5,[%a2]
80004de8:	7d 45 05 80 	jne.a %a5,%a4,80004df2 <IfxAsclin_getIndex+0x1a>
        {
            result = (IfxAsclin_Index)IfxAsclin_cfg_indexMap[index].index;
80004dec:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
80004df0:	00 90       	ret 
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004df2:	c2 1f       	add %d15,1
80004df4:	fc f8       	loop %a15,80004de4 <IfxAsclin_getIndex+0xc>
IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin)
{
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;
80004df6:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
80004df8:	00 90       	ret 

80004dfa <IfxAsclin_getPdFrequency>:
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
}


float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin)
{
80004dfa:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
80004dfc:	6d ff b4 ff 	call 80004d64 <IfxAsclin_getFaFrequency>
80004e00:	4c f5       	ld.w %d15,[%a15]20
80004e02:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004e06:	c2 1f       	add %d15,1
80004e08:	4b 0f 41 f1 	itof %d15,%d15
}
80004e0c:	4b f2 51 20 	div.f %d2,%d2,%d15
80004e10:	00 90       	ret 

80004e12 <IfxAsclin_getOvsFrequency>:
    return result;
}


float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin)
{
80004e12:	40 4f       	mov.aa %a15,%a4
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
80004e14:	6d ff f3 ff 	call 80004dfa <IfxAsclin_getPdFrequency>
80004e18:	48 83       	ld.w %d3,[%a15]32
80004e1a:	4c f8       	ld.w %d15,[%a15]32
80004e1c:	37 03 6c 38 	extr.u %d3,%d3,16,12
80004e20:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004e24:	4b 03 41 31 	itof %d3,%d3
80004e28:	4b 0f 41 f1 	itof %d15,%d15
80004e2c:	4b 32 41 20 	mul.f %d2,%d2,%d3
}
80004e30:	4b f2 51 20 	div.f %d2,%d2,%d15
80004e34:	00 90       	ret 

80004e36 <IfxAsclin_getShiftFrequency>:
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
}


float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin)
{
80004e36:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getOvsFrequency(asclin) / asclin->BITCON.B.OVERSAMPLING;
80004e38:	6d ff ed ff 	call 80004e12 <IfxAsclin_getOvsFrequency>
80004e3c:	4c f5       	ld.w %d15,[%a15]20
80004e3e:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80004e42:	4b 0f 41 f1 	itof %d15,%d15
}
80004e46:	4b f2 51 20 	div.f %d2,%d2,%d15
80004e4a:	00 90       	ret 

80004e4c <IfxAsclin_getSrcPointerEr>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].ERR);
80004e4c:	6d ff c6 ff 	call 80004dd8 <IfxAsclin_getIndex>
80004e50:	53 c2 20 f0 	mul %d15,%d2,12
80004e54:	60 ff       	mov.a %a15,%d15
80004e56:	d9 f2 08 28 	lea %a2,[%a15]-32632
}
80004e5a:	11 42 00 2f 	addih.a %a2,%a2,61444
80004e5e:	00 90       	ret 

80004e60 <IfxAsclin_getSrcPointerRx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].RX);
80004e60:	6d ff bc ff 	call 80004dd8 <IfxAsclin_getIndex>
80004e64:	53 c2 20 f0 	mul %d15,%d2,12
80004e68:	60 ff       	mov.a %a15,%d15
80004e6a:	d9 f2 04 28 	lea %a2,[%a15]-32636
}
80004e6e:	11 42 00 2f 	addih.a %a2,%a2,61444
80004e72:	00 90       	ret 

80004e74 <IfxAsclin_getSrcPointerTx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].TX);
80004e74:	6d ff b2 ff 	call 80004dd8 <IfxAsclin_getIndex>
80004e78:	53 c2 20 f0 	mul %d15,%d2,12
80004e7c:	60 ff       	mov.a %a15,%d15
80004e7e:	d9 f2 00 28 	lea %a2,[%a15]-32640
}
80004e82:	11 42 00 2f 	addih.a %a2,%a2,61444
80004e86:	00 90       	ret 

80004e88 <IfxAsclin_read16>:


uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
80004e88:	9f 04 04 80 	jned %d4,0,80004e90 <IfxAsclin_read16+0x8>
        *data++ = (uint16)rxData->U;
        count--;
    }

    return count;
}
80004e8c:	82 02       	mov %d2,0
80004e8e:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint16)rxData->U;
80004e90:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e94:	ac 50       	st.h [%a5]0,%d15
80004e96:	b0 25       	add.a %a5,2
80004e98:	3c f8       	j 80004e88 <IfxAsclin_read16>

80004e9a <IfxAsclin_read32>:
    return count;
}


uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80004e9a:	9f 04 04 80 	jned %d4,0,80004ea2 <IfxAsclin_read32+0x8>
        *data++ = rxData->U;
        count--;
    }

    return count;
}
80004e9e:	82 02       	mov %d2,0
80004ea0:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = rxData->U;
80004ea2:	19 4f 08 10 	ld.w %d15,[%a4]72
80004ea6:	6c 50       	st.w [%a5]0,%d15
80004ea8:	b0 45       	add.a %a5,4
80004eaa:	3c f8       	j 80004e9a <IfxAsclin_read32>

80004eac <IfxAsclin_read8>:
    return count;
}


uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80004eac:	9f 04 04 80 	jned %d4,0,80004eb4 <IfxAsclin_read8+0x8>
        *data++ = (uint8)rxData->U;
        count--;
    }

    return count;
}
80004eb0:	82 02       	mov %d2,0
80004eb2:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint8)rxData->U;
80004eb4:	19 4f 08 10 	ld.w %d15,[%a4]72
80004eb8:	2c 50       	st.b [%a5]0,%d15
80004eba:	b0 15       	add.a %a5,1
80004ebc:	3c f8       	j 80004eac <IfxAsclin_read8>

80004ebe <IfxAsclin_resetModule>:
    return count;
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
80004ebe:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004ec0:	6d 00 7b 12 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
80004ec4:	02 24       	mov %d4,%d2
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004ec6:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80004ec8:	6d 00 77 11 	call 800071b6 <IfxScuWdt_clearCpuEndinit>

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004ecc:	19 f2 34 30 	ld.w %d2,[%a15]244
    asclin->KRST1.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004ed0:	02 f4       	mov %d4,%d15
void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004ed2:	8f 12 40 21 	or %d2,%d2,1
80004ed6:	59 f2 34 30 	st.w [%a15]244,%d2
    asclin->KRST1.B.RST = 1;
80004eda:	19 f2 30 30 	ld.w %d2,[%a15]240
80004ede:	8f 12 40 21 	or %d2,%d2,1
80004ee2:	59 f2 30 30 	st.w [%a15]240,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004ee6:	6d 00 9d 12 	call 80007420 <IfxScuWdt_setCpuEndinit>

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
80004eea:	19 f2 34 30 	ld.w %d2,[%a15]244
80004eee:	6f 12 fe 7f 	jz.t %d2,1,80004eea <IfxAsclin_resetModule+0x2c>
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004ef2:	02 f4       	mov %d4,%d15
80004ef4:	6d 00 61 11 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004ef8:	19 f2 2c 30 	ld.w %d2,[%a15]236

    IfxScuWdt_setCpuEndinit(passwd);
80004efc:	02 f4       	mov %d4,%d15

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004efe:	8f 12 40 21 	or %d2,%d2,1
80004f02:	59 f2 2c 30 	st.w [%a15]236,%d2

    IfxScuWdt_setCpuEndinit(passwd);
80004f06:	1d 00 8d 12 	j 80007420 <IfxScuWdt_setCpuEndinit>

80004f0a <IfxAsclin_setClockSource>:
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004f0a:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004f0e:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
80004f12:	59 4f 0c 10 	st.w [%a4]76,%d15

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
80004f16:	f6 46       	jnz %d4,80004f22 <IfxAsclin_setClockSource+0x18>
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004f18:	19 4f 0c 10 	ld.w %d15,[%a4]76
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004f1c:	bf 0f fe 7f 	jlt %d15,0,80004f18 <IfxAsclin_setClockSource+0xe>
80004f20:	00 90       	ret 
80004f22:	19 4f 0c 10 	ld.w %d15,[%a4]76
        {}
    }
    else
    {
        while (IfxAsclin_getClockStatus(asclin) != 1U)
80004f26:	ff 0f fe 7f 	jge %d15,0,80004f22 <IfxAsclin_setClockSource+0x18>
80004f2a:	00 90       	ret 

80004f2c <IfxAsclin_setBaudrateBitFields>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004f2c:	19 4f 0c 10 	ld.w %d15,[%a4]76
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004f30:	19 42 0c 10 	ld.w %d2,[%a4]76
80004f34:	16 1f       	and %d15,31
80004f36:	8f f2 c1 21 	andn %d2,%d2,31
80004f3a:	59 42 0c 10 	st.w [%a4]76,%d2
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004f3e:	19 42 0c 10 	ld.w %d2,[%a4]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004f42:	bf 02 fe 7f 	jlt %d2,0,80004f3e <IfxAsclin_setBaudrateBitFields+0x12>
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
80004f46:	19 42 14 00 	ld.w %d2,[%a4]20
80004f4a:	c2 f4       	add %d4,-1
80004f4c:	37 42 0c 40 	insert %d4,%d2,%d4,0,12
80004f50:	59 44 14 00 	st.w [%a4]20,%d4
}


IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
{
    asclin->BRG.B.NUMERATOR = numerator;
80004f54:	19 42 20 00 	ld.w %d2,[%a4]32
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);                             /* turns off the clock for settings */
    IfxAsclin_setPrescaler(asclin, prescaler);                                                   /* sets the prescaler*/
    IfxAsclin_setNumerator(asclin, numerator);                                                   /* sets the numerator*/
    IfxAsclin_setDenominator(asclin, denominator);                                               /* sets the denominator*/
    IfxAsclin_setOversampling(asclin, oversampling);                                             /* sets the oversampling*/
    IfxAsclin_setClockSource(asclin, clockSource);                                               /* sets the clock source back on*/
80004f58:	02 f4       	mov %d4,%d15
80004f5a:	37 52 0c 58 	insert %d5,%d2,%d5,16,12
80004f5e:	59 45 20 00 	st.w [%a4]32,%d5
}


IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
{
    asclin->BRG.B.DENOMINATOR = denominator;
80004f62:	19 42 20 00 	ld.w %d2,[%a4]32
80004f66:	37 62 0c 60 	insert %d6,%d2,%d6,0,12
80004f6a:	59 46 20 00 	st.w [%a4]32,%d6
}


IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)
{
    asclin->BITCON.B.OVERSAMPLING = ovsFactor;
80004f6e:	19 42 14 00 	ld.w %d2,[%a4]20
80004f72:	37 72 04 78 	insert %d7,%d2,%d7,16,4
80004f76:	59 47 14 00 	st.w [%a4]20,%d7
80004f7a:	1d ff c8 ff 	j 80004f0a <IfxAsclin_setClockSource>

80004f7e <IfxAsclin_setBitTiming>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004f7e:	19 42 0c 10 	ld.w %d2,[%a4]76
}


boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter)
{
80004f82:	20 08       	sub.a %sp,8
80004f84:	8f f2 01 21 	and %d2,%d2,31
80004f88:	02 5f       	mov %d15,%d5
80004f8a:	40 4f       	mov.aa %a15,%a4
80004f8c:	02 48       	mov %d8,%d4
80004f8e:	02 6a       	mov %d10,%d6
80004f90:	60 7d       	mov.a %a13,%d7
80004f92:	60 2c       	mov.a %a12,%d2
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004f94:	6d ff 33 ff 	call 80004dfa <IfxAsclin_getPdFrequency>
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004f98:	92 15       	add %d5,%d15,1
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004f9a:	02 29       	mov %d9,%d2
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80004f9c:	82 4f       	mov %d15,4
80004f9e:	0b f5 b0 f1 	max.u %d15,%d5,%d15
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004fa2:	8f ff 0f 21 	and %d2,%d15,255
80004fa6:	59 a2 04 00 	st.w [%sp]4,%d2
80004faa:	82 16       	mov %d6,1
80004fac:	0b 6a b0 61 	max.u %d6,%d10,%d6
80004fb0:	16 ff       	and %d15,255
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
80004fb2:	4b 0f 41 31 	itof %d3,%d15
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004fb6:	8f f6 0f 61 	and %d6,%d6,255
    fOvs         = baudrate * oversampling;
80004fba:	4b 38 41 f0 	mul.f %d15,%d8,%d3
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004fbe:	60 6e       	mov.a %a14,%d6
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004fc0:	02 f4       	mov %d4,%d15
80004fc2:	6d 00 57 2c 	call 8000a870 <__extendsfdf2>
80004fc6:	7b 00 f5 73 	movh %d7,16208
80004fca:	0b 23 10 48 	mov %e4,%d3,%d2
80004fce:	7b 20 2f 6d 	movh %d6,54002
80004fd2:	1b d7 24 76 	addi %d7,%d7,25165
80004fd6:	1b c6 9f 6a 	addi %d6,%d6,-22020
80004fda:	6d 00 6e 2d 	call 8000aab6 <__muldf3>
80004fde:	0b 23 10 48 	mov %e4,%d3,%d2
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
    nBest          = n;
80004fe2:	82 1c       	mov %d12,1
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004fe4:	6d 00 fa 2e 	call 8000add8 <__truncdfsf2>

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80004fe8:	4b f9 51 50 	div.f %d5,%d9,%d15
80004fec:	91 00 00 20 	movh.a %a2,0

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
    relError       = __absf(fOvs - f);
80004ff0:	82 01       	mov %d1,0

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80004ff2:	4b 05 71 51 	ftouz %d5,%d5
    }

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
80004ff6:	4b 05 61 31 	utof %d3,%d5
80004ffa:	4b 39 51 30 	div.f %d3,%d9,%d3
    relError       = __absf(fOvs - f);
80004ffe:	6b 03 31 3f 	sub.f %d3,%d15,%d3
80005002:	4b 13 01 00 	cmp.f %d0,%d3,%d1
80005006:	37 00 61 00 	extr.u %d0,%d0,0,1
8000500a:	9b 03 00 48 	addih %d4,%d3,32768
8000500e:	2b 34 40 30 	sel %d3,%d0,%d4,%d3
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80005012:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80005016:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
8000501a:	df 00 45 80 	jne %d0,0,800050a4 <IfxAsclin_setBitTiming+0x126>
8000501e:	8f 15 00 60 	sh %d6,%d5,1
            /* Increase the value of the oversampling to generate the required baudrate */
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
80005022:	02 51       	mov %d1,%d5
    nBest          = n;
    adder_facL_min = 0;
80005024:	82 0e       	mov %d14,0
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80005026:	82 28       	mov %d8,2
80005028:	3b 00 00 71 	mov %d7,4096
8000502c:	7f 76 3b 80 	jge.u %d6,%d7,800050a2 <IfxAsclin_setBitTiming+0x124>
    {
        if (n == 2)
        {
            adder_facL = 1;
            adder_facH = 1;
80005030:	a0 13       	mov.a %a3,1

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
        {
            adder_facL = 1;
80005032:	82 1b       	mov %d11,1
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
80005034:	df 28 09 00 	jeq %d8,2,80005046 <IfxAsclin_setBitTiming+0xc8>
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80005038:	73 8e 0a a0 	mul %d10,%d14,%d8
8000503c:	4b ca 11 a2 	div.u %e10,%d10,%d12
            adder_facH = adder_facL + 1;
80005040:	60 a3       	mov.a %a3,%d10
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80005042:	02 ab       	mov %d11,%d10
            adder_facH = adder_facL + 1;
80005044:	b0 13       	add.a %a3,1
        }

        for (count = adder_facL; count <= adder_facH; count++)
80005046:	80 34       	mov.d %d4,%a3
80005048:	3f b4 25 80 	jlt.u %d4,%d11,80005092 <IfxAsclin_setBitTiming+0x114>
        {
            f           = (fpd * n) / (n * d + count);
8000504c:	4b 08 61 01 	utof %d0,%d8
80005050:	0b 6b 00 40 	add %d4,%d11,%d6
80005054:	4b 04 61 d1 	utof %d13,%d4
80005058:	4b 09 41 00 	mul.f %d0,%d9,%d0
            newRelError = __absf(fOvs - f);
8000505c:	80 2a       	mov.d %d10,%a2
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
        {
            f           = (fpd * n) / (n * d + count);
8000505e:	4b d0 51 00 	div.f %d0,%d0,%d13
            newRelError = __absf(fOvs - f);
80005062:	6b 00 31 0f 	sub.f %d0,%d15,%d0
80005066:	4b a0 01 d0 	cmp.f %d13,%d0,%d10
8000506a:	37 0d 61 d0 	extr.u %d13,%d13,0,1
8000506e:	9b 00 00 a8 	addih %d10,%d0,32768
80005072:	2b 0a 40 0d 	sel %d0,%d13,%d10,%d0

            if (relError > (newRelError))
80005076:	4b 03 01 d0 	cmp.f %d13,%d3,%d0
8000507a:	37 0d 61 d1 	extr.u %d13,%d13,2,1
8000507e:	2b be 50 ed 	seln %d14,%d13,%d14,%d11
80005082:	2b 03 50 3d 	seln %d3,%d13,%d3,%d0
80005086:	2b 8c 50 cd 	seln %d12,%d13,%d12,%d8
8000508a:	2b 41 50 1d 	seln %d1,%d13,%d1,%d4
        {
            adder_facL = (adder_facL_min * n) / nBest;
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
8000508e:	c2 1b       	add %d11,1
80005090:	3c db       	j 80005046 <IfxAsclin_setBitTiming+0xc8>
                dBest          = (n * d + count);
                adder_facL_min = count;
            }
        }

        if (relError <= limit)
80005092:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80005096:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
8000509a:	f6 04       	jnz %d0,800050a2 <IfxAsclin_setBitTiming+0x124>
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
8000509c:	c2 18       	add %d8,1
8000509e:	42 56       	add %d6,%d5
800050a0:	3c c6       	j 8000502c <IfxAsclin_setBitTiming+0xae>
800050a2:	02 15       	mov %d5,%d1
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
800050a4:	19 f3 0c 10 	ld.w %d3,[%a15]76
800050a8:	8f f3 c1 31 	andn %d3,%d3,31
800050ac:	59 f3 0c 10 	st.w [%a15]76,%d3
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
800050b0:	19 ff 0c 10 	ld.w %d15,[%a15]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
800050b4:	bf 0f fe 7f 	jlt %d15,0,800050b0 <IfxAsclin_setBitTiming+0x132>
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
800050b8:	4c f8       	ld.w %d15,[%a15]32
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
800050ba:	19 a2 04 00 	ld.w %d2,[%sp]4
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
800050be:	37 5f 0c 50 	insert %d5,%d15,%d5,0,12
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
800050c2:	c2 f2       	add %d2,-1
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
800050c4:	68 85       	st.w [%a15]32,%d5
    asclin->BRG.B.NUMERATOR   = nBest;
800050c6:	4c f8       	ld.w %d15,[%a15]32

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
800050c8:	80 ea       	mov.d %d10,%a14
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
800050ca:	37 cf 0c c8 	insert %d12,%d15,%d12,16,12
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
800050ce:	80 c4       	mov.d %d4,%a12
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
800050d0:	68 8c       	st.w [%a15]32,%d12

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
800050d2:	4c f5       	ld.w %d15,[%a15]20
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
800050d4:	40 f4       	mov.aa %a4,%a15
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
800050d6:	37 2f 04 28 	insert %d2,%d15,%d2,16,4
800050da:	68 52       	st.w [%a15]20,%d2

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
800050dc:	4c f5       	ld.w %d15,[%a15]20

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
800050de:	80 d2       	mov.d %d2,%a13

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
800050e0:	37 af 04 6c 	insert %d6,%d15,%d10,24,4

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
800050e4:	7b 00 00 f8 	movh %d15,32768

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
800050e8:	68 56       	st.w [%a15]20,%d6

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
800050ea:	ab 0f 80 72 	sel %d7,%d2,%d15,0
800050ee:	4c f5       	ld.w %d15,[%a15]20
800050f0:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
800050f4:	a6 7f       	or %d15,%d7
800050f6:	68 5f       	st.w [%a15]20,%d15

    IfxAsclin_setClockSource(asclin, source);
800050f8:	6d ff 09 ff 	call 80004f0a <IfxAsclin_setClockSource>

    return TRUE;
}
800050fc:	82 12       	mov %d2,1
800050fe:	00 90       	ret 

80005100 <IfxAsclin_write16>:
    }
}


uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
80005100:	9f 04 04 80 	jned %d4,0,80005108 <IfxAsclin_write16+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
80005104:	82 02       	mov %d2,0
80005106:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
80005108:	b9 5f 00 00 	ld.hu %d15,[%a5]0
8000510c:	b0 25       	add.a %a5,2
8000510e:	59 4f 04 10 	st.w [%a4]68,%d15
80005112:	3c f7       	j 80005100 <IfxAsclin_write16>

80005114 <IfxAsclin_write32>:
    return count;
}


uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80005114:	9f 04 04 80 	jned %d4,0,8000511c <IfxAsclin_write32+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
80005118:	82 02       	mov %d2,0
8000511a:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
8000511c:	4c 50       	ld.w %d15,[%a5]0
8000511e:	b0 45       	add.a %a5,4
80005120:	59 4f 04 10 	st.w [%a4]68,%d15
80005124:	3c f8       	j 80005114 <IfxAsclin_write32>

80005126 <IfxAsclin_write8>:
    return count;
}

#include <stdio.h>
uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80005126:	9f 04 04 80 	jned %d4,0,8000512e <IfxAsclin_write8+0x8>
        count--;

    }

    return count;
}
8000512a:	82 02       	mov %d2,0
8000512c:	00 90       	ret 
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {

        txData->U = *data++;
8000512e:	0c 50       	ld.bu %d15,[%a5]0
80005130:	b0 15       	add.a %a5,1
80005132:	59 4f 04 10 	st.w [%a4]68,%d15
80005136:	3c f8       	j 80005126 <IfxAsclin_write8>

80005138 <IfxAsclin_Asc_getReadCount>:
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
80005138:	cc 42       	ld.a %a15,[%a4]8


sint32 IfxAsclin_Asc_getReadCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_readCount(asclin->rx);
}
8000513a:	88 22       	ld.h %d2,[%a15]4
8000513c:	00 90       	ret 

8000513e <IfxAsclin_Asc_getReadEvent>:


IfxStdIf_DPipe_ReadEvent IfxAsclin_Asc_getReadEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->rx->eventWriter;
8000513e:	99 42 08 00 	ld.a %a2,[%a4]8
}
80005142:	d9 22 1d 00 	lea %a2,[%a2]29
80005146:	00 90       	ret 

80005148 <IfxAsclin_Asc_getSendCount>:


uint32 IfxAsclin_Asc_getSendCount(IfxAsclin_Asc *asclin)
{
    return asclin->sendCount;
80005148:	19 42 10 00 	ld.w %d2,[%a4]16
}
8000514c:	00 90       	ret 

8000514e <IfxAsclin_Asc_getTxTimeStamp>:


Ifx_TickTime IfxAsclin_Asc_getTxTimeStamp(IfxAsclin_Asc *asclin)
{
    return asclin->txTimestamp;
8000514e:	09 42 54 09 	ld.d %e2,[%a4]20
}
80005152:	00 90       	ret 

80005154 <IfxAsclin_Asc_getWriteCount>:


sint32 IfxAsclin_Asc_getWriteCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_writeCount(asclin->tx);
80005154:	cc 41       	ld.a %a15,[%a4]4
 *
 * \return Returns the free size in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_writeCount(Ifx_Fifo *fifo)
{
    return (Ifx_SizeT)(fifo->size - Ifx_Fifo_readCount(fifo));
80005156:	88 c2       	ld.h %d2,[%a15]24
80005158:	8c f2       	ld.h %d15,[%a15]4
8000515a:	a2 f2       	sub %d2,%d15
}
8000515c:	37 02 50 20 	extr %d2,%d2,0,16
80005160:	00 90       	ret 

80005162 <IfxAsclin_Asc_getWriteEvent>:


IfxStdIf_DPipe_WriteEvent IfxAsclin_Asc_getWriteEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->tx->eventWriter;
80005162:	99 42 04 00 	ld.a %a2,[%a4]4
}
80005166:	d9 22 1d 00 	lea %a2,[%a2]29
8000516a:	00 90       	ret 

8000516c <IfxAsclin_Asc_isrError>:
}


void IfxAsclin_Asc_isrError(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin; /* getting the pointer to ASCLIN registers from module handler*/
8000516c:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.PE;
8000516e:	4c fd       	ld.w %d15,[%a15]52

    /* store all the flags in the variable */
    if (IfxAsclin_getParityErrorFlagStatus(asclinSFR))
80005170:	ef 0f 0a 00 	jz.t %d15,16,80005184 <IfxAsclin_Asc_isrError+0x18>
}


IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.PEC = 1;
80005174:	4c ff       	ld.w %d15,[%a15]60
80005176:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000517a:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearParityErrorFlag(asclinSFR);
        asclin->errorFlags.flags.parityError = 1;
8000517c:	0c 4e       	ld.bu %d15,[%a4]14
8000517e:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
80005182:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.FE;
80005184:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getFrameErrorFlagStatus(asclinSFR))
80005186:	ef 2f 0a 00 	jz.t %d15,18,8000519a <IfxAsclin_Asc_isrError+0x2e>
}


IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.FEC = 1;
8000518a:	4c ff       	ld.w %d15,[%a15]60
8000518c:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80005190:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearFrameErrorFlag(asclinSFR);
        asclin->errorFlags.flags.frameError = 1;
80005192:	0c 4e       	ld.bu %d15,[%a4]14
80005194:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
80005198:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFO;
8000519a:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoOverflowFlagStatus(asclinSFR))
8000519c:	ef af 0a 00 	jz.t %d15,26,800051b0 <IfxAsclin_Asc_isrError+0x44>
}


IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFOC = 1;
800051a0:	4c ff       	ld.w %d15,[%a15]60
800051a2:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
800051a6:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoOverflow = 1;
800051a8:	0c 4e       	ld.bu %d15,[%a4]14
800051aa:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
800051ae:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFU;
800051b0:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoUnderflowFlagStatus(asclinSFR))
800051b2:	ef bf 0a 00 	jz.t %d15,27,800051c6 <IfxAsclin_Asc_isrError+0x5a>
}


IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFUC = 1;
800051b6:	4c ff       	ld.w %d15,[%a15]60
800051b8:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
800051bc:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoUnderflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoUnderflow = 1;
800051be:	0c 4e       	ld.bu %d15,[%a4]14
800051c0:	b7 1f 81 f1 	insert %d15,%d15,1,3,1
800051c4:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.TFO;
800051c6:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getTxFifoOverflowFlagStatus(asclinSFR))
800051c8:	ef ef 0a 00 	jz.t %d15,30,800051dc <IfxAsclin_Asc_isrError+0x70>
}


IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.TFOC = 1;
800051cc:	4c ff       	ld.w %d15,[%a15]60
800051ce:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
800051d2:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearTxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.txFifoOverflow = 1;
800051d4:	0c 4e       	ld.bu %d15,[%a4]14
800051d6:	b7 1f 01 f2 	insert %d15,%d15,1,4,1
800051da:	2c 4e       	st.b [%a4]14,%d15
800051dc:	00 90       	ret 

800051de <IfxAsclin_Asc_resetSendCount>:
}


void IfxAsclin_Asc_resetSendCount(IfxAsclin_Asc *asclin)
{
    asclin->sendCount = 0;
800051de:	82 0f       	mov %d15,0
800051e0:	6c 44       	st.w [%a4]16,%d15
800051e2:	00 90       	ret 

800051e4 <IfxAsclin_Asc_canReadCount>:
}


boolean IfxAsclin_Asc_canReadCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canReadCount(asclin->rx, count, timeout);
800051e4:	99 44 08 00 	ld.a %a4,[%a4]8
800051e8:	1d 00 df 18 	j 800083a6 <Ifx_Fifo_canReadCount>

800051ec <IfxAsclin_Asc_flushTx>:

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800051ec:	82 f2       	mov %d2,-1
800051ee:	06 f2       	sh %d2,-1
800051f0:	ba f4       	eq %d15,%d4,-1
800051f2:	0b 52 00 f2 	and.eq %d15,%d2,%d5
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
}


boolean IfxAsclin_Asc_flushTx(IfxAsclin_Asc *asclin, Ifx_TickTime timeout)
{
800051f6:	40 4f       	mov.aa %a15,%a4
800051f8:	02 46       	mov %d6,%d4
    {
        deadLine = TIME_INFINITE;
800051fa:	82 f9       	mov %d9,-1
800051fc:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800051fe:	ee 16       	jnz %d15,8000522a <IfxAsclin_Asc_flushTx+0x3e>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80005200:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80005204:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80005208:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
8000520c:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000520e:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005212:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80005216:	02 39       	mov %d9,%d3
80005218:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000521c:	76 23       	jz %d2,80005222 <IfxAsclin_Asc_flushTx+0x36>
    {
        __enable();
8000521e:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80005222:	0b 69 40 90 	addx %d9,%d9,%d6
80005226:	0b 58 50 80 	addc %d8,%d8,%d5
 *
 * \return TRUE if the buffer is emptied.
 */
IFX_INLINE boolean Ifx_Fifo_flush(Ifx_Fifo *fifo, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(fifo, fifo->size, timeout);
8000522a:	c8 14       	ld.a %a4,[%a15]4
8000522c:	02 57       	mov %d7,%d5
8000522e:	c9 44 18 00 	ld.h %d4,[%a4]24
80005232:	6d 00 fd 19 	call 8000862c <Ifx_Fifo_canWriteCount>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80005236:	82 f4       	mov %d4,-1
80005238:	06 f4       	sh %d4,-1
    boolean      result;

    /* Flush the software FIFO */
    result = Ifx_Fifo_flush(asclin->tx, timeout);

    if (result)
8000523a:	f6 23       	jnz %d2,80005240 <IfxAsclin_Asc_flushTx+0x54>
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
    {
        deadLine = TIME_INFINITE;
8000523c:	82 02       	mov %d2,0
8000523e:	00 90       	ret 
    {
        /* Flush the hardware FIFO (wait until all bytes have been transmitted) */
        do
        {
            result = IfxAsclin_getTxFifoFillLevel(asclin->asclin) == 0;
80005240:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
80005242:	4c 23       	ld.w %d15,[%a2]12
80005244:	37 0f 65 f8 	extr.u %d15,%d15,16,5
        } while (!result && !IfxStm_isDeadLine(deadline));
80005248:	6e 1e       	jz %d15,80005284 <IfxAsclin_Asc_flushTx+0x98>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
8000524a:	ba f9       	eq %d15,%d9,-1
8000524c:	0b 84 00 f2 	and.eq %d15,%d4,%d8
80005250:	ee f9       	jnz %d15,80005242 <IfxAsclin_Asc_flushTx+0x56>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80005252:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80005256:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000525a:	0d 00 40 03 	disable 
8000525e:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80005260:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005264:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80005268:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000526c:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80005270:	76 23       	jz %d2,80005276 <IfxAsclin_Asc_flushTx+0x8a>
    {
        __enable();
80005272:	0d 00 00 03 	enable 
80005276:	0b 8f 00 21 	eq %d2,%d15,%d8
8000527a:	0b 93 30 22 	and.lt.u %d2,%d3,%d9
8000527e:	0b 8f 90 22 	or.lt %d2,%d15,%d8
80005282:	3c dc       	j 8000523a <IfxAsclin_Asc_flushTx+0x4e>
80005284:	82 12       	mov %d2,1
    }

    return result;
}
80005286:	00 90       	ret 

80005288 <IfxAsclin_Asc_canWriteCount>:
}


boolean IfxAsclin_Asc_canWriteCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(asclin->tx, count, timeout);
80005288:	99 44 04 00 	ld.a %a4,[%a4]4
8000528c:	1d 00 d0 19 	j 8000862c <Ifx_Fifo_canWriteCount>

80005290 <IfxAsclin_Asc_clearRx>:
}


void IfxAsclin_Asc_clearRx(IfxAsclin_Asc *asclin)
{
    IfxAsclin_flushRxFifo(asclin->asclin);
80005290:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
80005292:	4c f4       	ld.w %d15,[%a15]16
80005294:	96 01       	or %d15,1
80005296:	68 4f       	st.w [%a15]16,%d15
    Ifx_Fifo_clear(asclin->rx);
80005298:	99 44 08 00 	ld.a %a4,[%a4]8
8000529c:	1d 00 ad 19 	j 800085f6 <Ifx_Fifo_clear>

800052a0 <IfxAsclin_Asc_clearTx>:
}


void IfxAsclin_Asc_clearTx(IfxAsclin_Asc *asclin)
{
800052a0:	40 4f       	mov.aa %a15,%a4
    Ifx_Fifo_clear(asclin->tx);
800052a2:	99 44 04 00 	ld.a %a4,[%a4]4
800052a6:	6d 00 a8 19 	call 800085f6 <Ifx_Fifo_clear>
    IfxAsclin_flushTxFifo(asclin->asclin);
800052aa:	c8 0f       	ld.a %a15,[%a15]0
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
800052ac:	4c f3       	ld.w %d15,[%a15]12
800052ae:	96 01       	or %d15,1
800052b0:	68 3f       	st.w [%a15]12,%d15
800052b2:	00 90       	ret 

800052b4 <IfxAsclin_Asc_read>:
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
800052b4:	99 44 08 00 	ld.a %a4,[%a4]8
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
800052b8:	0b 45 10 68 	mov %e6,%d5,%d4
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
800052bc:	94 64       	ld.h %d4,[%a6]
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
800052be:	40 6f       	mov.aa %a15,%a6
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
800052c0:	6d 00 e0 18 	call 80008480 <Ifx_Fifo_read>

    *count -= left;
800052c4:	8c f0       	ld.h %d15,[%a15]0
800052c6:	a2 2f       	sub %d15,%d2
800052c8:	a8 0f       	st.h [%a15]0,%d15

    return left == 0;
}
800052ca:	8b 02 00 22 	eq %d2,%d2,0
800052ce:	00 90       	ret 

800052d0 <IfxAsclin_Asc_isrTransmit>:
    }
}

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
800052d0:	20 18       	sub.a %sp,24
800052d2:	40 4f       	mov.aa %a15,%a4
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800052d4:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
800052d8:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800052dc:	0d 00 40 03 	disable 
800052e0:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800052e2:	85 f5 10 00 	ld.w %d5,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800052e6:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800052ea:	02 52       	mov %d2,%d5
800052ec:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800052f0:	76 43       	jz %d4,800052f6 <IfxAsclin_Asc_isrTransmit+0x26>
    {
        __enable();
800052f2:	0d 00 00 03 	enable 
    asclin->txTimestamp = IfxStm_now();
800052f6:	89 f2 54 09 	st.d [%a15]20,%e2
    asclin->sendCount++;

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
800052fa:	c8 14       	ld.a %a4,[%a15]4

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
    asclin->txTimestamp = IfxStm_now();
    asclin->sendCount++;
800052fc:	4c f4       	ld.w %d15,[%a15]16
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
800052fe:	c9 44 04 00 	ld.h %d4,[%a4]4
80005302:	c2 1f       	add %d15,1
80005304:	68 4f       	st.w [%a15]16,%d15

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005306:	df 04 32 00 	jeq %d4,0,8000536a <IfxAsclin_Asc_isrTransmit+0x9a>
    {

        switch (asclin->dataBufferMode)
8000530a:	0c ff       	ld.bu %d15,[%a15]15
8000530c:	6e 03       	jz %d15,80005312 <IfxAsclin_Asc_isrTransmit+0x42>
8000530e:	9e 1d       	jeq %d15,1,80005348 <IfxAsclin_Asc_isrTransmit+0x78>
80005310:	00 90       	ret 
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
80005312:	c8 02       	ld.a %a2,[%a15]0
        case Ifx_DataBufferMode_normal:
        {

            uint8          ascData[16];
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;
80005314:	2c a7       	st.b [%sp]7,%d15

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/
80005316:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
8000531a:	4c 23       	ld.w %d15,[%a2]12
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
8000531c:	d2 06       	mov %e6,0
8000531e:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005322:	d9 a5 08 00 	lea %a5,[%sp]8
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
80005326:	2c a7       	st.b [%sp]7,%d15

            i_count          = (16 - hw_tx_fill_level);
80005328:	0c a7       	ld.bu %d15,[%sp]7
8000532a:	8b 0f 01 f1 	rsub %d15,%d15,16
8000532e:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80005332:	0b 4f 90 f1 	min.u %d15,%d15,%d4
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
80005336:	37 0f 50 40 	extr %d4,%d15,0,16
8000533a:	6d 00 a3 18 	call 80008480 <Ifx_Fifo_read>
            IfxAsclin_write8(asclin->asclin, &ascData[0], i_count);
8000533e:	c8 04       	ld.a %a4,[%a15]0
80005340:	d9 a5 08 00 	lea %a5,[%sp]8
80005344:	02 f4       	mov %d4,%d15
80005346:	3c 10       	j 80005366 <IfxAsclin_Asc_isrTransmit+0x96>
        {

            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
80005348:	d2 06       	mov %e6,0
8000534a:	d9 a5 08 00 	lea %a5,[%sp]8
8000534e:	3b c0 00 40 	mov %d4,12
80005352:	6d 00 97 18 	call 80008480 <Ifx_Fifo_read>

            ascData = packedData.data;
80005356:	39 af 10 00 	ld.bu %d15,[%sp]16
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
8000535a:	c8 04       	ld.a %a4,[%a15]0
            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);

            ascData = packedData.data;
8000535c:	d9 a5 18 00 	lea %a5,[%sp]24
80005360:	89 5f 2f f4 	st.b [+%a5]-17,%d15
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
80005364:	82 14       	mov %d4,1
        }
        break;
80005366:	1d ff e0 fe 	j 80005126 <IfxAsclin_write8>
    }
    else
    {

        /* Transmit buffer is empty */
        asclin->txInProgress = FALSE;
8000536a:	28 c4       	st.b [%a15]12,%d4
8000536c:	00 90       	ret 

8000536e <IfxAsclin_Asc_isrReceive>:

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
8000536e:	0c 4f       	ld.bu %d15,[%a4]15
    }
}


void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
80005370:	20 20       	sub.a %sp,32
80005372:	40 4f       	mov.aa %a15,%a4
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
80005374:	6e 34       	jz %d15,800053dc <IfxAsclin_Asc_isrReceive+0x6e>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
80005376:	82 18       	mov %d8,1

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
80005378:	df 1f 45 80 	jne %d15,1,80005402 <IfxAsclin_Asc_isrReceive+0x94>
    }
    case Ifx_DataBufferMode_timeStampSingle:
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
8000537c:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->RXFIFOCON.B.FILL;
8000537e:	4c 24       	ld.w %d15,[%a2]16
80005380:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005384:	6e 2b       	jz %d15,800053da <IfxAsclin_Asc_isrReceive+0x6c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80005386:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
8000538a:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000538e:	0d 00 40 03 	disable 
80005392:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80005394:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005398:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000539c:	8f 02 40 21 	or %d2,%d2,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800053a0:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800053a4:	76 33       	jz %d3,800053aa <IfxAsclin_Asc_isrReceive+0x3c>
    {
        __enable();
800053a6:	0d 00 00 03 	enable 
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
800053aa:	c8 04       	ld.a %a4,[%a15]0
800053ac:	d9 a5 10 00 	lea %a5,[%sp]16
800053b0:	82 14       	mov %d4,1
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
800053b2:	78 02       	st.w [%sp]8,%d15
800053b4:	59 a2 04 00 	st.w [%sp]4,%d2
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
800053b8:	6d ff 7a fd 	call 80004eac <IfxAsclin_read8>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
800053bc:	c8 24       	ld.a %a4,[%a15]8

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
800053be:	39 af 10 00 	ld.bu %d15,[%sp]16

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
800053c2:	d2 06       	mov %e6,0
800053c4:	d9 a5 04 00 	lea %a5,[%sp]4
800053c8:	3b c0 00 40 	mov %d4,12

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
800053cc:	2c ac       	st.b [%sp]12,%d15

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
800053ce:	6d 00 a7 19 	call 8000871c <Ifx_Fifo_write>
800053d2:	df 02 d5 7f 	jeq %d2,0,8000537c <IfxAsclin_Asc_isrReceive+0xe>
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
800053d6:	28 d8       	st.b [%a15]13,%d8
800053d8:	3c d2       	j 8000537c <IfxAsclin_Asc_isrReceive+0xe>
800053da:	00 90       	ret 
    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
    {
        uint8 count;
        count = IfxAsclin_getRxFifoFillLevel(asclin->asclin);
800053dc:	d4 44       	ld.a %a4,[%a4]
        IfxAsclin_read8(asclin->asclin, &ascData[0], count);
800053de:	d9 a5 10 00 	lea %a5,[%sp]16
800053e2:	4c 44       	ld.w %d15,[%a4]16
800053e4:	37 0f 65 f8 	extr.u %d15,%d15,16,5
800053e8:	02 f4       	mov %d4,%d15
800053ea:	6d ff 61 fd 	call 80004eac <IfxAsclin_read8>

        if (Ifx_Fifo_write(asclin->rx, &ascData[0], count, TIME_NULL) != 0)
800053ee:	c8 24       	ld.a %a4,[%a15]8
800053f0:	d2 06       	mov %e6,0
800053f2:	d9 a5 10 00 	lea %a5,[%sp]16
800053f6:	02 f4       	mov %d4,%d15
800053f8:	6d 00 92 19 	call 8000871c <Ifx_Fifo_write>
800053fc:	76 23       	jz %d2,80005402 <IfxAsclin_Asc_isrReceive+0x94>
        {
            /* Receive buffer is full, data is discard */
            asclin->rxSwFifoOverflow = TRUE;
800053fe:	82 1f       	mov %d15,1
80005400:	28 df       	st.b [%a15]13,%d15
80005402:	00 90       	ret 

80005404 <IfxAsclin_Asc_blockingRead>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
80005404:	20 08       	sub.a %sp,8
    Ifx_SizeT count = 1;
80005406:	82 1f       	mov %d15,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
80005408:	40 4f       	mov.aa %a15,%a4
    Ifx_SizeT count = 1;
8000540a:	ac a3       	st.h [%sp]6,%d15
    uint8     data;

    while (IfxAsclin_Asc_read(asclin, &data, &count, TIME_INFINITE) != TRUE)
8000540c:	82 f4       	mov %d4,-1
8000540e:	40 f4       	mov.aa %a4,%a15
80005410:	d9 a5 05 00 	lea %a5,[%sp]5
80005414:	d9 a6 06 00 	lea %a6,[%sp]6
80005418:	9b 04 00 58 	addih %d5,%d4,32768
8000541c:	6d ff 4c ff 	call 800052b4 <IfxAsclin_Asc_read>
80005420:	df 12 f6 ff 	jne %d2,1,8000540c <IfxAsclin_Asc_blockingRead+0x8>
    {}

    return data;
}
80005424:	39 a2 05 00 	ld.bu %d2,[%sp]5
80005428:	00 90       	ret 

8000542a <IfxAsclin_Asc_disableModule>:
}


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
8000542a:	cc 40       	ld.a %a15,[%a4]0
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
8000542c:	6d 00 c5 0f 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
80005430:	02 24       	mov %d4,%d2


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
80005432:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
80005434:	6d 00 c1 0e 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
80005438:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclinSFR); /* disabling the module */
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
8000543a:	02 f4       	mov %d4,%d15
8000543c:	8f 12 40 21 	or %d2,%d2,1
80005440:	68 02       	st.w [%a15]0,%d2
80005442:	1d 00 ef 0f 	j 80007420 <IfxScuWdt_setCpuEndinit>

80005446 <IfxAsclin_Asc_initModule>:
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
80005446:	cc 50       	ld.a %a15,[%a5]0
    return &asclin->tx->eventWriter;
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
80005448:	40 4e       	mov.aa %a14,%a4
8000544a:	40 5c       	mov.aa %a12,%a5
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
    IfxAsclin_Status status    = IfxAsclin_Status_noError;

    asclin->asclin = asclinSFR;                                         /* adding register pointer to module handler*/
8000544c:	ec 40       	st.a [%a4]0,%a15

    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
8000544e:	40 f4       	mov.aa %a4,%a15
80005450:	6d ff 71 fc 	call 80004d32 <IfxAsclin_enableModule>
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
80005454:	40 f4       	mov.aa %a4,%a15
80005456:	82 04       	mov %d4,0
80005458:	6d ff 59 fd 	call 80004f0a <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
8000545c:	4c f6       	ld.w %d15,[%a15]24
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
8000545e:	40 f4       	mov.aa %a4,%a15
80005460:	b7 0f 02 f8 	insert %d15,%d15,0,16,2
80005464:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
80005466:	8c c4       	ld.h %d15,[%a12]8
80005468:	48 52       	ld.w %d2,[%a15]20
8000546a:	c2 ff       	add %d15,-1
8000546c:	37 f2 0c f0 	insert %d15,%d2,%d15,0,12
80005470:	68 5f       	st.w [%a15]20,%d15
80005472:	39 c4 28 00 	ld.bu %d4,[%a12]40
80005476:	6d ff 4a fd 	call 80004f0a <IfxAsclin_setClockSource>
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
8000547a:	40 f4       	mov.aa %a4,%a15
8000547c:	19 c4 04 00 	ld.w %d4,[%a12]4
80005480:	39 c5 0a 00 	ld.bu %d5,[%a12]10
80005484:	39 c6 0d 00 	ld.bu %d6,[%a12]13
80005488:	39 c7 0c 00 	ld.bu %d7,[%a12]12
8000548c:	6d ff 79 fd 	call 80004f7e <IfxAsclin_setBitTiming>
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
80005490:	40 f4       	mov.aa %a4,%a15
80005492:	82 04       	mov %d4,0
    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
80005494:	02 29       	mov %d9,%d2
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
80005496:	6d ff 3a fd 	call 80004f0a <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.LB = enable ? 1 : 0;
8000549a:	39 c2 38 00 	ld.bu %d2,[%a12]56
8000549e:	7b 00 00 f1 	movh %d15,4096
800054a2:	ab 0f 80 22 	sel %d2,%d2,%d15,0
800054a6:	4c f1       	ld.w %d15,[%a15]4
800054a8:	b7 0f 01 fe 	insert %d15,%d15,0,28,1
800054ac:	a6 2f       	or %d15,%d2
800054ae:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FRAMECON.B.PEN = enable ? 1 : 0;
800054b0:	39 c2 14 00 	ld.bu %d2,[%a12]20
800054b4:	7b 00 00 f4 	movh %d15,16384
800054b8:	ab 0f 80 22 	sel %d2,%d2,%d15,0
800054bc:	4c f6       	ld.w %d15,[%a15]24
800054be:	b7 0f 01 ff 	insert %d15,%d15,0,30,1
800054c2:	a6 2f       	or %d15,%d2
800054c4:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type)
{
    asclin->FRAMECON.B.ODD = type;
800054c6:	48 62       	ld.w %d2,[%a15]24
800054c8:	39 cf 12 00 	ld.bu %d15,[%a12]18
800054cc:	37 f2 81 ff 	insert %d15,%d2,%d15,31,1
800054d0:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit)
{
    asclin->FRAMECON.B.STOP = stopBit;
800054d2:	48 62       	ld.w %d2,[%a15]24
800054d4:	0c cf       	ld.bu %d15,[%a12]15
800054d6:	37 f2 83 f4 	insert %d15,%d2,%d15,9,3
800054da:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir)
{
    asclin->FRAMECON.B.MSB = dir;
800054dc:	48 62       	ld.w %d2,[%a15]24
800054de:	39 cf 11 00 	ld.bu %d15,[%a12]17
800054e2:	67 f2 1c f0 	ins.t %d15,%d2,28,%d15,0
800054e6:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
{
    asclin->DATCON.B.DATLEN = length;
800054e8:	48 72       	ld.w %d2,[%a15]28
800054ea:	39 cf 13 00 	ld.bu %d15,[%a12]19
800054ee:	37 f2 04 f0 	insert %d15,%d2,%d15,0,4
800054f2:	68 7f       	st.w [%a15]28,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width)
{
    asclin->TXFIFOCON.B.INW = width;
800054f4:	48 32       	ld.w %d2,[%a15]12
800054f6:	39 cf 16 00 	ld.bu %d15,[%a12]22
800054fa:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
800054fe:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width)
{
    asclin->RXFIFOCON.B.OUTW = width;
80005500:	48 42       	ld.w %d2,[%a15]16
80005502:	39 cf 17 00 	ld.bu %d15,[%a12]23
80005506:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
8000550a:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
{
    asclin->FRAMECON.B.IDLE = delay;
8000550c:	48 62       	ld.w %d2,[%a15]24
8000550e:	0c ce       	ld.bu %d15,[%a12]14
80005510:	37 f2 03 f3 	insert %d15,%d2,%d15,6,3
80005514:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level)
{
    asclin->TXFIFOCON.B.INTLEVEL = __minu(level, 15);
80005516:	39 c2 18 00 	ld.bu %d2,[%a12]24
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000551a:	da 0f       	mov %d15,15
8000551c:	0b f2 90 21 	min.u %d2,%d2,%d15
80005520:	48 33       	ld.w %d3,[%a15]12
80005522:	37 23 04 24 	insert %d2,%d3,%d2,8,4
80005526:	68 32       	st.w [%a15]12,%d2
}


IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level)
{
    asclin->RXFIFOCON.B.INTLEVEL = __minu(level, 15);
80005528:	39 c2 19 00 	ld.bu %d2,[%a12]25
8000552c:	0b f2 90 f1 	min.u %d15,%d2,%d15
80005530:	48 42       	ld.w %d2,[%a15]16
80005532:	37 f2 04 f4 	insert %d15,%d2,%d15,8,4
80005536:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
80005538:	39 cf 10 00 	ld.bu %d15,[%a12]16
8000553c:	48 62       	ld.w %d2,[%a15]24
8000553e:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
80005542:	68 6f       	st.w [%a15]24,%d15
    IfxAsclin_setTxFifoInterruptLevel(asclinSFR, config->fifo.txFifoInterruptLevel); /* setting Tx FIFO level at which a Tx interrupt will be triggered*/
    IfxAsclin_setRxFifoInterruptLevel(asclinSFR, config->fifo.rxFifoInterruptLevel); /* setting Rx FIFO interrupt level at which a Rx interrupt will be triggered*/
    IfxAsclin_setFrameMode(asclinSFR, config->frame.frameMode);                      /* selecting the frame mode*/

    /* Pin mapping */
    const IfxAsclin_Asc_Pins *pins = config->pins;
80005544:	99 cd 24 00 	ld.a %a13,[%a12]36

    if (pins != NULL_PTR)
80005548:	bd 0d 81 00 	jz.a %a13,8000564a <IfxAsclin_Asc_initModule+0x204>
    {
        IfxAsclin_Cts_In *cts = pins->cts;
8000554c:	4c d0       	ld.w %d15,[%a13]0

        if (cts != NULL_PTR)
8000554e:	6e 27       	jz %d15,8000559c <IfxAsclin_Asc_initModule+0x156>
}


IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (cts->pin.port != NULL_PTR)
80005550:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initCtsPin(cts, pins->ctsMode, pins->pinDriver);
80005552:	79 d5 04 00 	ld.b %d5,[%a13]4
80005556:	99 24 04 00 	ld.a %a4,[%a2]4
8000555a:	39 d8 1d 00 	ld.bu %d8,[%a13]29
8000555e:	bd 04 1f 00 	jz.a %a4,8000559c <IfxAsclin_Asc_initModule+0x156>
80005562:	39 24 08 00 	ld.bu %d4,[%a2]8
80005566:	8f f5 0f 51 	and %d5,%d5,255
8000556a:	6d 00 ba 03 	call 80005cde <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
8000556e:	60 f3       	mov.a %a3,%d15
80005570:	02 85       	mov %d5,%d8
80005572:	99 34 04 00 	ld.a %a4,[%a3]4
80005576:	39 34 08 00 	ld.bu %d4,[%a3]8
8000557a:	6d 00 30 04 	call 80005dda <IfxPort_setPinPadDriver>
        IfxAsclin_enableCts(cts->module, TRUE);
8000557e:	60 f3       	mov.a %a3,%d15
80005580:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.CTSEN = enable ? 1 : 0;
80005582:	19 22 04 00 	ld.w %d2,[%a2]4
80005586:	b7 f2 81 2e 	insert %d2,%d2,15,29,1
8000558a:	59 22 04 00 	st.w [%a2]4,%d2
    if (cts->pin.port != NULL_PTR)
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
        IfxAsclin_enableCts(cts->module, TRUE);
        IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
8000558e:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
{
    asclin->IOCR.B.CTS = ctsi;
80005590:	0c 3c       	ld.bu %d15,[%a3]12
80005592:	19 22 04 00 	ld.w %d2,[%a2]4
80005596:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
8000559a:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rx_In *rx = pins->rx;
8000559c:	4c d2       	ld.w %d15,[%a13]8

        if (rx != NULL_PTR)
8000559e:	6e 20       	jz %d15,800055de <IfxAsclin_Asc_initModule+0x198>
}


IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (rx->pin.port != NULL_PTR)
800055a0:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initRxPin(rx, pins->rxMode, pins->pinDriver);
800055a2:	79 d5 0c 00 	ld.b %d5,[%a13]12
800055a6:	99 24 04 00 	ld.a %a4,[%a2]4
800055aa:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800055ae:	bd 04 18 00 	jz.a %a4,800055de <IfxAsclin_Asc_initModule+0x198>
800055b2:	39 24 08 00 	ld.bu %d4,[%a2]8
800055b6:	8f f5 0f 51 	and %d5,%d5,255
800055ba:	6d 00 92 03 	call 80005cde <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
800055be:	60 f3       	mov.a %a3,%d15
800055c0:	02 85       	mov %d5,%d8
800055c2:	99 34 04 00 	ld.a %a4,[%a3]4
800055c6:	39 34 08 00 	ld.bu %d4,[%a3]8
800055ca:	6d 00 08 04 	call 80005dda <IfxPort_setPinPadDriver>
        IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
800055ce:	60 f3       	mov.a %a3,%d15
800055d0:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti)
{
    asclin->IOCR.B.ALTI = alti;
800055d2:	0c 3c       	ld.bu %d15,[%a3]12
800055d4:	19 22 04 00 	ld.w %d2,[%a2]4
800055d8:	37 f2 03 f0 	insert %d15,%d2,%d15,0,3
800055dc:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rts_Out *rts = pins->rts;
800055de:	4c d4       	ld.w %d15,[%a13]16

        if (rts != NULL_PTR)
800055e0:	6e 1a       	jz %d15,80005614 <IfxAsclin_Asc_initModule+0x1ce>
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
800055e2:	60 f2       	mov.a %a2,%d15
800055e4:	39 d2 14 00 	ld.bu %d2,[%a13]20
800055e8:	39 23 0c 00 	ld.bu %d3,[%a2]12
800055ec:	99 24 04 00 	ld.a %a4,[%a2]4
800055f0:	0f 23 a0 50 	or %d5,%d3,%d2
800055f4:	39 24 08 00 	ld.bu %d4,[%a2]8
800055f8:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initRtsPin(rts, pins->rtsMode, pins->pinDriver);
800055fc:	39 d8 1d 00 	ld.bu %d8,[%a13]29
80005600:	6d 00 6f 03 	call 80005cde <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
    IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
80005604:	60 f3       	mov.a %a3,%d15
80005606:	02 85       	mov %d5,%d8
80005608:	99 34 04 00 	ld.a %a4,[%a3]4
8000560c:	39 34 08 00 	ld.bu %d4,[%a3]8
80005610:	6d 00 e5 03 	call 80005dda <IfxPort_setPinPadDriver>
        }

        IfxAsclin_Tx_Out *tx = pins->tx;
80005614:	4c d6       	ld.w %d15,[%a13]24

        if (tx != NULL_PTR)
80005616:	6e 1a       	jz %d15,8000564a <IfxAsclin_Asc_initModule+0x204>
80005618:	60 f2       	mov.a %a2,%d15
8000561a:	39 d2 1c 00 	ld.bu %d2,[%a13]28
8000561e:	39 23 0c 00 	ld.bu %d3,[%a2]12
80005622:	99 24 04 00 	ld.a %a4,[%a2]4
80005626:	0f 23 a0 50 	or %d5,%d3,%d2
8000562a:	39 24 08 00 	ld.bu %d4,[%a2]8
8000562e:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initTxPin(tx, pins->txMode, pins->pinDriver);
80005632:	39 d8 1d 00 	ld.bu %d8,[%a13]29
80005636:	6d 00 54 03 	call 80005cde <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
    IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
8000563a:	60 f3       	mov.a %a3,%d15
8000563c:	02 85       	mov %d5,%d8
8000563e:	99 34 04 00 	ld.a %a4,[%a3]4
80005642:	39 34 08 00 	ld.bu %d4,[%a3]8
80005646:	6d 00 ca 03 	call 80005dda <IfxPort_setPinPadDriver>
        }
    }

    IfxAsclin_setClockSource(asclinSFR, config->clockSource); /* select the clock source*/
8000564a:	40 f4       	mov.aa %a4,%a15
8000564c:	39 c4 28 00 	ld.bu %d4,[%a12]40
80005650:	6d ff 5d fc 	call 80004f0a <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSENABLE.U = 0x00000000;
80005654:	82 0f       	mov %d15,0
80005656:	59 ff 00 10 	st.w [%a15]64,%d15
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
8000565a:	82 f2       	mov %d2,-1
8000565c:	68 f2       	st.w [%a15]60,%d2

    IfxAsclin_disableAllFlags(asclinSFR);                     /* disable all flags */
    IfxAsclin_clearAllFlags(asclinSFR);                       /* clear all flags */

    /* HW error flags */
    asclin->errorFlags.ALL = 0;
8000565e:	2c ee       	st.b [%a14]14,%d15

    if (config->errorFlags.flags.parityError)
80005660:	4c ca       	ld.w %d15,[%a12]40
80005662:	2e 87       	jz.t %d15,8,80005670 <IfxAsclin_Asc_initModule+0x22a>
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80005664:	19 ff 00 10 	ld.w %d15,[%a15]64
80005668:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000566c:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableParityErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.frameError)
80005670:	4c ca       	ld.w %d15,[%a12]40
80005672:	2e 97       	jz.t %d15,9,80005680 <IfxAsclin_Asc_initModule+0x23a>
}


IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
80005674:	19 ff 00 10 	ld.w %d15,[%a15]64
80005678:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
8000567c:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableFrameErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoOverflow)
80005680:	4c ca       	ld.w %d15,[%a12]40
80005682:	2e a7       	jz.t %d15,10,80005690 <IfxAsclin_Asc_initModule+0x24a>
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
80005684:	19 ff 00 10 	ld.w %d15,[%a15]64
80005688:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
8000568c:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoOverflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoUnderflow)
80005690:	4c ca       	ld.w %d15,[%a12]40
80005692:	2e b7       	jz.t %d15,11,800056a0 <IfxAsclin_Asc_initModule+0x25a>
}


IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
80005694:	19 ff 00 10 	ld.w %d15,[%a15]64
80005698:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
8000569c:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoUnderflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.txFifoOverflow)
800056a0:	4c ca       	ld.w %d15,[%a12]40
800056a2:	2e c7       	jz.t %d15,12,800056b0 <IfxAsclin_Asc_initModule+0x26a>
}


IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
800056a4:	19 ff 00 10 	ld.w %d15,[%a15]64
800056a8:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
800056ac:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableTxFifoOverflowFlag(asclinSFR, TRUE);
    }

    /* transmission flags */
    asclin->rxSwFifoOverflow = FALSE;
800056b0:	82 0f       	mov %d15,0
800056b2:	2c ed       	st.b [%a14]13,%d15
    asclin->txInProgress     = FALSE;
800056b4:	2c ec       	st.b [%a14]12,%d15

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
800056b6:	d2 04       	mov %e4,0
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
800056b8:	39 c3 39 00 	ld.bu %d3,[%a12]57
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;
800056bc:	82 0f       	mov %d15,0
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
800056be:	89 e4 54 09 	st.d [%a14]20,%e4
    asclin->sendCount      = 0;
800056c2:	6c e4       	st.w [%a14]16,%d15
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
800056c4:	e9 e3 0f 00 	st.b [%a14]15,%d3
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
        elementSize = 1;
800056c8:	82 1f       	mov %d15,1
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
800056ca:	76 34       	jz %d3,800056d2 <IfxAsclin_Asc_initModule+0x28c>
        break;
    case Ifx_DataBufferMode_timeStampSingle:
        elementSize = sizeof(Ifx_DataBufferMode_TimeStampSingle);
        break;
    default:
        elementSize = 0;
800056cc:	ba 13       	eq %d15,%d3,1
800056ce:	ab cf a0 ff 	seln %d15,%d15,%d15,12
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
800056d2:	99 c4 2c 00 	ld.a %a4,[%a12]44
800056d6:	c9 c4 2a 00 	ld.h %d4,[%a12]42
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
800056da:	02 f5       	mov %d5,%d15
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
800056dc:	bc 44       	jz.a %a4,800056e4 <IfxAsclin_Asc_initModule+0x29e>
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
800056de:	6d 00 36 16 	call 8000834a <Ifx_Fifo_init>
800056e2:	3c 03       	j 800056e8 <IfxAsclin_Asc_initModule+0x2a2>
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
800056e4:	6d 00 50 16 	call 80008384 <Ifx_Fifo_create>
    }

    if (config->rxBuffer != NULL_PTR)
800056e8:	99 c4 34 00 	ld.a %a4,[%a12]52
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
800056ec:	b5 e2 04 00 	st.a [%a14]4,%a2
800056f0:	c9 c4 30 00 	ld.h %d4,[%a12]48
    }

    if (config->rxBuffer != NULL_PTR)
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
800056f4:	02 f5       	mov %d5,%d15
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
    }

    if (config->rxBuffer != NULL_PTR)
800056f6:	bc 44       	jz.a %a4,800056fe <IfxAsclin_Asc_initModule+0x2b8>
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
800056f8:	6d 00 29 16 	call 8000834a <Ifx_Fifo_init>
800056fc:	3c 03       	j 80005702 <IfxAsclin_Asc_initModule+0x2bc>
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
800056fe:	6d 00 43 16 	call 80008384 <Ifx_Fifo_create>
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;
80005702:	39 cf 22 00 	ld.bu %d15,[%a12]34

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
80005706:	b9 c2 1e 00 	ld.hu %d2,[%a12]30
8000570a:	8b 3f 00 82 	eq %d8,%d15,3
8000570e:	02 83       	mov %d3,%d8
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
80005710:	b5 e2 08 00 	st.a [%a14]8,%a2
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
80005714:	8b 02 00 35 	or.ne %d3,%d2,0
80005718:	df 03 1e 00 	jeq %d3,0,80005754 <IfxAsclin_Asc_initModule+0x30e>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerRx(asclinSFR);
8000571c:	40 f4       	mov.aa %a4,%a15
8000571e:	6d ff a1 fb 	call 80004e60 <IfxAsclin_getSrcPointerRx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80005722:	54 22       	ld.w %d2,[%a2]
80005724:	39 c3 1e 00 	ld.bu %d3,[%a12]30
80005728:	8f f2 cf 21 	andn %d2,%d2,255
8000572c:	a6 32       	or %d2,%d3
8000572e:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80005730:	54 22       	ld.w %d2,[%a2]
80005732:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
80005736:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80005738:	54 22       	ld.w %d2,[%a2]
8000573a:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
8000573e:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
80005740:	19 f2 00 10 	ld.w %d2,[%a15]64
80005744:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
80005748:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
8000574c:	54 22       	ld.w %d2,[%a2]
8000574e:	b7 f2 01 25 	insert %d2,%d2,15,10,1
80005752:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.rxPriority);
        IfxAsclin_enableRxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if ((config->interrupt.txPriority > 0) || (tos == IfxSrc_Tos_dma))
80005754:	b9 c2 1c 00 	ld.hu %d2,[%a12]28
80005758:	8b 02 00 85 	or.ne %d8,%d2,0
8000575c:	df 08 1e 00 	jeq %d8,0,80005798 <IfxAsclin_Asc_initModule+0x352>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerTx(asclinSFR);
80005760:	40 f4       	mov.aa %a4,%a15
80005762:	6d ff 89 fb 	call 80004e74 <IfxAsclin_getSrcPointerTx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80005766:	54 22       	ld.w %d2,[%a2]
80005768:	39 c3 1c 00 	ld.bu %d3,[%a12]28
8000576c:	8f f2 cf 21 	andn %d2,%d2,255
80005770:	a6 32       	or %d2,%d3
80005772:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80005774:	54 22       	ld.w %d2,[%a2]
80005776:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
8000577a:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
8000577c:	54 22       	ld.w %d2,[%a2]
8000577e:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
80005782:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
80005784:	19 f2 00 10 	ld.w %d2,[%a15]64
80005788:	b7 f2 81 2f 	insert %d2,%d2,15,31,1
8000578c:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80005790:	54 22       	ld.w %d2,[%a2]
80005792:	b7 f2 01 25 	insert %d2,%d2,15,10,1
80005796:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.txPriority);
        IfxAsclin_enableTxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if (config->interrupt.erPriority > 0) /*These interrupts are not serviced by dma*/
80005798:	b9 c2 20 00 	ld.hu %d2,[%a12]32
8000579c:	df 02 1e 00 	jeq %d2,0,800057d8 <IfxAsclin_Asc_initModule+0x392>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerEr(asclinSFR);
800057a0:	40 f4       	mov.aa %a4,%a15
800057a2:	6d ff 55 fb 	call 80004e4c <IfxAsclin_getSrcPointerEr>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
800057a6:	54 22       	ld.w %d2,[%a2]
800057a8:	39 c3 20 00 	ld.bu %d3,[%a12]32
800057ac:	8f f2 cf 21 	andn %d2,%d2,255
800057b0:	a6 32       	or %d2,%d3
800057b2:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800057b4:	54 22       	ld.w %d2,[%a2]
800057b6:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
800057ba:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800057bc:	4c 20       	ld.w %d15,[%a2]0
800057be:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
800057c2:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
800057c4:	19 ff 00 10 	ld.w %d15,[%a15]64
800057c8:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
800057cc:	59 ff 00 10 	st.w [%a15]64,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
800057d0:	4c 20       	ld.w %d15,[%a2]0
800057d2:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
800057d6:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
800057d8:	4c f4       	ld.w %d15,[%a15]16

    IfxAsclin_flushRxFifo(asclinSFR);              // flushing Rx FIFO
    IfxAsclin_flushTxFifo(asclinSFR);              // flushing Tx FIFO

    return status;
}
800057da:	02 92       	mov %d2,%d9
800057dc:	96 02       	or %d15,2
800057de:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
800057e0:	4c f3       	ld.w %d15,[%a15]12
800057e2:	96 02       	or %d15,2
800057e4:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
800057e6:	4c f4       	ld.w %d15,[%a15]16
800057e8:	96 01       	or %d15,1
800057ea:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
800057ec:	4c f3       	ld.w %d15,[%a15]12
800057ee:	96 01       	or %d15,1
800057f0:	68 3f       	st.w [%a15]12,%d15
800057f2:	00 90       	ret 

800057f4 <IfxAsclin_Asc_initModuleConfig>:

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
800057f4:	82 12       	mov %d2,1
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
800057f6:	7b 10 7e 34 	movh %d3,18401

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
800057fa:	e9 42 28 00 	st.b [%a4]40,%d2
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
800057fe:	82 12       	mov %d2,1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
80005800:	82 0f       	mov %d15,0

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
80005802:	f9 42 08 00 	st.h [%a4]8,%d2
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
80005806:	59 43 04 00 	st.w [%a4]4,%d3
    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
8000580a:	e9 42 0f 00 	st.b [%a4]15,%d2

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
8000580e:	82 33       	mov %d3,3
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
80005810:	e9 42 10 00 	st.b [%a4]16,%d2
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
80005814:	e9 42 16 00 	st.b [%a4]22,%d2
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
80005818:	e9 42 17 00 	st.b [%a4]23,%d2
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
8000581c:	82 f2       	mov %d2,-1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
8000581e:	e9 4f 38 00 	st.b [%a4]56,%d15

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
80005822:	e9 43 0a 00 	st.b [%a4]10,%d3

    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
80005826:	2c 4c       	st.b [%a4]12,%d15
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
80005828:	e9 43 0d 00 	st.b [%a4]13,%d3
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
8000582c:	2c 4e       	st.b [%a4]14,%d15
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
8000582e:	e9 4f 11 00 	st.b [%a4]17,%d15
    config->frame.parityBit               = FALSE;                             /* disable parity*/
80005832:	e9 4f 14 00 	st.b [%a4]20,%d15
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
80005836:	e9 4f 12 00 	st.b [%a4]18,%d15
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
8000583a:	82 73       	mov %d3,7

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
8000583c:	e9 4f 18 00 	st.b [%a4]24,%d15
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
80005840:	e9 4f 19 00 	st.b [%a4]25,%d15
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/
80005844:	e9 4f 1a 00 	st.b [%a4]26,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
80005848:	e9 42 29 00 	st.b [%a4]41,%d2
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
8000584c:	82 0f       	mov %d15,0

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
8000584e:	82 02       	mov %d2,0
}


void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;
80005850:	f4 45       	st.a [%a4],%a5
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
80005852:	e9 43 13 00 	st.b [%a4]19,%d3
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
80005856:	ac 4f       	st.h [%a4]30,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
80005858:	ac 4e       	st.h [%a4]28,%d15
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
8000585a:	f9 4f 20 00 	st.h [%a4]32,%d15
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/
8000585e:	e9 4f 22 00 	st.b [%a4]34,%d15

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
80005862:	59 42 24 00 	st.w [%a4]36,%d2
    config->rxBuffer       = NULL_PTR;                                         /* Rx Fifo buffer*/
80005866:	59 42 34 00 	st.w [%a4]52,%d2
    config->txBuffer       = NULL_PTR;                                         /* Tx Fifo buffer*/
8000586a:	59 42 2c 00 	st.w [%a4]44,%d2

    config->txBufferSize   = 0;                                                /* Rx Fifo buffer size*/
8000586e:	f9 42 2a 00 	st.h [%a4]42,%d2
    config->rxBufferSize   = 0;                                                /* Rx Fifo buffer size*/
80005872:	f9 42 30 00 	st.h [%a4]48,%d2

    config->dataBufferMode = Ifx_DataBufferMode_normal;
80005876:	e9 4f 39 00 	st.b [%a4]57,%d15
8000587a:	00 90       	ret 

8000587c <IfxAsclin_Asc_initiateTransmission>:
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
8000587c:	0c 4c       	ld.bu %d15,[%a4]12
    config->dataBufferMode = Ifx_DataBufferMode_normal;
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
8000587e:	20 10       	sub.a %sp,16
80005880:	40 4f       	mov.aa %a15,%a4
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
80005882:	ee 20       	jnz %d15,800058c2 <IfxAsclin_Asc_initiateTransmission+0x46>
    {

        if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005884:	99 44 04 00 	ld.a %a4,[%a4]4
80005888:	8c 42       	ld.h %d15,[%a4]4
8000588a:	6e 1c       	jz %d15,800058c2 <IfxAsclin_Asc_initiateTransmission+0x46>
        {
            uint8 data;

            asclin->txInProgress = TRUE;
8000588c:	82 1f       	mov %d15,1
8000588e:	28 cf       	st.b [%a15]12,%d15

            switch (asclin->dataBufferMode)
80005890:	0c ff       	ld.bu %d15,[%a15]15
80005892:	6e 0c       	jz %d15,800058aa <IfxAsclin_Asc_initiateTransmission+0x2e>
80005894:	de 11       	jne %d15,1,800058b6 <IfxAsclin_Asc_initiateTransmission+0x3a>
            break;
            case Ifx_DataBufferMode_timeStampSingle:
            {

                Ifx_DataBufferMode_TimeStampSingle packedData;
                Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
80005896:	d2 06       	mov %e6,0
80005898:	d9 a5 04 00 	lea %a5,[%sp]4
8000589c:	3b c0 00 40 	mov %d4,12
800058a0:	6d 00 f0 15 	call 80008480 <Ifx_Fifo_read>
                data = packedData.data;
800058a4:	0c ac       	ld.bu %d15,[%sp]12
800058a6:	2c a3       	st.b [%sp]3,%d15
800058a8:	3c 07       	j 800058b6 <IfxAsclin_Asc_initiateTransmission+0x3a>
            switch (asclin->dataBufferMode)
            {
            case Ifx_DataBufferMode_normal: // here
            {

                Ifx_Fifo_read(asclin->tx, &data, 1, TIME_NULL);
800058aa:	d2 06       	mov %e6,0
800058ac:	d9 a5 03 00 	lea %a5,[%sp]3
800058b0:	82 14       	mov %d4,1
800058b2:	6d 00 e7 15 	call 80008480 <Ifx_Fifo_read>
                data = packedData.data;
            }
            break;
            }

            IfxAsclin_write8(asclin->asclin, &data, 1);
800058b6:	c8 04       	ld.a %a4,[%a15]0
800058b8:	d9 a5 03 00 	lea %a5,[%sp]3
800058bc:	82 14       	mov %d4,1
800058be:	6d ff 34 fc 	call 80005126 <IfxAsclin_write8>
800058c2:	00 90       	ret 

800058c4 <IfxAsclin_Asc_write>:
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
800058c4:	40 4f       	mov.aa %a15,%a4

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
800058c6:	0c 4c       	ld.bu %d15,[%a4]12
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
800058c8:	99 44 04 00 	ld.a %a4,[%a4]4

    if (*count != 0)
800058cc:	94 63       	ld.h %d3,[%a6]
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
800058ce:	0b 45 10 88 	mov %e8,%d5,%d4
800058d2:	40 5d       	mov.aa %a13,%a5

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
800058d4:	c9 44 18 00 	ld.h %d4,[%a4]24
#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
800058d8:	82 12       	mov %d2,1
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;

    if (*count != 0)
800058da:	df 03 25 00 	jeq %d3,0,80005924 <IfxAsclin_Asc_write+0x60>
800058de:	40 6c       	mov.aa %a12,%a6
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
800058e0:	ee 13       	jnz %d15,80005906 <IfxAsclin_Asc_write+0x42>
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
800058e2:	37 04 70 f0 	extr.u %d15,%d4,0,16

    if (*count != 0)
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
800058e6:	7f 3f 10 00 	jge %d15,%d3,80005906 <IfxAsclin_Asc_write+0x42>
        {


            Ifx_Fifo_write(asclin->tx, data, tx_fifo_size, timeout); /*Fill upto the S/W FIFO size and initiate transmission*/
800058ea:	0b 89 10 68 	mov %e6,%d9,%d8
800058ee:	6d 00 17 17 	call 8000871c <Ifx_Fifo_write>
            IfxAsclin_Asc_initiateTransmission(asclin);
800058f2:	40 f4       	mov.aa %a4,%a15
800058f4:	6d ff c4 ff 	call 8000587c <IfxAsclin_Asc_initiateTransmission>

            left = Ifx_Fifo_write(asclin->tx, (((const uint8 *)data) + tx_fifo_size), (*count) - tx_fifo_size, timeout);
800058f8:	94 c4       	ld.h %d4,[%a12]
800058fa:	c8 14       	ld.a %a4,[%a15]4
800058fc:	a2 f4       	sub %d4,%d15
800058fe:	10 d5       	addsc.a %a5,%a13,%d15,0
80005900:	37 04 50 40 	extr %d4,%d4,0,16
80005904:	3c 03       	j 8000590a <IfxAsclin_Asc_write+0x46>

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
80005906:	40 d5       	mov.aa %a5,%a13
80005908:	02 34       	mov %d4,%d3
8000590a:	0b 89 10 68 	mov %e6,%d9,%d8
8000590e:	6d 00 07 17 	call 8000871c <Ifx_Fifo_write>

            IfxAsclin_Asc_initiateTransmission(asclin);
80005912:	40 f4       	mov.aa %a4,%a15

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
80005914:	02 2f       	mov %d15,%d2

            IfxAsclin_Asc_initiateTransmission(asclin);
80005916:	6d ff b3 ff 	call 8000587c <IfxAsclin_Asc_initiateTransmission>
        }

        *count -= left;
8000591a:	94 c2       	ld.h %d2,[%a12]
8000591c:	a2 f2       	sub %d2,%d15
8000591e:	b4 c2       	st.h [%a12],%d2
        result  = left == 0;
80005920:	8b 0f 00 22 	eq %d2,%d15,0

    }

    return result;
}
80005924:	00 90       	ret 

80005926 <IfxAsclin_Asc_blockingWrite>:
    return data;
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
80005926:	20 10       	sub.a %sp,16
80005928:	e9 a4 07 00 	st.b [%sp]7,%d4
    Ifx_SizeT count = 1;

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
8000592c:	82 f4       	mov %d4,-1
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
8000592e:	82 1f       	mov %d15,1

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
80005930:	d9 a5 07 00 	lea %a5,[%sp]7
80005934:	d9 a6 0e 00 	lea %a6,[%sp]14
80005938:	9b 04 00 58 	addih %d5,%d4,32768
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
8000593c:	ac a7       	st.h [%sp]14,%d15

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
}
8000593e:	1d ff c3 ff 	j 800058c4 <IfxAsclin_Asc_write>

80005942 <IfxAsclin_Asc_stdIfDPipeInit>:


boolean IfxAsclin_Asc_stdIfDPipeInit(IfxStdIf_DPipe *stdif, IfxAsclin_Asc *asclin)
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));
80005942:	40 42       	mov.aa %a2,%a4
80005944:	82 0f       	mov %d15,0
80005946:	c5 0f 0b 10 	lea %a15,4b <_.+0x4a>
8000594a:	24 2f       	st.b [%a2+],%d15
8000594c:	fc ff       	loop %a15,8000594a <IfxAsclin_Asc_stdIfDPipeInit+0x8>

    /* Set the API link */
    stdif->driver         = asclin;
    stdif->write          = (IfxStdIf_DPipe_Write) & IfxAsclin_Asc_write;
8000594e:	7b 00 00 f8 	movh %d15,32768
80005952:	1b 4f 8c f5 	addi %d15,%d15,22724
80005956:	6c 42       	st.w [%a4]8,%d15
    stdif->read           = (IfxStdIf_DPipe_Read) & IfxAsclin_Asc_read;
80005958:	7b 00 00 f8 	movh %d15,32768
8000595c:	1b 4f 2b f5 	addi %d15,%d15,21172
80005960:	6c 43       	st.w [%a4]12,%d15
    stdif->getReadCount   = (IfxStdIf_DPipe_GetReadCount) & IfxAsclin_Asc_getReadCount;
80005962:	7b 00 00 f8 	movh %d15,32768
80005966:	1b 8f 13 f5 	addi %d15,%d15,20792
8000596a:	6c 44       	st.w [%a4]16,%d15
    stdif->getReadEvent   = (IfxStdIf_DPipe_GetReadEvent) & IfxAsclin_Asc_getReadEvent;
8000596c:	7b 00 00 f8 	movh %d15,32768
80005970:	1b ef 13 f5 	addi %d15,%d15,20798
80005974:	6c 45       	st.w [%a4]20,%d15
    stdif->getWriteCount  = (IfxStdIf_DPipe_GetWriteCount) & IfxAsclin_Asc_getWriteCount;
80005976:	7b 00 00 f8 	movh %d15,32768
8000597a:	1b 4f 15 f5 	addi %d15,%d15,20820
8000597e:	6c 46       	st.w [%a4]24,%d15
    stdif->getWriteEvent  = (IfxStdIf_DPipe_GetWriteEvent) & IfxAsclin_Asc_getWriteEvent;
80005980:	7b 00 00 f8 	movh %d15,32768
80005984:	1b 2f 16 f5 	addi %d15,%d15,20834
80005988:	6c 47       	st.w [%a4]28,%d15
    stdif->canReadCount   = (IfxStdIf_DPipe_CanReadCount) & IfxAsclin_Asc_canReadCount;
8000598a:	7b 00 00 f8 	movh %d15,32768
8000598e:	1b 4f 1e f5 	addi %d15,%d15,20964
80005992:	6c 48       	st.w [%a4]32,%d15
    stdif->canWriteCount  = (IfxStdIf_DPipe_CanWriteCount) & IfxAsclin_Asc_canWriteCount;
80005994:	7b 00 00 f8 	movh %d15,32768
80005998:	1b 8f 28 f5 	addi %d15,%d15,21128
8000599c:	6c 49       	st.w [%a4]36,%d15
    stdif->flushTx        = (IfxStdIf_DPipe_FlushTx) & IfxAsclin_Asc_flushTx;
8000599e:	7b 00 00 f8 	movh %d15,32768
800059a2:	1b cf 1e f5 	addi %d15,%d15,20972
800059a6:	6c 4a       	st.w [%a4]40,%d15
    stdif->clearTx        = (IfxStdIf_DPipe_ClearTx) & IfxAsclin_Asc_clearTx;
800059a8:	7b 00 00 f8 	movh %d15,32768
800059ac:	1b 0f 2a f5 	addi %d15,%d15,21152
800059b0:	6c 4b       	st.w [%a4]44,%d15
    stdif->clearRx        = (IfxStdIf_DPipe_ClearRx) & IfxAsclin_Asc_clearRx;
800059b2:	7b 00 00 f8 	movh %d15,32768
800059b6:	1b 0f 29 f5 	addi %d15,%d15,21136
800059ba:	6c 4c       	st.w [%a4]48,%d15
    stdif->onReceive      = (IfxStdIf_DPipe_OnReceive) & IfxAsclin_Asc_isrReceive;
800059bc:	7b 00 00 f8 	movh %d15,32768
800059c0:	1b ef 36 f5 	addi %d15,%d15,21358
800059c4:	6c 4d       	st.w [%a4]52,%d15
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
800059c6:	7b 00 00 f8 	movh %d15,32768
800059ca:	1b 0f 2d f5 	addi %d15,%d15,21200
800059ce:	6c 4e       	st.w [%a4]56,%d15
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
800059d0:	7b 00 00 f8 	movh %d15,32768
800059d4:	1b cf 16 f5 	addi %d15,%d15,20844
800059d8:	6c 4f       	st.w [%a4]60,%d15
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
800059da:	7b 00 00 f8 	movh %d15,32768
800059de:	1b 8f 14 f5 	addi %d15,%d15,20808
800059e2:	59 4f 00 10 	st.w [%a4]64,%d15
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
800059e6:	7b 00 00 f8 	movh %d15,32768
800059ea:	1b ef 14 f5 	addi %d15,%d15,20814
800059ee:	59 4f 04 10 	st.w [%a4]68,%d15
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
800059f2:	7b 00 00 f8 	movh %d15,32768
800059f6:	1b ef 1d f5 	addi %d15,%d15,20958
800059fa:	59 4f 08 10 	st.w [%a4]72,%d15
    stdif->txDisabled     = FALSE;
800059fe:	82 0f       	mov %d15,0
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));

    /* Set the API link */
    stdif->driver         = asclin;
80005a00:	f4 45       	st.a [%a4],%a5
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
    stdif->txDisabled     = FALSE;
80005a02:	2c 44       	st.b [%a4]4,%d15
    return TRUE;
}
80005a04:	82 12       	mov %d2,1
80005a06:	00 90       	ret 

80005a08 <IfxPort_getAddress>:
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
80005a08:	91 00 00 28 	movh.a %a2,32768
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
80005a0c:	82 05       	mov %d5,0
}


Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
80005a0e:	82 02       	mov %d2,0
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
80005a10:	d9 22 98 70 	lea %a2,[%a2]2520 <800009d8 <IfxPort_cfg_indexMap>>
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
80005a14:	8f f5 0f f1 	and %d15,%d5,255
80005a18:	8b 02 00 32 	eq %d3,%d2,0
80005a1c:	8b 0f 61 34 	and.lt.u %d3,%d15,16
80005a20:	76 3a       	jz %d3,80005a34 <IfxPort_getAddress+0x2c>
80005a22:	02 5f       	mov %d15,%d5
80005a24:	16 ff       	and %d15,255
    {
        if (IfxPort_cfg_indexMap[i].index == port)
80005a26:	d0 2f       	addsc.a %a15,%a2,%d15,3
80005a28:	82 02       	mov %d2,0
80005a2a:	4c f1       	ld.w %d15,[%a15]4
80005a2c:	7e 42       	jne %d15,%d4,80005a30 <IfxPort_getAddress+0x28>
        {
            module = IfxPort_cfg_indexMap[i].module;
80005a2e:	48 02       	ld.w %d2,[%a15]0
80005a30:	c2 15       	add %d5,1
80005a32:	3c f1       	j 80005a14 <IfxPort_getAddress+0xc>

        i++;
    }

    return module;
}
80005a34:	60 22       	mov.a %a2,%d2
80005a36:	00 90       	ret 

80005a38 <IfxPort_getIndex>:

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
    {
        if (IfxPort_cfg_indexMap[index].module == port)
80005a38:	91 00 00 38 	movh.a %a3,32768
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
80005a3c:	82 0f       	mov %d15,0
    {
        if (IfxPort_cfg_indexMap[index].module == port)
80005a3e:	d9 33 98 70 	lea %a3,[%a3]2520 <800009d8 <IfxPort_cfg_indexMap>>
80005a42:	a0 ff       	mov.a %a15,15
80005a44:	d0 32       	addsc.a %a2,%a3,%d15,3
80005a46:	d4 25       	ld.a %a5,[%a2]
80005a48:	7d 45 05 80 	jne.a %a5,%a4,80005a52 <IfxPort_getIndex+0x1a>
        {
            result = (IfxPort_Index)IfxPort_cfg_indexMap[index].index;
80005a4c:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
80005a50:	00 90       	ret 
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
80005a52:	c2 1f       	add %d15,1
80005a54:	fc f8       	loop %a15,80005a44 <IfxPort_getIndex+0xc>
IfxPort_Index IfxPort_getIndex(Ifx_P *port)
{
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;
80005a56:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
80005a58:	00 90       	ret 

80005a5a <IfxPort_resetESR>:


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
80005a5a:	40 4f       	mov.aa %a15,%a4
80005a5c:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a5e:	6d 00 ac 0c 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005a62:	02 24       	mov %d4,%d2
}


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a64:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005a66:	6d 00 a8 0b 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 0);
80005a6a:	82 12       	mov %d2,1
80005a6c:	d9 f4 10 10 	lea %a4,[%a15]80
80005a70:	0f 82 00 20 	sh %d2,%d2,%d8

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005a74:	d2 06       	mov %e6,0
80005a76:	02 27       	mov %d7,%d2
80005a78:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
80005a7c:	02 f4       	mov %d4,%d15
80005a7e:	1d 00 d1 0c 	j 80007420 <IfxScuWdt_setCpuEndinit>

80005a82 <IfxPort_disableEmergencyStop>:
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005a82:	91 00 00 38 	movh.a %a3,32768
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005a86:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005a88:	d9 33 98 90 	lea %a3,[%a3]2648 <80000a58 <IfxPort_cfg_esrMasks>>
80005a8c:	a0 ff       	mov.a %a15,15
80005a8e:	d0 32       	addsc.a %a2,%a3,%d15,3
80005a90:	d4 25       	ld.a %a5,[%a2]
80005a92:	7d 54 0c 80 	jne.a %a4,%a5,80005aaa <IfxPort_disableEmergencyStop+0x28>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005a96:	b9 2f 04 00 	ld.hu %d15,[%a2]4
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
80005a9a:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005a9c:	57 0f 61 f4 	extr.u %d15,%d15,%d4,1
80005aa0:	6e 08       	jz %d15,80005ab0 <IfxPort_disableEmergencyStop+0x2e>
            {
                IfxPort_resetESR(port, pinIndex);
80005aa2:	6d ff dc ff 	call 80005a5a <IfxPort_resetESR>
                result = TRUE;
80005aa6:	82 12       	mov %d2,1
80005aa8:	00 90       	ret 
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005aaa:	c2 1f       	add %d15,1
80005aac:	fc f1       	loop %a15,80005a8e <IfxPort_disableEmergencyStop+0xc>
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
80005aae:	82 02       	mov %d2,0
            break;
        }
    }

    return result;
}
80005ab0:	00 90       	ret 

80005ab2 <IfxPort_setESR>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
80005ab2:	40 4f       	mov.aa %a15,%a4
80005ab4:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005ab6:	6d 00 80 0c 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005aba:	02 24       	mov %d4,%d2
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005abc:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005abe:	6d 00 7c 0b 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 1U << pinIndex);
80005ac2:	82 12       	mov %d2,1
80005ac4:	0f 82 00 20 	sh %d2,%d2,%d8
80005ac8:	d9 f4 10 10 	lea %a4,[%a15]80
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005acc:	53 12 40 60 	mul.u %e6,%d2,1

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005ad0:	02 27       	mov %d7,%d2
80005ad2:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
80005ad6:	02 f4       	mov %d4,%d15
80005ad8:	1d 00 a4 0c 	j 80007420 <IfxScuWdt_setCpuEndinit>

80005adc <IfxPort_enableEmergencyStop>:
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
80005adc:	82 19       	mov %d9,1
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005ade:	91 00 00 d8 	movh.a %a13,32768
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
80005ae2:	40 4c       	mov.aa %a12,%a4
80005ae4:	02 48       	mov %d8,%d4
80005ae6:	0f 49 00 90 	sh %d9,%d9,%d4
    sint32  portIndex;
    boolean result = FALSE;
80005aea:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005aec:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005aee:	d9 dd 98 90 	lea %a13,[%a13]2648 <80000a58 <IfxPort_cfg_esrMasks>>
80005af2:	d0 df       	addsc.a %a15,%a13,%d15,3
80005af4:	c8 02       	ld.a %a2,[%a15]0
80005af6:	7d 2c 0b 80 	jne.a %a12,%a2,80005b0c <IfxPort_enableEmergencyStop+0x30>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005afa:	b9 f3 04 00 	ld.hu %d3,[%a15]4
80005afe:	26 93       	and %d3,%d9
80005b00:	76 36       	jz %d3,80005b0c <IfxPort_enableEmergencyStop+0x30>
            {
                IfxPort_setESR(port, pinIndex);
80005b02:	40 c4       	mov.aa %a4,%a12
80005b04:	02 84       	mov %d4,%d8
80005b06:	6d ff d6 ff 	call 80005ab2 <IfxPort_setESR>
                result = TRUE;
80005b0a:	82 12       	mov %d2,1
boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005b0c:	c2 1f       	add %d15,1
80005b0e:	8b 0f 21 32 	ne %d3,%d15,16
80005b12:	df 03 f0 ff 	jne %d3,0,80005af2 <IfxPort_enableEmergencyStop+0x16>
            }
        }
    }

    return result;
}
80005b16:	00 90       	ret 

80005b18 <IfxPort_setGroupModeInput>:
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b18:	82 0f       	mov %d15,0
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode)
{
80005b1a:	20 20       	sub.a %sp,32
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b1c:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005b1e:	78 04       	st.w [%sp]16,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b20:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005b22:	78 05       	st.w [%sp]20,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b24:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005b26:	78 06       	st.w [%sp]24,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b28:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005b2a:	78 07       	st.w [%sp]28,%d15
80005b2c:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b30:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
80005b34:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b38:	3b 80 0f 70 	mov %d7,248
80005b3c:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005b40:	9f 0f 07 80 	jned %d15,0,80005b4e <IfxPort_setGroupModeInput+0x36>
80005b44:	d9 44 10 00 	lea %a4,[%a4]16
80005b48:	82 0f       	mov %d15,0
80005b4a:	a0 3f       	mov.a %a15,3
80005b4c:	3c 1e       	j 80005b88 <IfxPort_setGroupModeInput+0x70>
    {
        if ((imask & (1U << i)) != 0)
80005b4e:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005b52:	df 02 19 00 	jeq %d2,0,80005b84 <IfxPort_setGroupModeInput+0x6c>
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b56:	8f 34 c0 31 	andn %d3,%d4,3
80005b5a:	60 32       	mov.a %a2,%d3
80005b5c:	d9 af 20 00 	lea %a15,[%sp]32
80005b60:	30 2f       	add.a %a15,%a2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
80005b62:	8f 34 00 21 	and %d2,%d4,3
80005b66:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b68:	19 f0 f0 ff 	ld.w %d0,[%a15]-16
80005b6c:	0f 27 00 30 	sh %d3,%d7,%d2
80005b70:	a6 03       	or %d3,%d0
80005b72:	59 f3 f0 ff 	st.w [%a15]-16,%d3
            iocrVal[index]  |= (mode) << shift;
80005b76:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
80005b7a:	0f 26 00 20 	sh %d2,%d6,%d2
80005b7e:	a6 32       	or %d2,%d3
80005b80:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005b84:	c2 14       	add %d4,1
80005b86:	3c dd       	j 80005b40 <IfxPort_setGroupModeInput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
80005b88:	d9 a3 20 00 	lea %a3,[%sp]32
80005b8c:	90 32       	addsc.a %a2,%a3,%d15,2
80005b8e:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005b92:	76 47       	jz %d4,80005ba0 <IfxPort_setGroupModeInput+0x88>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005b94:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005b98:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005b9a:	02 43       	mov %d3,%d4
80005b9c:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
80005ba0:	c2 1f       	add %d15,1
80005ba2:	b0 44       	add.a %a4,4
80005ba4:	fc f2       	loop %a15,80005b88 <IfxPort_setGroupModeInput+0x70>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
80005ba6:	00 90       	ret 

80005ba8 <IfxPort_setGroupModeOutput>:
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005ba8:	82 0f       	mov %d15,0
    }
}


void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
80005baa:	20 20       	sub.a %sp,32
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005bac:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005bae:	78 04       	st.w [%sp]16,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005bb0:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005bb2:	78 05       	st.w [%sp]20,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005bb4:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005bb6:	78 06       	st.w [%sp]24,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005bb8:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005bba:	78 07       	st.w [%sp]28,%d15
80005bbc:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005bc0:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
80005bc4:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005bc8:	3b 80 0f 00 	mov %d0,248
80005bcc:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005bd0:	9f 0f 07 80 	jned %d15,0,80005bde <IfxPort_setGroupModeOutput+0x36>
80005bd4:	d9 44 10 00 	lea %a4,[%a4]16
80005bd8:	82 0f       	mov %d15,0
80005bda:	a0 3f       	mov.a %a15,3
80005bdc:	3c 1f       	j 80005c1a <IfxPort_setGroupModeOutput+0x72>
    {
        if ((imask & (1U << i)) != 0)
80005bde:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005be2:	df 02 1a 00 	jeq %d2,0,80005c16 <IfxPort_setGroupModeOutput+0x6e>
        {
            uint32 index = i / 4;
80005be6:	8f e4 1f 30 	sh %d3,%d4,-2
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005bea:	d9 a2 20 00 	lea %a2,[%sp]32
80005bee:	01 23 02 f6 	addsc.a %a15,%a2,%d3,2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
80005bf2:	8f 34 00 21 	and %d2,%d4,3
80005bf6:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
            iocrVal[index]  |= (mode | index) << shift;
80005bf8:	a6 63       	or %d3,%d6
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005bfa:	0f 20 00 70 	sh %d7,%d0,%d2
80005bfe:	19 f1 f0 ff 	ld.w %d1,[%a15]-16
            iocrVal[index]  |= (mode | index) << shift;
80005c02:	0f 23 00 20 	sh %d2,%d3,%d2
80005c06:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005c0a:	a6 17       	or %d7,%d1
            iocrVal[index]  |= (mode | index) << shift;
80005c0c:	a6 32       	or %d2,%d3
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005c0e:	59 f7 f0 ff 	st.w [%a15]-16,%d7
            iocrVal[index]  |= (mode | index) << shift;
80005c12:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005c16:	c2 14       	add %d4,1
80005c18:	3c dc       	j 80005bd0 <IfxPort_setGroupModeOutput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
80005c1a:	d9 a3 20 00 	lea %a3,[%sp]32
80005c1e:	90 32       	addsc.a %a2,%a3,%d15,2
80005c20:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005c24:	76 47       	jz %d4,80005c32 <IfxPort_setGroupModeOutput+0x8a>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c26:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005c2a:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005c2c:	02 43       	mov %d3,%d4
80005c2e:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode | index) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
80005c32:	c2 1f       	add %d15,1
80005c34:	b0 44       	add.a %a4,4
80005c36:	fc f2       	loop %a15,80005c1a <IfxPort_setGroupModeOutput+0x72>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
80005c38:	00 90       	ret 

80005c3a <IfxPort_setGroupPadDriver>:


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
80005c3a:	20 10       	sub.a %sp,16
80005c3c:	02 4f       	mov %d15,%d4
80005c3e:	02 5a       	mov %d10,%d5
80005c40:	40 4c       	mov.aa %a12,%a4
80005c42:	02 69       	mov %d9,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005c44:	6d 00 b9 0b 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005c48:	02 24       	mov %d4,%d2
}


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005c4a:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005c4c:	6d 00 b5 0a 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
80005c50:	82 03       	mov %d3,0
80005c52:	74 a3       	st.w [%sp],%d3
            pdrMask[i] = 0;
80005c54:	59 a3 08 00 	st.w [%sp]8,%d3
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
80005c58:	59 a3 04 00 	st.w [%sp]4,%d3
            pdrMask[i] = 0;
80005c5c:	59 a3 0c 00 	st.w [%sp]12,%d3
80005c60:	8b 1f a1 22 	ge.u %d2,%d15,17
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005c64:	8b 0f 01 31 	rsub %d3,%d15,16
            pdrVal[i]  = 0;
            pdrMask[i] = 0;
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;
80005c68:	0f fa 00 50 	sh %d5,%d10,%d15
80005c6c:	ab 03 a0 32 	seln %d3,%d2,%d3,0

        for (i = pinIndex; i < 16; i++)
80005c70:	9f 03 03 80 	jned %d3,0,80005c76 <IfxPort_setGroupPadDriver+0x3c>
80005c74:	3c 1d       	j 80005cae <IfxPort_setGroupPadDriver+0x74>
        {
            if ((imask & (1U << i)) != 0)
80005c76:	57 05 61 2f 	extr.u %d2,%d5,%d15,1
80005c7a:	df 02 18 00 	jeq %d2,0,80005caa <IfxPort_setGroupPadDriver+0x70>
            {
                uint32 index = i / 8;
80005c7e:	8f df 1f 40 	sh %d4,%d15,-3
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005c82:	d9 a2 10 00 	lea %a2,[%sp]16
80005c86:	01 24 02 f6 	addsc.a %a15,%a2,%d4,2
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005c8a:	8f 7f 00 21 	and %d2,%d15,7
                pdrMask[index] |= (0xFUL << shift);
80005c8e:	19 f4 f8 ff 	ld.w %d4,[%a15]-8
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005c92:	06 22       	sh %d2,2
                pdrMask[index] |= (0xFUL << shift);
80005c94:	d7 f4 04 42 	insert %d4,%d4,15,%d2,4
                pdrVal[index]  |= (padDriver << shift);
80005c98:	0f 29 00 20 	sh %d2,%d9,%d2
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005c9c:	59 f4 f8 ff 	st.w [%a15]-8,%d4
                pdrVal[index]  |= (padDriver << shift);
80005ca0:	19 f4 f0 ff 	ld.w %d4,[%a15]-16
80005ca4:	a6 42       	or %d2,%d4
80005ca6:	59 f2 f0 ff 	st.w [%a15]-16,%d2
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;

        for (i = pinIndex; i < 16; i++)
80005caa:	c2 1f       	add %d15,1
80005cac:	3c e2       	j 80005c70 <IfxPort_setGroupPadDriver+0x36>
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005cae:	58 02       	ld.w %d15,[%sp]8
80005cb0:	6e 08       	jz %d15,80005cc0 <IfxPort_setGroupPadDriver+0x86>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005cb2:	d9 cf 00 10 	lea %a15,[%a12]64
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005cb6:	54 a6       	ld.w %d6,[%sp]
80005cb8:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005cba:	02 f7       	mov %d7,%d15
80005cbc:	49 f6 40 08 	ldmst [%a15]0,%e6
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005cc0:	58 03       	ld.w %d15,[%sp]12
80005cc2:	6e 09       	jz %d15,80005cd4 <IfxPort_setGroupPadDriver+0x9a>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005cc4:	d9 cc 04 10 	lea %a12,[%a12]68
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005cc8:	19 a6 04 00 	ld.w %d6,[%sp]4
80005ccc:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005cce:	02 f7       	mov %d7,%d15
80005cd0:	49 c6 40 08 	ldmst [%a12]0,%e6
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005cd4:	02 84       	mov %d4,%d8
}
80005cd6:	d9 aa 10 00 	lea %sp,[%sp]16
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005cda:	1d 00 a3 0b 	j 80007420 <IfxScuWdt_setCpuEndinit>

80005cde <IfxPort_setPinMode>:
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
80005cde:	91 40 00 2f 	movh.a %a2,61444

void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005ce2:	8f 34 00 91 	and %d9,%d4,3

    if (port == &MODULE_P40)
80005ce6:	d9 22 00 0e 	lea %a2,[%a2]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80005cea:	40 4f       	mov.aa %a15,%a4
80005cec:	02 4f       	mov %d15,%d4
80005cee:	02 5a       	mov %d10,%d5
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80005cf0:	d9 4c 10 00 	lea %a12,[%a4]16
    uint8                 iocrIndex = (pinIndex / 4);
80005cf4:	8f e4 1f b0 	sh %d11,%d4,-2
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005cf8:	06 39       	sh %d9,3

    if (port == &MODULE_P40)
80005cfa:	7d 24 11 80 	jne.a %a4,%a2,80005d1c <IfxPort_setPinMode+0x3e>
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005cfe:	6d 00 5c 0b 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
        IfxScuWdt_clearCpuEndinit(passwd);
80005d02:	02 24       	mov %d4,%d2
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d04:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
80005d06:	6d 00 58 0a 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
80005d0a:	19 f2 20 10 	ld.w %d2,[%a15]96
        IfxScuWdt_setCpuEndinit(passwd);
80005d0e:	02 84       	mov %d4,%d8

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
80005d10:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80005d14:	59 ff 20 10 	st.w [%a15]96,%d15
        IfxScuWdt_setCpuEndinit(passwd);
80005d18:	6d 00 84 0b 	call 80007420 <IfxScuWdt_setCpuEndinit>
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
80005d1c:	da ff       	mov %d15,255
80005d1e:	01 cb 02 f6 	addsc.a %a15,%a12,%d11,2
80005d22:	0f 9f 00 f0 	sh %d15,%d15,%d9
80005d26:	0f 9a 00 20 	sh %d2,%d10,%d9
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005d2a:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005d2c:	02 f3       	mov %d3,%d15
80005d2e:	49 f2 40 08 	ldmst [%a15]0,%e2
80005d32:	00 90       	ret 

80005d34 <IfxPort_setPinModeLvdsHigh>:
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
80005d34:	02 5a       	mov %d10,%d5
80005d36:	40 4f       	mov.aa %a15,%a4
80005d38:	02 49       	mov %d9,%d4
80005d3a:	02 6f       	mov %d15,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d3c:	6d 00 3d 0b 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005d40:	02 24       	mov %d4,%d2
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d42:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005d44:	6d 00 39 0a 	call 800071b6 <IfxScuWdt_clearCpuEndinit>

    if (mode < IfxPort_Mode_outputPushPullGeneral)
80005d48:	37 0a 48 50 	extr %d5,%d10,0,8
80005d4c:	bf 05 11 00 	jlt %d5,0,80005d6e <IfxPort_setPinModeLvdsHigh+0x3a>
    {
        if (pinIndex < 2)
80005d50:	bf 29 21 80 	jlt.u %d9,2,80005d92 <IfxPort_setPinModeLvdsHigh+0x5e>
        {}
        else
        {
            port->LPCR1.B_P21.RDIS_CTRL = enablePortControlled;
80005d54:	19 f2 24 20 	ld.w %d2,[%a15]164
80005d58:	37 f2 01 f0 	insert %d15,%d2,%d15,0,1
80005d5c:	59 ff 24 20 	st.w [%a15]164,%d15
            port->LPCR1.B_P21.RX_DIS    = 0;
80005d60:	19 ff 24 20 	ld.w %d15,[%a15]164
80005d64:	8f 2f c0 f1 	andn %d15,%d15,2
80005d68:	59 ff 24 20 	st.w [%a15]164,%d15
80005d6c:	3c 13       	j 80005d92 <IfxPort_setPinModeLvdsHigh+0x5e>
        }
    }
    else
    {
        port->LPCR2.B.TDIS_CTRL = enablePortControlled;
80005d6e:	19 f2 28 20 	ld.w %d2,[%a15]168
80005d72:	67 f2 0c f0 	ins.t %d15,%d2,12,%d15,0
80005d76:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_DIS    = 0;
80005d7a:	19 ff 28 20 	ld.w %d15,[%a15]168
80005d7e:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80005d82:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_PD     = 0;
80005d86:	19 ff 28 20 	ld.w %d15,[%a15]168
80005d8a:	b7 0f 01 f7 	insert %d15,%d15,0,14,1
80005d8e:	59 ff 28 20 	st.w [%a15]168,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
80005d92:	02 84       	mov %d4,%d8
80005d94:	1d 00 46 0b 	j 80007420 <IfxScuWdt_setCpuEndinit>

80005d98 <IfxPort_setPinModeLvdsMedium>:
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005d98:	0b 65 10 a8 	mov %e10,%d5,%d6
80005d9c:	40 4f       	mov.aa %a15,%a4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005d9e:	8f f4 1f 90 	sh %d9,%d4,-1
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005da2:	02 48       	mov %d8,%d4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005da4:	6d 00 09 0b 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005da8:	02 24       	mov %d4,%d2
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005daa:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005dac:	6d 00 05 0a 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
80005db0:	06 d8       	sh %d8,-3
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
80005db2:	d9 f2 00 10 	lea %a2,[%a15]64
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005db6:	01 28 02 26 	addsc.a %a2,%a2,%d8,2


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005dba:	8f 39 00 20 	sh %d2,%d9,3
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
80005dbe:	d9 f4 20 20 	lea %a4,[%a15]160
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005dc2:	01 49 02 46 	addsc.a %a4,%a4,%d9,2
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005dc6:	0f 2b 00 50 	sh %d5,%d11,%d2
80005dca:	74 25       	st.w [%a2],%d5
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005dcc:	54 46       	ld.w %d6,[%a4]
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005dce:	02 f4       	mov %d4,%d15
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005dd0:	67 a6 01 60 	ins.t %d6,%d6,1,%d10,0
80005dd4:	74 46       	st.w [%a4],%d6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005dd6:	1d 00 25 0b 	j 80007420 <IfxScuWdt_setCpuEndinit>

80005dda <IfxPort_setPinPadDriver>:
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
80005dda:	0b 45 10 88 	mov %e8,%d5,%d4
80005dde:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005de0:	6d 00 eb 0a 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005de4:	02 24       	mov %d4,%d2
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005de6:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005de8:	6d 00 e7 09 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
80005dec:	8f 78 00 21 	and %d2,%d8,7
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005df0:	06 22       	sh %d2,2
80005df2:	06 d8       	sh %d8,-3
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
80005df4:	d9 ff 00 10 	lea %a15,[%a15]64
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005df8:	3b f0 00 30 	mov %d3,15
80005dfc:	01 f8 02 f6 	addsc.a %a15,%a15,%d8,2
80005e00:	0f 23 00 30 	sh %d3,%d3,%d2
80005e04:	0f 29 00 60 	sh %d6,%d9,%d2
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005e08:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005e0a:	02 37       	mov %d7,%d3
80005e0c:	49 f6 40 08 	ldmst [%a15]0,%e6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005e10:	02 f4       	mov %d4,%d15
80005e12:	1d 00 07 0b 	j 80007420 <IfxScuWdt_setCpuEndinit>
	...

80005e18 <IfxScuCcu_calculateSysPllDividers>:
        //' K2+1 div should be even for 50% duty cycle
        k2Steps = 2;

        if (fPll > 240000000)
        {
            k2Steps = 1;
80005e18:	7b e0 e4 30 	movh %d3,3662
80005e1c:	1b 13 c0 31 	addi %d3,%d3,7169
80005e20:	0b 34 30 c1 	lt.u %d12,%d4,%d3
80005e24:	82 2f       	mov %d15,2
80005e26:	ab 1f 80 cc 	sel %d12,%d12,%d15,1
80005e2a:	8f 4c 00 80 	sh %d8,%d12,4
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005e2e:	7b c0 be 00 	movh %d0,3052

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005e32:	91 40 0f 50 	movh.a %a5,244
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005e36:	7b 80 82 6e 	movh %d6,59432
80005e3a:	91 80 7d 61 	movh.a %a6,6104

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
    uint8   deviationAllowed = 2;
    uint32  fOsc             = cfg->xtalFrequency;
80005e3e:	19 4e 10 10 	ld.w %d14,[%a4]80
80005e42:	60 83       	mov.a %a3,%d8
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005e44:	1b 00 20 0c 	addi %d0,%d0,-15872

        uint32       p;
        uint32       n;
        uint32       k2;
        uint32       k2Steps;
        uint32       bestK2 = 0, bestN = 0, bestP = 0;
80005e48:	d2 0a       	mov %e10,0
80005e4a:	82 09       	mov %d9,0
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005e4c:	3b 00 01 50 	mov %d5,16
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005e50:	d9 55 41 02 	lea %a5,[%a5]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005e54:	82 f7       	mov %d7,-1
80005e56:	1b 06 c0 67 	addi %d6,%d6,31744
80005e5a:	d9 66 41 08 	lea %a6,[%a6]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
80005e5e:	a0 ff       	mov.a %a15,15
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005e60:	4b 5e 11 22 	div.u %e2,%d14,%d5

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005e64:	7b 60 f8 1f 	movh %d1,65414
80005e68:	1b 01 e0 1e 	addi %d1,%d1,-4608
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005e6c:	82 03       	mov %d3,0

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005e6e:	0b 12 40 10 	addx %d1,%d2,%d1
80005e72:	8b f3 bf 20 	addc %d2,%d3,-1
80005e76:	80 53       	mov.d %d3,%a5
80005e78:	ba 02       	eq %d15,%d2,0
80005e7a:	0b 31 50 f2 	and.ge.u %d15,%d1,%d3
80005e7e:	8b 02 00 f5 	or.ne %d15,%d2,0
80005e82:	ee 24       	jnz %d15,80005eca <IfxScuCcu_calculateSysPllDividers+0xb2>
80005e84:	02 5d       	mov %d13,%d5
80005e86:	82 11       	mov %d1,1
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005e88:	03 41 68 26 	madd.u %e2,%e6,%d1,%d4
80005e8c:	80 68       	mov.d %d8,%a6
80005e8e:	ba 03       	eq %d15,%d3,0
80005e90:	0b 82 50 f2 	and.ge.u %d15,%d2,%d8
80005e94:	8b 03 00 f5 	or.ne %d15,%d3,0
80005e98:	ee 13       	jnz %d15,80005ebe <IfxScuCcu_calculateSysPllDividers+0xa6>
80005e9a:	82 18       	mov %d8,1
80005e9c:	c5 02 3f 10 	lea %a2,7f <_.+0x7e>
                    {
                        for (n = nMin; n <= nMax; n++)
                        {
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);
80005ea0:	4b d8 11 22 	div.u %e2,%d8,%d13
80005ea4:	e2 e2       	mul %d2,%d14
80005ea6:	a2 42       	sub %d2,%d4

                            if (fPllError == 0)
80005ea8:	df 02 18 00 	jeq %d2,0,80005ed8 <IfxScuCcu_calculateSysPllDividers+0xc0>
                                bestP          = p;

                                goto EXITCALC_LOOP;
                            }

                            if (fPllLeastError > fPllError)
80005eac:	82 1f       	mov %d15,1
80005eae:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80005eb2:	6a 8b       	cmovn %d11,%d15,%d8
80005eb4:	6a 20       	cmovn %d0,%d15,%d2
80005eb6:	6a 5a       	cmovn %d10,%d15,%d5
80005eb8:	6a 19       	cmovn %d9,%d15,%d1
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
                    {
                        for (n = nMin; n <= nMax; n++)
80005eba:	c2 18       	add %d8,1
80005ebc:	fc 22       	loop %a2,80005ea0 <IfxScuCcu_calculateSysPllDividers+0x88>
80005ebe:	80 3f       	mov.d %d15,%a3
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
80005ec0:	42 c1       	add %d1,%d12
80005ec2:	42 fd       	add %d13,%d15
80005ec4:	8b 11 68 f2 	lt.u %d15,%d1,129
80005ec8:	ee e0       	jnz %d15,80005e88 <IfxScuCcu_calculateSysPllDividers+0x70>
80005eca:	60 c2       	mov.a %a2,%d12
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005ecc:	c2 f5       	add %d5,-1
80005ece:	01 23 20 30 	sub.a %a3,%a3,%a2
80005ed2:	fd f0 c7 7f 	loop %a15,80005e60 <IfxScuCcu_calculateSysPllDividers+0x48>
80005ed6:	3c 05       	j 80005ee0 <IfxScuCcu_calculateSysPllDividers+0xc8>

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
                                bestN          = n;
80005ed8:	0b 58 10 a8 	mov %e10,%d8,%d5
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
80005edc:	02 19       	mov %d9,%d1
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
80005ede:	82 00       	mov %d0,0
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005ee0:	da 64       	mov %d15,100
80005ee2:	06 14       	sh %d4,1
80005ee4:	4b f4 11 42 	div.u %e4,%d4,%d15
80005ee8:	82 1f       	mov %d15,1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
        }
        else
        {
            retVal = 1;
80005eea:	82 12       	mov %d2,1
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005eec:	0b 40 50 f2 	and.ge.u %d15,%d0,%d4
80005ef0:	ee 0f       	jnz %d15,80005f0e <IfxScuCcu_calculateSysPllDividers+0xf6>
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005ef2:	82 02       	mov %d2,0

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005ef4:	c2 fb       	add %d11,-1
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005ef6:	c2 fa       	add %d10,-1
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005ef8:	c2 f9       	add %d9,-1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005efa:	59 42 0c 00 	st.w [%a4]12,%d2

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005efe:	e9 4b 09 00 	st.b [%a4]9,%d11
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005f02:	e9 4a 08 00 	st.b [%a4]8,%d10
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005f06:	e9 49 0a 00 	st.b [%a4]10,%d9
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
80005f0a:	2c 40       	st.b [%a4]0,%d15
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
80005f0c:	82 02       	mov %d2,0
        {
            retVal = 1;
        }
    }
    return retVal;
}
80005f0e:	00 90       	ret 

80005f10 <IfxScuCcu_getOsc0Frequency>:
}


float32 IfxScuCcu_getOsc0Frequency(void)
{
    return (float32)IfxScuCcu_xtalFrequency;
80005f10:	91 00 00 f7 	movh.a %a15,28672
80005f14:	19 f2 38 30 	ld.w %d2,[%a15]248 <700000f8 <IfxScuCcu_xtalFrequency>>
}
80005f18:	4b 02 61 21 	utof %d2,%d2
80005f1c:	00 90       	ret 

80005f1e <IfxScuCcu_getOscFrequency>:

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005f1e:	91 30 00 ff 	movh.a %a15,61443
80005f22:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80005f26:	4c f0       	ld.w %d15,[%a15]0
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005f28:	7b f0 cb 24 	movh %d2,19647

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005f2c:	37 0f 62 fe 	extr.u %d15,%d15,28,2
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005f30:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005f34:	6e 0c       	jz %d15,80005f4c <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005f36:	4c f0       	ld.w %d15,[%a15]0
        freq = (float32)IfxScuCcu_xtalFrequency;
    }
    else
    {
        /* Reserved values, this */
        freq = 0.0;
80005f38:	82 02       	mov %d2,0

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005f3a:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80005f3e:	5e 17       	jne %d15,1,80005f4c <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = (float32)IfxScuCcu_xtalFrequency;
80005f40:	91 00 00 f7 	movh.a %a15,28672
80005f44:	19 f2 38 30 	ld.w %d2,[%a15]248 <700000f8 <IfxScuCcu_xtalFrequency>>
80005f48:	4b 02 61 21 	utof %d2,%d2
        /* Reserved values, this */
        freq = 0.0;
    }

    return freq;
}
80005f4c:	00 90       	ret 

80005f4e <IfxScuCcu_getPllErayFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005f4e:	91 30 00 ff 	movh.a %a15,61443
80005f52:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005f56:	6d ff e4 ff 	call 80005f1e <IfxScuCcu_getOscFrequency>

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005f5a:	4c f9       	ld.w %d15,[%a15]36
80005f5c:	2e 05       	jz.t %d15,0,80005f66 <IfxScuCcu_getPllErayFrequency+0x18>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLERAYCON1.B.K1DIV + 1);
80005f5e:	4c fb       	ld.w %d15,[%a15]44
80005f60:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005f64:	3c 21       	j 80005fa6 <IfxScuCcu_getPllErayFrequency+0x58>
    }
    else if (scu->PLLERAYSTAT.B.FINDIS == 1)
80005f66:	4c f9       	ld.w %d15,[%a15]36
80005f68:	6f 3f 15 00 	jz.t %d15,3,80005f92 <IfxScuCcu_getPllErayFrequency+0x44>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLERAYCON1.B.K2DIV + 1);
80005f6c:	48 b4       	ld.w %d4,[%a15]44
80005f6e:	8f f4 07 41 	and %d4,%d4,127
80005f72:	c2 14       	add %d4,1
80005f74:	6d 00 ff 26 	call 8000ad72 <__floatsidf>
80005f78:	7b 80 19 54 	movh %d5,16792
80005f7c:	0b 23 10 68 	mov %e6,%d3,%d2
80005f80:	82 04       	mov %d4,0
80005f82:	1b 45 78 5d 	addi %d5,%d5,-10364
80005f86:	6d 00 6a 26 	call 8000ac5a <__divdf3>
80005f8a:	0b 23 10 48 	mov %e4,%d3,%d2
80005f8e:	1d 00 25 27 	j 8000add8 <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLERAYCON0.B.NDIV + 1)) / (scu->PLLERAYCON1.B.K2DIV + 1);
80005f92:	48 a3       	ld.w %d3,[%a15]40
80005f94:	4c fb       	ld.w %d15,[%a15]44
80005f96:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005f9a:	16 7f       	and %d15,127
80005f9c:	c2 13       	add %d3,1
80005f9e:	4b 03 41 31 	itof %d3,%d3
80005fa2:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005fa6:	c2 1f       	add %d15,1
80005fa8:	4b 0f 41 f1 	itof %d15,%d15
80005fac:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80005fb0:	00 90       	ret 

80005fb2 <IfxScuCcu_getPllErayVcoFrequency>:

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005fb2:	91 30 00 ff 	movh.a %a15,61443
80005fb6:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80005fba:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005fbc:	7b f0 cb 24 	movh %d2,19647
80005fc0:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005fc4:	6f 3f 18 80 	jnz.t %d15,3,80005ff4 <IfxScuCcu_getPllErayVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLERAYCON0.B.NDIV + 1)) / (SCU_PLLERAYCON0.B.PDIV + 1);
80005fc8:	6d ff ab ff 	call 80005f1e <IfxScuCcu_getOscFrequency>
80005fcc:	91 30 00 ff 	movh.a %a15,61443
80005fd0:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80005fd4:	48 03       	ld.w %d3,[%a15]0
80005fd6:	4c f0       	ld.w %d15,[%a15]0
80005fd8:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005fdc:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005fe0:	c2 13       	add %d3,1
80005fe2:	4b 03 41 31 	itof %d3,%d3
80005fe6:	c2 1f       	add %d15,1
80005fe8:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005fec:	4b 0f 41 f1 	itof %d15,%d15
80005ff0:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
80005ff4:	00 90       	ret 

80005ff6 <IfxScuCcu_getPllFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLSTAT.B.VCOBYST == 1)
80005ff6:	91 30 00 ff 	movh.a %a15,61443
80005ffa:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005ffe:	6d ff 90 ff 	call 80005f1e <IfxScuCcu_getOscFrequency>

    if (scu->PLLSTAT.B.VCOBYST == 1)
80006002:	4c f5       	ld.w %d15,[%a15]20
80006004:	2e 06       	jz.t %d15,0,80006010 <IfxScuCcu_getPllFrequency+0x1a>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
80006006:	4c f7       	ld.w %d15,[%a15]28
80006008:	37 0f 67 f8 	extr.u %d15,%d15,16,7
8000600c:	c2 1f       	add %d15,1
8000600e:	3c 28       	j 8000605e <IfxScuCcu_getPllFrequency+0x68>
    }
    else if (scu->PLLSTAT.B.FINDIS == 1)
80006010:	4c f5       	ld.w %d15,[%a15]20
80006012:	6f 3f 15 00 	jz.t %d15,3,8000603c <IfxScuCcu_getPllFrequency+0x46>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
80006016:	48 74       	ld.w %d4,[%a15]28
80006018:	8f f4 07 41 	and %d4,%d4,127
8000601c:	c2 14       	add %d4,1
8000601e:	6d 00 aa 26 	call 8000ad72 <__floatsidf>
80006022:	7b 80 19 54 	movh %d5,16792
80006026:	0b 23 10 68 	mov %e6,%d3,%d2
8000602a:	82 04       	mov %d4,0
8000602c:	1b 45 78 5d 	addi %d5,%d5,-10364
80006030:	6d 00 15 26 	call 8000ac5a <__divdf3>
80006034:	0b 23 10 48 	mov %e4,%d3,%d2
80006038:	1d 00 d0 26 	j 8000add8 <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
8000603c:	48 64       	ld.w %d4,[%a15]24
8000603e:	4c f7       	ld.w %d15,[%a15]28
80006040:	37 04 e7 44 	extr.u %d4,%d4,9,7
80006044:	8f ff 07 31 	and %d3,%d15,127
80006048:	4c f6       	ld.w %d15,[%a15]24
8000604a:	c2 14       	add %d4,1
8000604c:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80006050:	4b 04 41 41 	itof %d4,%d4
80006054:	c2 1f       	add %d15,1
80006056:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
8000605a:	4b 42 41 20 	mul.f %d2,%d2,%d4
8000605e:	4b 0f 41 f1 	itof %d15,%d15
80006062:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80006066:	00 90       	ret 

80006068 <IfxScuCcu_getPllVcoFrequency>:

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
80006068:	91 30 00 ff 	movh.a %a15,61443
8000606c:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006070:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80006072:	7b f0 cb 24 	movh %d2,19647
80006076:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
8000607a:	6f 3f 18 80 	jnz.t %d15,3,800060aa <IfxScuCcu_getPllVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLCON0.B.NDIV + 1)) / (SCU_PLLCON0.B.PDIV + 1);
8000607e:	6d ff 50 ff 	call 80005f1e <IfxScuCcu_getOscFrequency>
80006082:	91 30 00 ff 	movh.a %a15,61443
80006086:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
8000608a:	48 03       	ld.w %d3,[%a15]0
8000608c:	4c f0       	ld.w %d15,[%a15]0
8000608e:	37 03 e7 34 	extr.u %d3,%d3,9,7
80006092:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80006096:	c2 13       	add %d3,1
80006098:	4b 03 41 31 	itof %d3,%d3
8000609c:	c2 1f       	add %d15,1
8000609e:	4b 32 41 20 	mul.f %d2,%d2,%d3
800060a2:	4b 0f 41 f1 	itof %d15,%d15
800060a6:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
800060aa:	00 90       	ret 

800060ac <IfxScuCcu_getSourceFrequency>:

float32 IfxScuCcu_getSourceFrequency(void)
{
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
800060ac:	91 30 00 ff 	movh.a %a15,61443
800060b0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800060b4:	4c f0       	ld.w %d15,[%a15]0
800060b6:	37 0f 62 fe 	extr.u %d15,%d15,28,2
800060ba:	6e 06       	jz %d15,800060c6 <IfxScuCcu_getSourceFrequency+0x1a>
800060bc:	1e 13       	jeq %d15,1,800060c2 <IfxScuCcu_getSourceFrequency+0x16>
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
        break;
    default:
        sourcefreq = 0;
800060be:	82 02       	mov %d2,0
800060c0:	00 90       	ret 
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
800060c2:	1d ff 9a ff 	j 80005ff6 <IfxScuCcu_getPllFrequency>
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
800060c6:	7b f0 cb 24 	movh %d2,19647
800060ca:	1b 02 c2 2b 	addi %d2,%d2,-17376
        sourcefreq = 0;
        break;
    }

    return sourcefreq;
}
800060ce:	00 90       	ret 

800060d0 <IfxScuCcu_wait>:
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
800060d0:	02 4f       	mov %d15,%d4
800060d2:	6d ff ed ff 	call 800060ac <IfxScuCcu_getSourceFrequency>
800060d6:	91 30 00 ff 	movh.a %a15,61443
800060da:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800060de:	48 03       	ld.w %d3,[%a15]0
800060e0:	37 03 64 34 	extr.u %d3,%d3,8,4
800060e4:	4b 03 41 31 	itof %d3,%d3
800060e8:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
    uint32 stmCountBegin = STM0_TIM0.U;
800060ec:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
800060f0:	4b f2 41 20 	mul.f %d2,%d2,%d15
800060f4:	4b 02 71 21 	ftouz %d2,%d2
    uint32 stmCountBegin = STM0_TIM0.U;

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
800060f8:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
800060fc:	a2 3f       	sub %d15,%d3
800060fe:	3f 2f fd ff 	jlt.u %d15,%d2,800060f8 <IfxScuCcu_wait+0x28>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
80006102:	00 90       	ret 

80006104 <IfxScuCcu_getBbbFrequency>:
float32 IfxScuCcu_getBbbFrequency(void)
{
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
80006104:	6d ff d4 ff 	call 800060ac <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006108:	91 30 00 ff 	movh.a %a15,61443
8000610c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006110:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
        break;
    default:
        bbbFrequency = 0.0;
80006112:	82 0f       	mov %d15,0
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80006114:	37 03 64 36 	extr.u %d3,%d3,12,4
80006118:	ff 53 30 80 	jge.u %d3,5,80006178 <IfxScuCcu_getBbbFrequency+0x74>
8000611c:	91 00 00 f8 	movh.a %a15,32768
80006120:	d9 ff 2c 46 	lea %a15,[%a15]24876 <8000612c <IfxScuCcu_getBbbFrequency+0x28>>
80006124:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006128:	dc 0f       	ji %a15
8000612a:	00 00       	nop 
8000612c:	1d 00 0a 00 	j 80006140 <IfxScuCcu_getBbbFrequency+0x3c>
80006130:	1d 00 17 00 	j 8000615e <IfxScuCcu_getBbbFrequency+0x5a>
80006134:	1d 00 18 00 	j 80006164 <IfxScuCcu_getBbbFrequency+0x60>
80006138:	1d 00 19 00 	j 8000616a <IfxScuCcu_getBbbFrequency+0x66>
8000613c:	1d 00 1a 00 	j 80006170 <IfxScuCcu_getBbbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
80006140:	91 30 00 ff 	movh.a %a15,61443
80006144:	d9 ff 00 16 	lea %a15,[%a15]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
80006148:	48 03       	ld.w %d3,[%a15]0
        {
            bbbFrequency = 0.0;
8000614a:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
8000614c:	8f f3 00 31 	and %d3,%d3,15
80006150:	df 03 14 00 	jeq %d3,0,80006178 <IfxScuCcu_getBbbFrequency+0x74>
        {
            bbbFrequency = 0.0;
        }
        else
        {
            bbbFrequency = sourceFrequency / SCU_CCUCON2.B.BBBDIV;
80006154:	4c f0       	ld.w %d15,[%a15]0
80006156:	16 0f       	and %d15,15
80006158:	4b 0f 41 f1 	itof %d15,%d15
8000615c:	3c 0c       	j 80006174 <IfxScuCcu_getBbbFrequency+0x70>
        }

        break;
    case 1:
        bbbFrequency = sourceFrequency / 30;
8000615e:	7b 00 1f f4 	movh %d15,16880
80006162:	3c 09       	j 80006174 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 2:
        bbbFrequency = sourceFrequency / 60;
80006164:	7b 00 27 f4 	movh %d15,17008
80006168:	3c 06       	j 80006174 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 3:
        bbbFrequency = sourceFrequency / 120;
8000616a:	7b 00 2f f4 	movh %d15,17136
8000616e:	3c 03       	j 80006174 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
80006170:	7b 00 37 f4 	movh %d15,17264
80006174:	4b f2 51 f0 	div.f %d15,%d2,%d15
        bbbFrequency = 0.0;
        break;
    }

    return bbbFrequency;
}
80006178:	02 f2       	mov %d2,%d15
8000617a:	00 90       	ret 

8000617c <IfxScuCcu_getMaxFrequency>:
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
8000617c:	91 30 00 ff 	movh.a %a15,61443
80006180:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>

float32 IfxScuCcu_getMaxFrequency(void)
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();
80006184:	6d ff 94 ff 	call 800060ac <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006188:	4c f0       	ld.w %d15,[%a15]0
8000618a:	37 0f 64 f6 	extr.u %d15,%d15,12,4
8000618e:	ff 5f 2d 80 	jge.u %d15,5,800061e8 <IfxScuCcu_getMaxFrequency+0x6c>
80006192:	91 00 00 f8 	movh.a %a15,32768
80006196:	d9 ff 20 66 	lea %a15,[%a15]24992 <800061a0 <IfxScuCcu_getMaxFrequency+0x24>>
8000619a:	90 ff       	addsc.a %a15,%a15,%d15,2
8000619c:	dc 0f       	ji %a15
8000619e:	00 00       	nop 
800061a0:	1d 00 0a 00 	j 800061b4 <IfxScuCcu_getMaxFrequency+0x38>
800061a4:	1d 00 14 00 	j 800061cc <IfxScuCcu_getMaxFrequency+0x50>
800061a8:	1d 00 15 00 	j 800061d2 <IfxScuCcu_getMaxFrequency+0x56>
800061ac:	1d 00 16 00 	j 800061d8 <IfxScuCcu_getMaxFrequency+0x5c>
800061b0:	1d 00 17 00 	j 800061de <IfxScuCcu_getMaxFrequency+0x62>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON5.B.MAXDIV == 0)
800061b4:	91 30 00 ff 	movh.a %a15,61443
800061b8:	d9 ff 0c 16 	lea %a15,[%a15]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
800061bc:	4c f0       	ld.w %d15,[%a15]0
800061be:	16 0f       	and %d15,15
800061c0:	6e 15       	jz %d15,800061ea <IfxScuCcu_getMaxFrequency+0x6e>
        {
            maxFrequency = sourceFrequency;
        }
        else
        {
            maxFrequency = sourceFrequency / SCU_CCUCON5.B.MAXDIV;
800061c2:	4c f0       	ld.w %d15,[%a15]0
800061c4:	16 0f       	and %d15,15
800061c6:	4b 0f 41 f1 	itof %d15,%d15
800061ca:	3c 0c       	j 800061e2 <IfxScuCcu_getMaxFrequency+0x66>
        }

        break;
    case 1:
        maxFrequency = sourceFrequency / 15;
800061cc:	7b 00 17 f4 	movh %d15,16752
800061d0:	3c 09       	j 800061e2 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 2:
        maxFrequency = sourceFrequency / 30;
800061d2:	7b 00 1f f4 	movh %d15,16880
800061d6:	3c 06       	j 800061e2 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 3:
        maxFrequency = sourceFrequency / 60;
800061d8:	7b 00 27 f4 	movh %d15,17008
800061dc:	3c 03       	j 800061e2 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 4:
        maxFrequency = sourceFrequency / 120;
800061de:	7b 00 2f f4 	movh %d15,17136
800061e2:	4b f2 51 20 	div.f %d2,%d2,%d15
        break;
800061e6:	00 90       	ret 
    default:
        maxFrequency = 0.0;
800061e8:	82 02       	mov %d2,0
        break;
    }

    return maxFrequency;
}
800061ea:	00 90       	ret 

800061ec <IfxScuCcu_getBaud1Frequency>:


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
800061ec:	91 30 00 ff 	movh.a %a15,61443
800061f0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800061f4:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD1DIV == 0)
    {
        frequency = 0;
800061f6:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
800061f8:	8f ff 00 81 	and %d8,%d15,15

    if (ccucon0.B.BAUD1DIV == 0)
800061fc:	76 87       	jz %d8,8000620a <IfxScuCcu_getBaud1Frequency+0x1e>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD1DIV;
800061fe:	6d ff bf ff 	call 8000617c <IfxScuCcu_getMaxFrequency>
80006202:	4b 08 41 f1 	itof %d15,%d8
80006206:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
8000620a:	00 90       	ret 

8000620c <IfxScuCcu_getBaud2Frequency>:


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000620c:	91 30 00 ff 	movh.a %a15,61443
80006210:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006214:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD2DIV == 0)
    {
        frequency = 0;
80006216:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006218:	37 0f 64 82 	extr.u %d8,%d15,4,4

    if (ccucon0.B.BAUD2DIV == 0)
8000621c:	16 f0       	and %d15,240
8000621e:	6e 07       	jz %d15,8000622c <IfxScuCcu_getBaud2Frequency+0x20>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD2DIV;
80006220:	6d ff ae ff 	call 8000617c <IfxScuCcu_getMaxFrequency>
80006224:	4b 08 41 f1 	itof %d15,%d8
80006228:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
8000622c:	00 90       	ret 

8000622e <IfxScuCcu_getSpbFrequency>:
float32 IfxScuCcu_getSpbFrequency(void)
{
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
8000622e:	6d ff 3f ff 	call 800060ac <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006232:	91 30 00 ff 	movh.a %a15,61443
80006236:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000623a:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
        break;
    default:
        spbFrequency = 0.0;
8000623c:	82 0f       	mov %d15,0
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
8000623e:	37 03 64 36 	extr.u %d3,%d3,12,4
80006242:	ff 53 30 80 	jge.u %d3,5,800062a2 <IfxScuCcu_getSpbFrequency+0x74>
80006246:	91 00 00 f8 	movh.a %a15,32768
8000624a:	d9 ff 14 96 	lea %a15,[%a15]25172 <80006254 <IfxScuCcu_getSpbFrequency+0x26>>
8000624e:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006252:	dc 0f       	ji %a15
80006254:	1d 00 0a 00 	j 80006268 <IfxScuCcu_getSpbFrequency+0x3a>
80006258:	1d 00 18 00 	j 80006288 <IfxScuCcu_getSpbFrequency+0x5a>
8000625c:	1d 00 19 00 	j 8000628e <IfxScuCcu_getSpbFrequency+0x60>
80006260:	1d 00 1a 00 	j 80006294 <IfxScuCcu_getSpbFrequency+0x66>
80006264:	1d 00 1b 00 	j 8000629a <IfxScuCcu_getSpbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
80006268:	91 30 00 ff 	movh.a %a15,61443
8000626c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006270:	48 03       	ld.w %d3,[%a15]0
        {
            spbFrequency = 0.0;
80006272:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
80006274:	37 03 64 38 	extr.u %d3,%d3,16,4
80006278:	df 03 15 00 	jeq %d3,0,800062a2 <IfxScuCcu_getSpbFrequency+0x74>
        {
            spbFrequency = 0.0;
        }
        else
        {
            spbFrequency = sourceFrequency / SCU_CCUCON0.B.SPBDIV;
8000627c:	4c f0       	ld.w %d15,[%a15]0
8000627e:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80006282:	4b 0f 41 f1 	itof %d15,%d15
80006286:	3c 0c       	j 8000629e <IfxScuCcu_getSpbFrequency+0x70>
        }

        break;
    case 1:
        spbFrequency = sourceFrequency / 30;
80006288:	7b 00 1f f4 	movh %d15,16880
8000628c:	3c 09       	j 8000629e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 2:
        spbFrequency = sourceFrequency / 60;
8000628e:	7b 00 27 f4 	movh %d15,17008
80006292:	3c 06       	j 8000629e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 3:
        spbFrequency = sourceFrequency / 120;
80006294:	7b 00 2f f4 	movh %d15,17136
80006298:	3c 03       	j 8000629e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
8000629a:	7b 00 37 f4 	movh %d15,17264
8000629e:	4b f2 51 f0 	div.f %d15,%d2,%d15
        spbFrequency = 0.0;
        break;
    }

    return spbFrequency;
}
800062a2:	02 f2       	mov %d2,%d15
800062a4:	00 90       	ret 

800062a6 <IfxScuCcu_getModuleFrequency>:
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
800062a6:	91 30 00 ff 	movh.a %a15,61443
800062aa:	d9 ff 38 06 	lea %a15,[%a15]24632 <f0036038 <_SMALL_DATA4_+0x4002e038>>
800062ae:	48 09       	ld.w %d9,[%a15]0
    spbFreq = IfxScuCcu_getSpbFrequency();
800062b0:	6d ff bf ff 	call 8000622e <IfxScuCcu_getSpbFrequency>

    if (scuFdr.B.DM == 1)
800062b4:	bb 00 00 fc 	mov.u %d15,49152
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
    spbFreq = IfxScuCcu_getSpbFrequency();
800062b8:	02 23       	mov %d3,%d2

    if (scuFdr.B.DM == 1)
800062ba:	26 9f       	and %d15,%d9
800062bc:	3b 00 00 24 	mov %d2,16384
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
800062c0:	b7 09 16 85 	insert %d8,%d9,0,10,22
    spbFreq = IfxScuCcu_getSpbFrequency();

    if (scuFdr.B.DM == 1)
800062c4:	7e 29       	jne %d15,%d2,800062d6 <IfxScuCcu_getModuleFrequency+0x30>
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
800062c6:	3b 00 40 20 	mov %d2,1024
800062ca:	a2 82       	sub %d2,%d8
800062cc:	4b 02 41 21 	itof %d2,%d2
800062d0:	4b 23 51 20 	div.f %d2,%d3,%d2
800062d4:	00 90       	ret 
    }
    else if (scuFdr.B.DM == 2)
800062d6:	bb 00 00 48 	mov.u %d4,32768
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
    }
    else
    {
        moduleFreq = 0;
800062da:	82 02       	mov %d2,0

    if (scuFdr.B.DM == 1)
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
    }
    else if (scuFdr.B.DM == 2)
800062dc:	7e 49       	jne %d15,%d4,800062ee <IfxScuCcu_getModuleFrequency+0x48>
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
800062de:	4b 08 41 21 	itof %d2,%d8
800062e2:	7b 00 a8 f3 	movh %d15,14976
800062e6:	4b 23 41 20 	mul.f %d2,%d3,%d2
800062ea:	4b f2 41 20 	mul.f %d2,%d2,%d15
    {
        moduleFreq = 0;
    }

    return moduleFreq;
}
800062ee:	00 90       	ret 

800062f0 <IfxScuCcu_getSriFrequency>:
float32 IfxScuCcu_getSriFrequency(void)
{
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
800062f0:	6d ff de fe 	call 800060ac <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800062f4:	91 30 00 ff 	movh.a %a15,61443
800062f8:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800062fc:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
        break;
    default:
        sriFrequency = 0.0;
800062fe:	82 0f       	mov %d15,0
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80006300:	37 03 64 36 	extr.u %d3,%d3,12,4
80006304:	ff 53 31 80 	jge.u %d3,5,80006366 <IfxScuCcu_getSriFrequency+0x76>
80006308:	91 00 00 f8 	movh.a %a15,32768
8000630c:	d9 ff 18 c6 	lea %a15,[%a15]25368 <80006318 <IfxScuCcu_getSriFrequency+0x28>>
80006310:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006314:	dc 0f       	ji %a15
80006316:	00 00       	nop 
80006318:	1d 00 0a 00 	j 8000632c <IfxScuCcu_getSriFrequency+0x3c>
8000631c:	1d 00 18 00 	j 8000634c <IfxScuCcu_getSriFrequency+0x5c>
80006320:	1d 00 19 00 	j 80006352 <IfxScuCcu_getSriFrequency+0x62>
80006324:	1d 00 1a 00 	j 80006358 <IfxScuCcu_getSriFrequency+0x68>
80006328:	1d 00 1b 00 	j 8000635e <IfxScuCcu_getSriFrequency+0x6e>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
8000632c:	91 30 00 ff 	movh.a %a15,61443
80006330:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006334:	48 03       	ld.w %d3,[%a15]0
        {
            sriFrequency = 0.0;
80006336:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
80006338:	37 03 64 34 	extr.u %d3,%d3,8,4
8000633c:	df 03 15 00 	jeq %d3,0,80006366 <IfxScuCcu_getSriFrequency+0x76>
        {
            sriFrequency = 0.0;
        }
        else
        {
            sriFrequency = sourceFrequency / SCU_CCUCON0.B.SRIDIV;
80006340:	4c f0       	ld.w %d15,[%a15]0
80006342:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80006346:	4b 0f 41 f1 	itof %d15,%d15
8000634a:	3c 0c       	j 80006362 <IfxScuCcu_getSriFrequency+0x72>
        }

        break;
    case 1:
        sriFrequency = sourceFrequency / 30;
8000634c:	7b 00 1f f4 	movh %d15,16880
80006350:	3c 09       	j 80006362 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 2:
        sriFrequency = sourceFrequency / 60;
80006352:	7b 00 27 f4 	movh %d15,17008
80006356:	3c 06       	j 80006362 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 3:
        sriFrequency = sourceFrequency / 120;
80006358:	7b 00 2f f4 	movh %d15,17136
8000635c:	3c 03       	j 80006362 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
8000635e:	7b 00 37 f4 	movh %d15,17264
80006362:	4b f2 51 f0 	div.f %d15,%d2,%d15
        sriFrequency = 0.0;
        break;
    }

    return sriFrequency;
}
80006366:	02 f2       	mov %d2,%d15
80006368:	00 90       	ret 

8000636a <IfxScuCcu_getCpuFrequency>:
    return bbbFrequency;
}


float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu)
{
8000636a:	02 4f       	mov %d15,%d4
    float32 frequency = IfxScuCcu_getSriFrequency();
8000636c:	6d ff c2 ff 	call 800062f0 <IfxScuCcu_getSriFrequency>
    uint32  cpuDiv    = 0;

    switch (cpu)
80006370:	1e 1d       	jeq %d15,1,8000638a <IfxScuCcu_getCpuFrequency+0x20>
80006372:	6e 07       	jz %d15,80006380 <IfxScuCcu_getCpuFrequency+0x16>
80006374:	de 2a       	jne %d15,2,800063a8 <IfxScuCcu_getCpuFrequency+0x3e>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
80006376:	91 30 00 ff 	movh.a %a15,61443
8000637a:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
8000637e:	3c 0a       	j 80006392 <IfxScuCcu_getCpuFrequency+0x28>
    uint32  cpuDiv    = 0;

    switch (cpu)
    {
    case IfxCpu_ResourceCpu_0:
        cpuDiv = SCU_CCUCON6.U;
80006380:	91 30 00 ff 	movh.a %a15,61443
80006384:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006388:	3c 05       	j 80006392 <IfxScuCcu_getCpuFrequency+0x28>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
8000638a:	91 30 00 ff 	movh.a %a15,61443
8000638e:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
80006392:	4c f0       	ld.w %d15,[%a15]0
    default:
        frequency = 0.0;
        break;
    }

    if (cpuDiv != 0)
80006394:	6e 0b       	jz %d15,800063aa <IfxScuCcu_getCpuFrequency+0x40>
    {
        frequency = frequency * (cpuDiv / 64.0f);
80006396:	4b 0f 61 f1 	utof %d15,%d15
8000639a:	7b 00 c8 33 	movh %d3,15488
8000639e:	4b 3f 41 f0 	mul.f %d15,%d15,%d3
800063a2:	4b f2 41 20 	mul.f %d2,%d2,%d15
800063a6:	00 90       	ret 
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
        break;
    default:
        frequency = 0.0;
800063a8:	82 02       	mov %d2,0
    {
        frequency = frequency * (cpuDiv / 64.0f);
    }

    return frequency;
}
800063aa:	00 90       	ret 

800063ac <IfxScuCcu_getFsi2Frequency>:


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
800063ac:	91 30 00 ff 	movh.a %a15,61443
800063b0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800063b4:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSI2DIV == 0)
800063b6:	7b 00 03 30 	movh %d3,48
800063ba:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
800063bc:	37 0f 62 8a 	extr.u %d8,%d15,20,2

    if (ccucon0.B.FSI2DIV == 0)
    {
        frequency = 0;
800063c0:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSI2DIV == 0)
800063c2:	76 3f       	jz %d3,800063e0 <IfxScuCcu_getFsi2Frequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
800063c4:	6d ff 96 ff 	call 800062f0 <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
800063c8:	3b 00 f0 30 	mov %d3,3840
800063cc:	26 3f       	and %d15,%d3
800063ce:	1b 0f f0 ff 	addi %d15,%d15,-256
800063d2:	8f 0f d0 f1 	andn %d15,%d15,256
800063d6:	ee 05       	jnz %d15,800063e0 <IfxScuCcu_getFsi2Frequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSI2DIV;
800063d8:	4b 08 41 f1 	itof %d15,%d8
800063dc:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
800063e0:	00 90       	ret 

800063e2 <IfxScuCcu_getFsiFrequency>:


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
800063e2:	91 30 00 ff 	movh.a %a15,61443
800063e6:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800063ea:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSIDIV == 0)
800063ec:	7b 00 30 30 	movh %d3,768
800063f0:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
800063f2:	37 0f 62 8c 	extr.u %d8,%d15,24,2

    if (ccucon0.B.FSIDIV == 0)
    {
        frequency = 0;
800063f6:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSIDIV == 0)
800063f8:	76 3f       	jz %d3,80006416 <IfxScuCcu_getFsiFrequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
800063fa:	6d ff 7b ff 	call 800062f0 <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
800063fe:	3b 00 f0 30 	mov %d3,3840
80006402:	26 3f       	and %d15,%d3
80006404:	1b 0f f0 ff 	addi %d15,%d15,-256
80006408:	8f 0f d0 f1 	andn %d15,%d15,256
8000640c:	ee 05       	jnz %d15,80006416 <IfxScuCcu_getFsiFrequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSIDIV;
8000640e:	4b 08 41 f1 	itof %d15,%d8
80006412:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
80006416:	00 90       	ret 

80006418 <IfxScuCcu_init>:
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
80006418:	19 4f 10 10 	ld.w %d15,[%a4]80
8000641c:	91 00 00 c7 	movh.a %a12,28672
    return sriFrequency;
}


boolean IfxScuCcu_init(const IfxScuCcu_Config *cfg)
{
80006420:	40 4f       	mov.aa %a15,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
80006422:	59 cf 38 30 	st.w [%a12]248 <700000f8 <IfxScuCcu_xtalFrequency>>,%d15

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
80006426:	6d 00 c8 07 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
8000642a:	02 29       	mov %d9,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
8000642c:	6d 00 e3 07 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006430:	02 94       	mov %d4,%d9
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
80006432:	02 28       	mov %d8,%d2

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006434:	6d 00 c1 06 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006438:	91 30 00 2f 	movh.a %a2,61443
8000643c:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006440:	54 2c       	ld.w %d12,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;
80006442:	4c 20       	ld.w %d15,[%a2]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006444:	02 94       	mov %d4,%d9

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
80006446:	96 08       	or %d15,8
80006448:	6c 20       	st.w [%a2]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000644a:	6d 00 eb 07 	call 80007420 <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000644e:	02 84       	mov %d4,%d8
80006450:	6d 00 ce 06 	call 800071ec <IfxScuWdt_clearSafetyEndinit>
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006454:	37 0c e1 c1 	extr.u %d12,%d12,3,1

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        while (SCU_CCUCON0.B.LCK != 0U)
80006458:	91 30 00 3f 	movh.a %a3,61443
8000645c:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006460:	4c 30       	ld.w %d15,[%a3]0
80006462:	91 30 00 2f 	movh.a %a2,61443
80006466:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000646a:	bf 0f fb 7f 	jlt %d15,0,80006460 <IfxScuCcu_init+0x48>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
8000646e:	4c 20       	ld.w %d15,[%a2]0
80006470:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006474:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80006476:	4c 20       	ld.w %d15,[%a2]0
80006478:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000647c:	6c 20       	st.w [%a2]0,%d15

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
8000647e:	91 30 00 2f 	movh.a %a2,61443
80006482:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006486:	4c 20       	ld.w %d15,[%a2]0
80006488:	96 10       	or %d15,16
8000648a:	6c 20       	st.w [%a2]0,%d15
        /* Now PLL is in free running mode */

        /* Select Clock Source as PLL input clock */
        while (SCU_CCUCON0.B.LCK != 0U)
8000648c:	91 30 00 2f 	movh.a %a2,61443
80006490:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006494:	4c 20       	ld.w %d15,[%a2]0
80006496:	bf 0f ff 7f 	jlt %d15,0,80006494 <IfxScuCcu_init+0x7c>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
8000649a:	91 30 00 2f 	movh.a %a2,61443
8000649e:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800064a2:	4c 20       	ld.w %d15,[%a2]0
800064a4:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
800064a8:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
800064aa:	4c 20       	ld.w %d15,[%a2]0
800064ac:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
800064b0:	6c 20       	st.w [%a2]0,%d15
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
800064b2:	6d 00 82 07 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
800064b6:	91 30 00 2f 	movh.a %a2,61443
800064ba:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
800064be:	02 2f       	mov %d15,%d2

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
800064c0:	54 22       	ld.w %d2,[%a2]

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
800064c2:	40 23       	mov.aa %a3,%a2
    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
800064c4:	8f 02 c6 21 	andn %d2,%d2,96
800064c8:	74 22       	st.w [%a2],%d2

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
800064ca:	19 c6 38 30 	ld.w %d6,[%a12]248 <700000f8 <IfxScuCcu_xtalFrequency>>
800064ce:	7b 60 02 20 	movh %d2,38
800064d2:	1b 02 5a 22 	addi %d2,%d2,9632
800064d6:	4b 26 11 62 	div.u %e6,%d6,%d2
800064da:	54 22       	ld.w %d2,[%a2]
800064dc:	c2 f6       	add %d6,-1
800064de:	37 62 05 68 	insert %d6,%d2,%d6,16,5
800064e2:	74 26       	st.w [%a2],%d6

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
800064e4:	54 22       	ld.w %d2,[%a2]
800064e6:	8f 42 40 21 	or %d2,%d2,4
800064ea:	74 22       	st.w [%a2],%d2

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
800064ec:	c5 02 3f 90 	lea %a2,27f <_.+0x27e>
800064f0:	54 32       	ld.w %d2,[%a3]
800064f2:	6f 12 05 80 	jnz.t %d2,1,800064fc <IfxScuCcu_init+0xe4>
800064f6:	fc 2d       	loop %a2,800064f0 <IfxScuCcu_init+0xd8>
    {
        TimeoutCtr--;

        if (TimeoutCtr == 0)
        {
            status = 1;
800064f8:	82 1b       	mov %d11,1
800064fa:	3c 05       	j 80006504 <IfxScuCcu_init+0xec>

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
800064fc:	54 32       	ld.w %d2,[%a3]
800064fe:	6f 82 fc 7f 	jz.t %d2,8,800064f6 <IfxScuCcu_init+0xde>


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;
80006502:	82 0b       	mov %d11,0
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
80006504:	02 f4       	mov %d4,%d15
80006506:	6d 00 58 06 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
8000650a:	91 30 00 2f 	movh.a %a2,61443
8000650e:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
80006512:	54 22       	ld.w %d2,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
        IfxScuWdt_setCpuEndinit(endinitPw);
80006514:	02 f4       	mov %d4,%d15
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
80006516:	8f 82 40 21 	or %d2,%d2,8
8000651a:	74 22       	st.w [%a2],%d2
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
8000651c:	91 30 00 2f 	movh.a %a2,61443
80006520:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006524:	54 22       	ld.w %d2,[%a2]
80006526:	8f 82 40 21 	or %d2,%d2,8
8000652a:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinitPw);
8000652c:	6d 00 7a 07 	call 80007420 <IfxScuWdt_setCpuEndinit>
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */

        status             |= IfxScuCcu_isOscillatorStable();

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006530:	02 84       	mov %d4,%d8
80006532:	6d 00 e3 07 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
    }

    if (status == 0)
80006536:	df 0b 29 81 	jne %d11,0,80006788 <IfxScuCcu_init+0x370>

        /*Setting up P N and K2 values equate pll to evr osc freq */
        {
            {
                /*Set the K2 divider value for the step corresponding to step count */
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000653a:	02 84       	mov %d4,%d8
8000653c:	6d 00 58 06 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

                while (SCU_PLLSTAT.B.K2RDY == 0U)
80006540:	91 30 00 2f 	movh.a %a2,61443
80006544:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006548:	4c 20       	ld.w %d15,[%a2]0
8000654a:	6f 5f ff 7f 	jz.t %d15,5,80006548 <IfxScuCcu_init+0x130>
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
8000654e:	91 30 00 2f 	movh.a %a2,61443
80006552:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80006556:	54 22       	ld.w %d2,[%a2]
80006558:	0c fa       	ld.bu %d15,[%a15]10
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
8000655a:	7b 20 85 43 	movh %d4,14418
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
8000655e:	37 f2 07 f0 	insert %d15,%d2,%d15,0,7
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80006562:	1b 74 71 4b 	addi %d4,%d4,-18665
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
80006566:	6c 20       	st.w [%a2]0,%d15

                {
                    /*change P and N divider values */
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
80006568:	91 30 00 2f 	movh.a %a2,61443
8000656c:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006570:	54 22       	ld.w %d2,[%a2]
80006572:	0c f8       	ld.bu %d15,[%a15]8
80006574:	37 f2 04 fc 	insert %d15,%d2,%d15,24,4
80006578:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
8000657a:	54 22       	ld.w %d2,[%a2]
8000657c:	0c f9       	ld.bu %d15,[%a15]9
8000657e:	37 f2 87 f4 	insert %d15,%d2,%d15,9,7
80006582:	6c 20       	st.w [%a2]0,%d15

                    /* Disable oscillator disconnect feature
                     * in case of PLL unlock, PLL stays connected to fref */
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
80006584:	4c 20       	ld.w %d15,[%a2]0
80006586:	96 40       	or %d15,64
80006588:	6c 20       	st.w [%a2]0,%d15
                    //                    workaround for Errata: PLL TC 005
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
8000658a:	4c 20       	ld.w %d15,[%a2]0
8000658c:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80006590:	6c 20       	st.w [%a2]0,%d15
                    /* Connect PLL to fREF as oscillator clock is connected to PLL   */
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
80006592:	4c 20       	ld.w %d15,[%a2]0
80006594:	96 20       	or %d15,32
80006596:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
80006598:	4c 20       	ld.w %d15,[%a2]0
8000659a:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000659e:	6c 20       	st.w [%a2]0,%d15

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;
800065a0:	4c 20       	ld.w %d15,[%a2]0
800065a2:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800065a6:	6c 20       	st.w [%a2]0,%d15

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
800065a8:	6d ff 94 fd 	call 800060d0 <IfxScuCcu_wait>

                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
800065ac:	91 30 00 2f 	movh.a %a2,61443
800065b0:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800065b4:	4c 20       	ld.w %d15,[%a2]0
800065b6:	6f 2f ff 7f 	jz.t %d15,2,800065b4 <IfxScuCcu_init+0x19c>
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
800065ba:	91 30 00 2f 	movh.a %a2,61443
800065be:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800065c2:	4c 20       	ld.w %d15,[%a2]0

                    while (SCU_CCUCON0.B.LCK != 0U)
800065c4:	91 30 00 3f 	movh.a %a3,61443
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
800065c8:	8f 1f c0 f1 	andn %d15,%d15,1
800065cc:	6c 20       	st.w [%a2]0,%d15

                    while (SCU_CCUCON0.B.LCK != 0U)
800065ce:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800065d2:	4c 30       	ld.w %d15,[%a3]0
800065d4:	91 30 00 2f 	movh.a %a2,61443
800065d8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800065dc:	bf 0f fb 7f 	jlt %d15,0,800065d2 <IfxScuCcu_init+0x1ba>
                    {
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_CCUCON0.B.CLKSEL = 0x01;
800065e0:	4c 20       	ld.w %d15,[%a2]0
800065e2:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
800065e6:	6c 20       	st.w [%a2]0,%d15

                    /*Configure the clock distribution */
                    while (SCU_CCUCON0.B.LCK != 0U)
800065e8:	4c 20       	ld.w %d15,[%a2]0
800065ea:	91 30 00 cf 	movh.a %a12,61443
800065ee:	d9 cc 30 06 	lea %a12,[%a12]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800065f2:	bf 0f fb 7f 	jlt %d15,0,800065e8 <IfxScuCcu_init+0x1d0>
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
800065f6:	48 34       	ld.w %d4,[%a15]12
800065f8:	6d ff 6c fd 	call 800060d0 <IfxScuCcu_wait>

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
800065fc:	4c f5       	ld.w %d15,[%a15]20
800065fe:	54 c3       	ld.w %d3,[%a12]
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80006600:	48 42       	ld.w %d2,[%a15]16
                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
80006602:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80006606:	26 f2       	and %d2,%d15
80006608:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
8000660c:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon0.B.UP     = 1;
80006610:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
80006614:	91 30 00 3f 	movh.a %a3,61443
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
                        ccucon0.B.UP     = 1;
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
80006618:	6c c0       	st.w [%a12]0,%d15
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
8000661a:	d9 33 34 06 	lea %a3,[%a3]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000661e:	4c 30       	ld.w %d15,[%a3]0
80006620:	91 30 00 2f 	movh.a %a2,61443
80006624:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80006628:	bf 0f fb 7f 	jlt %d15,0,8000661e <IfxScuCcu_init+0x206>
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
8000662c:	4c f7       	ld.w %d15,[%a15]28
8000662e:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
80006630:	48 62       	ld.w %d2,[%a15]24
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
80006632:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
80006636:	26 f2       	and %d2,%d15
80006638:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon1.B.INSEL = 1;
8000663c:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon1.B.UP    = 1;
80006640:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON1     = ccucon1;
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
80006644:	91 30 00 3f 	movh.a %a3,61443
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
                        ccucon1.B.INSEL = 1;
                        ccucon1.B.UP    = 1;
                        SCU_CCUCON1     = ccucon1;
80006648:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
8000664a:	d9 33 00 16 	lea %a3,[%a3]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
8000664e:	4c 30       	ld.w %d15,[%a3]0
80006650:	91 30 00 2f 	movh.a %a2,61443
80006654:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
80006658:	bf 0f fb 7f 	jlt %d15,0,8000664e <IfxScuCcu_init+0x236>
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
8000665c:	4c f9       	ld.w %d15,[%a15]36
8000665e:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
80006660:	48 82       	ld.w %d2,[%a15]32
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
80006662:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
80006666:	26 f2       	and %d2,%d15
80006668:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon2.B.UP = 1;
8000666c:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON2  = ccucon2;
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
80006670:	91 30 00 3f 	movh.a %a3,61443
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
                        ccucon2.B.UP = 1;
                        SCU_CCUCON2  = ccucon2;
80006674:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
80006676:	d9 33 0c 16 	lea %a3,[%a3]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
8000667a:	4c 30       	ld.w %d15,[%a3]0
8000667c:	91 30 00 2f 	movh.a %a2,61443
80006680:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
80006684:	bf 0f fb 7f 	jlt %d15,0,8000667a <IfxScuCcu_init+0x262>
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
80006688:	54 23       	ld.w %d3,[%a2]
8000668a:	4c fb       	ld.w %d15,[%a15]44
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
8000668c:	48 a2       	ld.w %d2,[%a15]40
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
8000668e:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
80006692:	26 f2       	and %d2,%d15
80006694:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon5.B.UP = 1;
80006698:	b7 1f 01 ff 	insert %d15,%d15,1,30,1

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
8000669c:	48 c2       	ld.w %d2,[%a15]48
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
                        ccucon5.B.UP = 1;
                        SCU_CCUCON5  = ccucon5;
8000669e:	6c 20       	st.w [%a2]0,%d15
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
800066a0:	91 30 00 2f 	movh.a %a2,61443
800066a4:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
800066a8:	54 23       	ld.w %d3,[%a2]
800066aa:	4c fd       	ld.w %d15,[%a15]52
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
                        SCU_CCUCON8 = ccucon8;
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800066ac:	02 84       	mov %d4,%d8
                        SCU_CCUCON5  = ccucon5;
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
800066ae:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
800066b2:	26 f2       	and %d2,%d15
800066b4:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON6 = ccucon6;
800066b8:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
800066ba:	91 30 00 2f 	movh.a %a2,61443
800066be:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
800066c2:	54 23       	ld.w %d3,[%a2]
800066c4:	4c ff       	ld.w %d15,[%a15]60
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
800066c6:	48 e2       	ld.w %d2,[%a15]56
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
800066c8:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
800066cc:	26 f2       	and %d2,%d15
800066ce:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON7 = ccucon7;
800066d2:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
800066d4:	91 30 00 2f 	movh.a %a2,61443
800066d8:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
800066dc:	54 23       	ld.w %d3,[%a2]
800066de:	19 ff 04 10 	ld.w %d15,[%a15]68 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
800066e2:	19 f2 00 10 	ld.w %d2,[%a15]64 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
800066e6:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
800066ea:	26 f2       	and %d2,%d15
800066ec:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON8 = ccucon8;
800066f0:	6c 20       	st.w [%a2]0,%d15
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800066f2:	6d 00 03 07 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
            }
        }

        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
800066f6:	91 00 80 cf 	movh.a %a12,63488
800066fa:	d9 cc 14 02 	lea %a12,[%a12]8212 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
800066fe:	19 ff 0c 10 	ld.w %d15,[%a15]76 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
80006702:	54 c3       	ld.w %d3,[%a12]

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80006704:	19 f2 08 10 	ld.w %d2,[%a15]72 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
80006708:	0f f3 e0 30 	andn %d3,%d3,%d15
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
8000670c:	26 f2       	and %d2,%d15
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
8000670e:	02 94       	mov %d4,%d9
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80006710:	0f 23 a0 f0 	or %d15,%d3,%d2
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
80006714:	6d 00 51 05 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
80006718:	6c c0       	st.w [%a12]0,%d15
                IfxScuWdt_setCpuEndinit(endinit_pw);
8000671a:	02 94       	mov %d4,%d9
8000671c:	6d 00 82 06 	call 80007420 <IfxScuWdt_setCpuEndinit>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80006720:	91 30 00 df 	movh.a %a13,61443
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80006724:	91 30 00 cf 	movh.a %a12,61443
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80006728:	82 0d       	mov %d13,0
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
8000672a:	d9 dd 14 06 	lea %a13,[%a13]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
8000672e:	d9 cc 1c 06 	lea %a12,[%a12]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80006732:	0c f0       	ld.bu %d15,[%a15]0
80006734:	8f fd 0f 21 	and %d2,%d13,255
80006738:	7f f2 28 80 	jge.u %d2,%d15,80006788 <IfxScuCcu_init+0x370>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000673c:	02 84       	mov %d4,%d8
8000673e:	6d 00 57 05 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80006742:	4c d0       	ld.w %d15,[%a13]0
80006744:	6f 5f ff 7f 	jz.t %d15,5,80006742 <IfxScuCcu_init+0x32a>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80006748:	02 df       	mov %d15,%d13
8000674a:	16 ff       	and %d15,255
8000674c:	53 cf 20 a0 	mul %d10,%d15,12
80006750:	c8 12       	ld.a %a2,[%a15]4
80006752:	4c c0       	ld.w %d15,[%a12]0
80006754:	60 a3       	mov.a %a3,%d10
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006756:	02 84       	mov %d4,%d8
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80006758:	30 32       	add.a %a2,%a3
8000675a:	14 22       	ld.bu %d2,[%a2]
8000675c:	37 2f 07 20 	insert %d2,%d15,%d2,0,7
80006760:	74 c2       	st.w [%a12],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006762:	6d 00 cb 06 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
            }

            /*call the hook function if configured */
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
80006766:	c8 12       	ld.a %a2,[%a15]4
80006768:	60 a3       	mov.a %a3,%d10
8000676a:	30 32       	add.a %a2,%a3
8000676c:	99 22 08 00 	ld.a %a2,[%a2]8
80006770:	bc 23       	jz.a %a2,80006776 <IfxScuCcu_init+0x35e>
            {
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
80006772:	2d 02 00 00 	calli %a2
            }

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
80006776:	c8 12       	ld.a %a2,[%a15]4
80006778:	60 a3       	mov.a %a3,%d10
8000677a:	c2 1d       	add %d13,1
8000677c:	30 32       	add.a %a2,%a3
8000677e:	19 24 04 00 	ld.w %d4,[%a2]4
80006782:	6d ff a7 fc 	call 800060d0 <IfxScuCcu_wait>
80006786:	3c d6       	j 80006732 <IfxScuCcu_init+0x31a>
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006788:	02 84       	mov %d4,%d8
8000678a:	6d 00 31 05 	call 800071ec <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
8000678e:	91 30 00 ff 	movh.a %a15,61443
80006792:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006796:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006798:	02 84       	mov %d4,%d8
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
8000679a:	8f 0f c4 f1 	andn %d15,%d15,64
8000679e:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800067a0:	6d 00 ac 06 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
800067a4:	91 30 00 ff 	movh.a %a15,61443
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800067a8:	02 94       	mov %d4,%d9
        SCU_TRAPCLR.B.SMUT = 1U;
800067aa:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800067ae:	6d 00 04 05 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
800067b2:	4c f0       	ld.w %d15,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800067b4:	06 3c       	sh %d12,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
800067b6:	96 08       	or %d15,8
800067b8:	68 0f       	st.w [%a15]0,%d15
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800067ba:	91 30 00 ff 	movh.a %a15,61443
800067be:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800067c2:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800067c4:	02 94       	mov %d4,%d9
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800067c6:	8f 8f c0 f1 	andn %d15,%d15,8
800067ca:	a6 fc       	or %d12,%d15
800067cc:	68 0c       	st.w [%a15]0,%d12
        IfxScuWdt_setCpuEndinit(endinit_pw);
800067ce:	6d 00 29 06 	call 80007420 <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
800067d2:	02 b2       	mov %d2,%d11
800067d4:	00 90       	ret 

800067d6 <IfxScuCcu_initConfig>:


void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg)
{
    *cfg = IfxScuCcu_defaultClockConfig;
800067d6:	91 00 00 f8 	movh.a %a15,32768
800067da:	d9 ff a0 b0 	lea %a15,[%a15]2784 <80000ae0 <IfxScuCcu_defaultClockConfig>>
800067de:	c5 02 14 00 	lea %a2,14 <_.+0x13>
800067e2:	44 ff       	ld.w %d15,[%a15+]
800067e4:	64 4f       	st.w [%a4+],%d15
800067e6:	fc 2e       	loop %a2,800067e2 <IfxScuCcu_initConfig+0xc>
800067e8:	00 90       	ret 

800067ea <IfxScuCcu_initErayPll>:
}


boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
800067ea:	40 4c       	mov.aa %a12,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
800067ec:	6d 00 e5 05 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
800067f0:	02 2f       	mov %d15,%d2
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
800067f2:	6d 00 00 06 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800067f6:	02 f4       	mov %d4,%d15
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
800067f8:	02 28       	mov %d8,%d2

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800067fa:	6d 00 de 04 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800067fe:	91 30 00 ff 	movh.a %a15,61443
80006802:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006806:	48 03       	ld.w %d3,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006808:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000680a:	02 f4       	mov %d4,%d15
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
8000680c:	8f 82 40 21 	or %d2,%d2,8
80006810:	68 02       	st.w [%a15]0,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006812:	37 03 e1 a1 	extr.u %d10,%d3,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006816:	6d 00 05 06 	call 80007420 <IfxScuWdt_setCpuEndinit>
    }
    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000681a:	02 84       	mov %d4,%d8
8000681c:	6d 00 e8 04 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

    // ensure that PLL enabled
    if (!SCU_PLLERAYCON0.B.PLLPWD || SCU_PLLERAYCON0.B.VCOPWD || SCU_PLLERAYSTAT.B.PWDSTAT)
80006820:	91 30 00 ff 	movh.a %a15,61443
80006824:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006828:	48 02       	ld.w %d2,[%a15]0
8000682a:	ef 02 0c 00 	jz.t %d2,16,80006842 <IfxScuCcu_initErayPll+0x58>
8000682e:	48 02       	ld.w %d2,[%a15]0
80006830:	6f 12 09 80 	jnz.t %d2,1,80006842 <IfxScuCcu_initErayPll+0x58>
80006834:	91 30 00 ff 	movh.a %a15,61443
80006838:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
8000683c:	48 02       	ld.w %d2,[%a15]0
8000683e:	6f 12 19 00 	jz.t %d2,1,80006870 <IfxScuCcu_initErayPll+0x86>
    {   // PLLPWD=0 or VCOPWD=1 or PWDSTAT=1?
      // enable PLL and leave power saving mode
        SCU_PLLERAYCON0.B.PLLPWD = 1;
80006842:	91 30 00 ff 	movh.a %a15,61443
80006846:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
8000684a:	48 02       	ld.w %d2,[%a15]0
8000684c:	b7 f2 01 28 	insert %d2,%d2,15,16,1
80006850:	68 02       	st.w [%a15]0,%d2
        SCU_PLLERAYCON0.B.VCOPWD = 0;
80006852:	48 02       	ld.w %d2,[%a15]0
80006854:	8f 22 c0 21 	andn %d2,%d2,2
80006858:	68 02       	st.w [%a15]0,%d2

        while (SCU_PLLERAYSTAT.B.PWDSTAT)  // poll PWDSTAT
8000685a:	91 30 00 ff 	movh.a %a15,61443
8000685e:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006862:	48 02       	ld.w %d2,[%a15]0
80006864:	6f 12 ff ff 	jnz.t %d2,1,80006862 <IfxScuCcu_initErayPll+0x78>
        {}

        /*Wait for waitCounter corresponding to the pll step */
        IfxScuCcu_wait(cfg->pllInitialStep.waitTime);
80006868:	19 c4 04 00 	ld.w %d4,[%a12]4
8000686c:	6d ff 32 fc 	call 800060d0 <IfxScuCcu_wait>
    }

    /* Enter Prescalar mode */
    /* Update K and N dividers */
    if (!SCU_PLLERAYSTAT.B.VCOBYST)      // checking PLLERAYBYPST flag
80006870:	91 30 00 ff 	movh.a %a15,61443
80006874:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006878:	48 02       	ld.w %d2,[%a15]0
8000687a:	6f 02 15 80 	jnz.t %d2,0,800068a4 <IfxScuCcu_initErayPll+0xba>
    {                                    // select "secure" K1 value - please check @silicon if K1=4 is ok
        while (!SCU_PLLERAYSTAT.B.K1RDY) // poll K1RDY before changing K
8000687e:	48 02       	ld.w %d2,[%a15]0
80006880:	6f 42 ff 7f 	jz.t %d2,4,8000687e <IfxScuCcu_initErayPll+0x94>
        {}

        SCU_PLLERAYCON1.B.K1DIV = 3;
80006884:	91 30 00 ff 	movh.a %a15,61443
80006888:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
8000688c:	48 02       	ld.w %d2,[%a15]0
8000688e:	b7 32 07 28 	insert %d2,%d2,3,16,7
80006892:	68 02       	st.w [%a15]0,%d2

        // activate VCO bypass (bit 0: VCOBYP=1)
        SCU_PLLERAYCON0.B.VCOBYP = 1;
80006894:	91 30 00 ff 	movh.a %a15,61443
80006898:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
8000689c:	48 02       	ld.w %d2,[%a15]0
8000689e:	8f 12 40 21 	or %d2,%d2,1
800068a2:	68 02       	st.w [%a15]0,%d2
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
800068a4:	91 30 00 ff 	movh.a %a15,61443
800068a8:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800068ac:	48 02       	ld.w %d2,[%a15]0
800068ae:	6f 52 ff 7f 	jz.t %d2,5,800068ac <IfxScuCcu_initErayPll+0xc2>
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
800068b2:	91 30 00 ff 	movh.a %a15,61443
800068b6:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
800068ba:	48 03       	ld.w %d3,[%a15]0
800068bc:	39 c2 02 00 	ld.bu %d2,[%a12]2 <f0030000 <_SMALL_DATA4_+0x40028000>>
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800068c0:	02 84       	mov %d4,%d8
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
800068c2:	37 23 07 20 	insert %d2,%d3,%d2,0,7
800068c6:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.PDIV  = cfg->pllInitialStep.pDivider;
800068c8:	91 30 00 ff 	movh.a %a15,61443
800068cc:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800068d0:	48 03       	ld.w %d3,[%a15]0
800068d2:	14 c2       	ld.bu %d2,[%a12]
800068d4:	37 23 04 2c 	insert %d2,%d3,%d2,24,4
800068d8:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.NDIV  = cfg->pllInitialStep.nDivider;
800068da:	48 03       	ld.w %d3,[%a15]0
800068dc:	39 c2 01 00 	ld.bu %d2,[%a12]1
800068e0:	37 23 85 24 	insert %d2,%d3,%d2,9,5
800068e4:	68 02       	st.w [%a15]0,%d2
     *  CLRFINDIS = 1 ==> Connect OSC to PLL
     *  PLLPWD = 1    ==> PLL Power Saving Mode : Normal behaviour
     *  NDIV = NDIV
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
800068e6:	48 02       	ld.w %d2,[%a15]0
800068e8:	b7 f2 01 29 	insert %d2,%d2,15,18,1
800068ec:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;
800068ee:	48 02       	ld.w %d2,[%a15]0
800068f0:	8f 02 42 21 	or %d2,%d2,32
800068f4:	68 02       	st.w [%a15]0,%d2

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800068f6:	6d 00 01 06 	call 800074f8 <IfxScuWdt_setSafetyEndinit>

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
800068fa:	91 10 00 f0 	movh.a %a15,1
800068fe:	91 30 00 2f 	movh.a %a2,61443
80006902:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006906:	d9 ff 0f dc 	lea %a15,[%a15]-15537 <c34f <__TRICORE_DERIVATE_MEMORY_MAP__+0x9c4f>>
8000690a:	fd f0 04 00 	loop %a15,80006912 <IfxScuCcu_initErayPll+0x128>
    {}

    // check for timeout, exit immediately (don't disable VCO bypass) of not locked
    if (!time_out_ctr)
    {
        status = TRUE;
8000690e:	82 19       	mov %d9,1
80006910:	3c 05       	j 8000691a <IfxScuCcu_initErayPll+0x130>
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
80006912:	54 22       	ld.w %d2,[%a2]
80006914:	6f 22 fb 7f 	jz.t %d2,2,8000690a <IfxScuCcu_initErayPll+0x120>

boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
80006918:	82 09       	mov %d9,0
    if (!time_out_ctr)
    {
        status = TRUE;
    }

    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000691a:	02 84       	mov %d4,%d8
8000691c:	6d 00 68 04 	call 800071ec <IfxScuWdt_clearSafetyEndinit>
    /*Bypass VCO*/
    SCU_PLLERAYCON0.B.VCOBYP = 0U;
80006920:	91 30 00 ff 	movh.a %a15,61443
80006924:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006928:	48 02       	ld.w %d2,[%a15]0
8000692a:	8f 12 c0 21 	andn %d2,%d2,1
8000692e:	68 02       	st.w [%a15]0,%d2

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
80006930:	91 30 00 ff 	movh.a %a15,61443
80006934:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006938:	48 02       	ld.w %d2,[%a15]0
8000693a:	6f 02 ff ff 	jnz.t %d2,0,80006938 <IfxScuCcu_initErayPll+0x14e>
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
8000693e:	91 30 00 ff 	movh.a %a15,61443
80006942:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006946:	48 02       	ld.w %d2,[%a15]0
    {
        status = TRUE;
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006948:	02 84       	mov %d4,%d8

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
8000694a:	37 02 61 21 	extr.u %d2,%d2,2,1

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
8000694e:	91 30 00 ff 	movh.a %a15,61443
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
    {
        status = TRUE;
80006952:	ab 19 80 92 	sel %d9,%d2,%d9,1
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006956:	6d 00 d1 05 	call 800074f8 <IfxScuWdt_setSafetyEndinit>

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
8000695a:	02 f4       	mov %d4,%d15
8000695c:	6d 00 2d 04 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006960:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
80006964:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006966:	8f 3a 00 30 	sh %d3,%d10,3

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
8000696a:	8f 82 40 21 	or %d2,%d2,8
8000696e:	68 02       	st.w [%a15]0,%d2
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006970:	91 30 00 ff 	movh.a %a15,61443
80006974:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006978:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000697a:	02 f4       	mov %d4,%d15
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
8000697c:	8f 82 c0 21 	andn %d2,%d2,8
80006980:	a6 32       	or %d2,%d3
80006982:	68 02       	st.w [%a15]0,%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006984:	6d 00 4e 05 	call 80007420 <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
80006988:	02 92       	mov %d2,%d9
8000698a:	00 90       	ret 

8000698c <IfxScuCcu_initErayPllConfig>:


void IfxScuCcu_initErayPllConfig(IfxScuCcu_ErayPllConfig *cfg)
{
    *cfg = IfxScuCcu_defaultErayPllConfig;
8000698c:	91 00 00 f8 	movh.a %a15,32768
80006990:	d9 ff 98 b0 	lea %a15,[%a15]2776 <80000ad8 <IfxScuCcu_defaultErayPllConfig>>
80006994:	09 f2 40 09 	ld.d %e2,[%a15]
80006998:	89 42 40 09 	st.d [%a4],%e2
8000699c:	00 90       	ret 

8000699e <IfxScuCcu_setCpuFrequency>:
    return status;
}


float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq)
{
8000699e:	02 5a       	mov %d10,%d5
800069a0:	02 49       	mov %d9,%d4
    uint16  endinitSfty_pw;
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();
800069a2:	6d ff a7 fc 	call 800062f0 <IfxScuCcu_getSriFrequency>
800069a6:	02 2f       	mov %d15,%d2

    if (cpuFreq >= sriFreq)
800069a8:	4b 2a 01 20 	cmp.f %d2,%d10,%d2
800069ac:	87 22 a2 20 	or.t %d2,%d2,2,%d2,1
    {
        cpuDiv = 0;
800069b0:	82 08       	mov %d8,0
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();

    if (cpuFreq >= sriFreq)
800069b2:	f6 29       	jnz %d2,800069c4 <IfxScuCcu_setCpuFrequency+0x26>
    {
        cpuDiv = 0;
    }
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
800069b4:	7b 00 28 84 	movh %d8,17024
800069b8:	4b 8a 41 80 	mul.f %d8,%d10,%d8
800069bc:	4b f8 51 80 	div.f %d8,%d8,%d15
800069c0:	4b 08 71 81 	ftouz %d8,%d8
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
800069c4:	6d 00 17 05 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800069c8:	02 24       	mov %d4,%d2
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
800069ca:	02 2a       	mov %d10,%d2

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800069cc:	6d 00 10 04 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

        switch (cpu)
800069d0:	df 19 0f 00 	jeq %d9,1,800069ee <IfxScuCcu_setCpuFrequency+0x50>
800069d4:	76 98       	jz %d9,800069e4 <IfxScuCcu_setCpuFrequency+0x46>
800069d6:	df 29 11 80 	jne %d9,2,800069f8 <IfxScuCcu_setCpuFrequency+0x5a>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
800069da:	91 30 00 ff 	movh.a %a15,61443
800069de:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
800069e2:	3c 0a       	j 800069f6 <IfxScuCcu_setCpuFrequency+0x58>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        switch (cpu)
        {
        case IfxCpu_ResourceCpu_0:
            SCU_CCUCON6.U = cpuDiv;
800069e4:	91 30 00 ff 	movh.a %a15,61443
800069e8:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
800069ec:	3c 05       	j 800069f6 <IfxScuCcu_setCpuFrequency+0x58>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
800069ee:	91 30 00 ff 	movh.a %a15,61443
800069f2:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
800069f6:	68 08       	st.w [%a15]0,%d8

        default:
            break;
        }

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800069f8:	02 a4       	mov %d4,%d10
800069fa:	6d 00 7f 05 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
    }

    if (cpuDiv != 0)
800069fe:	76 89       	jz %d8,80006a10 <IfxScuCcu_setCpuFrequency+0x72>
    {
        sriFreq = sriFreq * (cpuDiv / 64.0f);
80006a00:	4b 08 61 81 	utof %d8,%d8
80006a04:	7b 00 c8 23 	movh %d2,15488
80006a08:	4b 28 41 80 	mul.f %d8,%d8,%d2
80006a0c:	4b 8f 41 f0 	mul.f %d15,%d15,%d8
    }

    return sriFreq;
}
80006a10:	02 f2       	mov %d2,%d15
80006a12:	00 90       	ret 

80006a14 <IfxScuCcu_setGtmFrequency>:


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
80006a14:	91 30 00 ff 	movh.a %a15,61443
80006a18:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
    return sriFreq;
}


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
80006a1c:	02 48       	mov %d8,%d4
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
80006a1e:	4c f0       	ld.w %d15,[%a15]0

    float32         inputFreq = IfxScuCcu_getSourceFrequency();
80006a20:	6d ff 46 fb 	call 800060ac <IfxScuCcu_getSourceFrequency>
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
80006a24:	4b 82 51 20 	div.f %d2,%d2,%d8
80006a28:	4b 02 31 31 	ftoiz %d3,%d2
80006a2c:	4b 03 41 41 	itof %d4,%d3
80006a30:	6b 04 31 22 	sub.f %d2,%d2,%d4
80006a34:	7b 00 f0 43 	movh %d4,16128
80006a38:	4b 42 01 20 	cmp.f %d2,%d2,%d4
80006a3c:	37 02 61 21 	extr.u %d2,%d2,2,1
80006a40:	42 32       	add %d2,%d3
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80006a42:	82 13       	mov %d3,1
80006a44:	0b 32 b0 21 	max.u %d2,%d2,%d3
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
80006a48:	8b e2 00 52 	eq %d5,%d2,14
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
80006a4c:	1b 92 ff 4f 	addi %d4,%d2,-7
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
    {
        gtmDiv = 12;
80006a50:	ab c2 a0 95 	seln %d9,%d5,%d2,12
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
80006a54:	8f 12 c0 31 	andn %d3,%d2,1
80006a58:	02 92       	mov %d2,%d9
80006a5a:	8b 74 a0 92 	ge.u %d9,%d4,7
80006a5e:	2b 32 40 99 	sel %d9,%d9,%d2,%d3
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006a62:	6d 00 c8 04 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006a66:	02 24       	mov %d4,%d2
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006a68:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006a6a:	6d 00 c1 03 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON1.B.LCK != 0U)
80006a6e:	40 f2       	mov.aa %a2,%a15
80006a70:	54 22       	ld.w %d2,[%a2]
80006a72:	91 30 00 ff 	movh.a %a15,61443
80006a76:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80006a7a:	bf 02 fb 7f 	jlt %d2,0,80006a70 <IfxScuCcu_setGtmFrequency+0x5c>
    {}

    ccucon1.B.GTMDIV = gtmDiv;
80006a7e:	37 9f 04 f6 	insert %d15,%d15,%d9,12,4
    ccucon1.B.UP     = 1U;
80006a82:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON1.U    = ccucon1.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006a86:	02 84       	mov %d4,%d8
    while (SCU_CCUCON1.B.LCK != 0U)
    {}

    ccucon1.B.GTMDIV = gtmDiv;
    ccucon1.B.UP     = 1U;
    SCU_CCUCON1.U    = ccucon1.U;
80006a88:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006a8a:	6d 00 37 05 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
}


IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.GTMDIV;
80006a8e:	6d ff 0f fb 	call 800060ac <IfxScuCcu_getSourceFrequency>
80006a92:	4c f0       	ld.w %d15,[%a15]0
80006a94:	37 0f 64 f6 	extr.u %d15,%d15,12,4
80006a98:	4b 0f 41 f1 	itof %d15,%d15

    return IfxScuCcu_getGtmFrequency();
}
80006a9c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006aa0:	00 90       	ret 

80006aa2 <IfxScuCcu_setPll2ErayFrequency>:


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
80006aa2:	02 48       	mov %d8,%d4
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
80006aa4:	6d 00 a7 04 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>
80006aa8:	02 2f       	mov %d15,%d2
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006aaa:	6d ff 84 fa 	call 80005fb2 <IfxScuCcu_getPllErayVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006aae:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006ab0:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006ab2:	6d 00 9d 03 	call 800071ec <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006ab6:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006aba:	91 30 00 ff 	movh.a %a15,61443
80006abe:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006ac2:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006ac4:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(password);
80006ac8:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006aca:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006ace:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006ad2:	37 82 04 84 	insert %d8,%d2,%d8,8,4
80006ad6:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(password);
80006ad8:	6d 00 10 05 	call 800074f8 <IfxScuWdt_setSafetyEndinit>

IFX_INLINE float32 IfxScuCcu_getPll2ErayFrequency(void)
{
    float32 pll2ErayFrequency;

    pll2ErayFrequency = IfxScuCcu_getPllErayVcoFrequency() / (SCU_PLLERAYCON1.B.K3DIV + 1);
80006adc:	6d ff 6b fa 	call 80005fb2 <IfxScuCcu_getPllErayVcoFrequency>
80006ae0:	4c f0       	ld.w %d15,[%a15]0
80006ae2:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80006ae6:	c2 1f       	add %d15,1
80006ae8:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2ErayFrequency();
}
80006aec:	4b f2 51 20 	div.f %d2,%d2,%d15
80006af0:	00 90       	ret 

80006af2 <IfxScuCcu_setPll2Frequency>:


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
80006af2:	02 48       	mov %d8,%d4
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006af4:	6d 00 7f 04 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>
80006af8:	02 2f       	mov %d15,%d2
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006afa:	6d ff b7 fa 	call 80006068 <IfxScuCcu_getPllVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006afe:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006b00:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006b02:	6d 00 75 03 	call 800071ec <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006b06:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006b0a:	91 30 00 ff 	movh.a %a15,61443
80006b0e:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80006b12:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006b14:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006b18:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006b1a:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006b1e:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006b22:	37 82 07 84 	insert %d8,%d2,%d8,8,7
80006b26:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006b28:	6d 00 e8 04 	call 800074f8 <IfxScuWdt_setSafetyEndinit>


IFX_INLINE float32 IfxScuCcu_getPll2Frequency(void)
{
    float32 pll2Frequency;
    pll2Frequency = IfxScuCcu_getPllVcoFrequency() / (SCU_PLLCON1.B.K3DIV + 1);
80006b2c:	6d ff 9e fa 	call 80006068 <IfxScuCcu_getPllVcoFrequency>
80006b30:	4c f0       	ld.w %d15,[%a15]0
80006b32:	37 0f 67 f4 	extr.u %d15,%d15,8,7
80006b36:	c2 1f       	add %d15,1
80006b38:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2Frequency();
}
80006b3c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006b40:	00 90       	ret 

80006b42 <IfxScuCcu_setSpbFrequency>:


float32 IfxScuCcu_setSpbFrequency(float32 spbFreq)
{
80006b42:	02 4f       	mov %d15,%d4
    /* TODO: check whether it is necessary to disable trap and/or the safety */
    uint16          l_EndInitPW;
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
80006b44:	6d ff b4 fa 	call 800060ac <IfxScuCcu_getSourceFrequency>
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
80006b48:	4b f2 51 20 	div.f %d2,%d2,%d15
80006b4c:	82 24       	mov %d4,2
80006b4e:	4b 02 71 21 	ftouz %d2,%d2
80006b52:	0b 42 b0 41 	max.u %d4,%d2,%d4
    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
    {
        spbDiv = spbDiv - 1;
    }

    if (spbDiv == 14)
80006b56:	8b e4 00 32 	eq %d3,%d4,14
    {
        spbDiv = 12;
80006b5a:	ab c4 a0 a3 	seln %d10,%d3,%d4,12
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
    spbDiv = __maxu(spbDiv, 2);

    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
80006b5e:	1b 94 ff 2f 	addi %d2,%d4,-7
    {
        spbDiv = spbDiv - 1;
80006b62:	8f 14 c0 f1 	andn %d15,%d4,1
80006b66:	02 a4       	mov %d4,%d10
80006b68:	8b 72 a0 a2 	ge.u %d10,%d2,7
80006b6c:	2b f4 40 aa 	sel %d10,%d10,%d4,%d15
    if (spbDiv == 14)
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
80006b70:	6d 00 23 04 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
80006b74:	02 28       	mov %d8,%d2
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006b76:	6d 00 3e 04 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006b7a:	02 84       	mov %d4,%d8
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006b7c:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006b7e:	6d 00 1c 03 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006b82:	91 30 00 ff 	movh.a %a15,61443
80006b86:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006b8a:	48 02       	ld.w %d2,[%a15]0
80006b8c:	3b 00 3e f0 	mov %d15,992
80006b90:	a6 2f       	or %d15,%d2
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b92:	02 84       	mov %d4,%d8

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006b94:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b96:	6d 00 45 04 	call 80007420 <IfxScuWdt_setCpuEndinit>

    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006b9a:	02 94       	mov %d4,%d9
80006b9c:	6d 00 28 03 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006ba0:	91 30 00 2f 	movh.a %a2,61443
80006ba4:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006ba8:	4c 20       	ld.w %d15,[%a2]0
80006baa:	91 30 00 ff 	movh.a %a15,61443
80006bae:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bb2:	bf 0f fb 7f 	jlt %d15,0,80006ba8 <IfxScuCcu_setSpbFrequency+0x66>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006bb6:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SPBDIV = spbDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006bb8:	02 94       	mov %d4,%d9

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SPBDIV = spbDiv;
80006bba:	37 af 04 f8 	insert %d15,%d15,%d10,16,4
    ccucon0.B.UP     = 1;
80006bbe:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006bc2:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006bc4:	6d 00 9a 04 	call 800074f8 <IfxScuWdt_setSafetyEndinit>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006bc8:	02 84       	mov %d4,%d8
80006bca:	6d 00 f6 02 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006bce:	91 30 00 ff 	movh.a %a15,61443
80006bd2:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006bd6:	4c f0       	ld.w %d15,[%a15]0
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006bd8:	02 84       	mov %d4,%d8
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006bda:	b7 0f 85 f2 	insert %d15,%d15,0,5,5
80006bde:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006be0:	6d 00 20 04 	call 80007420 <IfxScuWdt_setCpuEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006be4:	91 30 00 ff 	movh.a %a15,61443
80006be8:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bec:	4c f0       	ld.w %d15,[%a15]0
80006bee:	bf 0f ff 7f 	jlt %d15,0,80006bec <IfxScuCcu_setSpbFrequency+0xaa>
    {}

    return IfxScuCcu_getSpbFrequency();
80006bf2:	1d ff 1e fb 	j 8000622e <IfxScuCcu_getSpbFrequency>

80006bf6 <IfxScuCcu_setSriFrequency>:
}


float32 IfxScuCcu_setSriFrequency(float32 sriFreq)
{
80006bf6:	02 4f       	mov %d15,%d4
    float32         freq   = 0;
    float32         source = IfxScuCcu_getSourceFrequency();
80006bf8:	6d ff 5a fa 	call 800060ac <IfxScuCcu_getSourceFrequency>
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
80006bfc:	4b f2 51 20 	div.f %d2,%d2,%d15
80006c00:	4b 02 31 31 	ftoiz %d3,%d2
80006c04:	4b 03 41 f1 	itof %d15,%d3
80006c08:	6b 0f 31 22 	sub.f %d2,%d2,%d15
80006c0c:	7b 00 f0 f3 	movh %d15,16128
80006c10:	4b f2 01 f0 	cmp.f %d15,%d2,%d15
80006c14:	37 0f 61 f1 	extr.u %d15,%d15,2,1
80006c18:	82 12       	mov %d2,1
80006c1a:	42 3f       	add %d15,%d3
80006c1c:	0b 2f b0 f1 	max.u %d15,%d15,%d2
    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
80006c20:	8b ef 00 42 	eq %d4,%d15,14
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
80006c24:	92 93       	add %d3,%d15,-7
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
    {
        sriDiv = 12;
80006c26:	ab cf a0 94 	seln %d9,%d4,%d15,12
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
80006c2a:	8f 1f c0 21 	andn %d2,%d15,1
80006c2e:	02 9f       	mov %d15,%d9
80006c30:	8b 73 a0 92 	ge.u %d9,%d3,7
80006c34:	2b 2f 40 99 	sel %d9,%d9,%d15,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006c38:	6d 00 dd 03 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006c3c:	02 24       	mov %d4,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006c3e:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006c40:	6d 00 d6 02 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006c44:	91 30 00 2f 	movh.a %a2,61443
80006c48:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c4c:	4c 20       	ld.w %d15,[%a2]0
80006c4e:	91 30 00 ff 	movh.a %a15,61443
80006c52:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c56:	bf 0f fb 7f 	jlt %d15,0,80006c4c <IfxScuCcu_setSriFrequency+0x56>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006c5a:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SRIDIV = sriDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006c5c:	02 84       	mov %d4,%d8

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SRIDIV = sriDiv;
80006c5e:	37 9f 04 f4 	insert %d15,%d15,%d9,8,4
    ccucon0.B.UP     = 1;
80006c62:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006c66:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006c68:	6d 00 48 04 	call 800074f8 <IfxScuWdt_setSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006c6c:	4c f0       	ld.w %d15,[%a15]0
80006c6e:	bf 0f ff 7f 	jlt %d15,0,80006c6c <IfxScuCcu_setSriFrequency+0x76>
    {}

    freq = IfxScuCcu_getSriFrequency();
80006c72:	1d ff 3f fb 	j 800062f0 <IfxScuCcu_getSriFrequency>

80006c76 <IfxScuCcu_switchToBackupClock>:
{
    uint16 endinit_pw, endinitSfty_pw;
    int    pllStepsCount;
    uint8  smuTrapEnable;

    if (SCU_CCUCON0.B.CLKSEL == 0) /* Already source is backup clock */
80006c76:	91 30 00 ff 	movh.a %a15,61443
80006c7a:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c7e:	4c f0       	ld.w %d15,[%a15]0
80006c80:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80006c84:	df 0f 81 00 	jeq %d15,0,80006d86 <IfxScuCcu_switchToBackupClock+0x110>
80006c88:	40 4f       	mov.aa %a15,%a4
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006c8a:	6d 00 b4 03 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>
80006c8e:	02 29       	mov %d9,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006c90:	6d 00 93 03 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006c94:	0c f0       	ld.bu %d15,[%a15]0
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006c96:	02 28       	mov %d8,%d2
80006c98:	53 cf 20 20 	mul %d2,%d15,12
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006c9c:	91 30 00 ef 	movh.a %a14,61443
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006ca0:	91 30 00 df 	movh.a %a13,61443
80006ca4:	60 22       	mov.a %a2,%d2
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006ca6:	d9 ee 14 06 	lea %a14,[%a14]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006caa:	d9 2c f4 ff 	lea %a12,[%a2]-12 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006cae:	d9 dd 1c 06 	lea %a13,[%a13]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006cb2:	6e 1b       	jz %d15,80006ce8 <IfxScuCcu_switchToBackupClock+0x72>
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006cb4:	02 94       	mov %d4,%d9
80006cb6:	6d 00 9b 02 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006cba:	54 e2       	ld.w %d2,[%a14]
80006cbc:	6f 52 ff 7f 	jz.t %d2,5,80006cba <IfxScuCcu_switchToBackupClock+0x44>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006cc0:	c8 12       	ld.a %a2,[%a15]4
80006cc2:	54 d3       	ld.w %d3,[%a13]

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006cc4:	02 94       	mov %d4,%d9
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006cc6:	30 c2       	add.a %a2,%a12
80006cc8:	14 22       	ld.bu %d2,[%a2]

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006cca:	c2 ff       	add %d15,-1
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006ccc:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006cd0:	74 d2       	st.w [%a13],%d2

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006cd2:	6d 00 13 04 	call 800074f8 <IfxScuWdt_setSafetyEndinit>

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount - 1].waitTime);
80006cd6:	c8 12       	ld.a %a2,[%a15]4
80006cd8:	30 c2       	add.a %a2,%a12
80006cda:	19 24 04 00 	ld.w %d4,[%a2]4
80006cde:	6d ff f9 f9 	call 800060d0 <IfxScuCcu_wait>
80006ce2:	d9 cc f4 ff 	lea %a12,[%a12]-12
80006ce6:	3c e6       	j 80006cb2 <IfxScuCcu_switchToBackupClock+0x3c>
        }
    }

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006ce8:	02 84       	mov %d4,%d8
80006cea:	6d 00 66 02 	call 800071b6 <IfxScuWdt_clearCpuEndinit>

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006cee:	91 30 00 ff 	movh.a %a15,61443
80006cf2:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006cf6:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006cf8:	4c f0       	ld.w %d15,[%a15]0

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006cfa:	02 84       	mov %d4,%d8
    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
80006cfc:	96 08       	or %d15,8
80006cfe:	68 0f       	st.w [%a15]0,%d15

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006d00:	37 02 e1 a1 	extr.u %d10,%d2,3,1
        SCU_TRAPDIS.B.SMUT = 1U;

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006d04:	6d 00 8e 03 	call 80007420 <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006d08:	02 94       	mov %d4,%d9
80006d0a:	6d 00 71 02 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

        while (SCU_CCUCON0.B.LCK != 0U)
80006d0e:	91 30 00 2f 	movh.a %a2,61443
80006d12:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006d16:	4c 20       	ld.w %d15,[%a2]0
80006d18:	91 30 00 ff 	movh.a %a15,61443
80006d1c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006d20:	bf 0f fb 7f 	jlt %d15,0,80006d16 <IfxScuCcu_switchToBackupClock+0xa0>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
80006d24:	4c f0       	ld.w %d15,[%a15]0
80006d26:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006d2a:	68 0f       	st.w [%a15]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80006d2c:	4c f0       	ld.w %d15,[%a15]0
80006d2e:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006d32:	68 0f       	st.w [%a15]0,%d15

        while (SCU_CCUCON0.B.LCK != 0U)
80006d34:	4c f0       	ld.w %d15,[%a15]0
80006d36:	bf 0f ff 7f 	jlt %d15,0,80006d34 <IfxScuCcu_switchToBackupClock+0xbe>
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006d3a:	91 30 00 ff 	movh.a %a15,61443
80006d3e:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006d42:	4c f0       	ld.w %d15,[%a15]0

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006d44:	02 94       	mov %d4,%d9
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006d46:	96 10       	or %d15,16
80006d48:	68 0f       	st.w [%a15]0,%d15

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006d4a:	4c f0       	ld.w %d15,[%a15]0
80006d4c:	8f 0f c4 f1 	andn %d15,%d15,64
80006d50:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006d52:	6d 00 d3 03 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006d56:	91 30 00 ff 	movh.a %a15,61443
80006d5a:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006d5e:	02 84       	mov %d4,%d8
80006d60:	6d 00 2b 02 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006d64:	4c f0       	ld.w %d15,[%a15]0

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006d66:	8f 3a 00 20 	sh %d2,%d10,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006d6a:	96 08       	or %d15,8
80006d6c:	68 0f       	st.w [%a15]0,%d15

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006d6e:	91 30 00 ff 	movh.a %a15,61443
80006d72:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006d76:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006d78:	02 84       	mov %d4,%d8
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006d7a:	8f 8f c0 f1 	andn %d15,%d15,8
80006d7e:	a6 2f       	or %d15,%d2
80006d80:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006d82:	1d 00 4f 03 	j 80007420 <IfxScuWdt_setCpuEndinit>
80006d86:	00 90       	ret 

80006d88 <IfxScuEru_clearAllEventFlags>:
/******************************************************************************/

void IfxScuEru_clearAllEventFlags(void)
{
    uint32 mask = (0xFF << 16);
    MODULE_SCU.FMR.U = mask;
80006d88:	91 30 00 ff 	movh.a %a15,61443
80006d8c:	7b f0 0f f0 	movh %d15,255
80006d90:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d94:	59 ff 24 80 	st.w [%a15]548 <f0030224 <_SMALL_DATA4_+0x40028224>>,%d15
80006d98:	00 90       	ret 

80006d9a <IfxScuEru_clearEventFlag>:
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006d9a:	1b 04 01 40 	addi %d4,%d4,16
80006d9e:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006da0:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006da4:	0f 4f 00 f0 	sh %d15,%d15,%d4
    SCU_FMR.U = mask;
80006da8:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006dac:	68 0f       	st.w [%a15]0,%d15
80006dae:	00 90       	ret 

80006db0 <IfxScuEru_clearInputChannelConfiguration>:


void IfxScuEru_clearInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006db0:	8f f4 1f f0 	sh %d15,%d4,-1
80006db4:	06 2f       	sh %d15,2
80006db6:	60 ff       	mov.a %a15,%d15
80006db8:	d9 ff 00 06 	lea %a15,[%a15]24576
80006dbc:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006dc0:	19 ff 10 80 	ld.w %d15,[%a15]528
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006dc4:	6f 04 05 00 	jz.t %d4,0,80006dce <IfxScuEru_clearInputChannelConfiguration+0x1e>
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006dc8:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006dcc:	3c 03       	j 80006dd2 <IfxScuEru_clearInputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006dce:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006dd2:	59 ff 10 80 	st.w [%a15]528,%d15
80006dd6:	00 90       	ret 

80006dd8 <IfxScuEru_clearOutputChannelConfiguration>:


void IfxScuEru_clearOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006dd8:	8f f4 1f f0 	sh %d15,%d4,-1
80006ddc:	06 2f       	sh %d15,2
80006dde:	60 ff       	mov.a %a15,%d15
80006de0:	d9 ff 00 06 	lea %a15,[%a15]24576
80006de4:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006de8:	19 ff 2c 80 	ld.w %d15,[%a15]556
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006dec:	6f 04 05 00 	jz.t %d4,0,80006df6 <IfxScuEru_clearOutputChannelConfiguration+0x1e>
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006df0:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006df4:	3c 03       	j 80006dfa <IfxScuEru_clearOutputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006df6:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006dfa:	59 ff 2c 80 	st.w [%a15]556,%d15
80006dfe:	00 90       	ret 

80006e00 <IfxScuEru_connectTrigger>:


void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e00:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006e04:	91 30 00 ff 	movh.a %a15,61443
80006e08:	1b 4f 08 f0 	addi %d15,%d15,132
80006e0c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e10:	8f 75 00 51 	and %d5,%d5,7
80006e14:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e16:	6f 04 08 00 	jz.t %d4,0,80006e26 <IfxScuEru_connectTrigger+0x26>
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006e1a:	4c f0       	ld.w %d15,[%a15]0
80006e1c:	8f c5 01 50 	sh %d5,%d5,28
80006e20:	b7 0f 03 fe 	insert %d15,%d15,0,28,3
80006e24:	3c 06       	j 80006e30 <IfxScuEru_connectTrigger+0x30>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.INP0 = triggerSelect;
80006e26:	4c f0       	ld.w %d15,[%a15]0
80006e28:	8f c5 00 50 	sh %d5,%d5,12
80006e2c:	b7 0f 03 f6 	insert %d15,%d15,0,12,3
80006e30:	a6 f5       	or %d5,%d15
80006e32:	68 05       	st.w [%a15]0,%d5
80006e34:	00 90       	ret 

80006e36 <IfxScuEru_disableAutoClear>:


void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e36:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006e3a:	91 30 00 ff 	movh.a %a15,61443
80006e3e:	1b 4f 08 f0 	addi %d15,%d15,132
80006e42:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e46:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e48:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e4a:	6f 04 05 00 	jz.t %d4,0,80006e54 <IfxScuEru_disableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006e4e:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80006e52:	3c 03       	j 80006e58 <IfxScuEru_disableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = FALSE;
80006e54:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80006e58:	68 0f       	st.w [%a15]0,%d15
80006e5a:	00 90       	ret 

80006e5c <IfxScuEru_disableFallingEdgeDetection>:


void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e5c:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006e60:	91 30 00 ff 	movh.a %a15,61443
80006e64:	1b 4f 08 f0 	addi %d15,%d15,132
80006e68:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e6c:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e6e:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e70:	6f 04 05 00 	jz.t %d4,0,80006e7a <IfxScuEru_disableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006e74:	b7 0f 01 fc 	insert %d15,%d15,0,24,1
80006e78:	3c 03       	j 80006e7e <IfxScuEru_disableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = FALSE;
80006e7a:	8f 0f d0 f1 	andn %d15,%d15,256
80006e7e:	68 0f       	st.w [%a15]0,%d15
80006e80:	00 90       	ret 

80006e82 <IfxScuEru_disablePatternDetectionTrigger>:


void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e82:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006e86:	91 30 00 ff 	movh.a %a15,61443
80006e8a:	1b bf 08 f0 	addi %d15,%d15,139
80006e8e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e92:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e94:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006e96:	6f 04 05 00 	jz.t %d4,0,80006ea0 <IfxScuEru_disablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006e9a:	b7 0f 81 fe 	insert %d15,%d15,0,29,1
80006e9e:	3c 03       	j 80006ea4 <IfxScuEru_disablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = FALSE;
80006ea0:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80006ea4:	68 0f       	st.w [%a15]0,%d15
80006ea6:	00 90       	ret 

80006ea8 <IfxScuEru_disableRisingEdgeDetection>:


void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ea8:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006eac:	91 30 00 ff 	movh.a %a15,61443
80006eb0:	1b 4f 08 f0 	addi %d15,%d15,132
80006eb4:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006eb8:	90 ff       	addsc.a %a15,%a15,%d15,2
80006eba:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006ebc:	6f 04 05 00 	jz.t %d4,0,80006ec6 <IfxScuEru_disableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006ec0:	b7 0f 81 fc 	insert %d15,%d15,0,25,1
80006ec4:	3c 03       	j 80006eca <IfxScuEru_disableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = FALSE;
80006ec6:	b7 0f 81 f4 	insert %d15,%d15,0,9,1
80006eca:	68 0f       	st.w [%a15]0,%d15
80006ecc:	00 90       	ret 

80006ece <IfxScuEru_disableTriggerPulse>:


void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ece:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006ed2:	91 30 00 ff 	movh.a %a15,61443
80006ed6:	1b 4f 08 f0 	addi %d15,%d15,132
80006eda:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ede:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ee0:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006ee2:	6f 04 05 00 	jz.t %d4,0,80006eec <IfxScuEru_disableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006ee6:	b7 0f 81 fd 	insert %d15,%d15,0,27,1
80006eea:	3c 03       	j 80006ef0 <IfxScuEru_disableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = FALSE;
80006eec:	b7 0f 81 f5 	insert %d15,%d15,0,11,1
80006ef0:	68 0f       	st.w [%a15]0,%d15
80006ef2:	00 90       	ret 

80006ef4 <IfxScuEru_enableAutoClear>:


void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ef4:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006ef8:	91 30 00 ff 	movh.a %a15,61443
80006efc:	1b 4f 08 f0 	addi %d15,%d15,132
80006f00:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f04:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f06:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006f08:	6f 04 05 00 	jz.t %d4,0,80006f12 <IfxScuEru_enableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006f0c:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80006f10:	3c 03       	j 80006f16 <IfxScuEru_enableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = TRUE;
80006f12:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80006f16:	68 0f       	st.w [%a15]0,%d15
80006f18:	00 90       	ret 

80006f1a <IfxScuEru_enableFallingEdgeDetection>:


void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f1a:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006f1e:	91 30 00 ff 	movh.a %a15,61443
80006f22:	1b 4f 08 f0 	addi %d15,%d15,132
80006f26:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f2a:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f2c:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006f2e:	6f 04 05 00 	jz.t %d4,0,80006f38 <IfxScuEru_enableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006f32:	b7 ff 01 fc 	insert %d15,%d15,15,24,1
80006f36:	3c 03       	j 80006f3c <IfxScuEru_enableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = TRUE;
80006f38:	8f 0f 50 f1 	or %d15,%d15,256
80006f3c:	68 0f       	st.w [%a15]0,%d15
80006f3e:	00 90       	ret 

80006f40 <IfxScuEru_enablePatternDetectionTrigger>:


void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f40:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006f44:	91 30 00 ff 	movh.a %a15,61443
80006f48:	1b bf 08 f0 	addi %d15,%d15,139
80006f4c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f50:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f52:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006f54:	6f 04 05 00 	jz.t %d4,0,80006f5e <IfxScuEru_enablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006f58:	b7 ff 81 fe 	insert %d15,%d15,15,29,1
80006f5c:	3c 03       	j 80006f62 <IfxScuEru_enablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = TRUE;
80006f5e:	b7 ff 81 f6 	insert %d15,%d15,15,13,1
80006f62:	68 0f       	st.w [%a15]0,%d15
80006f64:	00 90       	ret 

80006f66 <IfxScuEru_enableRisingEdgeDetection>:


void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f66:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006f6a:	91 30 00 ff 	movh.a %a15,61443
80006f6e:	1b 4f 08 f0 	addi %d15,%d15,132
80006f72:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f76:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f78:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006f7a:	6f 04 05 00 	jz.t %d4,0,80006f84 <IfxScuEru_enableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006f7e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80006f82:	3c 03       	j 80006f88 <IfxScuEru_enableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = TRUE;
80006f84:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80006f88:	68 0f       	st.w [%a15]0,%d15
80006f8a:	00 90       	ret 

80006f8c <IfxScuEru_enableTriggerPulse>:


void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f8c:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006f90:	91 30 00 ff 	movh.a %a15,61443
80006f94:	1b 4f 08 f0 	addi %d15,%d15,132
80006f98:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f9c:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f9e:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006fa0:	6f 04 05 00 	jz.t %d4,0,80006faa <IfxScuEru_enableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006fa4:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80006fa8:	3c 03       	j 80006fae <IfxScuEru_enableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = TRUE;
80006faa:	b7 ff 81 f5 	insert %d15,%d15,15,11,1
80006fae:	68 0f       	st.w [%a15]0,%d15
80006fb0:	00 90       	ret 

80006fb2 <IfxScuEru_getAllEventFlagsStatus>:
}


uint32 IfxScuEru_getAllEventFlagsStatus(void)
{
    return MODULE_SCU.EIFR.U;
80006fb2:	91 30 00 ff 	movh.a %a15,61443
80006fb6:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fba:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006fbe:	00 90       	ret 

80006fc0 <IfxScuEru_getEventFlagStatus>:


boolean IfxScuEru_getEventFlagStatus(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = (1U << inputChannel);
    return (MODULE_SCU.EIFR.U & mask) ? TRUE : FALSE;
80006fc0:	91 30 00 ff 	movh.a %a15,61443
80006fc4:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fc8:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006fcc:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006fd0:	00 90       	ret 

80006fd2 <IfxScuEru_getInputChannelConfiguration>:


uint32 IfxScuEru_getInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006fd2:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006fd6:	91 30 00 ff 	movh.a %a15,61443
80006fda:	1b 4f 08 f0 	addi %d15,%d15,132
80006fde:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fe2:	90 ff       	addsc.a %a15,%a15,%d15,2
80006fe4:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006fe6:	6f 04 05 00 	jz.t %d4,0,80006ff0 <IfxScuEru_getInputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006fea:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006fee:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.EICR[index].U & mask);
80006ff0:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80006ff4:	00 90       	ret 

80006ff6 <IfxScuEru_getOutputChannelConfiguration>:


uint32 IfxScuEru_getOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ff6:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006ffa:	91 30 00 ff 	movh.a %a15,61443
80006ffe:	1b bf 08 f0 	addi %d15,%d15,139
80007002:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007006:	90 ff       	addsc.a %a15,%a15,%d15,2
80007008:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
8000700a:	6f 04 05 00 	jz.t %d4,0,80007014 <IfxScuEru_getOutputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
8000700e:	b7 02 10 20 	insert %d2,%d2,0,0,16
80007012:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.IGCR[index].U & mask);
80007014:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80007018:	00 90       	ret 

8000701a <IfxScuEru_getPatternDetectionResult>:


boolean IfxScuEru_getPatternDetectionResult(IfxScuEru_OutputChannel outputChannel)
{
    uint32 mask = (1U << outputChannel);
    return (MODULE_SCU.PDRR.U & mask) ? TRUE : FALSE;
8000701a:	91 30 00 ff 	movh.a %a15,61443
8000701e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007022:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80007026:	57 02 61 24 	extr.u %d2,%d2,%d4,1
8000702a:	00 90       	ret 

8000702c <IfxScuEru_getWholePatternDetectionResult>:


uint32 IfxScuEru_getWholePatternDetectionResult(void)
{
    return MODULE_SCU.PDRR.U;
8000702c:	91 30 00 ff 	movh.a %a15,61443
80007030:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007034:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80007038:	00 90       	ret 

8000703a <IfxScuEru_selectExternalInput>:


void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
8000703a:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
8000703e:	91 30 00 ff 	movh.a %a15,61443
80007042:	1b 4f 08 f0 	addi %d15,%d15,132
80007046:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
8000704a:	8f 75 00 51 	and %d5,%d5,7
8000704e:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80007050:	6f 04 08 00 	jz.t %d4,0,80007060 <IfxScuEru_selectExternalInput+0x26>
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80007054:	4c f0       	ld.w %d15,[%a15]0
80007056:	8f 45 01 50 	sh %d5,%d5,20
8000705a:	b7 0f 03 fa 	insert %d15,%d15,0,20,3
8000705e:	3c 05       	j 80007068 <IfxScuEru_selectExternalInput+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EXIS0 = inputSignal;
80007060:	4c f0       	ld.w %d15,[%a15]0
80007062:	06 45       	sh %d5,4
80007064:	8f 0f c7 f1 	andn %d15,%d15,112
80007068:	a6 f5       	or %d5,%d15
8000706a:	68 05       	st.w [%a15]0,%d5
8000706c:	00 90       	ret 

8000706e <IfxScuEru_setEventFlag>:
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
8000706e:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80007070:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
80007074:	0f 4f 00 40 	sh %d4,%d15,%d4
    SCU_FMR.U = mask;
80007078:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
8000707c:	68 04       	st.w [%a15]0,%d4
8000707e:	00 90       	ret 

80007080 <IfxScuEru_setFlagPatternDetection>:
}


void IfxScuEru_setFlagPatternDetection(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InputChannel inputChannel, boolean state)
{
80007080:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 shift, mask;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD) // for channels 1, 3 ,5 and 7
80007084:	6f 04 04 00 	jz.t %d4,0,8000708c <IfxScuEru_setFlagPatternDetection+0xc>
    {
        shift = (inputChannel + 16);                  // offset at location IPEN10
80007088:	1b 05 01 50 	addi %d5,%d5,16
8000708c:	06 2f       	sh %d15,2
8000708e:	60 f2       	mov.a %a2,%d15
80007090:	d9 2f 00 06 	lea %a15,[%a2]24576
80007094:	11 3f 00 ff 	addih.a %a15,%a15,61443
    {
        shift = inputChannel;
        mask  = (1 << shift);
        // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
        uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & ~mask) | ((uint32)state << shift);
80007098:	19 ff 2c 80 	ld.w %d15,[%a15]556
8000709c:	d7 0f 01 f5 	insert %d15,%d15,0,%d5,1
800070a0:	0f 56 00 50 	sh %d5,%d6,%d5
800070a4:	a6 f5       	or %d5,%d15
800070a6:	59 f5 2c 80 	st.w [%a15]556,%d5
800070aa:	00 90       	ret 

800070ac <IfxScuEru_setInterruptGatingPattern>:


void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
800070ac:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
800070b0:	91 30 00 ff 	movh.a %a15,61443
800070b4:	1b bf 08 f0 	addi %d15,%d15,139
800070b8:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
800070bc:	8f 35 00 51 	and %d5,%d5,3
800070c0:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
800070c2:	6f 04 06 00 	jz.t %d4,0,800070ce <IfxScuEru_setInterruptGatingPattern+0x22>
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
800070c6:	4c f0       	ld.w %d15,[%a15]0
800070c8:	37 5f 02 5f 	insert %d5,%d15,%d5,30,2
800070cc:	3c 07       	j 800070da <IfxScuEru_setInterruptGatingPattern+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.IGP0 = gatingPattern;
800070ce:	4c f0       	ld.w %d15,[%a15]0
800070d0:	8f e5 00 50 	sh %d5,%d5,14
800070d4:	b7 0f 02 f7 	insert %d15,%d15,0,14,2
800070d8:	a6 f5       	or %d5,%d15
800070da:	68 05       	st.w [%a15]0,%d5
800070dc:	00 90       	ret 

800070de <IfxScuWdt_changeCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800070de:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800070e2:	16 07       	and %d15,7
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword)
{
    Ifx_SCU_WDTCPU     *watchdog = &MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()];
800070e4:	53 cf 20 f0 	mul %d15,%d15,12
800070e8:	60 f2       	mov.a %a2,%d15
800070ea:	d9 2f 00 46 	lea %a15,[%a2]24832
800070ee:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
800070f2:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
800070f4:	2e 16       	jz.t %d15,1,80007100 <IfxScuWdt_changeCpuWatchdogPassword+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800070f6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
800070fa:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
800070fe:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007100:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80007104:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
80007108:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
8000710c:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000710e:	4c f0       	ld.w %d15,[%a15]0
80007110:	6f 0f ff 7f 	jz.t %d15,0,8000710e <IfxScuWdt_changeCpuWatchdogPassword+0x30>
    {}
}
80007114:	00 90       	ret 

80007116 <IfxScuWdt_changeCpuWatchdogReload>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007116:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000711a:	16 07       	and %d15,7

void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload)
{
    /* Select CPU Watchdog based on Core Id */
    uint32              coreId = IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU     *wdt    = &MODULE_SCU.WDTCPU[coreId];
8000711c:	53 cf 20 f0 	mul %d15,%d15,12
80007120:	60 f2       	mov.a %a2,%d15
80007122:	d9 2f 00 46 	lea %a15,[%a2]24832
80007126:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
8000712a:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
8000712c:	2e 16       	jz.t %d15,1,80007138 <IfxScuWdt_changeCpuWatchdogReload+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
8000712e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80007132:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80007136:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007138:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
8000713c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
80007140:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
80007144:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
80007146:	4c f0       	ld.w %d15,[%a15]0
80007148:	6f 0f ff 7f 	jz.t %d15,0,80007146 <IfxScuWdt_changeCpuWatchdogReload+0x30>
    {}
}
8000714c:	00 90       	ret 

8000714e <IfxScuWdt_changeSafetyWatchdogPassword>:
{
    Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
8000714e:	91 30 00 ff 	movh.a %a15,61443
80007152:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007156:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80007158:	2e 16       	jz.t %d15,1,80007164 <IfxScuWdt_changeSafetyWatchdogPassword+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
8000715a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
8000715e:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
80007162:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007164:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80007168:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
8000716c:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
80007170:	91 30 00 ff 	movh.a %a15,61443
80007174:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007178:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000717a:	4c f0       	ld.w %d15,[%a15]0
8000717c:	6f 0f ff 7f 	jz.t %d15,0,8000717a <IfxScuWdt_changeSafetyWatchdogPassword+0x2c>
    {}
}
80007180:	00 90       	ret 

80007182 <IfxScuWdt_changeSafetyWatchdogReload>:
    /* Initialize pointer to Safety Watchdog */
    Ifx_SCU_WDTS     *wdt = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
80007182:	91 30 00 ff 	movh.a %a15,61443
80007186:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000718a:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
8000718c:	2e 16       	jz.t %d15,1,80007198 <IfxScuWdt_changeSafetyWatchdogReload+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
8000718e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80007192:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80007196:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007198:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
8000719c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
800071a0:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
800071a4:	91 30 00 ff 	movh.a %a15,61443
800071a8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071ac:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
800071ae:	4c f0       	ld.w %d15,[%a15]0
800071b0:	6f 0f ff 7f 	jz.t %d15,0,800071ae <IfxScuWdt_changeSafetyWatchdogReload+0x2c>
    {}
}
800071b4:	00 90       	ret 

800071b6 <IfxScuWdt_clearCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800071b6:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800071ba:	16 07       	and %d15,7


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
800071bc:	53 cf 20 f0 	mul %d15,%d15,12
800071c0:	06 24       	sh %d4,2
800071c2:	60 f2       	mov.a %a2,%d15
800071c4:	d9 2f 00 46 	lea %a15,[%a2]24832
800071c8:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800071cc:	4c f0       	ld.w %d15,[%a15]0
800071ce:	2e 16       	jz.t %d15,1,800071da <IfxScuWdt_clearCpuEndinit+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071d0:	4c f0       	ld.w %d15,[%a15]0
800071d2:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071d6:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071d8:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071da:	4c f0       	ld.w %d15,[%a15]0
800071dc:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071e0:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071e2:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
800071e4:	4c f0       	ld.w %d15,[%a15]0
800071e6:	6f 0f ff ff 	jnz.t %d15,0,800071e4 <IfxScuWdt_clearCpuEndinit+0x2e>
}
800071ea:	00 90       	ret 

800071ec <IfxScuWdt_clearSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800071ec:	91 30 00 ff 	movh.a %a15,61443
800071f0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071f4:	4c f0       	ld.w %d15,[%a15]0
800071f6:	06 24       	sh %d4,2
800071f8:	2e 16       	jz.t %d15,1,80007204 <IfxScuWdt_clearSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800071fa:	4c f0       	ld.w %d15,[%a15]0
800071fc:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007200:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007202:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007204:	91 30 00 ff 	movh.a %a15,61443
80007208:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000720c:	4c f0       	ld.w %d15,[%a15]0
8000720e:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007212:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007214:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007216:	4c f0       	ld.w %d15,[%a15]0
80007218:	6f 0f ff ff 	jnz.t %d15,0,80007216 <IfxScuWdt_clearSafetyEndinit+0x2a>


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
}
8000721c:	00 90       	ret 

8000721e <IfxScuWdt_disableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000721e:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007222:	16 07       	and %d15,7

void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80007224:	53 cf 20 f0 	mul %d15,%d15,12
80007228:	06 24       	sh %d4,2
8000722a:	60 f2       	mov.a %a2,%d15
8000722c:	d9 2f 00 46 	lea %a15,[%a2]24832
80007230:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007234:	4c f0       	ld.w %d15,[%a15]0
80007236:	2e 16       	jz.t %d15,1,80007242 <IfxScuWdt_disableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007238:	4c f0       	ld.w %d15,[%a15]0
8000723a:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000723e:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007240:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007242:	4c f0       	ld.w %d15,[%a15]0
80007244:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007248:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000724a:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
8000724c:	4c f0       	ld.w %d15,[%a15]0
8000724e:	6f 0f ff ff 	jnz.t %d15,0,8000724c <IfxScuWdt_disableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
80007252:	4c f1       	ld.w %d15,[%a15]4
80007254:	96 08       	or %d15,8
80007256:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007258:	4c f0       	ld.w %d15,[%a15]0
8000725a:	2e 16       	jz.t %d15,1,80007266 <IfxScuWdt_disableCpuWatchdog+0x48>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000725c:	4c f0       	ld.w %d15,[%a15]0
8000725e:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007262:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007264:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007266:	4c f0       	ld.w %d15,[%a15]0
80007268:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000726c:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000726e:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80007270:	4c f0       	ld.w %d15,[%a15]0
80007272:	6f 0f ff 7f 	jz.t %d15,0,80007270 <IfxScuWdt_disableCpuWatchdog+0x52>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80007276:	00 90       	ret 

80007278 <IfxScuWdt_disableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007278:	91 30 00 ff 	movh.a %a15,61443
8000727c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007280:	4c f0       	ld.w %d15,[%a15]0
80007282:	06 24       	sh %d4,2
80007284:	2e 16       	jz.t %d15,1,80007290 <IfxScuWdt_disableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007286:	4c f0       	ld.w %d15,[%a15]0
80007288:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000728c:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000728e:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007290:	91 30 00 ff 	movh.a %a15,61443
80007294:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007298:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
8000729a:	40 f2       	mov.aa %a2,%a15
8000729c:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072a0:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072a2:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800072a4:	4c 20       	ld.w %d15,[%a2]0
800072a6:	91 30 00 ff 	movh.a %a15,61443
800072aa:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072ae:	6f 0f fb ff 	jnz.t %d15,0,800072a4 <IfxScuWdt_disableSafetyWatchdog+0x2c>


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
800072b2:	91 30 00 2f 	movh.a %a2,61443
800072b6:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
800072ba:	4c 20       	ld.w %d15,[%a2]0
800072bc:	96 08       	or %d15,8
800072be:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800072c0:	4c f0       	ld.w %d15,[%a15]0
800072c2:	2e 16       	jz.t %d15,1,800072ce <IfxScuWdt_disableSafetyWatchdog+0x56>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072c4:	4c f0       	ld.w %d15,[%a15]0
800072c6:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072ca:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072cc:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072ce:	91 30 00 ff 	movh.a %a15,61443
800072d2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072d6:	4c f0       	ld.w %d15,[%a15]0
800072d8:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072dc:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072de:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
800072e0:	4c f0       	ld.w %d15,[%a15]0
800072e2:	6f 0f ff 7f 	jz.t %d15,0,800072e0 <IfxScuWdt_disableSafetyWatchdog+0x68>
    IfxScuWdt_setSafetyEndinitInline(password);
}
800072e6:	00 90       	ret 

800072e8 <IfxScuWdt_enableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800072e8:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800072ec:	16 07       	and %d15,7

void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
800072ee:	53 cf 20 f0 	mul %d15,%d15,12
800072f2:	06 24       	sh %d4,2
800072f4:	60 f2       	mov.a %a2,%d15
800072f6:	d9 2f 00 46 	lea %a15,[%a2]24832
800072fa:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800072fe:	4c f0       	ld.w %d15,[%a15]0
80007300:	2e 16       	jz.t %d15,1,8000730c <IfxScuWdt_enableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007302:	4c f0       	ld.w %d15,[%a15]0
80007304:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007308:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000730a:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000730c:	4c f0       	ld.w %d15,[%a15]0
8000730e:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007312:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007314:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80007316:	4c f0       	ld.w %d15,[%a15]0
80007318:	6f 0f ff ff 	jnz.t %d15,0,80007316 <IfxScuWdt_enableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
8000731c:	4c f1       	ld.w %d15,[%a15]4
8000731e:	8f 8f c0 f1 	andn %d15,%d15,8
80007322:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007324:	4c f0       	ld.w %d15,[%a15]0
80007326:	2e 16       	jz.t %d15,1,80007332 <IfxScuWdt_enableCpuWatchdog+0x4a>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007328:	4c f0       	ld.w %d15,[%a15]0
8000732a:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000732e:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007330:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007332:	4c f0       	ld.w %d15,[%a15]0
80007334:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007338:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000733a:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000733c:	4c f0       	ld.w %d15,[%a15]0
8000733e:	6f 0f ff 7f 	jz.t %d15,0,8000733c <IfxScuWdt_enableCpuWatchdog+0x54>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80007342:	00 90       	ret 

80007344 <IfxScuWdt_enableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007344:	91 30 00 ff 	movh.a %a15,61443
80007348:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000734c:	4c f0       	ld.w %d15,[%a15]0
8000734e:	06 24       	sh %d4,2
80007350:	2e 16       	jz.t %d15,1,8000735c <IfxScuWdt_enableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007352:	4c f0       	ld.w %d15,[%a15]0
80007354:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007358:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000735a:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000735c:	91 30 00 ff 	movh.a %a15,61443
80007360:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007364:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007366:	40 f2       	mov.aa %a2,%a15
80007368:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000736c:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000736e:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007370:	4c 20       	ld.w %d15,[%a2]0
80007372:	91 30 00 ff 	movh.a %a15,61443
80007376:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000737a:	6f 0f fb ff 	jnz.t %d15,0,80007370 <IfxScuWdt_enableSafetyWatchdog+0x2c>


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
8000737e:	91 30 00 2f 	movh.a %a2,61443
80007382:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
80007386:	4c 20       	ld.w %d15,[%a2]0
80007388:	8f 8f c0 f1 	andn %d15,%d15,8
8000738c:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
8000738e:	4c f0       	ld.w %d15,[%a15]0
80007390:	2e 16       	jz.t %d15,1,8000739c <IfxScuWdt_enableSafetyWatchdog+0x58>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007392:	4c f0       	ld.w %d15,[%a15]0
80007394:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007398:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000739a:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000739c:	91 30 00 ff 	movh.a %a15,61443
800073a0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800073a4:	4c f0       	ld.w %d15,[%a15]0
800073a6:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800073aa:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800073ac:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
800073ae:	4c f0       	ld.w %d15,[%a15]0
800073b0:	6f 0f ff 7f 	jz.t %d15,0,800073ae <IfxScuWdt_enableSafetyWatchdog+0x6a>
    IfxScuWdt_setSafetyEndinitInline(password);
}
800073b4:	00 90       	ret 

800073b6 <IfxScuWdt_getCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800073b6:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800073ba:	16 07       	and %d15,7


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
800073bc:	53 cf 20 f0 	mul %d15,%d15,12
800073c0:	60 f2       	mov.a %a2,%d15
800073c2:	d9 2f 00 46 	lea %a15,[%a2]24832
800073c6:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
800073ca:	48 02       	ld.w %d2,[%a15]0
800073cc:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
800073d0:	8f f2 83 21 	xor %d2,%d2,63
800073d4:	00 90       	ret 

800073d6 <IfxScuWdt_getCpuWatchdogEndInit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800073d6:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800073da:	16 07       	and %d15,7


boolean IfxScuWdt_getCpuWatchdogEndInit(void)
{
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
800073dc:	53 cf 20 f0 	mul %d15,%d15,12
800073e0:	60 f2       	mov.a %a2,%d15
800073e2:	d9 2f 00 46 	lea %a15,[%a2]24832
800073e6:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
{
    return (boolean)watchdog->CON0.B.ENDINIT;
800073ea:	48 02       	ld.w %d2,[%a15]0
}
800073ec:	8f 12 00 21 	and %d2,%d2,1
800073f0:	00 90       	ret 

800073f2 <IfxScuWdt_getSafetyWatchdogPassword>:
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
800073f2:	91 30 00 ff 	movh.a %a15,61443
800073f6:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800073fa:	48 02       	ld.w %d2,[%a15]0
800073fc:	37 02 6e 21 	extr.u %d2,%d2,2,14


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
80007400:	8f f2 83 21 	xor %d2,%d2,63
80007404:	00 90       	ret 

80007406 <IfxScuWdt_initConfig>:


void IfxScuWdt_initConfig(IfxScuWdt_Config *config)
{
    config->password                      = IFXSCUWDT_RESET_PASSWORD;
80007406:	da 3c       	mov %d15,60
80007408:	ac 40       	st.h [%a4]0,%d15
    config->reload                        = 0xFFFC;
8000740a:	82 cf       	mov %d15,-4
8000740c:	ac 41       	st.h [%a4]2,%d15
    config->inputFrequency                = IfxScu_WDTCON1_IR_divBy16384;
8000740e:	82 0f       	mov %d15,0
80007410:	2c 44       	st.b [%a4]4,%d15
    config->disableWatchdog               = FALSE;
80007412:	2c 45       	st.b [%a4]5,%d15
    config->enableSmuRestriction          = FALSE;
80007414:	2c 46       	st.b [%a4]6,%d15
    config->enableAutomaticPasswordChange = FALSE;
80007416:	2c 47       	st.b [%a4]7,%d15
    config->enableTimerCheck              = FALSE;
80007418:	2c 48       	st.b [%a4]8,%d15
    config->enableTimerCheckTolerance     = FALSE;
8000741a:	2c 49       	st.b [%a4]9,%d15
    config->clrInternalResetFlag          = FALSE;
8000741c:	2c 4a       	st.b [%a4]10,%d15
8000741e:	00 90       	ret 

80007420 <IfxScuWdt_setCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007420:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007424:	16 07       	and %d15,7
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80007426:	53 cf 20 f0 	mul %d15,%d15,12
8000742a:	06 24       	sh %d4,2
8000742c:	60 f2       	mov.a %a2,%d15
8000742e:	d9 2f 00 46 	lea %a15,[%a2]24832
80007432:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007436:	4c f0       	ld.w %d15,[%a15]0
80007438:	2e 16       	jz.t %d15,1,80007444 <IfxScuWdt_setCpuEndinit+0x24>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000743a:	4c f0       	ld.w %d15,[%a15]0
8000743c:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007440:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007442:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007444:	4c f0       	ld.w %d15,[%a15]0
80007446:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000744a:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000744c:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000744e:	4c f0       	ld.w %d15,[%a15]0
80007450:	6f 0f ff 7f 	jz.t %d15,0,8000744e <IfxScuWdt_setCpuEndinit+0x2e>
}
80007454:	00 90       	ret 

80007456 <IfxScuWdt_initCpuWatchdog>:
{
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    Ifx_SCU_WDTCPU_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
80007456:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
80007458:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
8000745a:	6f 12 0b 00 	jz.t %d2,1,80007470 <IfxScuWdt_initCpuWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
8000745e:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
80007462:	37 02 6e 31 	extr.u %d3,%d2,2,14
80007466:	8f f3 83 31 	xor %d3,%d3,63
8000746a:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
8000746e:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
80007470:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
80007472:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
80007476:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
8000747a:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
8000747e:	b9 53 02 00 	ld.hu %d3,[%a5]2
80007482:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
80007486:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
80007488:	54 42       	ld.w %d2,[%a4]
8000748a:	6f 02 ff ff 	jnz.t %d2,0,80007488 <IfxScuWdt_initCpuWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
8000748e:	39 52 04 00 	ld.bu %d2,[%a5]4
80007492:	df 12 0a 00 	jeq %d2,1,800074a6 <IfxScuWdt_initCpuWatchdog+0x50>
80007496:	76 26       	jz %d2,800074a2 <IfxScuWdt_initCpuWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
80007498:	8b 22 20 22 	ne %d2,%d2,2
8000749c:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
800074a0:	3c 07       	j 800074ae <IfxScuWdt_initCpuWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
800074a2:	82 0f       	mov %d15,0
        break;
800074a4:	3c 05       	j 800074ae <IfxScuWdt_initCpuWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
800074a6:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
800074aa:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR   = config->disableWatchdog ? 1 : 0;
800074ae:	39 52 05 00 	ld.bu %d2,[%a5]5
800074b2:	8b 02 20 22 	ne %d2,%d2,0
800074b6:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR   = config->enableSmuRestriction ? 1 : 0;
800074ba:	39 52 06 00 	ld.bu %d2,[%a5]6
800074be:	8b 02 20 22 	ne %d2,%d2,0
800074c2:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR  = config->enableAutomaticPasswordChange ? 1 : 0;
800074c6:	39 52 07 00 	ld.bu %d2,[%a5]7
800074ca:	8b 02 20 22 	ne %d2,%d2,0
800074ce:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR  = config->enableTimerCheck ? 1 : 0;
800074d2:	39 52 08 00 	ld.bu %d2,[%a5]8
800074d6:	8b 02 20 22 	ne %d2,%d2,0
800074da:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR = config->enableTimerCheckTolerance ? 1 : 0;
800074de:	39 52 09 00 	ld.bu %d2,[%a5]9
800074e2:	8b 02 20 22 	ne %d2,%d2,0
800074e6:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
800074ea:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set CPU ENDINIT protection */
    IfxScuWdt_setCpuEndinit(config->password);
800074ec:	b9 54 00 00 	ld.hu %d4,[%a5]0
800074f0:	1d ff 98 ff 	j 80007420 <IfxScuWdt_setCpuEndinit>

800074f4 <IfxScuWdt_serviceCpuWatchdog>:
}


void IfxScuWdt_serviceCpuWatchdog(uint16 password)
{
    IfxScuWdt_setCpuEndinit(password);
800074f4:	1d ff 96 ff 	j 80007420 <IfxScuWdt_setCpuEndinit>

800074f8 <IfxScuWdt_setSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800074f8:	91 30 00 ff 	movh.a %a15,61443
800074fc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007500:	4c f0       	ld.w %d15,[%a15]0
80007502:	06 24       	sh %d4,2
80007504:	2e 16       	jz.t %d15,1,80007510 <IfxScuWdt_setSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007506:	4c f0       	ld.w %d15,[%a15]0
80007508:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000750c:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000750e:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007510:	91 30 00 ff 	movh.a %a15,61443
80007514:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007518:	4c f0       	ld.w %d15,[%a15]0
8000751a:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000751e:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007520:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80007522:	4c f0       	ld.w %d15,[%a15]0
80007524:	6f 0f ff 7f 	jz.t %d15,0,80007522 <IfxScuWdt_setSafetyEndinit+0x2a>


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007528:	00 90       	ret 

8000752a <IfxScuWdt_initSafetyWatchdog>:
{
    Ifx_SCU_WDTS_CON0 wdt_con0;
    Ifx_SCU_WDTS_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
8000752a:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
8000752c:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
8000752e:	6f 12 0b 00 	jz.t %d2,1,80007544 <IfxScuWdt_initSafetyWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80007532:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
80007536:	37 02 6e 31 	extr.u %d3,%d2,2,14
8000753a:	8f f3 83 31 	xor %d3,%d3,63
8000753e:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80007542:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
80007544:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
80007546:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
8000754a:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
8000754e:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
80007552:	b9 53 02 00 	ld.hu %d3,[%a5]2
80007556:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
8000755a:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
8000755c:	54 42       	ld.w %d2,[%a4]
8000755e:	6f 02 ff ff 	jnz.t %d2,0,8000755c <IfxScuWdt_initSafetyWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
80007562:	39 52 04 00 	ld.bu %d2,[%a5]4
80007566:	df 12 0a 00 	jeq %d2,1,8000757a <IfxScuWdt_initSafetyWatchdog+0x50>
8000756a:	76 26       	jz %d2,80007576 <IfxScuWdt_initSafetyWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
8000756c:	8b 22 20 22 	ne %d2,%d2,2
80007570:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
80007574:	3c 07       	j 80007582 <IfxScuWdt_initSafetyWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
80007576:	82 0f       	mov %d15,0
        break;
80007578:	3c 05       	j 80007582 <IfxScuWdt_initSafetyWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
8000757a:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
8000757e:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR     = config->disableWatchdog ? 1 : 0;
80007582:	39 52 05 00 	ld.bu %d2,[%a5]5
80007586:	8b 02 20 22 	ne %d2,%d2,0
8000758a:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR     = config->enableSmuRestriction ? 1 : 0;
8000758e:	39 52 06 00 	ld.bu %d2,[%a5]6
80007592:	8b 02 20 22 	ne %d2,%d2,0
80007596:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR    = config->enableAutomaticPasswordChange ? 1 : 0;
8000759a:	39 52 07 00 	ld.bu %d2,[%a5]7
8000759e:	8b 02 20 22 	ne %d2,%d2,0
800075a2:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR    = config->enableTimerCheck ? 1 : 0;
800075a6:	39 52 08 00 	ld.bu %d2,[%a5]8
800075aa:	8b 02 20 22 	ne %d2,%d2,0
800075ae:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR   = config->enableTimerCheckTolerance ? 1 : 0;
800075b2:	39 52 09 00 	ld.bu %d2,[%a5]9
800075b6:	8b 02 20 22 	ne %d2,%d2,0
800075ba:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7
    wdt_con1.B.CLRIRF = config->clrInternalResetFlag ? 0 : 1;
800075be:	39 52 0a 00 	ld.bu %d2,[%a5]10
800075c2:	8b 02 00 22 	eq %d2,%d2,0
800075c6:	67 2f 00 f0 	ins.t %d15,%d15,0,%d2,0

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
800075ca:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set Safety ENDINIT protection */
    IfxScuWdt_setSafetyEndinit(config->password);
800075cc:	b9 54 00 00 	ld.hu %d4,[%a5]0
800075d0:	1d ff 94 ff 	j 800074f8 <IfxScuWdt_setSafetyEndinit>

800075d4 <IfxScuWdt_serviceSafetyWatchdog>:
}


void IfxScuWdt_serviceSafetyWatchdog(uint16 password)
{
    IfxScuWdt_setSafetyEndinit(password);
800075d4:	1d ff 92 ff 	j 800074f8 <IfxScuWdt_setSafetyEndinit>

800075d8 <IfxScuWdt_enableWatchdogWithDebugger>:
    volatile uint32 *oecPtr    = (volatile uint32 *)0xF0000478;
    volatile uint32 *ostatePtr = (volatile uint32 *)0xF0000480;
    volatile uint32 *ocntrlPtr = (volatile uint32 *)0xF000047C;

    /* read OSTATE.OEN */
    ostateValue = *ostatePtr;
800075d8:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
    oenEnabled  = (ostateValue & 0x00000001);

    if (!oenEnabled)
800075dc:	2e 07       	jz.t %d15,0,800075ea <IfxScuWdt_enableWatchdogWithDebugger+0x12>
    }

    if (oenEnabled)
    {
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
800075de:	3b 00 00 f3 	mov %d15,12288
800075e2:	a5 ff 7c 10 	st.w f000047c <_SMALL_DATA4_+0x3fff847c>,%d15
}


boolean IfxScuWdt_enableWatchdogWithDebugger(void)
{
    boolean          status = 0, oenEnabled = 0, watchdogEnabled = 0;
800075e6:	82 0f       	mov %d15,0
800075e8:	3c 11       	j 8000760a <IfxScuWdt_enableWatchdogWithDebugger+0x32>

    if (!oenEnabled)
    {
        /* enable the debug interface (OSTATE.OEN )if it is not already enabled */
        /* pattern for enabling OSTATE.OEN */
        *oecPtr = 0xA1;
800075ea:	3b 10 0a 20 	mov %d2,161
800075ee:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
800075f2:	da 5e       	mov %d15,94
800075f4:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15
        *oecPtr = 0xA1;
800075f8:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
800075fc:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15

        /* read OSTATE.OEN again*/
        ostateValue = *ostatePtr;
80007600:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
        oenEnabled  = (ostateValue & 0x00000001);
    }

    if (oenEnabled)
80007604:	6f 0f ed ff 	jnz.t %d15,0,800075de <IfxScuWdt_enableWatchdogWithDebugger+0x6>
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
    }
    else
    {
        status = 1;
80007608:	82 1f       	mov %d15,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, oenEnabled == 1);

    /* read OSTATE.WDTSUS */
    ostateValue     = *ostatePtr;
8000760a:	85 f2 40 20 	ld.w %d2,f0000480 <_SMALL_DATA4_+0x3fff8480>
    watchdogEnabled = (ostateValue & 0x00000080);

    if (!watchdogEnabled)
8000760e:	37 02 e1 23 	extr.u %d2,%d2,7,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, watchdogEnabled == 1);

    return status;
}
80007612:	ab 1f 80 22 	sel %d2,%d2,%d15,1
80007616:	00 90       	ret 

80007618 <IfxVadc_Adc_deInitGroup>:
    Ifx_VADC_G     *vadcG      = IfxVadc_Adc_getGroupRegsFromGroup(group);
    /* Get group index */
    IfxVadc_GroupId groupIndex = group->groupId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007618:	0c 48       	ld.bu %d15,[%a4]8
8000761a:	d4 4c       	ld.a %a12,[%a4]
8000761c:	1b 0f 01 f0 	addi %d15,%d15,16
80007620:	16 ff       	and %d15,255
80007622:	99 4d 04 00 	ld.a %a13,[%a4]4
80007626:	02 f4       	mov %d4,%d15
80007628:	40 c4       	mov.aa %a4,%a12
8000762a:	6d ff 91 e8 	call 8000474c <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG)
{
    vadcG->ARBCFG.B.ANONC = IfxVadc_AnalogConverterMode_off;   /* turn off group */
8000762e:	54 d2       	ld.w %d2,[%a13]
    IfxVadc_resetGroup(vadcG);
    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007630:	40 c4       	mov.aa %a4,%a12
80007632:	8f 32 c0 21 	andn %d2,%d2,3
80007636:	74 d2       	st.w [%a13],%d2
80007638:	02 f4       	mov %d4,%d15
8000763a:	1d ff 6d e8 	j 80004714 <IfxVadc_disableAccess>

8000763e <IfxVadc_Adc_disableModule>:
}


void IfxVadc_Adc_disableModule(Ifx_VADC *vadc)
{
8000763e:	40 4f       	mov.aa %a15,%a4
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007640:	6d ff bb fe 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
80007644:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007646:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80007648:	6d ff b7 fd 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.B.DISR = 1;
8000764c:	48 02       	ld.w %d2,[%a15]0
    IfxScuWdt_setCpuEndinit(passwd);
8000764e:	02 f4       	mov %d4,%d15

IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->CLC.B.DISR = 1;
80007650:	8f 12 40 21 	or %d2,%d2,1
80007654:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80007656:	1d ff e5 fe 	j 80007420 <IfxScuWdt_setCpuEndinit>

8000765a <IfxVadc_Adc_getChannelConfig>:
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
8000765a:	99 42 04 00 	ld.a %a2,[%a4]4
8000765e:	99 2d 04 00 	ld.a %a13,[%a2]4
    IfxVadc_ChannelId channelIndex = channel->channel;
80007662:	79 42 00 00 	ld.b %d2,[%a4]0

    config->channelId = channel->channel;
    config->group     = channel->group;
80007666:	b5 52 14 00 	st.a [%a5]20,%a2


IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U = vadcG->CHCTR[channelIndex].U;
8000766a:	1b 02 06 f0 	addi %d15,%d2,96
8000766e:	90 d2       	addsc.a %a2,%a13,%d15,2
void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
    IfxVadc_ChannelId channelIndex = channel->channel;

    config->channelId = channel->channel;
80007670:	e9 52 0c 00 	st.b [%a5]12,%d2
80007674:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
80007676:	40 4c       	mov.aa %a12,%a4

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
80007678:	37 0f 62 30 	extr.u %d3,%d15,0,2
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
8000767c:	40 5f       	mov.aa %a15,%a5

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
8000767e:	e9 53 0d 00 	st.b [%a5]13,%d3
    config->reference           = (IfxVadc_ChannelReference)tempChctr.B.REFSEL;
80007682:	37 0f e1 35 	extr.u %d3,%d15,11,1
80007686:	e9 53 0e 00 	st.b [%a5]14,%d3
    config->resultRegister      = (IfxVadc_ChannelResult)tempChctr.B.RESREG;
8000768a:	37 0f 64 38 	extr.u %d3,%d15,16,4
8000768e:	e9 53 0f 00 	st.b [%a5]15,%d3
    config->globalResultUsage   = tempChctr.B.RESTBS;
80007692:	37 0f 61 3a 	extr.u %d3,%d15,20,1
80007696:	34 53       	st.b [%a5],%d3
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
80007698:	37 0f 62 32 	extr.u %d3,%d15,4,2
8000769c:	e9 53 10 00 	st.b [%a5]16,%d3
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
800076a0:	37 0f 62 33 	extr.u %d3,%d15,6,2
800076a4:	e9 53 11 00 	st.b [%a5]17,%d3
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
800076a8:	37 0f 64 36 	extr.u %d3,%d15,12,4
800076ac:	e9 53 12 00 	st.b [%a5]18,%d3
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
800076b0:	37 0f 62 34 	extr.u %d3,%d15,8,2
800076b4:	e9 53 13 00 	st.b [%a5]19,%d3
    config->synchonize          = tempChctr.B.SYNC;
800076b8:	37 0f 61 35 	extr.u %d3,%d15,10,1
    config->rightAlignedStorage = tempChctr.B.RESPOS;
800076bc:	37 0f e1 fa 	extr.u %d15,%d15,21,1
    config->globalResultUsage   = tempChctr.B.RESTBS;
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
    config->synchonize          = tempChctr.B.SYNC;
800076c0:	e9 53 01 00 	st.b [%a5]1,%d3
    config->rightAlignedStorage = tempChctr.B.RESPOS;
800076c4:	2c 53       	st.b [%a5]3,%d15


IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CHASS assignChannels;
    assignChannels.U = vadcG->CHASS.U;
800076c6:	4c d2       	ld.w %d15,[%a13]8

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
800076c8:	57 0f 61 22 	extr.u %d2,%d15,%d2,1
800076cc:	8f 12 80 21 	xor %d2,%d2,1
800076d0:	e9 52 02 00 	st.b [%a5]2,%d2
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
800076d4:	99 42 04 00 	ld.a %a2,[%a4]4
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
800076d8:	79 4f 00 00 	ld.b %d15,[%a4]0


IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CEVNP0 serviceRequestNodePtr;
    serviceRequestNodePtr.U = vadcG->CEVNP0.U;
800076dc:	19 d2 20 40 	ld.w %d2,[%a13]288
800076e0:	06 2f       	sh %d15,2
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
800076e2:	57 02 64 ff 	extr.u %d15,%d2,%d15,4
    config->rightAlignedStorage = tempChctr.B.RESPOS;

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
800076e6:	39 28 08 00 	ld.bu %d8,[%a2]8
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
800076ea:	0b 8f 10 48 	mov %e4,%d15,%d8
800076ee:	6d ff 60 e9 	call 800049ae <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
800076f2:	54 22       	ld.w %d2,[%a2]
800076f4:	6f a2 0a 00 	jz.t %d2,10,80007708 <IfxVadc_Adc_getChannelConfig+0xae>
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)channelServiceRequestNodePtr;
800076f8:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)src->B.SRPN;
800076fa:	4c 20       	ld.w %d15,[%a2]0
800076fc:	16 ff       	and %d15,255
800076fe:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)src->B.TOS;
80007700:	4c 20       	ld.w %d15,[%a2]0
80007702:	37 0f e2 f5 	extr.u %d15,%d15,11,2
80007706:	3c 05       	j 80007710 <IfxVadc_Adc_getChannelConfig+0xb6>
    }
    else
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)0;
80007708:	82 0f       	mov %d15,0
8000770a:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)0;
8000770c:	82 0f       	mov %d15,0
8000770e:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)0;
80007710:	28 9f       	st.b [%a15]9,%d15
    }

    uint32 resultServiceRequestNodePtr;

    if (config->resultRegister < IfxVadc_ChannelResult_8)
80007712:	0c ff       	ld.bu %d15,[%a15]15
80007714:	79 c2 00 00 	ld.b %d2,[%a12]0
80007718:	ff 8f 08 80 	jge.u %d15,8,80007728 <IfxVadc_Adc_getChannelConfig+0xce>


IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP0 resultServiceRequestNodePtr0;
    resultServiceRequestNodePtr0.U = vadcG->REVNP0.U;
8000771c:	19 df 30 40 	ld.w %d15,[%a13]304
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
80007720:	06 22       	sh %d2,2
80007722:	57 0f 64 f2 	extr.u %d15,%d15,%d2,4
80007726:	3c 08       	j 80007736 <IfxVadc_Adc_getChannelConfig+0xdc>
    }
    else
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer1(vadcG)).U >> ((channel->channel - IfxVadc_ChannelResult_8) * 4)) & 0xF;
80007728:	9a 82       	add %d15,%d2,-8


IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP1 resultServiceRequestNodePtr1;
    resultServiceRequestNodePtr1.U = vadcG->REVNP1.U;
8000772a:	19 d3 34 40 	ld.w %d3,[%a13]308
8000772e:	8f 2f 00 20 	sh %d2,%d15,2
80007732:	57 03 64 f2 	extr.u %d15,%d3,%d2,4
    }

    src = IfxVadc_getSrcAddress(groupIndex, resultServiceRequestNodePtr);
80007736:	16 ff       	and %d15,255
80007738:	0b 8f 10 48 	mov %e4,%d15,%d8
8000773c:	6d ff 39 e9 	call 800049ae <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
80007740:	54 22       	ld.w %d2,[%a2]
80007742:	6f a2 0a 00 	jz.t %d2,10,80007756 <IfxVadc_Adc_getChannelConfig+0xfc>
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)resultServiceRequestNodePtr;
80007746:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)src->B.SRPN;
80007748:	4c 20       	ld.w %d15,[%a2]0
8000774a:	16 ff       	and %d15,255
8000774c:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)src->B.TOS;
8000774e:	4c 20       	ld.w %d15,[%a2]0
80007750:	37 0f e2 f5 	extr.u %d15,%d15,11,2
80007754:	3c 05       	j 8000775e <IfxVadc_Adc_getChannelConfig+0x104>
    }
    else
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)0;
80007756:	82 0f       	mov %d15,0
80007758:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)0;
8000775a:	82 0f       	mov %d15,0
8000775c:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)0;
8000775e:	28 8f       	st.b [%a15]8,%d15
80007760:	00 90       	ret 

80007762 <IfxVadc_Adc_getChannelConversionTime>:
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
80007762:	cc 41       	ld.a %a15,[%a4]4
80007764:	c8 12       	ld.a %a2,[%a15]4
}


IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    return (IfxVadc_InputClasses)vadcG->CHCTR[channelIndex].B.ICLSEL;
80007766:	79 4f 00 00 	ld.b %d15,[%a4]0
8000776a:	08 8a       	ld.bu %d10,[%a15]8
8000776c:	c8 0f       	ld.a %a15,[%a15]0
8000776e:	1b 0f 06 f0 	addi %d15,%d15,96
80007772:	90 22       	addsc.a %a2,%a2,%d15,2
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
80007774:	20 08       	sub.a %sp,8
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
80007776:	40 f4       	mov.aa %a4,%a15
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
80007778:	02 49       	mov %d9,%d4
8000777a:	54 28       	ld.w %d8,[%a2]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
8000777c:	6d ff 9a e8 	call 800048b0 <IfxVadc_getAdcAnalogFrequency>
80007780:	02 2f       	mov %d15,%d2
80007782:	6d ff b0 e8 	call 800048e2 <IfxVadc_getAdcModuleFrequency>
80007786:	8f 38 00 81 	and %d8,%d8,3
8000778a:	74 a9       	st.w [%sp],%d9
8000778c:	40 f4       	mov.aa %a4,%a15
8000778e:	0b a8 10 48 	mov %e4,%d8,%d10
80007792:	0b f2 10 68 	mov %e6,%d2,%d15
}
80007796:	1d ff c1 e9 	j 80004b18 <IfxVadc_getChannelConversionTime>

8000779a <IfxVadc_Adc_getGroupConfig>:

void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
8000779a:	d4 4d       	ld.a %a13,[%a4]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
8000779c:	40 4e       	mov.aa %a14,%a4
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
8000779e:	99 4c 04 00 	ld.a %a12,[%a4]4
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
800077a2:	40 d4       	mov.aa %a4,%a13
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
800077a4:	40 5f       	mov.aa %a15,%a5
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
800077a6:	6d ff 85 e8 	call 800048b0 <IfxVadc_getAdcAnalogFrequency>

    config->groupId                    = group->groupId;
800077aa:	0c e8       	ld.bu %d15,[%a14]8
    config->module                     = &group->module;
800077ac:	e8 0e       	st.a [%a15]0,%a14
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);

    config->groupId                    = group->groupId;
800077ae:	28 4f       	st.b [%a15]4,%d15
}


IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_ArbitrationRounds)vadcG->ARBCFG.B.ARBRND;
800077b0:	4c c0       	ld.w %d15,[%a12]0
800077b2:	37 0f 62 f2 	extr.u %d15,%d15,4,2
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);
800077b6:	e9 ff 32 00 	st.b [%a15]50,%d15
800077ba:	82 0f       	mov %d15,0
}


IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum)
{
    return (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
800077bc:	1b 8f 00 30 	addi %d3,%d15,8
800077c0:	01 c3 02 26 	addsc.a %a2,%a12,%d3,2

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
800077c4:	d0 f3       	addsc.a %a3,%a15,%d15,3
800077c6:	54 23       	ld.w %d3,[%a2]
800077c8:	37 03 63 34 	extr.u %d3,%d3,8,3
800077cc:	e9 33 0c 00 	st.b [%a3]12,%d3
}


IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency)
{
    uint32 sampleTime = vadcG->ICLASS[inputClassNum].B.STCS;
800077d0:	54 23       	ld.w %d3,[%a2]
800077d2:	8f f3 01 31 	and %d3,%d3,31

    if (sampleTime > 16)
800077d6:	8b 13 61 42 	lt.u %d4,%d3,17
800077da:	f6 44       	jnz %d4,800077e2 <IfxVadc_Adc_getGroupConfig+0x48>
    {
        sampleTime = (sampleTime - 15) * 16;
800077dc:	1b 13 ff 3f 	addi %d3,%d3,-15
800077e0:	06 43       	sh %d3,4
    }

    return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
800077e2:	c2 23       	add %d3,2
800077e4:	4b 03 41 31 	itof %d3,%d3
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
800077e8:	92 14       	add %d4,%d15,1
800077ea:	4b 23 51 30 	div.f %d3,%d3,%d2
800077ee:	01 f4 03 26 	addsc.a %a2,%a15,%d4,3
800077f2:	74 23       	st.w [%a2],%d3
    config->groupId                    = group->groupId;
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
800077f4:	1e 13       	jeq %d15,1,800077fa <IfxVadc_Adc_getGroupConfig+0x60>
800077f6:	82 1f       	mov %d15,1
800077f8:	3c e2       	j 800077bc <IfxVadc_Adc_getGroupConfig+0x22>
}


IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN1;
800077fa:	19 c2 04 00 	ld.w %d2,[%a12]4
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
    }

    if (IfxVadc_isRequestScanSlotEnabled(vadcG) == TRUE)
800077fe:	ef 92 33 00 	jz.t %d2,25,80007864 <IfxVadc_Adc_getGroupConfig+0xca>
    {
        config->arbiter.requestSlotScanEnabled          = TRUE;
80007802:	e9 ff 34 00 	st.b [%a15]52,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO1;
80007806:	19 c2 04 00 	ld.w %d2,[%a12]4
8000780a:	37 02 62 22 	extr.u %d2,%d2,4,2
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
8000780e:	e9 f2 1e 00 	st.b [%a15]30,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM1;
80007812:	19 c2 04 00 	ld.w %d2,[%a12]4
80007816:	37 02 e1 23 	extr.u %d2,%d2,7,1
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);
8000781a:	e9 f2 1f 00 	st.b [%a15]31,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->ASCTRL.B.XTSEL;
8000781e:	19 c3 20 20 	ld.w %d3,[%a12]160
80007822:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
80007826:	e9 f3 1b 00 	st.b [%a15]27,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->ASCTRL.B.XTMODE;
8000782a:	19 c2 20 20 	ld.w %d2,[%a12]160
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000782e:	8b f3 00 32 	eq %d3,%d3,15
80007832:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotScanEnabled          = TRUE;
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);
80007836:	e9 f2 1d 00 	st.b [%a15]29,%d2

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000783a:	f6 35       	jnz %d3,80007844 <IfxVadc_Adc_getGroupConfig+0xaa>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->ASMR.B.ENGT;
8000783c:	19 cf 24 20 	ld.w %d15,[%a12]164
80007840:	16 03       	and %d15,3
80007842:	3c 02       	j 80007846 <IfxVadc_Adc_getGroupConfig+0xac>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_getScanSlotGatingMode(vadcG);
        }
        else if (config->scanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007844:	76 23       	jz %d2,8000784a <IfxVadc_Adc_getGroupConfig+0xb0>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007846:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->ASCTRL.B.GTSEL;
8000784a:	19 cf 20 20 	ld.w %d15,[%a12]160
8000784e:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->scanRequest.triggerConfig.gatingSource = IfxVadc_getScanSlotGatingSource(vadcG);
80007852:	e9 ff 1a 00 	st.b [%a15]26,%d15
}


IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ASMR.B.SCAN;
80007856:	19 cf 24 20 	ld.w %d15,[%a12]164
8000785a:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->scanRequest.autoscanEnabled            = IfxVadc_isAutoScanEnabled(vadcG);
8000785e:	e9 ff 18 00 	st.b [%a15]24,%d15
80007862:	3c 0c       	j 8000787a <IfxVadc_Adc_getGroupConfig+0xe0>
    }
    else
    {
        config->scanRequest.autoscanEnabled             = FALSE;
80007864:	82 0f       	mov %d15,0
80007866:	e9 ff 18 00 	st.b [%a15]24,%d15
        config->scanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
8000786a:	e9 ff 1c 00 	st.b [%a15]28,%d15
        config->scanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;    /* Use CCU6061 TRIG0 */
8000786e:	e9 ff 1a 00 	st.b [%a15]26,%d15
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
80007872:	e9 ff 1d 00 	st.b [%a15]29,%d15
        config->scanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;   /* Trigger source taken from Gating Input */
80007876:	e9 ff 1b 00 	st.b [%a15]27,%d15
}


IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN0;
8000787a:	4c c1       	ld.w %d15,[%a12]4
8000787c:	37 0f 61 fc 	extr.u %d15,%d15,24,1
    }

    if (IfxVadc_isRequestQueueSlotEnabled(vadcG) == TRUE)
80007880:	df 1f 30 80 	jne %d15,1,800078e0 <IfxVadc_Adc_getGroupConfig+0x146>
    {
        config->arbiter.requestSlotQueueEnabled          = TRUE;
80007884:	e9 ff 33 00 	st.b [%a15]51,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO0;
80007888:	19 c2 04 00 	ld.w %d2,[%a12]4
8000788c:	8f 32 00 21 	and %d2,%d2,3
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
80007890:	e9 f2 26 00 	st.b [%a15]38,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM0;
80007894:	19 c2 04 00 	ld.w %d2,[%a12]4
80007898:	37 02 e1 21 	extr.u %d2,%d2,3,1
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);
8000789c:	e9 f2 27 00 	st.b [%a15]39,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->QCTRL0.B.XTSEL;
800078a0:	19 c3 00 20 	ld.w %d3,[%a12]128
800078a4:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
800078a8:	e9 f3 23 00 	st.b [%a15]35,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->QCTRL0.B.XTMODE;
800078ac:	19 c2 00 20 	ld.w %d2,[%a12]128
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800078b0:	8b f3 00 32 	eq %d3,%d3,15
800078b4:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotQueueEnabled          = TRUE;
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);
800078b8:	e9 f2 25 00 	st.b [%a15]37,%d2

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800078bc:	f6 35       	jnz %d3,800078c6 <IfxVadc_Adc_getGroupConfig+0x12c>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->QMR0.B.ENGT;
800078be:	19 cf 04 20 	ld.w %d15,[%a12]132
800078c2:	16 03       	and %d15,3
800078c4:	3c 02       	j 800078c8 <IfxVadc_Adc_getGroupConfig+0x12e>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_getQueueSlotGatingMode(vadcG);
        }
        else if (config->queueRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800078c6:	76 23       	jz %d2,800078cc <IfxVadc_Adc_getGroupConfig+0x132>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800078c8:	e9 ff 24 00 	st.b [%a15]36,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->QCTRL0.B.GTSEL;
800078cc:	19 cf 00 20 	ld.w %d15,[%a12]128
800078d0:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->queueRequest.triggerConfig.gatingSource = IfxVadc_getQueueSlotGatingSource(vadcG);
800078d4:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.flushQueueAfterInit        = FALSE;
800078d8:	82 0f       	mov %d15,0
800078da:	e9 ff 20 00 	st.b [%a15]32,%d15
800078de:	3c 0c       	j 800078f6 <IfxVadc_Adc_getGroupConfig+0x15c>
    }
    else
    {
        config->queueRequest.flushQueueAfterInit         = FALSE;
800078e0:	82 0f       	mov %d15,0
800078e2:	e9 ff 20 00 	st.b [%a15]32,%d15
        config->queueRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
800078e6:	e9 ff 24 00 	st.b [%a15]36,%d15
        config->queueRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;        /* Use CCU6061 TRIG0 */
800078ea:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
800078ee:	e9 ff 25 00 	st.b [%a15]37,%d15
        config->queueRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;       /* Trigger source taken from Gating Input */
800078f2:	e9 ff 23 00 	st.b [%a15]35,%d15
}


IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN2;
800078f6:	4c c1       	ld.w %d15,[%a12]4
800078f8:	37 0f 61 fd 	extr.u %d15,%d15,26,1
    }

    if (IfxVadc_isRequestBackgroundScanSlotEnabled(vadcG) == TRUE)
800078fc:	df 1f 33 80 	jne %d15,1,80007962 <IfxVadc_Adc_getGroupConfig+0x1c8>
    {
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
80007900:	e9 ff 35 00 	st.b [%a15]53,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO2;
80007904:	19 c2 04 00 	ld.w %d2,[%a12]4
80007908:	37 02 62 24 	extr.u %d2,%d2,8,2
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
8000790c:	e9 f2 2e 00 	st.b [%a15]46,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM2;
80007910:	19 c2 04 00 	ld.w %d2,[%a12]4
80007914:	37 02 e1 25 	extr.u %d2,%d2,11,1
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);
80007918:	e9 f2 2f 00 	st.b [%a15]47,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerSource)vadc->BRSCTRL.B.XTSEL;
8000791c:	19 d3 00 80 	ld.w %d3,[%a13]512
80007920:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
80007924:	e9 f3 2b 00 	st.b [%a15]43,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerMode)vadc->BRSCTRL.B.XTMODE;
80007928:	19 d2 00 80 	ld.w %d2,[%a13]512
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000792c:	8b f3 00 32 	eq %d3,%d3,15
80007930:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);
80007934:	e9 f2 2d 00 	st.b [%a15]45,%d2

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007938:	f6 35       	jnz %d3,80007942 <IfxVadc_Adc_getGroupConfig+0x1a8>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingMode)vadc->BRSMR.B.ENGT;
8000793a:	19 df 04 80 	ld.w %d15,[%a13]516
8000793e:	16 03       	and %d15,3
80007940:	3c 02       	j 80007944 <IfxVadc_Adc_getGroupConfig+0x1aa>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_getBackgroundScanGatingMode(vadc);
        }
        else if (config->backgroundScanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007942:	76 23       	jz %d2,80007948 <IfxVadc_Adc_getGroupConfig+0x1ae>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007944:	e9 ff 2c 00 	st.b [%a15]44,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingSource)vadc->BRSCTRL.B.GTSEL;
80007948:	19 df 00 80 	ld.w %d15,[%a13]512
8000794c:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->backgroundScanRequest.triggerConfig.gatingSource = IfxVadc_getBackgroundScanGatingSource(vadc);
80007950:	e9 ff 2a 00 	st.b [%a15]42,%d15
}


IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc)
{
    return (boolean)vadc->BRSMR.B.SCAN;
80007954:	19 df 04 80 	ld.w %d15,[%a13]516
80007958:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->backgroundScanRequest.autoBackgroundScanEnabled  = IfxVadc_isAutoBackgroundScanEnabled(vadc);
8000795c:	e9 ff 28 00 	st.b [%a15]40,%d15
80007960:	3c 0c       	j 80007978 <IfxVadc_Adc_getGroupConfig+0x1de>
    }
    else
    {
        config->backgroundScanRequest.autoBackgroundScanEnabled   = FALSE;
80007962:	82 0f       	mov %d15,0
80007964:	e9 ff 28 00 	st.b [%a15]40,%d15
        config->backgroundScanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
80007968:	e9 ff 2c 00 	st.b [%a15]44,%d15
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
8000796c:	e9 ff 2a 00 	st.b [%a15]42,%d15
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
80007970:	e9 ff 2d 00 	st.b [%a15]45,%d15
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
80007974:	e9 ff 2b 00 	st.b [%a15]43,%d15


IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG)
{
    uint8 masterIndex = 0;
    masterIndex = vadcG->SYNCTR.B.STSEL;
80007978:	19 c3 00 10 	ld.w %d3,[%a12]64
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
8000797c:	39 e7 08 00 	ld.bu %d7,[%a14]8
80007980:	8f 33 00 31 	and %d3,%d3,3
80007984:	02 72       	mov %d2,%d7
IFX_INLINE IfxVadc_GroupId IfxVadc_Adc_getMasterId(IfxVadc_GroupId slave, IfxVadc_Adc_SYNCTR_STSEL masterIndex)
{
    uint8           i, idxOffset;
    IfxVadc_GroupId masterId = slave;

    if (masterIndex == 0)
80007986:	df 03 1f 00 	jeq %d3,0,800079c4 <IfxVadc_Adc_getGroupConfig+0x22a>
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
8000798a:	7b 00 00 58 	movh %d5,32768
8000798e:	1b 05 dd 50 	addi %d5,%d5,3536
80007992:	13 87 20 55 	madd %d5,%d5,%d7,8
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
80007996:	8b 47 60 42 	lt.u %d4,%d7,4
8000799a:	82 02       	mov %d2,0
8000799c:	ab 42 80 24 	sel %d2,%d4,%d2,4

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
800079a0:	1a 25       	add %d15,%d5,%d2
800079a2:	60 f4       	mov.a %a4,%d15
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
800079a4:	82 04       	mov %d4,0

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
800079a6:	a0 32       	mov.a %a2,3
800079a8:	01 44 00 36 	addsc.a %a3,%a4,%d4,0
800079ac:	8f f4 0f 61 	and %d6,%d4,255
800079b0:	14 35       	ld.bu %d5,[%a3]
800079b2:	5f 35 06 80 	jne %d5,%d3,800079be <IfxVadc_Adc_getGroupConfig+0x224>
            {
                return (IfxVadc_GroupId)(i + idxOffset);
800079b6:	42 62       	add %d2,%d6
800079b8:	8f f2 0f 21 	and %d2,%d2,255
800079bc:	3c 04       	j 800079c4 <IfxVadc_Adc_getGroupConfig+0x22a>
800079be:	c2 14       	add %d4,1
800079c0:	fc 24       	loop %a2,800079a8 <IfxVadc_Adc_getGroupConfig+0x20e>
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
800079c2:	02 72       	mov %d2,%d7
800079c4:	28 52       	st.b [%a15]5,%d2


IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc)
{
    Ifx_VADC_GLOBCFG globCfg;
    globCfg.U = vadc->GLOBCFG.U;
800079c6:	19 d2 00 20 	ld.w %d2,[%a13]128

    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
800079ca:	1b 07 01 f0 	addi %d15,%d7,16
800079ce:	57 02 61 ff 	extr.u %d15,%d2,%d15,1
800079d2:	e9 ff 30 00 	st.b [%a15]48,%d15
800079d6:	00 90       	ret 

800079d8 <IfxVadc_Adc_initChannel>:


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
800079d8:	99 52 14 00 	ld.a %a2,[%a5]20
800079dc:	d4 2e       	ld.a %a14,[%a2]
800079de:	99 2c 04 00 	ld.a %a12,[%a2]4
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
800079e2:	39 28 08 00 	ld.bu %d8,[%a2]8
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
800079e6:	b5 42 04 00 	st.a [%a4]4,%a2
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
800079ea:	02 84       	mov %d4,%d8
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
800079ec:	40 4d       	mov.aa %a13,%a4
    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
800079ee:	40 e4       	mov.aa %a4,%a14
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
800079f0:	40 5f       	mov.aa %a15,%a5
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;
800079f2:	79 59 0c 00 	ld.b %d9,[%a5]12

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
800079f6:	6d ff ab e6 	call 8000474c <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference)
{
    vadcG->CHCTR[channelIndex].B.REFSEL = reference;
800079fa:	1b 09 06 20 	addi %d2,%d9,96
800079fe:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007a02:	0c fe       	ld.bu %d15,[%a15]14
80007a04:	54 22       	ld.w %d2,[%a2]
        IfxVadc_setResultPosition(vadcG, channelIndex, config->rightAlignedStorage);
        IfxVadc_setBackgroundResultTarget(vadcG, channelIndex, config->globalResultUsage);
        IfxVadc_setBoundaryMode(vadcG, channelIndex, config->boundaryMode);
    }

    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007a06:	40 e4       	mov.aa %a4,%a14
80007a08:	67 f2 0b f0 	ins.t %d15,%d2,11,%d15,0
80007a0c:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister)
{
    vadcG->CHCTR[channelIndex].B.RESREG = resultRegister;
80007a0e:	54 22       	ld.w %d2,[%a2]
80007a10:	0c ff       	ld.bu %d15,[%a15]15
80007a12:	37 f2 04 f8 	insert %d15,%d2,%d15,16,4
80007a16:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELL = lowerBoundary;
80007a18:	54 22       	ld.w %d2,[%a2]
80007a1a:	39 ff 10 00 	ld.bu %d15,[%a15]16
80007a1e:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007a22:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELU = upperBoundary;
80007a24:	54 22       	ld.w %d2,[%a2]
80007a26:	39 ff 11 00 	ld.bu %d15,[%a15]17
80007a2a:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
80007a2e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize)
{
    vadcG->CHCTR[channelIndex].B.SYNC = synchonize;
80007a30:	54 22       	ld.w %d2,[%a2]
80007a32:	0c f1       	ld.bu %d15,[%a15]1
80007a34:	67 f2 0a f0 	ins.t %d15,%d2,10,%d15,0
80007a38:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass)
{
    vadcG->CHCTR[channelIndex].B.ICLSEL = inputClass;
80007a3a:	54 22       	ld.w %d2,[%a2]
80007a3c:	0c fd       	ld.bu %d15,[%a15]13
80007a3e:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007a42:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck)
{
    vadcG->CHCTR[channelIndex].B.CHEVMODE = limitCheck;
80007a44:	54 22       	ld.w %d2,[%a2]
80007a46:	39 ff 13 00 	ld.bu %d15,[%a15]19
80007a4a:	37 f2 02 f4 	insert %d15,%d2,%d15,8,2
80007a4e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage)
{
    vadcG->CHCTR[channelIndex].B.RESPOS = rightAlignedStorage;
80007a50:	54 22       	ld.w %d2,[%a2]
80007a52:	0c f3       	ld.bu %d15,[%a15]3
80007a54:	67 f2 15 f0 	ins.t %d15,%d2,21,%d15,0
80007a58:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage)
{
    vadcG->CHCTR[channelIndex].B.RESTBS = globalResultUsage;
80007a5a:	54 22       	ld.w %d2,[%a2]
80007a5c:	0c f0       	ld.bu %d15,[%a15]0
80007a5e:	67 f2 14 f0 	ins.t %d15,%d2,20,%d15,0
80007a62:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode)
{
    vadcG->CHCTR[channelIndex].B.BNDSELX = boundaryMode;
80007a64:	54 22       	ld.w %d2,[%a2]
80007a66:	39 ff 12 00 	ld.bu %d15,[%a15]18
80007a6a:	37 f2 04 f6 	insert %d15,%d2,%d15,12,4
80007a6e:	6c 20       	st.w [%a2]0,%d15
80007a70:	1b 08 01 f0 	addi %d15,%d8,16
80007a74:	16 ff       	and %d15,255
80007a76:	02 f4       	mov %d4,%d15
80007a78:	6d ff 6a e6 	call 8000474c <IfxVadc_enableAccess>

    if (config->backgroundChannel == FALSE)
80007a7c:	08 23       	ld.bu %d3,[%a15]2
80007a7e:	82 12       	mov %d2,1
80007a80:	0f 92 00 20 	sh %d2,%d2,%d9
80007a84:	f6 35       	jnz %d3,80007a8e <IfxVadc_Adc_initChannel+0xb6>
}


IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U |= (1 << channelIndex);
80007a86:	19 c3 08 00 	ld.w %d3,[%a12]8
80007a8a:	a6 32       	or %d2,%d3
80007a8c:	3c 05       	j 80007a96 <IfxVadc_Adc_initChannel+0xbe>
}


IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U &= ~(1 << channelIndex);
80007a8e:	19 c3 08 00 	ld.w %d3,[%a12]8
80007a92:	0f 23 e0 20 	andn %d2,%d3,%d2
    else
    {
        IfxVadc_setBackgroundPriorityChannel(vadcG, channelIndex);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007a96:	02 f4       	mov %d4,%d15
80007a98:	59 c2 08 00 	st.w [%a12]8,%d2
80007a9c:	40 e4       	mov.aa %a4,%a14
80007a9e:	6d ff 3b e6 	call 80004714 <IfxVadc_disableAccess>
}


IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel)
{
    vadcG->CEVNP0.U &= ~(IFX_VADC_G_CEVNP0_CEV0NP_MSK << (channel * 4));
80007aa2:	79 d3 00 00 	ld.b %d3,[%a13]0
80007aa6:	19 c5 20 40 	ld.w %d5,[%a12]288
80007aaa:	8f 23 00 f0 	sh %d15,%d3,2
80007aae:	3b f0 00 20 	mov %d2,15
80007ab2:	0f f2 00 20 	sh %d2,%d2,%d15
80007ab6:	0f 25 e0 20 	andn %d2,%d5,%d2

    IfxVadc_setChannelEventNodePointer0(vadcG, config->channelSrcNr, channel->channel);
80007aba:	08 b4       	ld.bu %d4,[%a15]11
80007abc:	59 c2 20 40 	st.w [%a12]288,%d2
    vadcG->CEVNP0.U |= (channelSrcNr << (channel * 4));
80007ac0:	19 c2 20 40 	ld.w %d2,[%a12]288
80007ac4:	0f f4 00 f0 	sh %d15,%d4,%d15
80007ac8:	a6 2f       	or %d15,%d2
80007aca:	59 cf 20 40 	st.w [%a12]288,%d15

    if (config->channelPriority > 0)
80007ace:	b9 ff 06 00 	ld.hu %d15,[%a15]6
80007ad2:	6e 1f       	jz %d15,80007b10 <IfxVadc_Adc_initChannel+0x138>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->channelSrcNr);
80007ad4:	02 84       	mov %d4,%d8
80007ad6:	08 b5       	ld.bu %d5,[%a15]11
80007ad8:	6d ff 6b e7 	call 800049ae <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
{
    vadcG->CEFCLR.U = 1 << channelId;
80007adc:	79 f2 0c 00 	ld.b %d2,[%a15]12
80007ae0:	82 1f       	mov %d15,1
80007ae2:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007ae6:	59 cf 10 40 	st.w [%a12]272,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80007aea:	54 22       	ld.w %d2,[%a2]
80007aec:	08 63       	ld.bu %d3,[%a15]6
80007aee:	8f f2 cf 21 	andn %d2,%d2,255
80007af2:	a6 32       	or %d2,%d3

        IfxVadc_clearChannelRequest(vadcG, config->channelId);
        IfxSrc_init(src, config->channelServProvider, config->channelPriority);
80007af4:	0c f9       	ld.bu %d15,[%a15]9
80007af6:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007af8:	54 22       	ld.w %d2,[%a2]
80007afa:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007afe:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80007b00:	4c 20       	ld.w %d15,[%a2]0
80007b02:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007b06:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80007b08:	4c 20       	ld.w %d15,[%a2]0
80007b0a:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007b0e:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    if (config->resultRegister < IfxVadc_ChannelResult_8)
80007b10:	0c ff       	ld.bu %d15,[%a15]15
80007b12:	08 a2       	ld.bu %d2,[%a15]10
80007b14:	ff 8f 15 80 	jge.u %d15,8,80007b3e <IfxVadc_Adc_initChannel+0x166>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP0.U &= ~(IFX_VADC_G_REVNP0_REV0NP_MSK << (resultRegister * 4));
80007b18:	19 c4 30 40 	ld.w %d4,[%a12]304
80007b1c:	06 2f       	sh %d15,2
80007b1e:	3b f0 00 30 	mov %d3,15
80007b22:	0f f3 00 30 	sh %d3,%d3,%d15
80007b26:	0f 34 e0 30 	andn %d3,%d4,%d3
80007b2a:	59 c3 30 40 	st.w [%a12]304,%d3
    vadcG->REVNP0.U |= (resultSrcNr << (resultRegister * 4));
80007b2e:	19 c3 30 40 	ld.w %d3,[%a12]304
80007b32:	0f f2 00 f0 	sh %d15,%d2,%d15
80007b36:	a6 3f       	or %d15,%d3
80007b38:	59 cf 30 40 	st.w [%a12]304,%d15
80007b3c:	3c 14       	j 80007b64 <IfxVadc_Adc_initChannel+0x18c>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP1.U &= ~(IFX_VADC_G_REVNP1_REV8NP_MSK << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80007b3e:	c2 8f       	add %d15,-8
80007b40:	19 c4 34 40 	ld.w %d4,[%a12]308
80007b44:	06 2f       	sh %d15,2
80007b46:	3b f0 00 30 	mov %d3,15
80007b4a:	0f f3 00 30 	sh %d3,%d3,%d15
80007b4e:	0f 34 e0 30 	andn %d3,%d4,%d3
80007b52:	59 c3 34 40 	st.w [%a12]308,%d3
    vadcG->REVNP1.U |= (resultSrcNr << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80007b56:	19 c3 34 40 	ld.w %d3,[%a12]308
80007b5a:	0f f2 00 f0 	sh %d15,%d2,%d15
80007b5e:	a6 3f       	or %d15,%d3
80007b60:	59 cf 34 40 	st.w [%a12]308,%d15
    else
    {
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
    }

    if (config->resultPriority > 0)
80007b64:	b9 ff 04 00 	ld.hu %d15,[%a15]4
80007b68:	6e 24       	jz %d15,80007bb0 <IfxVadc_Adc_initChannel+0x1d8>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->resultSrcNr);
80007b6a:	02 84       	mov %d4,%d8
80007b6c:	08 a5       	ld.bu %d5,[%a15]10
80007b6e:	6d ff 20 e7 	call 800049ae <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
{
    vadcG->RCR[resultRegister].B.SRGEN = 1;
80007b72:	0c ff       	ld.bu %d15,[%a15]15
80007b74:	1b 0f 08 f0 	addi %d15,%d15,128
80007b78:	90 c3       	addsc.a %a3,%a12,%d15,2
80007b7a:	4c 30       	ld.w %d15,[%a3]0
80007b7c:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80007b80:	6c 30       	st.w [%a3]0,%d15
}


IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
{
    vadcG->REFCLR.U = 0x0000FFFFu;
80007b82:	bb f0 ff ff 	mov.u %d15,65535
80007b86:	59 cf 14 40 	st.w [%a12]276,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80007b8a:	54 22       	ld.w %d2,[%a2]
80007b8c:	08 43       	ld.bu %d3,[%a15]4
80007b8e:	8f f2 cf 21 	andn %d2,%d2,255
80007b92:	a6 32       	or %d2,%d3

        IfxVadc_enableServiceRequest(vadcG, config->resultRegister);
        IfxVadc_clearAllResultRequests(vadcG);
        IfxSrc_init(src, config->resultServProvider, config->resultPriority);
80007b94:	0c f8       	ld.bu %d15,[%a15]8
80007b96:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007b98:	54 22       	ld.w %d2,[%a2]
80007b9a:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007b9e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80007ba0:	4c 20       	ld.w %d15,[%a2]0
80007ba2:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007ba6:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80007ba8:	4c 20       	ld.w %d15,[%a2]0
80007baa:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007bae:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007bb0:	40 e4       	mov.aa %a4,%a14
80007bb2:	02 84       	mov %d4,%d8
80007bb4:	6d ff b0 e5 	call 80004714 <IfxVadc_disableAccess>
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007bb8:	0c ff       	ld.bu %d15,[%a15]15
    channel->channel   = config->channelId;

    return Status;
}
80007bba:	82 02       	mov %d2,0
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007bbc:	2c d1       	st.b [%a13]1,%d15
    channel->channel   = config->channelId;
80007bbe:	0c fc       	ld.bu %d15,[%a15]12
80007bc0:	2c d0       	st.b [%a13]0,%d15

    return Status;
}
80007bc2:	00 90       	ret 

80007bc4 <IfxVadc_Adc_initChannelConfig>:
        .resultServProvider  = IfxSrc_Tos_cpu0,
        .channelPriority     = 0,
        .channelSrcNr        = IfxVadc_SrcNr_group0,
        .channelServProvider = IfxSrc_Tos_cpu0
    };
    *config       = IfxVadc_Adc_defaultChannelConfig;
80007bc4:	40 42       	mov.aa %a2,%a4
80007bc6:	d2 02       	mov %e2,0
80007bc8:	89 22 48 01 	st.d [%a2+]8,%e2
80007bcc:	89 22 48 01 	st.d [%a2+]8,%e2
80007bd0:	89 22 48 01 	st.d [%a2+]8,%e2
    config->group = group;
80007bd4:	b5 45 14 00 	st.a [%a4]20,%a5
80007bd8:	00 90       	ret 

80007bda <IfxVadc_Adc_initGroup>:


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007bda:	d4 52       	ld.a %a2,[%a5]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007bdc:	39 58 04 00 	ld.bu %d8,[%a5]4


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007be0:	d4 2c       	ld.a %a12,[%a2]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007be2:	8f a8 00 90 	sh %d9,%d8,10
80007be6:	1b 09 48 f0 	addi %d15,%d9,1152
80007bea:	10 cd       	addsc.a %a13,%a12,%d15,0

    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
80007bec:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];

    /* check for write access */
    group->group   = vadcG;
80007bee:	b5 4d 04 00 	st.a [%a4]4,%a13
    group->module  = *config->module;
80007bf2:	6c 40       	st.w [%a4]0,%d15
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
80007bf4:	e9 48 08 00 	st.b [%a4]8,%d8
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007bf8:	40 c4       	mov.aa %a4,%a12
    config->group = group;
}


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
80007bfa:	40 5f       	mov.aa %a15,%a5
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007bfc:	6d ff 5a e6 	call 800048b0 <IfxVadc_getAdcAnalogFrequency>

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007c00:	1b 08 01 f0 	addi %d15,%d8,16
80007c04:	8f ff 0f a1 	and %d10,%d15,255
80007c08:	40 c4       	mov.aa %a4,%a12
80007c0a:	02 a4       	mov %d4,%d10
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007c0c:	02 2b       	mov %d11,%d2

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007c0e:	6d ff 9f e5 	call 8000474c <IfxVadc_enableAccess>

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007c12:	39 ff 33 00 	ld.bu %d15,[%a15]51
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007c16:	40 d4       	mov.aa %a4,%a13
    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007c18:	5e 17       	jne %d15,1,80007c26 <IfxVadc_Adc_initGroup+0x4c>
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007c1a:	82 14       	mov %d4,1
80007c1c:	39 f5 26 00 	ld.bu %d5,[%a15]38
80007c20:	39 f6 27 00 	ld.bu %d6,[%a15]39
80007c24:	3c 03       	j 80007c2a <IfxVadc_Adc_initGroup+0x50>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
80007c26:	d2 04       	mov %e4,0
80007c28:	82 06       	mov %d6,0
80007c2a:	82 07       	mov %d7,0
80007c2c:	6d ff 06 e8 	call 80004c38 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007c30:	39 ff 34 00 	ld.bu %d15,[%a15]52
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80007c34:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007c36:	5e 17       	jne %d15,1,80007c44 <IfxVadc_Adc_initGroup+0x6a>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80007c38:	82 14       	mov %d4,1
80007c3a:	39 f5 1e 00 	ld.bu %d5,[%a15]30
80007c3e:	39 f6 1f 00 	ld.bu %d6,[%a15]31
80007c42:	3c 03       	j 80007c48 <IfxVadc_Adc_initGroup+0x6e>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
80007c44:	d2 04       	mov %e4,0
80007c46:	82 06       	mov %d6,0
80007c48:	82 17       	mov %d7,1
80007c4a:	6d ff f7 e7 	call 80004c38 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007c4e:	39 ff 35 00 	ld.bu %d15,[%a15]53
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80007c52:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007c54:	5e 17       	jne %d15,1,80007c62 <IfxVadc_Adc_initGroup+0x88>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80007c56:	82 14       	mov %d4,1
80007c58:	39 f5 2e 00 	ld.bu %d5,[%a15]46
80007c5c:	39 f6 2f 00 	ld.bu %d6,[%a15]47
80007c60:	3c 03       	j 80007c66 <IfxVadc_Adc_initGroup+0x8c>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_background);
80007c62:	d2 04       	mov %e4,0
80007c64:	82 06       	mov %d6,0
80007c66:	82 27       	mov %d7,2
80007c68:	6d ff e8 e7 	call 80004c38 <IfxVadc_setArbiterPriority>
    }

    /* master slave configuration */
    if (config->master != groupIndex)
80007c6c:	0c f5       	ld.bu %d15,[%a15]5
80007c6e:	be 8b       	jeq %d15,%d8,80007ca4 <IfxVadc_Adc_initGroup+0xca>
}


IFX_INLINE IfxVadc_Adc_SYNCTR_STSEL IfxVadc_Adc_getMasterKernelIndex(IfxVadc_GroupId slave, IfxVadc_GroupId master)
{
    return IfxVadc_Adc_masterIndex[slave][master];
80007c70:	13 88 20 ff 	madd %d15,%d15,%d8,8
80007c74:	91 00 00 28 	movh.a %a2,32768
80007c78:	d9 22 d0 70 	lea %a2,[%a2]3536 <80000dd0 <IfxVadc_Adc_masterIndex>>
80007c7c:	10 22       	addsc.a %a2,%a2,%d15,0
80007c7e:	0c 20       	ld.bu %d15,[%a2]0
}


IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex)
{
    vadcG->SYNCTR.B.STSEL = (masterIndex % 4);
80007c80:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007c84:	8f 3f 00 21 	and %d2,%d15,3
80007c88:	19 23 40 30 	ld.w %d3,[%a2]1216
80007c8c:	37 f3 02 f0 	insert %d15,%d3,%d15,0,2
80007c90:	59 2f 40 30 	st.w [%a2]1216,%d15
    vadcG->SYNCTR.U      |= (0x00000008U << (masterIndex % 4));
80007c94:	19 23 40 30 	ld.w %d3,[%a2]1216
80007c98:	da 08       	mov %d15,8
80007c9a:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007c9e:	a6 3f       	or %d15,%d3
80007ca0:	59 2f 40 30 	st.w [%a2]1216,%d15
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007ca4:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007ca8:	19 2f 40 20 	ld.w %d15,[%a2]1152
80007cac:	8f 3f c0 f1 	andn %d15,%d15,3
80007cb0:	59 2f 40 20 	st.w [%a2]1152,%d15
}


IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength)
{
    vadcG->ARBCFG.B.ARBRND = arbiterRoundLength;
80007cb4:	39 ff 32 00 	ld.bu %d15,[%a15]50
80007cb8:	19 22 40 20 	ld.w %d2,[%a2]1152
80007cbc:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007cc0:	59 2f 40 20 	st.w [%a2]1152,%d15
    IfxVadc_setAnalogConvertControl(vadcG, IfxVadc_AnalogConverterMode_off);

    IfxVadc_setArbitrationRoundLength(vadcG, config->arbiter.arbiterRoundLength);

    /* Setup queue request if enabled */
    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007cc4:	39 ff 33 00 	ld.bu %d15,[%a15]51
80007cc8:	df 1f 5a 80 	jne %d15,1,80007d7c <IfxVadc_Adc_initGroup+0x1a2>
    {
        const IfxVadc_Adc_QueueConfig *queueSlot = &config->queueRequest;

        /* configure external Trigger if enabled */
        if (queueSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007ccc:	39 ff 25 00 	ld.bu %d15,[%a15]37
80007cd0:	6e 28       	jz %d15,80007d20 <IfxVadc_Adc_initGroup+0x146>
}


IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
80007cd2:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007cd6:	96 04       	or %d15,4
80007cd8:	59 2f 44 40 	st.w [%a2]1284,%d15


IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U        = vadcG->QCTRL0.U;
80007cdc:	19 23 40 40 	ld.w %d3,[%a2]1280
        {
            /* enable external trigger */
            IfxVadc_enableQueueSlotExternalTrigger(vadcG);
            IfxVadc_setQueueSlotTriggerOperatingConfig(vadcG, queueSlot->triggerConfig.triggerMode, queueSlot->triggerConfig.triggerSource);
80007ce0:	39 f2 25 00 	ld.bu %d2,[%a15]37
80007ce4:	39 ff 23 00 	ld.bu %d15,[%a15]35
    qctrl0.B.XTWC   = 1;
80007ce8:	b7 13 81 37 	insert %d3,%d3,1,15,1
    qctrl0.B.XTMODE = triggerMode;
80007cec:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    qctrl0.B.XTSEL  = triggerSource;
80007cf0:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->QCTRL0.U = qctrl0.U;
80007cf4:	59 23 40 40 	st.w [%a2]1280,%d3

            /* if last input is used the trigger input selection is extend by Gating inputs */
            if (queueSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)
80007cf8:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007cfc:	8b ff 20 f2 	ne %d15,%d15,15
80007d00:	ee 16       	jnz %d15,80007d2c <IfxVadc_Adc_initGroup+0x152>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007d02:	19 23 40 40 	ld.w %d3,[%a2]1280
            {
                IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007d06:	39 ff 22 00 	ld.bu %d15,[%a15]34
    qctrl0.B.GTWC      = 1;
80007d0a:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007d0e:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007d12:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007d16:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007d1a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007d1e:	3c 05       	j 80007d28 <IfxVadc_Adc_initGroup+0x14e>
}


IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
80007d20:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007d24:	8f 4f c0 f1 	andn %d15,%d15,4
80007d28:	59 2f 44 40 	st.w [%a2]1284,%d15
            /* disable external trigger */
            IfxVadc_disableQueueSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((queueSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007d2c:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007d30:	8b ff 00 f2 	eq %d15,%d15,15
80007d34:	ee 15       	jnz %d15,80007d5e <IfxVadc_Adc_initGroup+0x184>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007d36:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, queueSlot->triggerConfig.gatingMode);
80007d3a:	39 f2 22 00 	ld.bu %d2,[%a15]34
80007d3e:	19 23 40 40 	ld.w %d3,[%a2]1280
80007d42:	39 ff 24 00 	ld.bu %d15,[%a15]36
    qctrl0.B.GTWC      = 1;
80007d46:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007d4a:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007d4e:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007d52:	19 22 44 40 	ld.w %d2,[%a2]1284
80007d56:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007d5a:	59 2f 44 40 	st.w [%a2]1284,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_clearQueue(vadcG, (queueSlot->flushQueueAfterInit) ? 1 : 0);
80007d5e:	39 f2 20 00 	ld.bu %d2,[%a15]32
}


IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
{
    vadcG->QMR0.B.FLUSH = flushQueue;
80007d62:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007d66:	3b 00 40 f0 	mov %d15,1024
80007d6a:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80007d6e:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007d72:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80007d76:	a6 2f       	or %d15,%d2
80007d78:	59 2f 44 40 	st.w [%a2]1284,%d15
    {
        /* do nothing */
    }

    /* Setup scan request if enabled */
    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007d7c:	39 ff 34 00 	ld.bu %d15,[%a15]52
80007d80:	df 1f 5a 80 	jne %d15,1,80007e34 <IfxVadc_Adc_initGroup+0x25a>
    {
        const IfxVadc_Adc_ScanConfig *scanSlot = &config->scanRequest;

        /* configure external Trigger if enabled */
        if (scanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007d84:	39 ff 1d 00 	ld.bu %d15,[%a15]29
}


IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
80007d88:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007d8c:	6e 28       	jz %d15,80007ddc <IfxVadc_Adc_initGroup+0x202>
80007d8e:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d92:	96 04       	or %d15,4
80007d94:	59 2f 64 40 	st.w [%a2]1316,%d15


IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U        = vadcG->ASCTRL.U;
80007d98:	19 23 60 40 	ld.w %d3,[%a2]1312
        {
            /* enable external trigger */
            IfxVadc_enableScanSlotExternalTrigger(vadcG);

            IfxVadc_setScanSlotTriggerConfig(vadcG, scanSlot->triggerConfig.triggerMode, scanSlot->triggerConfig.triggerSource);
80007d9c:	39 f2 1d 00 	ld.bu %d2,[%a15]29
80007da0:	39 ff 1b 00 	ld.bu %d15,[%a15]27
    asctrl.B.XTWC   = 1;
80007da4:	b7 13 81 37 	insert %d3,%d3,1,15,1
    asctrl.B.XTMODE = triggerMode;
80007da8:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    asctrl.B.XTSEL  = triggerSource;
80007dac:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->ASCTRL.U = asctrl.U;
80007db0:	59 23 60 40 	st.w [%a2]1312,%d3

            if (scanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007db4:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007db8:	8b ff 20 f2 	ne %d15,%d15,15
80007dbc:	ee 16       	jnz %d15,80007de8 <IfxVadc_Adc_initGroup+0x20e>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007dbe:	19 23 60 40 	ld.w %d3,[%a2]1312
            {
                IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007dc2:	39 ff 1a 00 	ld.bu %d15,[%a15]26
    asctrl.B.GTWC      = 1;
80007dc6:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007dca:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007dce:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007dd2:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007dd6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007dda:	3c 05       	j 80007de4 <IfxVadc_Adc_initGroup+0x20a>
}


IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
80007ddc:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007de0:	8f 4f c0 f1 	andn %d15,%d15,4
80007de4:	59 2f 64 40 	st.w [%a2]1316,%d15
        {
            IfxVadc_disableScanSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((scanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007de8:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007dec:	8b ff 00 f2 	eq %d15,%d15,15
80007df0:	ee 15       	jnz %d15,80007e1a <IfxVadc_Adc_initGroup+0x240>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007df2:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, scanSlot->triggerConfig.gatingMode);
80007df6:	39 f2 1a 00 	ld.bu %d2,[%a15]26
80007dfa:	19 23 60 40 	ld.w %d3,[%a2]1312
80007dfe:	39 ff 1c 00 	ld.bu %d15,[%a15]28
    asctrl.B.GTWC      = 1;
80007e02:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007e06:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007e0a:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007e0e:	19 22 64 40 	ld.w %d2,[%a2]1316
80007e12:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007e16:	59 2f 64 40 	st.w [%a2]1316,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoScan(vadcG, scanSlot->autoscanEnabled ? 1 : 0);
80007e1a:	39 ff 18 00 	ld.bu %d15,[%a15]24
}


IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable)
{
    vadcG->ASMR.B.SCAN = autoscanEnable;
80007e1e:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007e22:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007e26:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007e2a:	8f 0f c1 f1 	andn %d15,%d15,16
80007e2e:	a6 2f       	or %d15,%d2
80007e30:	59 2f 64 40 	st.w [%a2]1316,%d15
    else
    {
        /* do nothing */
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007e34:	39 ff 35 00 	ld.bu %d15,[%a15]53
80007e38:	df 1f 4f 80 	jne %d15,1,80007ed6 <IfxVadc_Adc_initGroup+0x2fc>
    {
        const IfxVadc_Adc_BackgroundScanConfig *backgroundScanSlot = &config->backgroundScanRequest;

        /* configure external Trigger if enabled */
        if (backgroundScanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007e3c:	39 ff 2d 00 	ld.bu %d15,[%a15]45
80007e40:	6e 29       	jz %d15,80007e92 <IfxVadc_Adc_initGroup+0x2b8>
}


IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
80007e42:	19 cf 04 80 	ld.w %d15,[%a12]516
80007e46:	96 04       	or %d15,4
80007e48:	59 cf 04 80 	st.w [%a12]516,%d15


IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U        = vadc->BRSCTRL.U;
80007e4c:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_enableBackgroundScanSlotExternalTrigger(vadc);

            IfxVadc_setBackgroundScanSlotTriggerConfig(vadc, backgroundScanSlot->triggerConfig.triggerMode, backgroundScanSlot->triggerConfig.triggerSource);
80007e50:	39 f2 2d 00 	ld.bu %d2,[%a15]45
80007e54:	39 ff 2b 00 	ld.bu %d15,[%a15]43
    brsctrl.B.XTWC   = 1;
80007e58:	b7 13 81 37 	insert %d3,%d3,1,15,1
    brsctrl.B.XTMODE = triggerMode;
80007e5c:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    brsctrl.B.XTSEL  = triggerSource;
80007e60:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadc->BRSCTRL.U  = brsctrl.U;
80007e64:	59 c3 00 80 	st.w [%a12]512,%d3

            if (backgroundScanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007e68:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007e6c:	8b ff 20 f2 	ne %d15,%d15,15
80007e70:	ee 11       	jnz %d15,80007e92 <IfxVadc_Adc_initGroup+0x2b8>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007e72:	19 c3 00 80 	ld.w %d3,[%a12]512
            {
                IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007e76:	39 ff 2a 00 	ld.bu %d15,[%a15]42
    brsctrl.B.GTWC     = 1;
80007e7a:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007e7e:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80007e82:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007e86:	19 cf 04 80 	ld.w %d15,[%a12]516
80007e8a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007e8e:	59 cf 04 80 	st.w [%a12]516,%d15
        {
            /* do nothing */
        }

        /* configure Gating if enabled */
        if ((backgroundScanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007e92:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007e96:	8b ff 00 f2 	eq %d15,%d15,15
80007e9a:	ee 13       	jnz %d15,80007ec0 <IfxVadc_Adc_initGroup+0x2e6>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007e9c:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, backgroundScanSlot->triggerConfig.gatingMode);
80007ea0:	39 f2 2a 00 	ld.bu %d2,[%a15]42
    brsctrl.B.GTWC     = 1;
80007ea4:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007ea8:	37 23 04 38 	insert %d3,%d3,%d2,16,4
80007eac:	39 ff 2c 00 	ld.bu %d15,[%a15]44
    vadc->BRSCTRL.U    = brsctrl.U;
80007eb0:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007eb4:	19 c2 04 80 	ld.w %d2,[%a12]516
80007eb8:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007ebc:	59 cf 04 80 	st.w [%a12]516,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoBackgroundScan(vadc, backgroundScanSlot->autoBackgroundScanEnabled ? 1 : 0);
80007ec0:	39 ff 28 00 	ld.bu %d15,[%a15]40
}


IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable)
{
    vadc->BRSMR.B.SCAN = autoBackgroundScanEnable;
80007ec4:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007ec8:	19 cf 04 80 	ld.w %d15,[%a12]516
80007ecc:	8f 0f c1 f1 	andn %d15,%d15,16
80007ed0:	a6 2f       	or %d15,%d2
80007ed2:	59 cf 04 80 	st.w [%a12]516,%d15
    {
        /* do nothing */
    }

    /* turn on group after initialisation, only in master mode */
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
80007ed6:	0c f5       	ld.bu %d15,[%a15]5
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007ed8:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007edc:	3a 8f       	eq %d15,%d15,%d8
80007ede:	ab 3f a0 2f 	seln %d2,%d15,%d15,3
80007ee2:	19 2f 40 20 	ld.w %d15,[%a2]1152
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);
80007ee6:	02 84       	mov %d4,%d8
80007ee8:	8f 3f c0 f1 	andn %d15,%d15,3
80007eec:	a6 2f       	or %d15,%d2
80007eee:	59 2f 40 20 	st.w [%a2]1152,%d15
80007ef2:	39 f5 30 00 	ld.bu %d5,[%a15]48
80007ef6:	40 c4       	mov.aa %a4,%a12
80007ef8:	6d ff 69 e4 	call 800047ca <IfxVadc_disablePostCalibration>
}


IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadcG->ICLASS[inputClassNum].B.CMS = resolution;
80007efc:	8f 88 00 80 	sh %d8,%d8,8
80007f00:	82 05       	mov %d5,0
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80007f02:	3b f0 0f 40 	mov %d4,255

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        /* configure Group input class registers */
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
80007f06:	01 f5 03 26 	addsc.a %a2,%a15,%d5,3
80007f0a:	0b 58 00 20 	add %d2,%d8,%d5
80007f0e:	1b 82 12 20 	addi %d2,%d2,296
80007f12:	0c 2c       	ld.bu %d15,[%a2]12
80007f14:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007f18:	54 22       	ld.w %d2,[%a2]
80007f1a:	37 f2 03 f4 	insert %d15,%d2,%d15,8,3
80007f1e:	6c 20       	st.w [%a2]0,%d15
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
80007f20:	9a 15       	add %d15,%d5,1
80007f22:	d0 f2       	addsc.a %a2,%a15,%d15,3

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80007f24:	54 23       	ld.w %d3,[%a2]
80007f26:	4b 3b 41 30 	mul.f %d3,%d11,%d3
80007f2a:	4b 03 71 31 	ftouz %d3,%d3
80007f2e:	c2 e3       	add %d3,-2

    if (ticks > 31)
80007f30:	8b 03 62 f2 	lt.u %d15,%d3,32
80007f34:	ee 04       	jnz %d15,80007f3c <IfxVadc_Adc_initGroup+0x362>
    {
        ticks = (ticks / 16) + 15;
80007f36:	06 c3       	sh %d3,-4
80007f38:	1b f3 00 30 	addi %d3,%d3,15
80007f3c:	0b 43 90 31 	min.u %d3,%d3,%d4
}


IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadcG->ICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80007f40:	1a 58       	add %d15,%d8,%d5
80007f42:	1b 8f 12 f0 	addi %d15,%d15,296
80007f46:	90 c2       	addsc.a %a2,%a12,%d15,2
80007f48:	4c 20       	ld.w %d15,[%a2]0
80007f4a:	37 3f 05 30 	insert %d3,%d15,%d3,0,5
80007f4e:	74 23       	st.w [%a2],%d3
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80007f50:	df 15 04 00 	jeq %d5,1,80007f58 <IfxVadc_Adc_initGroup+0x37e>
80007f54:	82 15       	mov %d5,1
80007f56:	3c d8       	j 80007f06 <IfxVadc_Adc_initGroup+0x32c>
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007f58:	40 c4       	mov.aa %a4,%a12
80007f5a:	02 a4       	mov %d4,%d10
80007f5c:	6d ff dc e3 	call 80004714 <IfxVadc_disableAccess>

    return status;
}
80007f60:	82 02       	mov %d2,0
80007f62:	00 90       	ret 

80007f64 <IfxVadc_Adc_initGroupConfig>:
        .inputClass[0].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
        .inputClass[1].resolution = IfxVadc_ChannelResolution_12bit,
        .inputClass[1].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
    };

    *config                        = IfxVadc_Adc_defaultGroupConfig;
80007f64:	40 42       	mov.aa %a2,%a4
80007f66:	7b 60 58 f3 	movh %d15,13702
80007f6a:	d2 02       	mov %e2,0
80007f6c:	a0 6f       	mov.a %a15,6
80007f6e:	89 22 48 01 	st.d [%a2+]8,%e2
80007f72:	fc fe       	loop %a15,80007f6e <IfxVadc_Adc_initGroupConfig+0xa>
80007f74:	1b df 7b f3 	addi %d15,%d15,14269
80007f78:	6c 42       	st.w [%a4]8,%d15
80007f7a:	6c 44       	st.w [%a4]16,%d15
80007f7c:	82 1f       	mov %d15,1
80007f7e:	e9 4f 1e 00 	st.b [%a4]30,%d15
80007f82:	e9 4f 20 00 	st.b [%a4]32,%d15
80007f86:	e9 4f 26 00 	st.b [%a4]38,%d15
80007f8a:	e9 4f 2e 00 	st.b [%a4]46,%d15
    config->groupId                = IfxVadc_GroupId_0;
    config->module                 = vadc;
80007f8e:	f4 45       	st.a [%a4],%a5
80007f90:	00 90       	ret 

80007f92 <IfxVadc_Adc_initModule>:


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
80007f92:	cc 50       	ld.a %a15,[%a5]0
    config->disablePostCalibration = FALSE;
}


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
80007f94:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
    vadc->vadc = vadcSFR;
80007f96:	ec 40       	st.a [%a4]0,%a15
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007f98:	6d ff 0f fa 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80007f9c:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007f9e:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80007fa0:	6d ff 0b f9 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.U = 0x00000000;
80007fa4:	82 02       	mov %d2,0
80007fa6:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80007fa8:	02 f4       	mov %d4,%d15
80007faa:	6d ff 3b fa 	call 80007420 <IfxScuWdt_setCpuEndinit>
    float32        analogFrequency;
    uint8          inputClassNum, groupNum;

    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);
80007fae:	40 f4       	mov.aa %a4,%a15
80007fb0:	39 c4 21 00 	ld.bu %d4,[%a12]33
80007fb4:	6d ff 30 e6 	call 80004c14 <IfxVadc_selectPowerSupplyVoltage>

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007fb8:	19 c4 18 00 	ld.w %d4,[%a12]24
80007fbc:	40 f4       	mov.aa %a4,%a15
80007fbe:	4b 04 71 41 	ftouz %d4,%d4
    {
        return IfxVadc_Status_notInitialised;
80007fc2:	82 1f       	mov %d15,1
    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007fc4:	6d ff 42 e5 	call 80004a48 <IfxVadc_initializeFAdcI>
80007fc8:	df 02 57 00 	jeq %d2,0,80008076 <_SMALL_DATA2_+0x76>
    {
        /* do nothing */
    }

    /* Set digital Frequency */
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);
80007fcc:	19 c4 14 00 	ld.w %d4,[%a12]20
80007fd0:	40 f4       	mov.aa %a4,%a15
80007fd2:	4b 04 71 41 	ftouz %d4,%d4
80007fd6:	6d ff 24 e5 	call 80004a1e <IfxVadc_initializeFAdcD>

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);
80007fda:	40 f4       	mov.aa %a4,%a15
80007fdc:	6d ff 6a e4 	call 800048b0 <IfxVadc_getAdcAnalogFrequency>
80007fe0:	82 03       	mov %d3,0
80007fe2:	3b f0 0f 60 	mov %d6,255

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
    {
        /* configure ADC channel resolution ( conversion mode ) */
        IfxVadc_setGlobalResolution(vadcSFR, inputClassNum, config->globalInputClass[inputClassNum].resolution);
80007fe6:	9a 13       	add %d15,%d3,1
}


IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadc->GLOBICLASS[inputClassNum].B.CMS = resolution;
80007fe8:	1b 83 02 40 	addi %d4,%d3,40
80007fec:	d0 c2       	addsc.a %a2,%a12,%d15,3
80007fee:	01 f4 02 36 	addsc.a %a3,%a15,%d4,2
80007ff2:	0c 20       	ld.bu %d15,[%a2]0
80007ff4:	54 35       	ld.w %d5,[%a3]
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
80007ff6:	01 c3 03 26 	addsc.a %a2,%a12,%d3,3
80007ffa:	37 f5 03 f4 	insert %d15,%d5,%d15,8,3
80007ffe:	6c 30       	st.w [%a3]0,%d15

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80008000:	4c 21       	ld.w %d15,[%a2]4
80008002:	4b f2 41 f0 	mul.f %d15,%d2,%d15
80008006:	4b 0f 71 f1 	ftouz %d15,%d15
8000800a:	c2 ef       	add %d15,-2

    if (ticks > 31)
8000800c:	8b 0f 62 52 	lt.u %d5,%d15,32
80008010:	f6 54       	jnz %d5,80008018 <_SMALL_DATA2_+0x18>
    {
        ticks = (ticks / 16) + 15;
80008012:	06 cf       	sh %d15,-4
80008014:	1b ff 00 f0 	addi %d15,%d15,15
80008018:	0b 6f 90 f1 	min.u %d15,%d15,%d6
}


IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadc->GLOBICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
8000801c:	01 f4 02 26 	addsc.a %a2,%a15,%d4,2
80008020:	54 24       	ld.w %d4,[%a2]
80008022:	37 f4 05 f0 	insert %d15,%d4,%d15,0,5
80008026:	6c 20       	st.w [%a2]0,%d15
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
80008028:	df 13 04 00 	jeq %d3,1,80008030 <_SMALL_DATA2_+0x30>
8000802c:	82 13       	mov %d3,1
8000802e:	3c dc       	j 80007fe6 <IfxVadc_Adc_initModule+0x54>
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80008030:	39 c2 20 00 	ld.bu %d2,[%a12]32

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
    }

    return status;
80008034:	82 0f       	mov %d15,0
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80008036:	df 12 20 80 	jne %d2,1,80008076 <_SMALL_DATA2_+0x76>
8000803a:	82 08       	mov %d8,0
8000803c:	1b 08 01 f0 	addi %d15,%d8,16
80008040:	16 ff       	and %d15,255
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80008042:	02 f4       	mov %d4,%d15
80008044:	40 f4       	mov.aa %a4,%a15
80008046:	6d ff 83 e3 	call 8000474c <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
8000804a:	8f a8 00 20 	sh %d2,%d8,10
8000804e:	01 f2 00 26 	addsc.a %a2,%a15,%d2,0
80008052:	c2 18       	add %d8,1
80008054:	19 22 40 20 	ld.w %d2,[%a2]1152
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80008058:	02 f4       	mov %d4,%d15
8000805a:	8f 32 40 21 	or %d2,%d2,3
8000805e:	59 22 40 20 	st.w [%a2]1152,%d2
80008062:	40 f4       	mov.aa %a4,%a15

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80008064:	8b 88 20 f2 	ne %d15,%d8,8
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80008068:	6d ff 56 e3 	call 80004714 <IfxVadc_disableAccess>

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
8000806c:	ee e8       	jnz %d15,8000803c <_SMALL_DATA2_+0x3c>
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
        }

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
8000806e:	40 f4       	mov.aa %a4,%a15
80008070:	6d ff 19 e6 	call 80004ca2 <IfxVadc_startupCalibration>
    }

    return status;
80008074:	82 0f       	mov %d15,0
}
80008076:	02 f2       	mov %d2,%d15
80008078:	00 90       	ret 

8000807a <IfxVadc_Adc_initModuleConfig>:


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
8000807a:	7b 90 b9 f4 	movh %d15,19353
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
8000807e:	40 4f       	mov.aa %a15,%a4
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80008080:	1b 0f 68 f9 	addi %d15,%d15,-27008
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
80008084:	40 54       	mov.aa %a4,%a5
    config->vadc                           = vadc;
80008086:	e8 05       	st.a [%a15]0,%a5
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80008088:	68 6f       	st.w [%a15]24,%d15

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
8000808a:	6d ff 1f e4 	call 800048c8 <IfxVadc_getAdcDigitalFrequency>
8000808e:	68 52       	st.w [%a15]20,%d2
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
80008090:	6d ff cf f0 	call 8000622e <IfxScuCcu_getSpbFrequency>
80008094:	68 72       	st.w [%a15]28,%d2
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
    config->globalInputClass[0].sampleTime = 1.0e-6;
80008096:	7b 60 58 23 	movh %d2,13702
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
8000809a:	82 0f       	mov %d15,0
    config->globalInputClass[0].sampleTime = 1.0e-6;
8000809c:	1b d2 7b 23 	addi %d2,%d2,14269
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
800080a0:	28 8f       	st.b [%a15]8,%d15
    config->globalInputClass[0].sampleTime = 1.0e-6;
800080a2:	68 12       	st.w [%a15]4,%d2
    config->globalInputClass[1].resolution = IfxVadc_ChannelResolution_12bit;
800080a4:	e9 ff 10 00 	st.b [%a15]16,%d15
    config->globalInputClass[1].sampleTime = 1.0e-6;
800080a8:	68 32       	st.w [%a15]12,%d2
    config->startupCalibration             = FALSE;
800080aa:	e9 ff 20 00 	st.b [%a15]32,%d15
    config->supplyVoltage                  = IfxVadc_LowSupplyVoltageSelect_5V;
800080ae:	e9 ff 21 00 	st.b [%a15]33,%d15
800080b2:	00 90       	ret 

800080b4 <IfxVadc_Adc_initExternalMultiplexerModeConfig>:
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
800080b4:	20 10       	sub.a %sp,16
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
800080b6:	82 0f       	mov %d15,0
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
800080b8:	40 a2       	mov.aa %a2,%sp


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
800080ba:	2c 49       	st.b [%a4]9,%d15
    emuxConfig->groupId               = IfxVadc_GroupId_0;
800080bc:	2c 48       	st.b [%a4]8,%d15
    emuxConfig->emuxInterface         = IfxVadc_EmuxInterface_0;
800080be:	2c 4a       	st.b [%a4]10,%d15
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
800080c0:	2c 45       	st.b [%a4]5,%d15
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
800080c2:	2c 46       	st.b [%a4]6,%d15
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
800080c4:	2c 47       	st.b [%a4]7,%d15
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
800080c6:	2c 44       	st.b [%a4]4,%d15
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
800080c8:	e9 4f 1c 00 	st.b [%a4]28,%d15
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
800080cc:	d2 02       	mov %e2,0
800080ce:	89 22 48 01 	st.d [%a2+]8,%e2
800080d2:	89 22 48 01 	st.d [%a2+]8,%e2
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
800080d6:	3b 00 f8 ff 	mov %d15,-128
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
800080da:	f4 45       	st.a [%a4],%a5
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
800080dc:	40 af       	mov.aa %a15,%sp
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
800080de:	2c ac       	st.b [%sp]12,%d15
800080e0:	d9 44 0c 00 	lea %a4,[%a4]12
800080e4:	09 f2 48 01 	ld.d %e2,[%a15+]8
800080e8:	89 42 48 01 	st.d [%a4+]8,%e2
800080ec:	09 f2 48 01 	ld.d %e2,[%a15+]8
800080f0:	89 42 48 01 	st.d [%a4+]8,%e2
800080f4:	00 90       	ret 

800080f6 <IfxVadc_Adc_initExternalMultiplexerMode>:


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
800080f6:	0c 58       	ld.bu %d15,[%a5]8
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
800080f8:	20 08       	sub.a %sp,8
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
800080fa:	8f af 00 20 	sh %d2,%d15,10
800080fe:	1b 02 48 20 	addi %d2,%d2,1152
80008102:	01 42 00 e6 	addsc.a %a14,%a4,%d2,0
}


IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group)
{
    if (emuxInterface == IfxVadc_EmuxInterface_0)
80008106:	39 52 0a 00 	ld.bu %d2,[%a5]10
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
8000810a:	40 4c       	mov.aa %a12,%a4
8000810c:	40 5f       	mov.aa %a15,%a5
8000810e:	16 0f       	and %d15,15
80008110:	f6 2a       	jnz %d2,80008124 <IfxVadc_Adc_initExternalMultiplexerMode+0x2e>
    {
        vadc->EMUXSEL.B.EMUXGRP0 = group;
80008112:	19 42 30 f0 	ld.w %d2,[%a4]1008
80008116:	8f f2 c0 21 	andn %d2,%d2,15
8000811a:	a6 2f       	or %d15,%d2
8000811c:	59 cf 30 f0 	st.w [%a12]1008,%d15
80008120:	82 0f       	mov %d15,0
80008122:	3c 07       	j 80008130 <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
    }
    else
    {
        vadc->EMUXSEL.B.EMUXGRP1 = group;
80008124:	19 42 30 f0 	ld.w %d2,[%a4]1008
80008128:	06 4f       	sh %d15,4
8000812a:	8f 02 cf 21 	andn %d2,%d2,240
8000812e:	3c f6       	j 8000811a <IfxVadc_Adc_initExternalMultiplexerMode+0x24>
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
    {
        if (emuxControl->emuxOutPinConfig.pins[count] != NULL_PTR)
80008130:	90 f2       	addsc.a %a2,%a15,%d15,2
80008132:	99 2d 0c 00 	ld.a %a13,[%a2]12
80008136:	bd 0d 19 00 	jz.a %a13,80008168 <IfxVadc_Adc_initExternalMultiplexerMode+0x72>
8000813a:	39 d3 0c 00 	ld.bu %d3,[%a13]12
8000813e:	39 f2 18 00 	ld.bu %d2,[%a15]24
80008142:	99 d4 04 00 	ld.a %a4,[%a13]4
80008146:	0f 23 a0 50 	or %d5,%d3,%d2
8000814a:	39 d4 08 00 	ld.bu %d4,[%a13]8
8000814e:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
80008152:	39 f8 19 00 	ld.bu %d8,[%a15]25
80008156:	6d ff c4 ed 	call 80005cde <IfxPort_setPinMode>


IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(emux->pin.port, emux->pin.pinIndex, outputMode, emux->select);
    IfxPort_setPinPadDriver(emux->pin.port, emux->pin.pinIndex, padDriver);
8000815a:	99 d4 04 00 	ld.a %a4,[%a13]4
8000815e:	39 d4 08 00 	ld.bu %d4,[%a13]8
80008162:	02 85       	mov %d5,%d8
80008164:	6d ff 3b ee 	call 80005dda <IfxPort_setPinPadDriver>
80008168:	c2 1f       	add %d15,1
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
8000816a:	df 3f e3 ff 	jne %d15,3,80008130 <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
        }
    }

    IfxVadc_configExternalMultiplexerMode(vadc, vadcG, emuxControl->mode, emuxControl->channels, emuxControl->startChannel, emuxControl->code, emuxControl->sampleTimeControl, emuxControl->channelSelectionStyle);
8000816e:	0c f7       	ld.bu %d15,[%a15]7
80008170:	08 44       	ld.bu %d4,[%a15]4
80008172:	78 00       	st.w [%sp]0,%d15
80008174:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80008178:	08 95       	ld.bu %d5,[%a15]9
8000817a:	08 56       	ld.bu %d6,[%a15]5
8000817c:	08 67       	ld.bu %d7,[%a15]6
8000817e:	78 01       	st.w [%sp]4,%d15
80008180:	40 c4       	mov.aa %a4,%a12
80008182:	40 e5       	mov.aa %a5,%a14
80008184:	1d ff 00 e3 	j 80004784 <IfxVadc_configExternalMultiplexerMode>

80008188 <Ifx_CircularBuffer_get32>:

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
80008188:	cc 40       	ld.a %a15,[%a4]0
8000818a:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 4;

    if (buffer->index >= buffer->length)
8000818e:	b9 43 06 00 	ld.hu %d3,[%a4]6

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
80008192:	90 ff       	addsc.a %a15,%a15,%d15,2

    buffer->index += 4;
80008194:	c2 4f       	add %d15,4
80008196:	37 0f 70 f0 	extr.u %d15,%d15,0,16

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
8000819a:	48 02       	ld.w %d2,[%a15]0

    buffer->index += 4;
8000819c:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
8000819e:	3f 3f 04 80 	jlt.u %d15,%d3,800081a6 <Ifx_CircularBuffer_get32+0x1e>
    {
        buffer->index = 0;
800081a2:	82 0f       	mov %d15,0
800081a4:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
800081a6:	00 90       	ret 

800081a8 <Ifx_CircularBuffer_get16>:


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
800081a8:	cc 40       	ld.a %a15,[%a4]0
800081aa:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 2;

    if (buffer->index >= buffer->length)
800081ae:	b9 43 06 00 	ld.hu %d3,[%a4]6
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
800081b2:	50 ff       	addsc.a %a15,%a15,%d15,1

    buffer->index += 2;
800081b4:	c2 2f       	add %d15,2
800081b6:	37 0f 70 f0 	extr.u %d15,%d15,0,16
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
800081ba:	b9 f2 00 00 	ld.hu %d2,[%a15]0

    buffer->index += 2;
800081be:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
800081c0:	3f 3f 04 80 	jlt.u %d15,%d3,800081c8 <Ifx_CircularBuffer_get16+0x20>
    {
        buffer->index = 0;
800081c4:	82 0f       	mov %d15,0
800081c6:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
800081c8:	00 90       	ret 

800081ca <Ifx_CircularBuffer_addDataIncr>:
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
800081ca:	cc 40       	ld.a %a15,[%a4]0
800081cc:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    buffer->index                          += 4;

    if (buffer->index >= buffer->length)
800081d0:	b9 42 06 00 	ld.hu %d2,[%a4]6
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
800081d4:	90 ff       	addsc.a %a15,%a15,%d15,2
    buffer->index                          += 4;
800081d6:	c2 4f       	add %d15,4
800081d8:	37 0f 70 f0 	extr.u %d15,%d15,0,16
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
800081dc:	68 04       	st.w [%a15]0,%d4
    buffer->index                          += 4;
800081de:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
800081e0:	3f 2f 04 80 	jlt.u %d15,%d2,800081e8 <Ifx_CircularBuffer_addDataIncr+0x1e>
    {
        buffer->index = 0;
800081e4:	82 0f       	mov %d15,0
800081e6:	ac 42       	st.h [%a4]4,%d15
800081e8:	00 90       	ret 

800081ea <Ifx_CircularBuffer_read8>:
    }
}


void *Ifx_CircularBuffer_read8(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
800081ea:	80 52       	mov.d %d2,%a5
800081ec:	37 04 70 40 	extr.u %d4,%d4,0,16
800081f0:	8f 02 60 31 	nor %d3,%d2,0
800081f4:	1a 42       	add %d15,%d2,%d4
800081f6:	42 3f       	add %d15,%d3
800081f8:	42 23       	add %d3,%d2
800081fa:	42 43       	add %d3,%d4
    uint8 *Dest = (uint8 *)data;
800081fc:	40 5f       	mov.aa %a15,%a5
        Dest  = &Dest[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
800081fe:	82 06       	mov %d6,0
80008200:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80008204:	6f f3 03 00 	jz.t %d3,15,8000820a <Ifx_CircularBuffer_read8+0x20>
80008208:	82 0f       	mov %d15,0
    uint8 *Dest = (uint8 *)data;

    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
8000820a:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000820e:	d4 42       	ld.a %a2,[%a4]
80008210:	60 33       	mov.a %a3,%d3
80008212:	30 32       	add.a %a2,%a3
80008214:	14 23       	ld.bu %d3,[%a2]
80008216:	24 f3       	st.b [%a15+],%d3
        Dest  = &Dest[1];
        buffer->index++;
80008218:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
8000821c:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
        Dest  = &Dest[1];
        buffer->index++;
80008220:	c2 13       	add %d3,1
80008222:	37 03 70 30 	extr.u %d3,%d3,0,16
80008226:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
8000822a:	3f 53 04 80 	jlt.u %d3,%d5,80008232 <Ifx_CircularBuffer_read8+0x48>
        {
            buffer->index = 0;
8000822e:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
80008232:	9f 0f ec ff 	jned %d15,0,8000820a <Ifx_CircularBuffer_read8+0x20>
80008236:	c2 f4       	add %d4,-1
80008238:	37 04 50 40 	extr %d4,%d4,0,16
8000823c:	8b 04 40 43 	max %d4,%d4,0
80008240:	c2 14       	add %d4,1

    return Dest;
}
80008242:	1a 42       	add %d15,%d2,%d4
80008244:	60 f2       	mov.a %a2,%d15
80008246:	00 90       	ret 

80008248 <Ifx_CircularBuffer_read32>:


void *Ifx_CircularBuffer_read32(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
80008248:	37 04 70 40 	extr.u %d4,%d4,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;
8000824c:	d4 42       	ld.a %a2,[%a4]
8000824e:	1b f4 ff 5f 	addi %d5,%d4,-1
80008252:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
80008256:	b9 46 06 00 	ld.hu %d6,[%a4]6
8000825a:	82 03       	mov %d3,0
8000825c:	37 05 70 20 	extr.u %d2,%d5,0,16
80008260:	6f f5 03 00 	jz.t %d5,15,80008266 <Ifx_CircularBuffer_read32+0x1e>
80008264:	82 02       	mov %d2,0
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
80008266:	10 2f       	addsc.a %a15,%a2,%d15,0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
80008268:	c2 4f       	add %d15,4
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
8000826a:	48 05       	ld.w %d5,[%a15]0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
8000826c:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
80008270:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
80008274:	c2 13       	add %d3,1
80008276:	68 05       	st.w [%a15]0,%d5
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80008278:	0b 6f 30 51 	lt.u %d5,%d15,%d6
8000827c:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
80008280:	9f 02 f3 ff 	jned %d2,0,80008266 <Ifx_CircularBuffer_read32+0x1e>
80008284:	c2 f4       	add %d4,-1
80008286:	37 04 50 40 	extr %d4,%d4,0,16
8000828a:	ac 42       	st.h [%a4]4,%d15
8000828c:	8b 04 40 43 	max %d4,%d4,0
80008290:	c2 14       	add %d4,1

    return Dest;
}
80008292:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
80008296:	00 90       	ret 

80008298 <Ifx_CircularBuffer_write8>:


const void *Ifx_CircularBuffer_write8(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
80008298:	80 52       	mov.d %d2,%a5
8000829a:	37 04 70 40 	extr.u %d4,%d4,0,16
8000829e:	8f 02 60 31 	nor %d3,%d2,0
800082a2:	1a 42       	add %d15,%d2,%d4
800082a4:	42 3f       	add %d15,%d3
800082a6:	42 23       	add %d3,%d2
800082a8:	42 43       	add %d3,%d4
    const uint8 *source = (const uint8 *)data;
800082aa:	40 5f       	mov.aa %a15,%a5
        source                                 = &source[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
800082ac:	82 06       	mov %d6,0
800082ae:	37 0f 70 f0 	extr.u %d15,%d15,0,16
800082b2:	6f f3 03 00 	jz.t %d3,15,800082b8 <Ifx_CircularBuffer_write8+0x20>
800082b6:	82 0f       	mov %d15,0
    const uint8 *source = (const uint8 *)data;

    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
800082b8:	b9 43 04 00 	ld.hu %d3,[%a4]4
800082bc:	d4 42       	ld.a %a2,[%a4]
800082be:	60 33       	mov.a %a3,%d3
800082c0:	04 f5       	ld.bu %d5,[%a15+]
800082c2:	30 32       	add.a %a2,%a3
800082c4:	34 25       	st.b [%a2],%d5
        source                                 = &source[1];
        buffer->index++;
800082c6:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
800082ca:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
        source                                 = &source[1];
        buffer->index++;
800082ce:	c2 13       	add %d3,1
800082d0:	37 03 70 30 	extr.u %d3,%d3,0,16
800082d4:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
800082d8:	3f 53 04 80 	jlt.u %d3,%d5,800082e0 <Ifx_CircularBuffer_write8+0x48>
        {
            buffer->index = 0;
800082dc:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
800082e0:	9f 0f ec ff 	jned %d15,0,800082b8 <Ifx_CircularBuffer_write8+0x20>
800082e4:	c2 f4       	add %d4,-1
800082e6:	37 04 50 40 	extr %d4,%d4,0,16
800082ea:	8b 04 40 43 	max %d4,%d4,0
800082ee:	c2 14       	add %d4,1

    return source;
}
800082f0:	1a 42       	add %d15,%d2,%d4
800082f2:	60 f2       	mov.a %a2,%d15
800082f4:	00 90       	ret 

800082f6 <Ifx_CircularBuffer_write32>:


const void *Ifx_CircularBuffer_write32(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
800082f6:	37 04 70 40 	extr.u %d4,%d4,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;
800082fa:	d4 42       	ld.a %a2,[%a4]
800082fc:	1b f4 ff 5f 	addi %d5,%d4,-1
80008300:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *((uint32 *)(&base[buffer->index])) = *source;
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
80008304:	b9 46 06 00 	ld.hu %d6,[%a4]6
80008308:	82 03       	mov %d3,0
8000830a:	37 05 70 20 	extr.u %d2,%d5,0,16
8000830e:	6f f5 03 00 	jz.t %d5,15,80008314 <Ifx_CircularBuffer_write32+0x1e>
80008312:	82 02       	mov %d2,0
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
80008314:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
80008318:	c2 13       	add %d3,1
8000831a:	48 05       	ld.w %d5,[%a15]0
8000831c:	10 2f       	addsc.a %a15,%a2,%d15,0
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;
8000831e:	c2 4f       	add %d15,4
80008320:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
80008324:	68 05       	st.w [%a15]0,%d5
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80008326:	0b 6f 30 51 	lt.u %d5,%d15,%d6
8000832a:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
8000832e:	9f 02 f3 ff 	jned %d2,0,80008314 <Ifx_CircularBuffer_write32+0x1e>
80008332:	c2 f4       	add %d4,-1
80008334:	37 04 50 40 	extr %d4,%d4,0,16
80008338:	ac 42       	st.h [%a4]4,%d15
8000833a:	8b 04 40 43 	max %d4,%d4,0
8000833e:	c2 14       	add %d4,1

    return source;
}
80008340:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
80008344:	00 90       	ret 

80008346 <Ifx_Fifo_destroy>:
}


void Ifx_Fifo_destroy(Ifx_Fifo *fifo)
{
    free(fifo);
80008346:	1d 00 04 17 	j 8000b14e <free>

8000834a <Ifx_Fifo_init>:
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
8000834a:	82 0f       	mov %d15,0
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
8000834c:	80 42       	mov.d %d2,%a4
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
8000834e:	e9 4f 1c 00 	st.b [%a4]28,%d15
        fifo->eventWriter        = TRUE;
80008352:	82 1f       	mov %d15,1
80008354:	e9 4f 1d 00 	st.b [%a4]29,%d15
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
80008358:	1b 72 02 f0 	addi %d15,%d2,39
8000835c:	8f 7f c0 f1 	andn %d15,%d15,7
80008360:	6c 40       	st.w [%a4]0,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
80008362:	c2 34       	add %d4,3
    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
80008364:	82 0f       	mov %d15,0
80008366:	ac 42       	st.h [%a4]4,%d15
        fifo->shared.maxcount    = 0;
80008368:	ac 48       	st.h [%a4]16,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
8000836a:	8f 34 c0 41 	andn %d4,%d4,3
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
8000836e:	82 0f       	mov %d15,0
    free(fifo);
}


Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
80008370:	40 42       	mov.aa %a2,%a4
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
80008372:	6c 43       	st.w [%a4]12,%d15
80008374:	6c 42       	st.w [%a4]8,%d15
        fifo->startIndex         = fifo->endIndex = 0;
80008376:	ac 4b       	st.h [%a4]22,%d15
80008378:	ac 4a       	st.h [%a4]20,%d15
        fifo->size               = size;
8000837a:	f9 44 18 00 	st.h [%a4]24,%d4
        fifo->elementSize        = elementSize;
8000837e:	f9 45 1a 00 	st.h [%a4]26,%d5
    }

    return fifo;
}
80008382:	00 90       	ret 

80008384 <Ifx_Fifo_create>:
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
80008384:	c2 34       	add %d4,3
80008386:	37 04 50 f0 	extr %d15,%d4,0,16
 * This is valid is an OS is used.
 *
 */
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
8000838a:	02 58       	mov %d8,%d5
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
8000838c:	8f 3f c0 f1 	andn %d15,%d15,3

    fifo = malloc(size + sizeof(Ifx_Fifo) + 8); /* +8 because of padding in case the pointer is not aligned on 64 */
80008390:	1b 8f 02 40 	addi %d4,%d15,40
80008394:	6d 00 d7 16 	call 8000b142 <malloc>
80008398:	40 24       	mov.aa %a4,%a2

    if (IFX_VALIDATE(IFX_VERBOSE_LEVEL_ERROR, (fifo != NULL_PTR)))
8000839a:	bc 25       	jz.a %a2,800083a4 <Ifx_Fifo_create+0x20>
    {
        fifo = Ifx_Fifo_init(fifo, size, elementSize);
8000839c:	0b f8 10 48 	mov %e4,%d8,%d15
800083a0:	1d ff d5 ff 	j 8000834a <Ifx_Fifo_init>
    }

    return fifo;
}
800083a4:	00 90       	ret 

800083a6 <Ifx_Fifo_canReadCount>:
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
800083a6:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be read from the buffer */
        result = FALSE;
800083a8:	82 02       	mov %d2,0
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
800083aa:	3f f4 6a 00 	jlt %d4,%d15,8000847e <Ifx_Fifo_canReadCount+0xd8>
800083ae:	8c 4c       	ld.h %d15,[%a4]24
800083b0:	3f 4f 67 00 	jlt %d15,%d4,8000847e <Ifx_Fifo_canReadCount+0xd8>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800083b4:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
800083b8:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800083bc:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800083c0:	00 00       	nop 
    else
    {
        boolean interruptState;
        sint32  waitCount;
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);
800083c2:	8c 42       	ld.h %d15,[%a4]4
800083c4:	a2 f4       	sub %d4,%d15

        if (waitCount <= 0)
800083c6:	4e 4c       	jgtz %d4,800083de <Ifx_Fifo_canReadCount+0x38>
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE;
800083c8:	82 1f       	mov %d15,1
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);

        if (waitCount <= 0)
        {
            fifo->shared.readerWaitx = 0;
800083ca:	59 42 08 00 	st.w [%a4]8,%d2
            fifo->eventReader        = TRUE;
800083ce:	e9 4f 1c 00 	st.b [%a4]28,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
800083d2:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800083d4:	df 00 55 00 	jeq %d0,0,8000847e <Ifx_Fifo_canReadCount+0xd8>
    {
        __enable();
800083d8:	0d 00 00 03 	enable 
800083dc:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800083de:	82 f2       	mov %d2,-1
800083e0:	06 f2       	sh %d2,-1
800083e2:	ba f6       	eq %d15,%d6,-1
800083e4:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800083e8:	82 f5       	mov %d5,-1
800083ea:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800083ec:	ee 16       	jnz %d15,80008418 <Ifx_Fifo_canReadCount+0x72>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800083ee:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800083f2:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800083f6:	0d 00 40 03 	disable 
800083fa:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800083fc:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008400:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008404:	02 15       	mov %d5,%d1
80008406:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000840a:	76 23       	jz %d2,80008410 <Ifx_Fifo_canReadCount+0x6a>
    {
        __enable();
8000840c:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008410:	0b 65 40 50 	addx %d5,%d5,%d6
80008414:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
80008418:	82 0f       	mov %d15,0
8000841a:	e9 4f 1c 00 	st.b [%a4]28,%d15
            fifo->shared.readerWaitx = waitCount;
8000841e:	59 44 08 00 	st.w [%a4]8,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008422:	76 03       	jz %d0,80008428 <Ifx_Fifo_canReadCount+0x82>
    {
        __enable();
80008424:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008428:	82 f6       	mov %d6,-1
8000842a:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
8000842c:	39 4f 1c 00 	ld.bu %d15,[%a4]28
80008430:	6e 08       	jz %d15,80008440 <Ifx_Fifo_canReadCount+0x9a>
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
            result = fifo->eventReader == TRUE;
80008432:	39 42 1c 00 	ld.bu %d2,[%a4]28
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
80008436:	82 0f       	mov %d15,0
80008438:	6c 42       	st.w [%a4]8,%d15
            result = fifo->eventReader == TRUE;
8000843a:	8b 12 00 22 	eq %d2,%d2,1
8000843e:	00 90       	ret 
80008440:	ba f5       	eq %d15,%d5,-1
80008442:	0b 36 00 f2 	and.eq %d15,%d6,%d3
80008446:	ee f3       	jnz %d15,8000842c <Ifx_Fifo_canReadCount+0x86>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008448:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000844c:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008450:	0d 00 40 03 	disable 
80008454:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008456:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000845a:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000845e:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008462:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008466:	76 23       	jz %d2,8000846c <Ifx_Fifo_canReadCount+0xc6>
    {
        __enable();
80008468:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
            fifo->shared.readerWaitx = waitCount;
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
8000846c:	0b 3f 00 21 	eq %d2,%d15,%d3
80008470:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
80008474:	0b 3f 90 22 	or.lt %d2,%d15,%d3
80008478:	df 02 da ff 	jne %d2,0,8000842c <Ifx_Fifo_canReadCount+0x86>
8000847c:	3c db       	j 80008432 <Ifx_Fifo_canReadCount+0x8c>
            result = fifo->eventReader == TRUE;
        }
    }

    return result;
}
8000847e:	00 90       	ret 

80008480 <Ifx_Fifo_read>:
    return count - blockSize;
}

#include <stdio.h>
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
80008480:	20 08       	sub.a %sp,8
80008482:	40 4f       	mov.aa %a15,%a4
80008484:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
80008486:	df 04 b6 00 	jeq %d4,0,800085f2 <Ifx_Fifo_read+0x172>
    {

        buffer.base   = fifo->buffer;
8000848a:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000848c:	82 f2       	mov %d2,-1
8000848e:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;         /* size always fit into 16 bit */
80008490:	8c 4c       	ld.h %d15,[%a4]24
80008492:	06 f2       	sh %d2,-1
80008494:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->startIndex;   /* startIndex always fit into size */
80008496:	8c 4a       	ld.h %d15,[%a4]20
    {
        deadLine = TIME_INFINITE;
80008498:	82 fa       	mov %d10,-1
8000849a:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000849c:	ba f6       	eq %d15,%d6,-1
8000849e:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800084a2:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800084a4:	ee 16       	jnz %d15,800084d0 <Ifx_Fifo_read+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800084a6:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800084aa:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800084ae:	0d 00 40 03 	disable 
800084b2:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800084b4:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800084b8:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800084bc:	02 3a       	mov %d10,%d3
800084be:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800084c2:	76 23       	jz %d2,800084c8 <Ifx_Fifo_read+0x48>
    {
        __enable();
800084c4:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
800084c8:	0b 6a 40 a0 	addx %d10,%d10,%d6
800084cc:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800084d0:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
800084d2:	82 0d       	mov %d13,0
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventReader        = FALSE;
800084d4:	82 0e       	mov %d14,0
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
800084d6:	a0 0c       	mov.a %a12,0
800084d8:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800084da:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
800084de:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800084e2:	0d 00 40 03 	disable 
800084e6:	00 00       	nop 
{
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
800084e8:	88 2b       	ld.h %d11,[%a15]4
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800084ea:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
800084ee:	8c fd       	ld.h %d15,[%a15]26
800084f0:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventReader        = FALSE;
800084f4:	e9 fe 1c 00 	st.b [%a15]28,%d14
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
800084f8:	4b f2 01 22 	div %e2,%d2,%d15
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
800084fc:	88 c2       	ld.h %d2,[%a15]24
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
800084fe:	a2 3b       	sub %d11,%d3
80008500:	37 0b 70 b0 	extr.u %d11,%d11,0,16
80008504:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
80008508:	0b f9 80 30 	sub %d3,%d9,%d15
8000850c:	0b 23 80 21 	min %d2,%d3,%d2
80008510:	68 22       	st.w [%a15]8,%d2
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008512:	76 43       	jz %d4,80008518 <Ifx_Fifo_read+0x98>
    {
        __enable();
80008514:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginRead(fifo, count);

            if (blockSize != 0)
80008518:	6e 20       	jz %d15,80008558 <Ifx_Fifo_read+0xd8>
            {
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
8000851a:	40 a4       	mov.aa %a4,%sp
8000851c:	02 f4       	mov %d4,%d15
8000851e:	6d ff 66 fe 	call 800081ea <Ifx_CircularBuffer_read8>
80008522:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008524:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008528:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000852c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008530:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState      = IfxCpu_disableInterrupts();

    fifo->shared.count -= blockSize;
80008532:	88 23       	ld.h %d3,[%a15]4
80008534:	a2 b3       	sub %d3,%d11
80008536:	a8 23       	st.h [%a15]4,%d3

    if (fifo->shared.writerWaitx != 0)
80008538:	48 33       	ld.w %d3,[%a15]12
8000853a:	76 39       	jz %d3,8000854c <Ifx_Fifo_read+0xcc>
    {
        fifo->shared.writerWaitx -= blockSize;
8000853c:	5a f3       	sub %d15,%d3,%d15

        if (fifo->shared.writerWaitx <= 0)
8000853e:	8e f3       	jlez %d15,80008544 <Ifx_Fifo_read+0xc4>

    fifo->shared.count -= blockSize;

    if (fifo->shared.writerWaitx != 0)
    {
        fifo->shared.writerWaitx -= blockSize;
80008540:	68 3f       	st.w [%a15]12,%d15
80008542:	3c 05       	j 8000854c <Ifx_Fifo_read+0xcc>

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE; /* Signal the writer */
80008544:	82 1f       	mov %d15,1
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
80008546:	e8 3c       	st.a [%a15]12,%a12
            fifo->eventWriter        = TRUE; /* Signal the writer */
80008548:	e9 ff 1d 00 	st.b [%a15]29,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000854c:	76 23       	jz %d2,80008552 <Ifx_Fifo_read+0xd2>
    {
        __enable();
8000854e:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
80008552:	a2 b9       	sub %d9,%d11
80008554:	37 09 50 90 	extr %d9,%d9,0,16
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008558:	76 d4       	jz %d13,80008560 <Ifx_Fifo_read+0xe0>
            {
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
8000855a:	82 0f       	mov %d15,0
8000855c:	68 2f       	st.w [%a15]8,%d15
                break;
8000855e:	3c 48       	j 800085ee <Ifx_Fifo_read+0x16e>
80008560:	ba fa       	eq %d15,%d10,-1
80008562:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008566:	ee 1b       	jnz %d15,8000859c <Ifx_Fifo_read+0x11c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008568:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000856c:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008570:	0d 00 40 03 	disable 
80008574:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008576:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000857a:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000857e:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008582:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008586:	76 23       	jz %d2,8000858c <Ifx_Fifo_read+0x10c>
    {
        __enable();
80008588:	0d 00 00 03 	enable 
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
8000858c:	0b 8f 00 21 	eq %d2,%d15,%d8
80008590:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
80008594:	0b f8 90 22 	or.lt %d2,%d8,%d15
80008598:	df 02 e1 ff 	jne %d2,0,8000855a <Ifx_Fifo_read+0xda>
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
                break;
            }

            if (count != 0)
8000859c:	df 09 29 00 	jeq %d9,0,800085ee <Ifx_Fifo_read+0x16e>
            {
                while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800085a0:	39 ff 1c 00 	ld.bu %d15,[%a15]28
800085a4:	ee 1f       	jnz %d15,800085e2 <Ifx_Fifo_read+0x162>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800085a6:	ba fa       	eq %d15,%d10,-1
800085a8:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800085ac:	ee fa       	jnz %d15,800085a0 <Ifx_Fifo_read+0x120>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800085ae:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800085b2:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800085b6:	0d 00 40 03 	disable 
800085ba:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800085bc:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800085c0:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800085c4:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800085c8:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800085cc:	76 23       	jz %d2,800085d2 <Ifx_Fifo_read+0x152>
    {
        __enable();
800085ce:	0d 00 00 03 	enable 
800085d2:	0b 8f 00 21 	eq %d2,%d15,%d8
800085d6:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
800085da:	0b 8f 90 22 	or.lt %d2,%d15,%d8
800085de:	df 02 e1 ff 	jne %d2,0,800085a0 <Ifx_Fifo_read+0x120>
                {}

                Stop = (fifo->eventReader == FALSE);    /* If the function timeout, the maximum number of characters are read before returning */
800085e2:	39 fd 1c 00 	ld.bu %d13,[%a15]28
800085e6:	8b 0d 00 d2 	eq %d13,%d13,0
800085ea:	1d ff 78 ff 	j 800084da <Ifx_Fifo_read+0x5a>
            }
        } while (count != 0);

        fifo->startIndex = buffer.index;
800085ee:	8c a2       	ld.h %d15,[%sp]4
800085f0:	a8 af       	st.h [%a15]20,%d15
    }

    return count;
}
800085f2:	02 92       	mov %d2,%d9
800085f4:	00 90       	ret 

800085f6 <Ifx_Fifo_clear>:
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800085f6:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800085fa:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800085fe:	0d 00 40 03 	disable 
80008602:	00 00       	nop 
{
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();

    if (fifo->shared.writerWaitx != 0)
80008604:	4c 43       	ld.w %d15,[%a4]12
80008606:	6e 06       	jz %d15,80008612 <Ifx_Fifo_clear+0x1c>
    {
        fifo->shared.writerWaitx = 0;
80008608:	82 0f       	mov %d15,0
8000860a:	6c 43       	st.w [%a4]12,%d15
        fifo->eventWriter        = TRUE; /* Signal the writer */
8000860c:	82 1f       	mov %d15,1
8000860e:	e9 4f 1d 00 	st.b [%a4]29,%d15
    }

    fifo->eventReader        = FALSE;
80008612:	82 0f       	mov %d15,0
80008614:	e9 4f 1c 00 	st.b [%a4]28,%d15
    fifo->shared.readerWaitx = 0;
80008618:	82 0f       	mov %d15,0
8000861a:	6c 42       	st.w [%a4]8,%d15
    fifo->shared.count       = 0;
8000861c:	ac 42       	st.h [%a4]4,%d15
    fifo->shared.maxcount    = 0;
8000861e:	ac 48       	st.h [%a4]16,%d15
    fifo->startIndex         = fifo->endIndex;
80008620:	8c 4b       	ld.h %d15,[%a4]22
80008622:	ac 4a       	st.h [%a4]20,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008624:	76 23       	jz %d2,8000862a <Ifx_Fifo_clear+0x34>
    {
        __enable();
80008626:	0d 00 00 03 	enable 
8000862a:	00 90       	ret 

8000862c <Ifx_Fifo_canWriteCount>:
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
8000862c:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be written to the buffer */
        result = FALSE;
8000862e:	82 02       	mov %d2,0
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
80008630:	3f f4 75 00 	jlt %d4,%d15,8000871a <Ifx_Fifo_canWriteCount+0xee>
80008634:	8c 4c       	ld.h %d15,[%a4]24
80008636:	3f 4f 72 00 	jlt %d15,%d4,8000871a <Ifx_Fifo_canWriteCount+0xee>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000863a:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
8000863e:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008642:	0d 00 40 03 	disable 
80008646:	00 00       	nop 
    else
    {
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
80008648:	c9 43 18 00 	ld.h %d3,[%a4]24
8000864c:	8c 42       	ld.h %d15,[%a4]4
8000864e:	5a f3       	sub %d15,%d3,%d15
80008650:	3f 4f 0d 00 	jlt %d15,%d4,8000866a <Ifx_Fifo_canWriteCount+0x3e>
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE;
80008654:	82 1f       	mov %d15,1
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
        {
            fifo->shared.writerWaitx = 0;
80008656:	59 42 0c 00 	st.w [%a4]12,%d2
            fifo->eventWriter        = TRUE;
8000865a:	e9 4f 1d 00 	st.b [%a4]29,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
8000865e:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008660:	df 00 5d 00 	jeq %d0,0,8000871a <Ifx_Fifo_canWriteCount+0xee>
    {
        __enable();
80008664:	0d 00 00 03 	enable 
80008668:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000866a:	82 f2       	mov %d2,-1
8000866c:	06 f2       	sh %d2,-1
8000866e:	ba f6       	eq %d15,%d6,-1
80008670:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
80008674:	82 f5       	mov %d5,-1
80008676:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008678:	ee 16       	jnz %d15,800086a4 <Ifx_Fifo_canWriteCount+0x78>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000867a:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000867e:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008682:	0d 00 40 03 	disable 
80008686:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008688:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000868c:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008690:	02 15       	mov %d5,%d1
80008692:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008696:	76 23       	jz %d2,8000869c <Ifx_Fifo_canWriteCount+0x70>
    {
        __enable();
80008698:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
8000869c:	0b 65 40 50 	addx %d5,%d5,%d6
800086a0:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
800086a4:	82 0f       	mov %d15,0
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
800086a6:	c9 42 04 00 	ld.h %d2,[%a4]4
            result                   = TRUE;
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
800086aa:	e9 4f 1d 00 	st.b [%a4]29,%d15
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
800086ae:	8c 4c       	ld.h %d15,[%a4]24
800086b0:	5a f2       	sub %d15,%d2,%d15
800086b2:	42 f4       	add %d4,%d15
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800086b4:	82 02       	mov %d2,0
800086b6:	0b 42 a0 41 	max %d4,%d2,%d4
800086ba:	59 44 0c 00 	st.w [%a4]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800086be:	76 03       	jz %d0,800086c4 <Ifx_Fifo_canWriteCount+0x98>
    {
        __enable();
800086c0:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800086c4:	82 f6       	mov %d6,-1
800086c6:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800086c8:	39 4f 1d 00 	ld.bu %d15,[%a4]29
800086cc:	6e 08       	jz %d15,800086dc <Ifx_Fifo_canWriteCount+0xb0>
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
            result = fifo->eventWriter == TRUE;
800086ce:	39 42 1d 00 	ld.bu %d2,[%a4]29
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
800086d2:	82 0f       	mov %d15,0
800086d4:	6c 43       	st.w [%a4]12,%d15
            result = fifo->eventWriter == TRUE;
800086d6:	8b 12 00 22 	eq %d2,%d2,1
800086da:	00 90       	ret 
800086dc:	ba f5       	eq %d15,%d5,-1
800086de:	0b 36 00 f2 	and.eq %d15,%d6,%d3
800086e2:	ee f3       	jnz %d15,800086c8 <Ifx_Fifo_canWriteCount+0x9c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800086e4:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800086e8:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800086ec:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800086f0:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800086f2:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800086f6:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800086fa:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800086fe:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008702:	76 23       	jz %d2,80008708 <Ifx_Fifo_canWriteCount+0xdc>
    {
        __enable();
80008704:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008708:	0b 3f 00 21 	eq %d2,%d15,%d3
8000870c:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
80008710:	0b 3f 90 22 	or.lt %d2,%d15,%d3
80008714:	df 02 da ff 	jne %d2,0,800086c8 <Ifx_Fifo_canWriteCount+0x9c>
80008718:	3c db       	j 800086ce <Ifx_Fifo_canWriteCount+0xa2>
            result = fifo->eventWriter == TRUE;
        }
    }

    return result;
}
8000871a:	00 90       	ret 

8000871c <Ifx_Fifo_write>:
}


#include <stdio.h>
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
8000871c:	20 08       	sub.a %sp,8
8000871e:	40 4f       	mov.aa %a15,%a4
80008720:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
80008722:	df 04 be 00 	jeq %d4,0,8000889e <Ifx_Fifo_write+0x182>
    {
        buffer.base   = fifo->buffer;
80008726:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008728:	82 f2       	mov %d2,-1
8000872a:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;     /* size always fit into 16 bit */
8000872c:	8c 4c       	ld.h %d15,[%a4]24
8000872e:	06 f2       	sh %d2,-1
80008730:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->endIndex; /* startIndex always fit into size */
80008732:	8c 4b       	ld.h %d15,[%a4]22
    {
        deadLine = TIME_INFINITE;
80008734:	82 fa       	mov %d10,-1
80008736:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008738:	ba f6       	eq %d15,%d6,-1
8000873a:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
8000873e:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008740:	ee 16       	jnz %d15,8000876c <Ifx_Fifo_write+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008742:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008746:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000874a:	0d 00 40 03 	disable 
8000874e:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008750:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008754:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008758:	02 3a       	mov %d10,%d3
8000875a:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000875e:	76 23       	jz %d2,80008764 <Ifx_Fifo_write+0x48>
    {
        __enable();
80008760:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008764:	0b 6a 40 a0 	addx %d10,%d10,%d6
80008768:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
8000876c:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
8000876e:	82 0d       	mov %d13,0
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventWriter        = FALSE;
80008770:	82 0e       	mov %d14,0
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
80008772:	a0 0c       	mov.a %a12,0
80008774:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008776:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
8000877a:	37 05 e1 57 	extr.u %d5,%d5,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000877e:	0d 00 40 03 	disable 
80008782:	00 00       	nop 
{
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
80008784:	88 c4       	ld.h %d4,[%a15]24
80008786:	88 2b       	ld.h %d11,[%a15]4
80008788:	0b b4 80 b0 	sub %d11,%d4,%d11
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000878c:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
80008790:	8c fd       	ld.h %d15,[%a15]26
80008792:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventWriter        = FALSE;
80008796:	e9 fe 1d 00 	st.b [%a15]29,%d14
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
8000879a:	4b f2 01 22 	div %e2,%d2,%d15
8000879e:	a2 3b       	sub %d11,%d3
800087a0:	37 0b 70 b0 	extr.u %d11,%d11,0,16
800087a4:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventWriter        = FALSE;
    fifo->shared.writerWaitx = __min(count - blockSize, fifo->size);
800087a8:	0b f9 80 20 	sub %d2,%d9,%d15
800087ac:	0b 42 80 41 	min %d4,%d2,%d4
800087b0:	68 34       	st.w [%a15]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800087b2:	76 53       	jz %d5,800087b8 <Ifx_Fifo_write+0x9c>
    {
        __enable();
800087b4:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginWrite(fifo, count);

            if (blockSize != 0)
800087b8:	6e 26       	jz %d15,80008804 <Ifx_Fifo_write+0xe8>
            {

                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
800087ba:	40 a4       	mov.aa %a4,%sp
800087bc:	02 f4       	mov %d4,%d15
800087be:	6d ff 6d fd 	call 80008298 <Ifx_CircularBuffer_write8>
800087c2:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800087c4:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
800087c8:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800087cc:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800087d0:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
800087d2:	88 22       	ld.h %d2,[%a15]4
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
800087d4:	88 84       	ld.h %d4,[%a15]16
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
800087d6:	42 b2       	add %d2,%d11
800087d8:	37 02 50 20 	extr %d2,%d2,0,16
800087dc:	a8 22       	st.h [%a15]4,%d2
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800087de:	0b 24 a0 21 	max %d2,%d4,%d2
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
800087e2:	a8 82       	st.h [%a15]16,%d2

    if (fifo->shared.readerWaitx != 0)
800087e4:	48 22       	ld.w %d2,[%a15]8
800087e6:	76 29       	jz %d2,800087f8 <Ifx_Fifo_write+0xdc>
    {
        fifo->shared.readerWaitx -= blockSize;
800087e8:	5a f2       	sub %d15,%d2,%d15

        if (fifo->shared.readerWaitx <= 0)
800087ea:	8e f3       	jlez %d15,800087f0 <Ifx_Fifo_write+0xd4>
    fifo->shared.count   += blockSize;
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */

    if (fifo->shared.readerWaitx != 0)
    {
        fifo->shared.readerWaitx -= blockSize;
800087ec:	68 2f       	st.w [%a15]8,%d15
800087ee:	3c 05       	j 800087f8 <Ifx_Fifo_write+0xdc>

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
800087f0:	82 1f       	mov %d15,1
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
800087f2:	e8 2c       	st.a [%a15]8,%a12
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
800087f4:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800087f8:	76 33       	jz %d3,800087fe <Ifx_Fifo_write+0xe2>
    {
        __enable();
800087fa:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
800087fe:	a2 b9       	sub %d9,%d11
80008800:	37 09 50 90 	extr %d9,%d9,0,16
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008804:	76 d4       	jz %d13,8000880c <Ifx_Fifo_write+0xf0>
            {
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
80008806:	82 0f       	mov %d15,0
80008808:	68 3f       	st.w [%a15]12,%d15
                break;
8000880a:	3c 48       	j 8000889a <Ifx_Fifo_write+0x17e>
8000880c:	ba fa       	eq %d15,%d10,-1
8000880e:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008812:	ee 1b       	jnz %d15,80008848 <Ifx_Fifo_write+0x12c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008814:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008818:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000881c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008820:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008822:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008826:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000882a:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000882e:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008832:	76 23       	jz %d2,80008838 <Ifx_Fifo_write+0x11c>
    {
        __enable();
80008834:	0d 00 00 03 	enable 
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008838:	0b 8f 00 21 	eq %d2,%d15,%d8
8000883c:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
80008840:	0b f8 90 22 	or.lt %d2,%d8,%d15
80008844:	df 02 e1 ff 	jne %d2,0,80008806 <Ifx_Fifo_write+0xea>
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
                break;
            }

            if (count != 0)
80008848:	df 09 29 00 	jeq %d9,0,8000889a <Ifx_Fifo_write+0x17e>
            {
                while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
8000884c:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80008850:	ee 1f       	jnz %d15,8000888e <Ifx_Fifo_write+0x172>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008852:	ba fa       	eq %d15,%d10,-1
80008854:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008858:	ee fa       	jnz %d15,8000884c <Ifx_Fifo_write+0x130>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000885a:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000885e:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008862:	0d 00 40 03 	disable 
80008866:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008868:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000886c:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008870:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008874:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008878:	76 23       	jz %d2,8000887e <Ifx_Fifo_write+0x162>
    {
        __enable();
8000887a:	0d 00 00 03 	enable 
8000887e:	0b 8f 00 21 	eq %d2,%d15,%d8
80008882:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
80008886:	0b 8f 90 22 	or.lt %d2,%d15,%d8
8000888a:	df 02 e1 ff 	jne %d2,0,8000884c <Ifx_Fifo_write+0x130>
                {}

                Stop = fifo->eventWriter == FALSE;  /* If the function timeout, the maximum number of characters are written before returning */
8000888e:	39 fd 1d 00 	ld.bu %d13,[%a15]29
80008892:	8b 0d 00 d2 	eq %d13,%d13,0
80008896:	1d ff 70 ff 	j 80008776 <Ifx_Fifo_write+0x5a>
            }
        } while (count != 0);

        fifo->endIndex = buffer.index;
8000889a:	8c a2       	ld.h %d15,[%sp]4
8000889c:	a8 bf       	st.h [%a15]22,%d15
    }

    return count;
}
8000889e:	02 92       	mov %d2,%d9
800088a0:	00 90       	ret 
	...

800088a4 <syncInfoState>:
void initInfotainment(void){
    lcd_clear(); // LCD 출력 내용 초기화 함수
    printInfoDisplay(); 
}

void syncInfoState(void){
800088a4:	00 90       	ret 

800088a6 <updatePacket>:


}

void updatePacket(void){
800088a6:	00 90       	ret 

800088a8 <printStateLv1>:
    }

}

void printStateLv1(){
    sprintf(buf, "\xDB\xDB");
800088a8:	91 00 00 f7 	movh.a %a15,28672
800088ac:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
800088b0:	91 00 00 28 	movh.a %a2,32768
800088b4:	d9 22 d0 80 	lea %a2,[%a2]3600 <80000e10 <IfxVadc_Adc_masterIndex+0x40>>
800088b8:	40 f4       	mov.aa %a4,%a15
800088ba:	04 2f       	ld.bu %d15,[%a2+]
800088bc:	24 ff       	st.b [%a15+],%d15
800088be:	ee fe       	jnz %d15,800088ba <printStateLv1+0x12>
    lcd_print(buf);
800088c0:	1d ff 7b dc 	j 800041b6 <lcd_print>

800088c4 <printStateLv2>:
}
void printStateLv2(){
    sprintf(buf, "\xDB\xDB\xDB\xDB");
800088c4:	91 00 00 f7 	movh.a %a15,28672
800088c8:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
800088cc:	91 00 00 28 	movh.a %a2,32768
800088d0:	d9 22 d3 80 	lea %a2,[%a2]3603 <80000e13 <IfxVadc_Adc_masterIndex+0x43>>
800088d4:	40 f4       	mov.aa %a4,%a15
800088d6:	04 2f       	ld.bu %d15,[%a2+]
800088d8:	24 ff       	st.b [%a15+],%d15
800088da:	ee fe       	jnz %d15,800088d6 <printStateLv2+0x12>
    lcd_print(buf);
800088dc:	1d ff 6d dc 	j 800041b6 <lcd_print>

800088e0 <printStateLv3>:
}
void printStateLv3(){
    sprintf(buf, "\xDB\xDB\xDB\xDB\xDB\xDB");
800088e0:	91 00 00 f7 	movh.a %a15,28672
800088e4:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
800088e8:	91 00 00 28 	movh.a %a2,32768
800088ec:	d9 22 d8 80 	lea %a2,[%a2]3608 <80000e18 <IfxVadc_Adc_masterIndex+0x48>>
800088f0:	40 f4       	mov.aa %a4,%a15
800088f2:	04 2f       	ld.bu %d15,[%a2+]
800088f4:	24 ff       	st.b [%a15+],%d15
800088f6:	ee fe       	jnz %d15,800088f2 <printStateLv3+0x12>
    lcd_print(buf);
800088f8:	1d ff 5f dc 	j 800041b6 <lcd_print>

800088fc <printStateLv4>:
}
void printStateLv4(){
    sprintf(buf, "\xDB\xDB\xDB\xDB\xDB\xDB\xDB\xDB");
800088fc:	91 00 00 f7 	movh.a %a15,28672
80008900:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
80008904:	91 00 00 28 	movh.a %a2,32768
80008908:	d9 22 df 80 	lea %a2,[%a2]3615 <80000e1f <IfxVadc_Adc_masterIndex+0x4f>>
8000890c:	40 f4       	mov.aa %a4,%a15
8000890e:	04 2f       	ld.bu %d15,[%a2+]
80008910:	24 ff       	st.b [%a15+],%d15
80008912:	ee fe       	jnz %d15,8000890e <printStateLv4+0x12>
    lcd_print(buf);
80008914:	1d ff 51 dc 	j 800041b6 <lcd_print>

80008918 <printStateOn>:
}
void printStateOn(){
    sprintf(buf, "mode on");
80008918:	91 00 00 f7 	movh.a %a15,28672
8000891c:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
80008920:	91 00 00 28 	movh.a %a2,32768
80008924:	d9 22 e8 80 	lea %a2,[%a2]3624 <80000e28 <IfxVadc_Adc_masterIndex+0x58>>
80008928:	40 f4       	mov.aa %a4,%a15
8000892a:	04 2f       	ld.bu %d15,[%a2+]
8000892c:	24 ff       	st.b [%a15+],%d15
8000892e:	ee fe       	jnz %d15,8000892a <printStateOn+0x12>
    lcd_print(buf);
80008930:	1d ff 43 dc 	j 800041b6 <lcd_print>

80008934 <printStateOff>:
}
void printStateOff(){
    sprintf(buf, "mode off");
80008934:	91 00 00 f7 	movh.a %a15,28672
80008938:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
8000893c:	91 00 00 28 	movh.a %a2,32768
80008940:	d9 22 f0 80 	lea %a2,[%a2]3632 <80000e30 <IfxVadc_Adc_masterIndex+0x60>>
80008944:	40 f4       	mov.aa %a4,%a15
80008946:	04 2f       	ld.bu %d15,[%a2+]
80008948:	24 ff       	st.b [%a15+],%d15
8000894a:	ee fe       	jnz %d15,80008946 <printStateOff+0x12>
    lcd_print(buf);
8000894c:	1d ff 35 dc 	j 800041b6 <lcd_print>

80008950 <printStateRed>:
}
void printStateRed(){
    sprintf(buf, "light red");
80008950:	91 00 00 f7 	movh.a %a15,28672
80008954:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
80008958:	91 00 00 28 	movh.a %a2,32768
8000895c:	d9 22 f9 80 	lea %a2,[%a2]3641 <80000e39 <IfxVadc_Adc_masterIndex+0x69>>
80008960:	40 f4       	mov.aa %a4,%a15
80008962:	04 2f       	ld.bu %d15,[%a2+]
80008964:	24 ff       	st.b [%a15+],%d15
80008966:	ee fe       	jnz %d15,80008962 <printStateRed+0x12>
    lcd_print(buf);
80008968:	1d ff 27 dc 	j 800041b6 <lcd_print>

8000896c <printStateGreen>:
}
void printStateGreen(){
    sprintf(buf, "light green");
8000896c:	91 00 00 f7 	movh.a %a15,28672
80008970:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
80008974:	91 00 00 28 	movh.a %a2,32768
80008978:	d9 22 c3 90 	lea %a2,[%a2]3651 <80000e43 <IfxVadc_Adc_masterIndex+0x73>>
8000897c:	40 f4       	mov.aa %a4,%a15
8000897e:	04 2f       	ld.bu %d15,[%a2+]
80008980:	24 ff       	st.b [%a15+],%d15
80008982:	ee fe       	jnz %d15,8000897e <printStateGreen+0x12>
    lcd_print(buf);
80008984:	1d ff 19 dc 	j 800041b6 <lcd_print>

80008988 <printStateBlue>:
}
void printStateBlue(){
    sprintf(buf, "light blue");
80008988:	91 00 00 f7 	movh.a %a15,28672
8000898c:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
80008990:	91 00 00 28 	movh.a %a2,32768
80008994:	d9 22 cf 90 	lea %a2,[%a2]3663 <80000e4f <IfxVadc_Adc_masterIndex+0x7f>>
80008998:	40 f4       	mov.aa %a4,%a15
8000899a:	04 2f       	ld.bu %d15,[%a2+]
8000899c:	24 ff       	st.b [%a15+],%d15
8000899e:	ee fe       	jnz %d15,8000899a <printStateBlue+0x12>
    lcd_print(buf);
800089a0:	1d ff 0b dc 	j 800041b6 <lcd_print>

800089a4 <printInfoDisplay>:
    printInfoDisplay(); 
}


void printInfoDisplay(){
    lcd_goto(0,0);
800089a4:	d2 04       	mov %e4,0
800089a6:	6d ff 01 dc 	call 800041a8 <lcd_goto>
    switch (infoState) {
800089aa:	91 00 00 c7 	movh.a %a12,28672
800089ae:	19 cf c0 10 	ld.w %d15,[%a12]3136 <70000c40 <infoState>>
800089b2:	91 00 00 47 	movh.a %a4,28672
800089b6:	d9 44 e0 00 	lea %a4,[%a4]3104 <70000c20 <buf>>
800089ba:	ff 7f 55 80 	jge.u %d15,7,80008a64 <printInfoDisplay+0xc0>
800089be:	91 10 00 f8 	movh.a %a15,32769
800089c2:	d9 ff 8c 78 	lea %a15,[%a15]-30260 <800089cc <printInfoDisplay+0x28>>
800089c6:	90 ff       	addsc.a %a15,%a15,%d15,2
800089c8:	dc 0f       	ji %a15
800089ca:	00 00       	nop 
800089cc:	1d 00 0e 00 	j 800089e8 <printInfoDisplay+0x44>
800089d0:	1d 00 15 00 	j 800089fa <printInfoDisplay+0x56>
800089d4:	1d 00 1c 00 	j 80008a0c <printInfoDisplay+0x68>
800089d8:	1d 00 23 00 	j 80008a1e <printInfoDisplay+0x7a>
800089dc:	1d 00 2a 00 	j 80008a30 <printInfoDisplay+0x8c>
800089e0:	1d 00 31 00 	j 80008a42 <printInfoDisplay+0x9e>
800089e4:	1d 00 38 00 	j 80008a54 <printInfoDisplay+0xb0>
        case tunnelMode:
            sprintf(buf, "Tunnel Mode");
800089e8:	91 00 00 28 	movh.a %a2,32768
800089ec:	40 4f       	mov.aa %a15,%a4
800089ee:	d9 22 da 90 	lea %a2,[%a2]3674 <80000e5a <IfxVadc_Adc_masterIndex+0x8a>>
800089f2:	04 2f       	ld.bu %d15,[%a2+]
800089f4:	24 ff       	st.b [%a15+],%d15
800089f6:	ee fe       	jnz %d15,800089f2 <printInfoDisplay+0x4e>
800089f8:	3c 36       	j 80008a64 <printInfoDisplay+0xc0>
            break;
        case airConditionMode:
            sprintf(buf,"Air Conditional");
800089fa:	91 00 00 28 	movh.a %a2,32768
800089fe:	40 4f       	mov.aa %a15,%a4
80008a00:	d9 22 e6 90 	lea %a2,[%a2]3686 <80000e66 <IfxVadc_Adc_masterIndex+0x96>>
80008a04:	04 2f       	ld.bu %d15,[%a2+]
80008a06:	24 ff       	st.b [%a15+],%d15
80008a08:	ee fe       	jnz %d15,80008a04 <printInfoDisplay+0x60>
80008a0a:	3c 2d       	j 80008a64 <printInfoDisplay+0xc0>
            break;
        case chairDegree:
            sprintf(buf,"Chair Degree");
80008a0c:	91 00 00 28 	movh.a %a2,32768
80008a10:	40 4f       	mov.aa %a15,%a4
80008a12:	d9 22 f6 90 	lea %a2,[%a2]3702 <80000e76 <IfxVadc_Adc_masterIndex+0xa6>>
80008a16:	04 2f       	ld.bu %d15,[%a2+]
80008a18:	24 ff       	st.b [%a15+],%d15
80008a1a:	ee fe       	jnz %d15,80008a16 <printInfoDisplay+0x72>
80008a1c:	3c 24       	j 80008a64 <printInfoDisplay+0xc0>
            break;
        case window:
            sprintf(buf,"window");
80008a1e:	91 00 00 28 	movh.a %a2,32768
80008a22:	40 4f       	mov.aa %a15,%a4
80008a24:	d9 22 c3 a0 	lea %a2,[%a2]3715 <80000e83 <IfxVadc_Adc_masterIndex+0xb3>>
80008a28:	04 2f       	ld.bu %d15,[%a2+]
80008a2a:	24 ff       	st.b [%a15+],%d15
80008a2c:	ee fe       	jnz %d15,80008a28 <printInfoDisplay+0x84>
80008a2e:	3c 1b       	j 80008a64 <printInfoDisplay+0xc0>
            break;
        case embientLight:
            sprintf(buf,"embient light");
80008a30:	91 00 00 28 	movh.a %a2,32768
80008a34:	40 4f       	mov.aa %a15,%a4
80008a36:	d9 22 ca a0 	lea %a2,[%a2]3722 <80000e8a <IfxVadc_Adc_masterIndex+0xba>>
80008a3a:	04 2f       	ld.bu %d15,[%a2+]
80008a3c:	24 ff       	st.b [%a15+],%d15
80008a3e:	ee fe       	jnz %d15,80008a3a <printInfoDisplay+0x96>
80008a40:	3c 12       	j 80008a64 <printInfoDisplay+0xc0>
            break;
        case adasSensor:
            sprintf(buf,"adas sensor");
80008a42:	91 00 00 28 	movh.a %a2,32768
80008a46:	40 4f       	mov.aa %a15,%a4
80008a48:	d9 22 d8 a0 	lea %a2,[%a2]3736 <80000e98 <IfxVadc_Adc_masterIndex+0xc8>>
80008a4c:	04 2f       	ld.bu %d15,[%a2+]
80008a4e:	24 ff       	st.b [%a15+],%d15
80008a50:	ee fe       	jnz %d15,80008a4c <printInfoDisplay+0xa8>
80008a52:	3c 09       	j 80008a64 <printInfoDisplay+0xc0>
            break;
        case driveLight:
            sprintf(buf,"Drive Light");
80008a54:	91 00 00 28 	movh.a %a2,32768
80008a58:	40 4f       	mov.aa %a15,%a4
80008a5a:	d9 22 e4 a0 	lea %a2,[%a2]3748 <80000ea4 <IfxVadc_Adc_masterIndex+0xd4>>
80008a5e:	04 2f       	ld.bu %d15,[%a2+]
80008a60:	24 ff       	st.b [%a15+],%d15
80008a62:	ee fe       	jnz %d15,80008a5e <printInfoDisplay+0xba>
            break;
    }
    lcd_print(buf); 
80008a64:	6d ff a9 db 	call 800041b6 <lcd_print>
    lcd_goto(1,0);
80008a68:	d2 14       	mov %e4,1
80008a6a:	6d ff 9f db 	call 800041a8 <lcd_goto>
    // sprintf(buf, "state = %u", infotainmentArr[infoState]); 
    // lcd_print(buf); 

    if(infoState == tunnelMode || infoState == driveLight ){
80008a6e:	19 cf c0 10 	ld.w %d15,[%a12]3136 <70000c40 <infoState>>
80008a72:	91 00 00 f7 	movh.a %a15,28672
80008a76:	8b 6f 00 22 	eq %d2,%d15,6
80008a7a:	8b 0f e0 24 	or.eq %d2,%d15,0
80008a7e:	d9 ff c4 10 	lea %a15,[%a15]3140 <70000c44 <infotainmentArr>>
80008a82:	76 26       	jz %d2,80008a8e <printInfoDisplay+0xea>
        if (infotainmentArr[infoState] == 0) { //mode on
80008a84:	90 ff       	addsc.a %a15,%a15,%d15,2
80008a86:	4c f0       	ld.w %d15,[%a15]0
80008a88:	6e 36       	jz %d15,80008af4 <printInfoDisplay+0x150>
            printStateOff();
        }
        else{ //mode off
            printStateOn();
80008a8a:	1d ff 47 ff 	j 80008918 <printStateOn>
        } 
    }
    else if(infoState == embientLight){
80008a8e:	5e 4b       	jne %d15,4,80008aa4 <printInfoDisplay+0x100>
        switch(infotainmentArr[infoState]){
80008a90:	4c f4       	ld.w %d15,[%a15]16
80008a92:	1e 15       	jeq %d15,1,80008a9c <printInfoDisplay+0xf8>
80008a94:	1e 26       	jeq %d15,2,80008aa0 <printInfoDisplay+0xfc>
80008a96:	ee 37       	jnz %d15,80008b04 <printInfoDisplay+0x160>
            case 0:
                printStateRed();
80008a98:	1d ff 5c ff 	j 80008950 <printStateRed>
                break;
            case 1:
                printStateGreen();
80008a9c:	1d ff 68 ff 	j 8000896c <printStateGreen>
                break;  
            case 2:
                printStateBlue();
80008aa0:	1d ff 74 ff 	j 80008988 <printStateBlue>
                break;
        }
    }
    else if(infoState == chairDegree || infoState == window){
80008aa4:	92 e2       	add %d2,%d15,-2
80008aa6:	06 2f       	sh %d15,2
        switch(infotainmentArr[infoState]){
80008aa8:	10 ff       	addsc.a %a15,%a15,%d15,0
80008aaa:	4c f0       	ld.w %d15,[%a15]0
            case 2:
                printStateBlue();
                break;
        }
    }
    else if(infoState == chairDegree || infoState == window){
80008aac:	ff 22 14 80 	jge.u %d2,2,80008ad4 <printInfoDisplay+0x130>
        switch(infotainmentArr[infoState]){
80008ab0:	ff 4f 2a 80 	jge.u %d15,4,80008b04 <printInfoDisplay+0x160>
80008ab4:	91 10 00 f8 	movh.a %a15,32769
80008ab8:	d9 ff 80 b8 	lea %a15,[%a15]-30016 <80008ac0 <printInfoDisplay+0x11c>>
80008abc:	90 ff       	addsc.a %a15,%a15,%d15,2
80008abe:	dc 0f       	ji %a15
80008ac0:	1d 00 1c 00 	j 80008af8 <printInfoDisplay+0x154>
80008ac4:	1d 00 1c 00 	j 80008afc <printInfoDisplay+0x158>
80008ac8:	1d 00 1c 00 	j 80008b00 <printInfoDisplay+0x15c>
80008acc:	1d 00 02 00 	j 80008ad0 <printInfoDisplay+0x12c>
                break;  
            case 2:
                printStateLv3();
                break;
            case 3:
                printStateLv4();
80008ad0:	1d ff 16 ff 	j 800088fc <printStateLv4>
                break;
        }
    }
    else{
        switch(infotainmentArr[infoState]){
80008ad4:	ff 4f 18 80 	jge.u %d15,4,80008b04 <printInfoDisplay+0x160>
80008ad8:	91 10 00 f8 	movh.a %a15,32769
80008adc:	d9 ff a4 b8 	lea %a15,[%a15]-29980 <80008ae4 <printInfoDisplay+0x140>>
80008ae0:	90 ff       	addsc.a %a15,%a15,%d15,2
80008ae2:	dc 0f       	ji %a15
80008ae4:	1d 00 08 00 	j 80008af4 <printInfoDisplay+0x150>
80008ae8:	1d 00 08 00 	j 80008af8 <printInfoDisplay+0x154>
80008aec:	1d 00 08 00 	j 80008afc <printInfoDisplay+0x158>
80008af0:	1d 00 08 00 	j 80008b00 <printInfoDisplay+0x15c>
            case 0:
                printStateOff();
80008af4:	1d ff 20 ff 	j 80008934 <printStateOff>
                break;
            case 1:
                printStateLv1();
80008af8:	1d ff d8 fe 	j 800088a8 <printStateLv1>
                break;  
            case 2:
                printStateLv2();
80008afc:	1d ff e4 fe 	j 800088c4 <printStateLv2>
                break;
            case 3:
                printStateLv3();
80008b00:	1d ff f0 fe 	j 800088e0 <printStateLv3>
80008b04:	00 90       	ret 

80008b06 <initInfotainment>:
#include "infotainment_System.h"
#include "bsw.h"


void initInfotainment(void){
    lcd_clear(); // LCD 출력 내용 초기화 함수
80008b06:	6d ff e4 da 	call 800040ce <lcd_clear>
    printInfoDisplay(); 
80008b0a:	1d ff 4d ff 	j 800089a4 <printInfoDisplay>

80008b0e <updateInfoState>:


}

void updateInfoState(unsigned int buttonState){
    switch (buttonState) {
80008b0e:	ff 44 4a 80 	jge.u %d4,4,80008ba2 <updateInfoState+0x94>
80008b12:	91 10 00 28 	movh.a %a2,32769
80008b16:	d9 22 a4 c8 	lea %a2,[%a2]-29916 <80008b24 <updateInfoState+0x16>>
80008b1a:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80008b1e:	91 00 00 f7 	movh.a %a15,28672
80008b22:	dc 02       	ji %a2
80008b24:	1d 00 08 00 	j 80008b34 <updateInfoState+0x26>
80008b28:	1d 00 10 00 	j 80008b48 <updateInfoState+0x3a>
80008b2c:	1d 00 19 00 	j 80008b5e <updateInfoState+0x50>
80008b30:	1d 00 24 00 	j 80008b78 <updateInfoState+0x6a>
        case btnUP:
            if (infoState + 1 <= driveLight) {
80008b34:	19 ff c0 10 	ld.w %d15,[%a15]3136 <70000c40 <infoState>>
80008b38:	91 00 00 27 	movh.a %a2,28672
80008b3c:	ff 6f 04 00 	jge %d15,6,80008b44 <updateInfoState+0x36>
                infoState = infoState + 1;
80008b40:	c2 1f       	add %d15,1
80008b42:	3c 09       	j 80008b54 <updateInfoState+0x46>
            }
            else {
                infoState = tunnelMode;
80008b44:	82 0f       	mov %d15,0
80008b46:	3c 07       	j 80008b54 <updateInfoState+0x46>
            }
            break;
        case btnDOWN:
            if (infoState - 1 >= tunnelMode) {
80008b48:	19 ff c0 10 	ld.w %d15,[%a15]3136 <70000c40 <infoState>>
80008b4c:	91 00 00 27 	movh.a %a2,28672
80008b50:	8e f5       	jlez %d15,80008b5a <updateInfoState+0x4c>
                infoState = infoState - 1;
80008b52:	c2 ff       	add %d15,-1
80008b54:	59 2f c0 10 	st.w [%a2]3136 <70000c40 <infoState>>,%d15
80008b58:	3c 25       	j 80008ba2 <updateInfoState+0x94>
            }
            else {
                infoState = driveLight;
80008b5a:	82 6f       	mov %d15,6
80008b5c:	3c fc       	j 80008b54 <updateInfoState+0x46>
            }
            break;
        case btnLEFT:
            if(infotainmentArr[infoState] -1 >= 0){
80008b5e:	19 ff c0 10 	ld.w %d15,[%a15]3136 <70000c40 <infoState>>
80008b62:	91 00 00 f7 	movh.a %a15,28672
80008b66:	d9 ff c4 10 	lea %a15,[%a15]3140 <70000c44 <infotainmentArr>>
80008b6a:	90 ff       	addsc.a %a15,%a15,%d15,2
80008b6c:	4c f0       	ld.w %d15,[%a15]0
80008b6e:	8e f3       	jlez %d15,80008b74 <updateInfoState+0x66>
                infotainmentArr[infoState] = infotainmentArr[infoState] - 1;
80008b70:	c2 ff       	add %d15,-1
80008b72:	3c 17       	j 80008ba0 <updateInfoState+0x92>
            }
            else{
                infotainmentArr[infoState] = 0;
80008b74:	82 0f       	mov %d15,0
80008b76:	3c 15       	j 80008ba0 <updateInfoState+0x92>
            }
            break;
        case btnRIGHT:
            if(infotainmentArr[infoState] +1 <=  stateMaxArr[infoState]){
80008b78:	19 ff c0 10 	ld.w %d15,[%a15]3136
80008b7c:	91 00 00 28 	movh.a %a2,32768
80008b80:	91 00 00 f7 	movh.a %a15,28672
80008b84:	06 2f       	sh %d15,2
80008b86:	d9 ff c4 10 	lea %a15,[%a15]3140 <70000c44 <infotainmentArr>>
80008b8a:	d9 22 f0 a0 	lea %a2,[%a2]3760 <80000eb0 <stateMaxArr>>
80008b8e:	10 ff       	addsc.a %a15,%a15,%d15,0
80008b90:	10 22       	addsc.a %a2,%a2,%d15,0
80008b92:	48 02       	ld.w %d2,[%a15]0
80008b94:	4c 20       	ld.w %d15,[%a2]0
80008b96:	7f f2 05 00 	jge %d2,%d15,80008ba0 <updateInfoState+0x92>
                infotainmentArr[infoState] = infotainmentArr[infoState] +1;
80008b9a:	c2 12       	add %d2,1
80008b9c:	68 02       	st.w [%a15]0,%d2
80008b9e:	3c 02       	j 80008ba2 <updateInfoState+0x94>
            }
            else{
                infotainmentArr[infoState] = stateMaxArr[infoState];
80008ba0:	68 0f       	st.w [%a15]0,%d15
            }
            break;
        
    }
    lcd_clear(); // LCD 출력 내용 초기화 함수
80008ba2:	6d ff 96 da 	call 800040ce <lcd_clear>
    printInfoDisplay(); 
80008ba6:	1d ff ff fe 	j 800089a4 <printInfoDisplay>
	...

80008bac <initUartDriver>:

App_AsclinAsc g_AsclinStm;
struct ActuatorPacket g_RecievedActuatorPacket = {};

void initUartDriver(void)
{
80008bac:	20 60       	sub.a %sp,96
    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN0);
80008bae:	d9 a4 24 00 	lea %a4,[%sp]36
80008bb2:	c5 f5 40 80 	lea %a5,f0000600 <_SMALL_DATA4_+0x3fff8600>
80008bb6:	6d ff 1f e6 	call 800057f4 <IfxAsclin_Asc_initModuleConfig>

    ascConfig.baudrate.prescaler    = 1;
80008bba:	82 1f       	mov %d15,1
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
80008bbc:	7b 00 00 27 	movh %d2,28672
80008bc0:	1b 62 d9 20 	addi %d2,%d2,3478
void initUartDriver(void)
{
    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN0);

    ascConfig.baudrate.prescaler    = 1;
80008bc4:	f9 af 2c 00 	st.h [%sp]44,%d15
    ascConfig.baudrate.baudrate     = 9600;
80008bc8:	7b 60 61 f4 	movh %d15,17942
80008bcc:	78 0a       	st.w [%sp]40,%d15
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
80008bce:	59 a2 18 10 	st.w [%sp]88,%d2
    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN0);

    ascConfig.baudrate.prescaler    = 1;
    ascConfig.baudrate.baudrate     = 9600;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
80008bd2:	82 3f       	mov %d15,3
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008bd4:	7b 00 00 28 	movh %d2,32768
80008bd8:	60 23       	mov.a %a3,%d2
    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN0);

    ascConfig.baudrate.prescaler    = 1;
    ascConfig.baudrate.baudrate     = 9600;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
80008bda:	e9 af 2e 00 	st.b [%sp]46,%d15

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
80008bde:	82 4f       	mov %d15,4
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008be0:	d9 af 04 00 	lea %a15,[%sp]4

    ascConfig.baudrate.prescaler    = 1;
    ascConfig.baudrate.baudrate     = 9600;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
80008be4:	f9 af 02 10 	st.h [%sp]66,%d15
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
80008be8:	82 5f       	mov %d15,5
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008bea:	40 f4       	mov.aa %a4,%a15
    ascConfig.baudrate.prescaler    = 1;
    ascConfig.baudrate.baudrate     = 9600;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
80008bec:	f9 af 00 10 	st.h [%sp]64,%d15
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008bf0:	d9 32 cc b0 	lea %a2,[%a3]3788
    ascConfig.baudrate.baudrate     = 9600;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;
80008bf4:	82 0f       	mov %d15,0
80008bf6:	e9 af 06 10 	st.b [%sp]70,%d15
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008bfa:	a0 33       	mov.a %a3,3
80008bfc:	09 22 48 01 	ld.d %e2,[%a2+]8
80008c00:	89 42 48 01 	st.d [%a4+]8,%e2
80008c04:	fc 3c       	loop %a3,80008bfc <initUartDriver+0x50>

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
80008c06:	7b 00 00 f7 	movh %d15,28672
80008c0a:	1b cf c6 f0 	addi %d15,%d15,3180
        &IfxAsclin0_TX_P15_2_OUT,      IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
80008c0e:	91 00 00 47 	movh.a %a4,28672

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
80008c12:	78 14       	st.w [%sp]80,%d15
        &IfxAsclin0_TX_P15_2_OUT,      IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
80008c14:	d9 44 c0 b0 	lea %a4,[%a4]3776 <70000ec0 <g_AsclinStm+0x254>>
    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80008c18:	3b 20 10 f0 	mov %d15,258
        &IfxAsclin0_TX_P15_2_OUT,      IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
80008c1c:	d9 a5 24 00 	lea %a5,[%sp]36
    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80008c20:	f9 af 0e 10 	st.h [%sp]78,%d15
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;
80008c24:	f9 af 14 10 	st.h [%sp]84,%d15
        &IfxAsclin0_RXB_P15_3_IN,      IfxPort_InputMode_pullUp,
        NULL_PTR,                      IfxPort_OutputMode_pushPull,
        &IfxAsclin0_TX_P15_2_OUT,      IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
80008c28:	f8 12       	st.a [%sp]72,%a15

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
80008c2a:	1d ff 0e e4 	j 80005446 <IfxAsclin_Asc_initModule>

80008c2e <myprintfSerial>:
    }
    deserialize_sensor_packet(buffer,packet);
}

void myprintfSerial(const char *fmt,...)
{
80008c2e:	20 e8       	sub.a %sp,232
80008c30:	40 4f       	mov.aa %a15,%a4
    EnableAllInterrupts();
80008c32:	6d 00 af 06 	call 80009990 <EnableAllInterrupts>
    char buf[128];
    va_list args;
    va_start (args, fmt );
    vsnprintf(buf, 128, fmt, args);
80008c36:	40 f5       	mov.aa %a5,%a15
80008c38:	d9 a4 28 10 	lea %a4,[%sp]104
80008c3c:	3b 00 08 40 	mov %d4,128
80008c40:	d9 a6 28 30 	lea %a6,[%sp]232
80008c44:	6d 00 19 15 	call 8000b676 <vsnprintf>
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinStm.count = strlen(buf);
80008c48:	d9 a4 28 10 	lea %a4,[%sp]104
80008c4c:	6d 00 e6 14 	call 8000b618 <strlen>
80008c50:	91 00 00 f7 	movh.a %a15,28672
80008c54:	d9 ff ec 10 	lea %a15,[%a15]3180 <70000c6c <g_AsclinStm>>
80008c58:	f9 f2 30 90 	st.h [%a15]624 <70000270 <__malloc_av_+0x150>>,%d2
    unsigned int i =0;
80008c5c:	82 0f       	mov %d15,0
    for(; i<strlen(buf);i++) {
80008c5e:	d9 a4 28 10 	lea %a4,[%sp]104
80008c62:	6d 00 db 14 	call 8000b618 <strlen>
80008c66:	7f 2f 0c 80 	jge.u %d15,%d2,80008c7e <myprintfSerial+0x50>
        txData[i] = buf[i];
80008c6a:	d9 a3 04 00 	lea %a3,[%sp]4
80008c6e:	10 32       	addsc.a %a2,%a3,%d15,0
80008c70:	d9 a3 28 10 	lea %a3,[%sp]104
80008c74:	10 3f       	addsc.a %a15,%a3,%d15,0
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinStm.count = strlen(buf);
    unsigned int i =0;
    for(; i<strlen(buf);i++) {
80008c76:	c2 1f       	add %d15,1
        txData[i] = buf[i];
80008c78:	08 02       	ld.bu %d2,[%a15]0
80008c7a:	34 22       	st.b [%a2],%d2
80008c7c:	3c f1       	j 80008c5e <myprintfSerial+0x30>
    }
    /* Transmit data */
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &txData, &g_AsclinStm.count, TIME_INFINITE);
80008c7e:	91 00 00 47 	movh.a %a4,28672
80008c82:	91 00 00 67 	movh.a %a6,28672
80008c86:	82 f4       	mov %d4,-1
80008c88:	d9 44 c0 b0 	lea %a4,[%a4]3776 <70000ec0 <g_AsclinStm+0x254>>
80008c8c:	d9 a5 04 00 	lea %a5,[%sp]4 <70000ec0 <g_AsclinStm+0x254>>
80008c90:	d9 66 dc b0 	lea %a6,[%a6]3804 <70000edc <g_AsclinStm+0x270>>
80008c94:	9b 04 00 58 	addih %d5,%d4,32768
80008c98:	1d ff 16 e6 	j 800058c4 <IfxAsclin_Asc_write>

80008c9c <asclin0TxISR>:
}

ISR(asclin0TxISR)
{
    // printfSerial("onTransmit(%d) ",++sendStamp);
    IfxAsclin_Asc_isrTransmit(&g_AsclinStm.drivers.asc);
80008c9c:	91 00 00 47 	movh.a %a4,28672
80008ca0:	d9 44 c0 b0 	lea %a4,[%a4]3776 <70000ec0 <g_AsclinStm+0x254>>
80008ca4:	1d ff 16 e3 	j 800052d0 <IfxAsclin_Asc_isrTransmit>

80008ca8 <calculate_checksum>:

/* Calculate 8-bit XOR checksum */
uint8 calculate_checksum(const uint8* data, size_t length) {
    uint8 checksumResult = 0;
    size_t i = 0;
    for (i = 0; i < length; ++i) {
80008ca8:	82 0f       	mov %d15,0

//from uart_packet

/* Calculate 8-bit XOR checksum */
uint8 calculate_checksum(const uint8* data, size_t length) {
    uint8 checksumResult = 0;
80008caa:	82 02       	mov %d2,0
80008cac:	9f 04 03 80 	jned %d4,0,80008cb2 <calculate_checksum+0xa>
    size_t i = 0;
    for (i = 0; i < length; ++i) {
        checksumResult ^= data[i];
    }
    return checksumResult;
}
80008cb0:	00 90       	ret 
/* Calculate 8-bit XOR checksum */
uint8 calculate_checksum(const uint8* data, size_t length) {
    uint8 checksumResult = 0;
    size_t i = 0;
    for (i = 0; i < length; ++i) {
        checksumResult ^= data[i];
80008cb2:	10 4f       	addsc.a %a15,%a4,%d15,0

/* Calculate 8-bit XOR checksum */
uint8 calculate_checksum(const uint8* data, size_t length) {
    uint8 checksumResult = 0;
    size_t i = 0;
    for (i = 0; i < length; ++i) {
80008cb4:	c2 1f       	add %d15,1
        checksumResult ^= data[i];
80008cb6:	08 03       	ld.bu %d3,[%a15]0
80008cb8:	c6 32       	xor %d2,%d3
80008cba:	3c f9       	j 80008cac <calculate_checksum+0x4>

80008cbc <serialize_actuator_packet>:
}

/* Serialize ActuatorPacket into buffer (ACTUATOR_PACKET_SIZE bytes) */
void serialize_actuator_packet(const struct ActuatorPacket* packet, uint8* buffer) {
    /* Copy all fields except CRC */
    memcpy(buffer, packet, ACTUATOR_PACKET_SIZE - 1);
80008cbc:	40 52       	mov.aa %a2,%a5
80008cbe:	a0 93       	mov.a %a3,9
80008cc0:	04 4f       	ld.bu %d15,[%a4+]
80008cc2:	24 2f       	st.b [%a2+],%d15
80008cc4:	fc 3e       	loop %a3,80008cc0 <serialize_actuator_packet+0x4>
    /* Compute and append CRC */
    buffer[ACTUATOR_PACKET_SIZE - 1] = calculate_checksum(buffer, ACTUATOR_PACKET_SIZE - 1);
80008cc6:	40 54       	mov.aa %a4,%a5
80008cc8:	3b a0 00 40 	mov %d4,10
    }
    return checksumResult;
}

/* Serialize ActuatorPacket into buffer (ACTUATOR_PACKET_SIZE bytes) */
void serialize_actuator_packet(const struct ActuatorPacket* packet, uint8* buffer) {
80008ccc:	40 5f       	mov.aa %a15,%a5
    /* Copy all fields except CRC */
    memcpy(buffer, packet, ACTUATOR_PACKET_SIZE - 1);
    /* Compute and append CRC */
    buffer[ACTUATOR_PACKET_SIZE - 1] = calculate_checksum(buffer, ACTUATOR_PACKET_SIZE - 1);
80008cce:	6d ff ed ff 	call 80008ca8 <calculate_checksum>
80008cd2:	28 a2       	st.b [%a15]10,%d2
80008cd4:	00 90       	ret 

80008cd6 <sendActuatorPacket>:

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
}

void sendActuatorPacket(const struct ActuatorPacket* packet)
{
80008cd6:	20 10       	sub.a %sp,16
80008cd8:	40 4c       	mov.aa %a12,%a4
    EnableAllInterrupts();
80008cda:	6d 00 5b 06 	call 80009990 <EnableAllInterrupts>
    uint8 buf[ACTUATOR_PACKET_SIZE]={};
80008cde:	d9 af 05 00 	lea %a15,[%sp]5
80008ce2:	40 f2       	mov.aa %a2,%a15
    serialize_actuator_packet(packet,buf);
80008ce4:	40 c4       	mov.aa %a4,%a12
80008ce6:	40 f5       	mov.aa %a5,%a15
}

void sendActuatorPacket(const struct ActuatorPacket* packet)
{
    EnableAllInterrupts();
    uint8 buf[ACTUATOR_PACKET_SIZE]={};
80008ce8:	82 0f       	mov %d15,0
80008cea:	a0 a3       	mov.a %a3,10
80008cec:	24 2f       	st.b [%a2+],%d15
80008cee:	fc 3f       	loop %a3,80008cec <sendActuatorPacket+0x16>
    serialize_actuator_packet(packet,buf);
80008cf0:	6d ff e6 ff 	call 80008cbc <serialize_actuator_packet>
    g_AsclinStm.count = ACTUATOR_PACKET_SIZE;
80008cf4:	91 00 00 27 	movh.a %a2,28672
80008cf8:	da 0b       	mov %d15,11
80008cfa:	d9 22 ec 10 	lea %a2,[%a2]3180 <70000c6c <g_AsclinStm>>
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
80008cfe:	91 00 00 47 	movh.a %a4,28672
80008d02:	91 00 00 67 	movh.a %a6,28672
80008d06:	82 f4       	mov %d4,-1
void sendActuatorPacket(const struct ActuatorPacket* packet)
{
    EnableAllInterrupts();
    uint8 buf[ACTUATOR_PACKET_SIZE]={};
    serialize_actuator_packet(packet,buf);
    g_AsclinStm.count = ACTUATOR_PACKET_SIZE;
80008d08:	f9 2f 30 90 	st.h [%a2]624 <70000270 <__malloc_av_+0x150>>,%d15
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
80008d0c:	d9 44 c0 b0 	lea %a4,[%a4]3776 <70000ec0 <g_AsclinStm+0x254>>
80008d10:	40 f5       	mov.aa %a5,%a15
80008d12:	d9 66 dc b0 	lea %a6,[%a6]3804 <70000edc <g_AsclinStm+0x270>>
80008d16:	9b 04 00 58 	addih %d5,%d4,32768
80008d1a:	1d ff d5 e5 	j 800058c4 <IfxAsclin_Asc_write>

80008d1e <deserialize_actuator_packet>:
}

/* Deserialize buffer into ActuatorPacket */
void deserialize_actuator_packet(const uint8* buffer, struct ActuatorPacket* packet) {
    /* Copy entire packet */
    memcpy(packet, buffer, ACTUATOR_PACKET_SIZE);
80008d1e:	a0 af       	mov.a %a15,10
80008d20:	04 4f       	ld.bu %d15,[%a4+]
80008d22:	24 5f       	st.b [%a5+],%d15
80008d24:	fc fe       	loop %a15,80008d20 <deserialize_actuator_packet+0x2>
80008d26:	00 90       	ret 

80008d28 <readActuatorPacket>:
    serialize_sensor_packet(packet,buf);
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
80008d28:	20 10       	sub.a %sp,16
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = ACTUATOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<ACTUATOR_PACKET_SIZE) return;
80008d2a:	91 00 00 d7 	movh.a %a13,28672
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
80008d2e:	d9 af 05 00 	lea %a15,[%sp]5
    uint8 pos = 0;
    uint8 sendCnt = ACTUATOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<ACTUATOR_PACKET_SIZE) return;
80008d32:	d9 dd c0 b0 	lea %a13,[%a13]3776 <70000ec0 <g_AsclinStm+0x254>>
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
80008d36:	40 f2       	mov.aa %a2,%a15
    serialize_sensor_packet(packet,buf);
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
80008d38:	40 4c       	mov.aa %a12,%a4
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = ACTUATOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<ACTUATOR_PACKET_SIZE) return;
80008d3a:	40 d4       	mov.aa %a4,%a13
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
80008d3c:	82 0f       	mov %d15,0
80008d3e:	a0 a3       	mov.a %a3,10
80008d40:	24 2f       	st.b [%a2+],%d15
80008d42:	fc 3f       	loop %a3,80008d40 <readActuatorPacket+0x18>
    uint8 pos = 0;
    uint8 sendCnt = ACTUATOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<ACTUATOR_PACKET_SIZE) return;
80008d44:	6d ff fa e1 	call 80005138 <IfxAsclin_Asc_getReadCount>
80008d48:	8b b2 40 22 	lt %d2,%d2,11
80008d4c:	df 02 11 80 	jne %d2,0,80008d6e <readActuatorPacket+0x46>
80008d50:	82 0f       	mov %d15,0
    while (sendCnt--)
    {
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
80008d52:	40 d4       	mov.aa %a4,%a13
80008d54:	6d ff 58 e3 	call 80005404 <IfxAsclin_Asc_blockingRead>
80008d58:	10 f2       	addsc.a %a2,%a15,%d15,0
80008d5a:	c2 1f       	add %d15,1
80008d5c:	34 22       	st.b [%a2],%d2
void readActuatorPacket(struct ActuatorPacket* packet){
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = ACTUATOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<ACTUATOR_PACKET_SIZE) return;
    while (sendCnt--)
80008d5e:	8b bf 20 22 	ne %d2,%d15,11
80008d62:	df 02 f8 ff 	jne %d2,0,80008d52 <readActuatorPacket+0x2a>
    {
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
    }
    deserialize_actuator_packet(buffer,packet);
80008d66:	40 f4       	mov.aa %a4,%a15
80008d68:	40 c5       	mov.aa %a5,%a12
80008d6a:	6d ff da ff 	call 80008d1e <deserialize_actuator_packet>
80008d6e:	00 90       	ret 

80008d70 <asclin0RxISR>:
}

ISR(asclin0RxISR)
{
    // printfSerial("onReceive(%d) ",++recieveStamp);
    IfxAsclin_Asc_isrReceive(&g_AsclinStm.drivers.asc);
80008d70:	91 00 00 f7 	movh.a %a15,28672
80008d74:	d9 ff c0 b0 	lea %a15,[%a15]3776 <70000ec0 <g_AsclinStm+0x254>>
80008d78:	40 f4       	mov.aa %a4,%a15
80008d7a:	6d ff fa e2 	call 8000536e <IfxAsclin_Asc_isrReceive>
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)>=ACTUATOR_PACKET_SIZE){
80008d7e:	40 f4       	mov.aa %a4,%a15
80008d80:	6d ff dc e1 	call 80005138 <IfxAsclin_Asc_getReadCount>
80008d84:	8b b2 40 22 	lt %d2,%d2,11
80008d88:	f6 27       	jnz %d2,80008d96 <asclin0RxISR+0x26>
        readActuatorPacket(&g_RecievedActuatorPacket);
80008d8a:	91 00 00 47 	movh.a %a4,28672
80008d8e:	d9 44 e0 10 	lea %a4,[%a4]3168 <70000c60 <g_RecievedActuatorPacket>>
80008d92:	1d ff cb ff 	j 80008d28 <readActuatorPacket>
80008d96:	00 90       	ret 

80008d98 <serialize_sensor_packet>:
       } */
}

/* Serialize SensorPacket into buffer (SENSOR_PACKET_SIZE bytes) */
void serialize_sensor_packet(const struct SensorPacket* packet, uint8* buffer) {
    memcpy(buffer, packet, SENSOR_PACKET_SIZE - 1);
80008d98:	40 52       	mov.aa %a2,%a5
80008d9a:	a0 73       	mov.a %a3,7
80008d9c:	04 4f       	ld.bu %d15,[%a4+]
80008d9e:	24 2f       	st.b [%a2+],%d15
80008da0:	fc 3e       	loop %a3,80008d9c <serialize_sensor_packet+0x4>
    buffer[SENSOR_PACKET_SIZE - 1] = calculate_checksum(buffer, SENSOR_PACKET_SIZE - 1);
80008da2:	40 54       	mov.aa %a4,%a5
80008da4:	3b 80 00 40 	mov %d4,8
         // handle CRC mismatch
       } */
}

/* Serialize SensorPacket into buffer (SENSOR_PACKET_SIZE bytes) */
void serialize_sensor_packet(const struct SensorPacket* packet, uint8* buffer) {
80008da8:	40 5f       	mov.aa %a15,%a5
    memcpy(buffer, packet, SENSOR_PACKET_SIZE - 1);
    buffer[SENSOR_PACKET_SIZE - 1] = calculate_checksum(buffer, SENSOR_PACKET_SIZE - 1);
80008daa:	6d ff 7f ff 	call 80008ca8 <calculate_checksum>
80008dae:	28 82       	st.b [%a15]8,%d2
80008db0:	00 90       	ret 

80008db2 <sendSensorPacket>:
    g_AsclinStm.count = ACTUATOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void sendSensorPacket(const struct SensorPacket* packet)
{
80008db2:	20 10       	sub.a %sp,16
80008db4:	40 4c       	mov.aa %a12,%a4
    EnableAllInterrupts();
80008db6:	6d 00 ed 05 	call 80009990 <EnableAllInterrupts>
    uint8 buf[SENSOR_PACKET_SIZE]={};
80008dba:	d9 af 07 00 	lea %a15,[%sp]7
80008dbe:	40 f2       	mov.aa %a2,%a15
    serialize_sensor_packet(packet,buf);
80008dc0:	40 c4       	mov.aa %a4,%a12
80008dc2:	40 f5       	mov.aa %a5,%a15
}

void sendSensorPacket(const struct SensorPacket* packet)
{
    EnableAllInterrupts();
    uint8 buf[SENSOR_PACKET_SIZE]={};
80008dc4:	82 0f       	mov %d15,0
80008dc6:	a0 83       	mov.a %a3,8
80008dc8:	24 2f       	st.b [%a2+],%d15
80008dca:	fc 3f       	loop %a3,80008dc8 <sendSensorPacket+0x16>
    serialize_sensor_packet(packet,buf);
80008dcc:	6d ff e6 ff 	call 80008d98 <serialize_sensor_packet>
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
80008dd0:	91 00 00 27 	movh.a %a2,28672
80008dd4:	da 09       	mov %d15,9
80008dd6:	d9 22 ec 10 	lea %a2,[%a2]3180 <70000c6c <g_AsclinStm>>
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
80008dda:	91 00 00 47 	movh.a %a4,28672
80008dde:	91 00 00 67 	movh.a %a6,28672
80008de2:	82 f4       	mov %d4,-1
void sendSensorPacket(const struct SensorPacket* packet)
{
    EnableAllInterrupts();
    uint8 buf[SENSOR_PACKET_SIZE]={};
    serialize_sensor_packet(packet,buf);
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
80008de4:	f9 2f 30 90 	st.h [%a2]624 <70000270 <__malloc_av_+0x150>>,%d15
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
80008de8:	d9 44 c0 b0 	lea %a4,[%a4]3776 <70000ec0 <g_AsclinStm+0x254>>
80008dec:	40 f5       	mov.aa %a5,%a15
80008dee:	d9 66 dc b0 	lea %a6,[%a6]3804 <70000edc <g_AsclinStm+0x270>>
80008df2:	9b 04 00 58 	addih %d5,%d4,32768
80008df6:	1d ff 67 e5 	j 800058c4 <IfxAsclin_Asc_write>

80008dfa <deserialize_sensor_packet>:
    buffer[SENSOR_PACKET_SIZE - 1] = calculate_checksum(buffer, SENSOR_PACKET_SIZE - 1);
}

/* Deserialize buffer into SensorPacket */
void deserialize_sensor_packet(const uint8* buffer, struct SensorPacket* packet) {
    memcpy(packet, buffer, SENSOR_PACKET_SIZE);
80008dfa:	a0 8f       	mov.a %a15,8
80008dfc:	04 4f       	ld.bu %d15,[%a4+]
80008dfe:	24 5f       	st.b [%a5+],%d15
80008e00:	fc fe       	loop %a15,80008dfc <deserialize_sensor_packet+0x2>
80008e02:	00 90       	ret 

80008e04 <readSensorPacket>:
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
    }
    deserialize_actuator_packet(buffer,packet);
}

void readSensorPacket(struct SensorPacket* packet){
80008e04:	20 10       	sub.a %sp,16
    uint8 buffer[SENSOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = SENSOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<SENSOR_PACKET_SIZE) return;
80008e06:	91 00 00 d7 	movh.a %a13,28672
    }
    deserialize_actuator_packet(buffer,packet);
}

void readSensorPacket(struct SensorPacket* packet){
    uint8 buffer[SENSOR_PACKET_SIZE]={};
80008e0a:	d9 af 07 00 	lea %a15,[%sp]7
    uint8 pos = 0;
    uint8 sendCnt = SENSOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<SENSOR_PACKET_SIZE) return;
80008e0e:	d9 dd c0 b0 	lea %a13,[%a13]3776 <70000ec0 <g_AsclinStm+0x254>>
    }
    deserialize_actuator_packet(buffer,packet);
}

void readSensorPacket(struct SensorPacket* packet){
    uint8 buffer[SENSOR_PACKET_SIZE]={};
80008e12:	40 f2       	mov.aa %a2,%a15
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
    }
    deserialize_actuator_packet(buffer,packet);
}

void readSensorPacket(struct SensorPacket* packet){
80008e14:	40 4c       	mov.aa %a12,%a4
    uint8 buffer[SENSOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = SENSOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<SENSOR_PACKET_SIZE) return;
80008e16:	40 d4       	mov.aa %a4,%a13
    }
    deserialize_actuator_packet(buffer,packet);
}

void readSensorPacket(struct SensorPacket* packet){
    uint8 buffer[SENSOR_PACKET_SIZE]={};
80008e18:	82 0f       	mov %d15,0
80008e1a:	a0 83       	mov.a %a3,8
80008e1c:	24 2f       	st.b [%a2+],%d15
80008e1e:	fc 3f       	loop %a3,80008e1c <readSensorPacket+0x18>
    uint8 pos = 0;
    uint8 sendCnt = SENSOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<SENSOR_PACKET_SIZE) return;
80008e20:	6d ff 8c e1 	call 80005138 <IfxAsclin_Asc_getReadCount>
80008e24:	8b 92 40 22 	lt %d2,%d2,9
80008e28:	df 02 11 80 	jne %d2,0,80008e4a <readSensorPacket+0x46>
80008e2c:	82 0f       	mov %d15,0
    while (sendCnt--)
    {
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
80008e2e:	40 d4       	mov.aa %a4,%a13
80008e30:	6d ff ea e2 	call 80005404 <IfxAsclin_Asc_blockingRead>
80008e34:	10 f2       	addsc.a %a2,%a15,%d15,0
80008e36:	c2 1f       	add %d15,1
80008e38:	34 22       	st.b [%a2],%d2
void readSensorPacket(struct SensorPacket* packet){
    uint8 buffer[SENSOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = SENSOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<SENSOR_PACKET_SIZE) return;
    while (sendCnt--)
80008e3a:	8b 9f 20 22 	ne %d2,%d15,9
80008e3e:	df 02 f8 ff 	jne %d2,0,80008e2e <readSensorPacket+0x2a>
    {
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
    }
    deserialize_sensor_packet(buffer,packet);
80008e42:	40 f4       	mov.aa %a4,%a15
80008e44:	40 c5       	mov.aa %a5,%a12
80008e46:	6d ff da ff 	call 80008dfa <deserialize_sensor_packet>
80008e4a:	00 90       	ret 

80008e4c <initUltrasonic>:
    .ECHO_PIN = 3
};

void initUltrasonic (struct Ultrasonic* ultrasonic)
{
    IfxPort_setPinModeOutput(ultrasonic->TRIG_PORT,ultrasonic->TRIG_PIN, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
80008e4c:	0c 41       	ld.bu %d15,[%a4]1
80008e4e:	14 43       	ld.bu %d3,[%a4]
80008e50:	8f 8f 00 f0 	sh %d15,%d15,8
80008e54:	0f 3f a0 20 	or %d2,%d15,%d3
80008e58:	0c 42       	ld.bu %d15,[%a4]2
    .ECHO_PORT = &MODULE_P10,
    .ECHO_PIN = 3
};

void initUltrasonic (struct Ultrasonic* ultrasonic)
{
80008e5a:	40 4f       	mov.aa %a15,%a4
    IfxPort_setPinModeOutput(ultrasonic->TRIG_PORT,ultrasonic->TRIG_PIN, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
80008e5c:	8f 0f 01 f0 	sh %d15,%d15,16
80008e60:	a6 2f       	or %d15,%d2
80008e62:	39 42 03 00 	ld.bu %d2,[%a4]3
80008e66:	08 44       	ld.bu %d4,[%a15]4
80008e68:	8f 82 01 20 	sh %d2,%d2,24
80008e6c:	a6 f2       	or %d2,%d15
80008e6e:	60 24       	mov.a %a4,%d2
80008e70:	3b 00 08 50 	mov %d5,128
80008e74:	6d ff 35 e7 	call 80005cde <IfxPort_setPinMode>
    IfxPort_setPinModeInput(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN, IfxPort_InputMode_pullDown);
80008e78:	0c f6       	ld.bu %d15,[%a15]6
80008e7a:	08 53       	ld.bu %d3,[%a15]5
80008e7c:	8f 8f 00 f0 	sh %d15,%d15,8
80008e80:	0f 3f a0 20 	or %d2,%d15,%d3
80008e84:	0c f7       	ld.bu %d15,[%a15]7
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
80008e86:	08 94       	ld.bu %d4,[%a15]9
80008e88:	8f 0f 01 f0 	sh %d15,%d15,16
80008e8c:	a6 2f       	or %d15,%d2
80008e8e:	08 82       	ld.bu %d2,[%a15]8
80008e90:	3b 80 00 50 	mov %d5,8
80008e94:	8f 82 01 20 	sh %d2,%d2,24
80008e98:	a6 f2       	or %d2,%d15
80008e9a:	60 24       	mov.a %a4,%d2
80008e9c:	1d ff 21 e7 	j 80005cde <IfxPort_setPinMode>

80008ea0 <sendTrigger>:
    return distanceCm;
}

void sendTrigger(struct Ultrasonic* ultrasonic)
{
    IfxPort_setPinHigh(ultrasonic->TRIG_PORT,ultrasonic->TRIG_PIN);
80008ea0:	0c 41       	ld.bu %d15,[%a4]1
80008ea2:	14 43       	ld.bu %d3,[%a4]
80008ea4:	8f 8f 00 f0 	sh %d15,%d15,8
80008ea8:	0f 3f a0 20 	or %d2,%d15,%d3
80008eac:	0c 42       	ld.bu %d15,[%a4]2
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
80008eae:	39 43 04 00 	ld.bu %d3,[%a4]4
80008eb2:	8f 0f 01 f0 	sh %d15,%d15,16
80008eb6:	a6 2f       	or %d15,%d2
80008eb8:	39 42 03 00 	ld.bu %d2,[%a4]3
    delay_us(10);
80008ebc:	3b a0 00 40 	mov %d4,10
    return distanceCm;
}

void sendTrigger(struct Ultrasonic* ultrasonic)
{
    IfxPort_setPinHigh(ultrasonic->TRIG_PORT,ultrasonic->TRIG_PIN);
80008ec0:	8f 82 01 20 	sh %d2,%d2,24
80008ec4:	a6 f2       	or %d2,%d15
80008ec6:	60 22       	mov.a %a2,%d2
80008ec8:	82 1f       	mov %d15,1
80008eca:	0f 3f 00 30 	sh %d3,%d15,%d3
80008ece:	59 23 04 00 	st.w [%a2]4,%d3
    int distanceCm = calculateDistanceCm(echoTicks);
    return distanceCm;
}

void sendTrigger(struct Ultrasonic* ultrasonic)
{
80008ed2:	40 4f       	mov.aa %a15,%a4
    IfxPort_setPinHigh(ultrasonic->TRIG_PORT,ultrasonic->TRIG_PIN);
    delay_us(10);
80008ed4:	6d ff 61 da 	call 80004396 <delay_us>
    IfxPort_setPinLow(ultrasonic->TRIG_PORT,ultrasonic->TRIG_PIN);
80008ed8:	0c f1       	ld.bu %d15,[%a15]1
80008eda:	08 03       	ld.bu %d3,[%a15]0
80008edc:	8f 8f 00 f0 	sh %d15,%d15,8
80008ee0:	0f 3f a0 20 	or %d2,%d15,%d3
80008ee4:	0c f2       	ld.bu %d15,[%a15]2
80008ee6:	7b 10 00 30 	movh %d3,1
80008eea:	8f 0f 01 f0 	sh %d15,%d15,16
80008eee:	a6 2f       	or %d15,%d2
80008ef0:	08 32       	ld.bu %d2,[%a15]3
80008ef2:	8f 82 01 20 	sh %d2,%d2,24
80008ef6:	a6 f2       	or %d2,%d15
80008ef8:	0c f4       	ld.bu %d15,[%a15]4
80008efa:	60 22       	mov.a %a2,%d2
80008efc:	0f f3 00 30 	sh %d3,%d3,%d15
80008f00:	59 23 04 00 	st.w [%a2]4,%d3
80008f04:	00 90       	ret 

80008f06 <measureEchoTick>:

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008f06:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008f0a:	85 f8 2c 00 	ld.w %d8,f000002c <_SMALL_DATA4_+0x3fff802c>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008f0e:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008f12:	8f 0f 40 41 	or %d4,%d15,0

long measureEchoTick(struct Ultrasonic* ultrasonic)
{
    uint64 startTick = 0, elapsedTick = 0;
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN) == 0){
80008f16:	0c 46       	ld.bu %d15,[%a4]6
80008f18:	0f 38 a0 50 	or %d5,%d8,%d3
80008f1c:	39 43 05 00 	ld.bu %d3,[%a4]5
80008f20:	8f 8f 00 f0 	sh %d15,%d15,8
80008f24:	0f 3f a0 20 	or %d2,%d15,%d3
80008f28:	0c 47       	ld.bu %d15,[%a4]7
}


IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
{
    return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
80008f2a:	39 48 09 00 	ld.bu %d8,[%a4]9
80008f2e:	8f 0f 01 f0 	sh %d15,%d15,16
80008f32:	a6 2f       	or %d15,%d2
80008f34:	39 42 08 00 	ld.bu %d2,[%a4]8
80008f38:	82 19       	mov %d9,1
80008f3a:	8f 82 01 20 	sh %d2,%d2,24
80008f3e:	a6 f2       	or %d2,%d15
80008f40:	60 2f       	mov.a %a15,%d2
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008f42:	7b 40 07 a0 	movh %d10,116
    IfxPort_setPinLow(ultrasonic->TRIG_PORT,ultrasonic->TRIG_PIN);
}

long measureEchoTick(struct Ultrasonic* ultrasonic)
{
    uint64 startTick = 0, elapsedTick = 0;
80008f46:	d2 02       	mov %e2,0
80008f48:	0f 89 00 90 	sh %d9,%d9,%d8
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN) == 0){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008f4c:	1b 0a 78 af 	addi %d10,%d10,-2176
80008f50:	4c f9       	ld.w %d15,[%a15]36
80008f52:	26 9f       	and %d15,%d9

long measureEchoTick(struct Ultrasonic* ultrasonic)
{
    uint64 startTick = 0, elapsedTick = 0;
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN) == 0){
80008f54:	ee 16       	jnz %d15,80008f80 <measureEchoTick+0x7a>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008f56:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008f5a:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008f5e:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
80008f62:	8f 0f 40 01 	or %d0,%d15,0
80008f66:	0f 32 a0 10 	or %d1,%d2,%d3
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
80008f6a:	0b 40 c0 20 	subx %d2,%d0,%d4
80008f6e:	0b 51 d0 30 	subc %d3,%d1,%d5
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008f72:	ba 03       	eq %d15,%d3,0
80008f74:	0b a2 50 f2 	and.ge.u %d15,%d2,%d10
80008f78:	8b 03 00 f5 	or.ne %d15,%d3,0
80008f7c:	6e ea       	jz %d15,80008f50 <measureEchoTick+0x4a>
80008f7e:	3c 29       	j 80008fd0 <measureEchoTick+0xca>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008f80:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008f84:	85 f9 2c 00 	ld.w %d9,f000002c <_SMALL_DATA4_+0x3fff802c>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008f88:	53 1f 40 00 	mul.u %e0,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008f8c:	8f 0f 40 41 	or %d4,%d15,0
    };
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN) == 1){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008f90:	7b 40 07 00 	movh %d0,116
80008f94:	0f 19 a0 50 	or %d5,%d9,%d1
80008f98:	1b 00 78 0f 	addi %d0,%d0,-2176
80008f9c:	4c f9       	ld.w %d15,[%a15]36
    while (IfxPort_getPinState(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN) == 0){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
    };
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN) == 1){
80008f9e:	57 0f 61 f8 	extr.u %d15,%d15,%d8,1
80008fa2:	de 16       	jne %d15,1,80008fce <measureEchoTick+0xc8>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008fa4:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008fa8:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008fac:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
80008fb0:	8f 0f 40 61 	or %d6,%d15,0
80008fb4:	0f 32 a0 70 	or %d7,%d2,%d3
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
80008fb8:	0b 46 c0 20 	subx %d2,%d6,%d4
80008fbc:	0b 57 d0 30 	subc %d3,%d7,%d5
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008fc0:	ba 03       	eq %d15,%d3,0
80008fc2:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80008fc6:	8b 03 00 f5 	or.ne %d15,%d3,0
80008fca:	6e e9       	jz %d15,80008f9c <measureEchoTick+0x96>
80008fcc:	3c 02       	j 80008fd0 <measureEchoTick+0xca>
    };
    return (long)elapsedTick;
80008fce:	00 90       	ret 
{
    uint64 startTick = 0, elapsedTick = 0;
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN) == 0){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008fd0:	82 f2       	mov %d2,-1
    while (IfxPort_getPinState(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN) == 1){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
    };
    return (long)elapsedTick;
}
80008fd2:	00 90       	ret 

80008fd4 <getUltrasonic>:
{
    IfxPort_setPinModeOutput(ultrasonic->TRIG_PORT,ultrasonic->TRIG_PIN, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeInput(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN, IfxPort_InputMode_pullDown);
}

int getUltrasonic(struct Ultrasonic* ultrasonic){
80008fd4:	40 4f       	mov.aa %a15,%a4
    sendTrigger(ultrasonic);
80008fd6:	6d ff 65 ff 	call 80008ea0 <sendTrigger>
    long echoTicks = measureEchoTick(ultrasonic);
80008fda:	40 f4       	mov.aa %a4,%a15
80008fdc:	6d ff 95 ff 	call 80008f06 <measureEchoTick>
80008fe0:	02 2f       	mov %d15,%d2
    if(echoTicks==-1)return -1;
80008fe2:	82 f2       	mov %d2,-1
80008fe4:	1e fb       	jeq %d15,-1,80008ffa <getUltrasonic+0x26>
    return (long)elapsedTick;
}

int calculateDistanceCm(long elapsedTicks)
{
    long timeUs = elapsedTicks / 200;
80008fe6:	3b 80 0c 20 	mov %d2,200
80008fea:	4b 2f 01 22 	div %e2,%d15,%d2
    long distanceCm = timeUs * 34 / 1000 / 2;
80008fee:	3b 80 3e f0 	mov %d15,1000
80008ff2:	53 12 21 20 	mul %d2,%d2,17
80008ff6:	4b f2 01 22 	div %e2,%d2,%d15
    sendTrigger(ultrasonic);
    long echoTicks = measureEchoTick(ultrasonic);
    if(echoTicks==-1)return -1;
    int distanceCm = calculateDistanceCm(echoTicks);
    return distanceCm;
}
80008ffa:	00 90       	ret 

80008ffc <calculateDistanceCm>:
    return (long)elapsedTick;
}

int calculateDistanceCm(long elapsedTicks)
{
    long timeUs = elapsedTicks / 200;
80008ffc:	3b 80 0c 20 	mov %d2,200
80009000:	4b 24 01 42 	div %e4,%d4,%d2
    long distanceCm = timeUs * 34 / 1000 / 2;
80009004:	3b 80 3e 20 	mov %d2,1000
80009008:	53 14 21 40 	mul %d4,%d4,17
8000900c:	4b 24 01 22 	div %e2,%d4,%d2
    return (int) distanceCm;
}
80009010:	00 90       	ret 

80009012 <osEE_tc_core0_start>:
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80009012:	91 30 00 2f 	movh.a %a2,61443
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80009016:	91 30 00 ff 	movh.a %a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
8000901a:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
8000901e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80009022:	54 25       	ld.w %d5,[%a2]
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80009024:	48 08       	ld.w %d8,[%a15]0
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80009026:	37 05 6e 51 	extr.u %d5,%d5,2,14
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
8000902a:	37 08 6e 81 	extr.u %d8,%d8,2,14
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000902e:	91 20 00 f7 	movh.a %a15,28674
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80009032:	8f f5 83 51 	xor %d5,%d5,63
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80009036:	8f f8 83 81 	xor %d8,%d8,63
8000903a:	d9 ff 40 89 	lea %a15,[%a15]-27136 <70019600 <__USTACK0>>
8000903e:	40 fa       	mov.aa %sp,%a15
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
80009040:	0d 00 80 04 	dsync 
  osEE_tc_dsync();

/* Set the PSW to its reset value in case of a warm start, set PSW.IS.
   Global Stack is needed since ERIKA's use the stack to save context for the
   current TASK */
  osEE_tc_set_csfr(OSEE_CSFR_PSW, OSEE_TC_START_PSW);
80009044:	3b 00 b8 f0 	mov %d15,2944
80009048:	cd 4f e0 0f 	mtcr $psw,%d15
8000904c:	0d 00 c0 04 	isync 

/* Set the PCXS and PCXO to its reset value in case of a warm start */
  pcxi  = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80009050:	4d 00 e0 ff 	mfcr %d15,$pcxi
  pcxi &= 0xFFF00000U;
80009054:	b7 0f 14 f0 	insert %d15,%d15,0,0,20
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, pcxi);
80009058:	cd 0f e0 0f 	mtcr $pcxi,%d15
8000905c:	0d 00 c0 04 	isync 
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80009060:	4d c0 e1 ff 	mfcr %d15,$core_id
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80009064:	82 12       	mov %d2,1
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80009066:	37 0f 48 f0 	extr %d15,%d15,0,8
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
8000906a:	cd 42 20 09 	mtcr $pcon1,%d2
8000906e:	0d 00 c0 04 	isync 
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80009072:	53 cf 20 f0 	mul %d15,%d15,12
80009076:	10 22       	addsc.a %a2,%a2,%d15,0
80009078:	54 22       	ld.w %d2,[%a2]
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
8000907a:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
8000907c:	37 02 6e 21 	extr.u %d2,%d2,2,14
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80009080:	d9 2f 00 46 	lea %a15,[%a2]24832
80009084:	11 3f 00 ff 	addih.a %a15,%a15,61443

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80009088:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
8000908a:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000908e:	2e 16       	jz.t %d15,1,8000909a <osEE_tc_core0_start+0x88>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009090:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009094:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80009098:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
8000909a:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
8000909e:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800090a2:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
800090a4:	4c f0       	ld.w %d15,[%a15]0
800090a6:	6f 0f ff ff 	jnz.t %d15,0,800090a4 <osEE_tc_core0_start+0x92>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* PCACHE enable steps */
/* Step 2: Set PCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_PCON0, pcon0);
800090aa:	82 0f       	mov %d15,0
800090ac:	cd cf 20 09 	mtcr $pcon0,%d15
800090b0:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800090b4:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800090b6:	2e 16       	jz.t %d15,1,800090c2 <osEE_tc_core0_start+0xb0>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800090b8:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800090bc:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800090c0:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
800090c2:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
800090c6:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800090ca:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
800090cc:	4c f0       	ld.w %d15,[%a15]0
800090ce:	6f 0f ff 7f 	jz.t %d15,0,800090cc <osEE_tc_core0_start+0xba>
800090d2:	4d c0 e1 ff 	mfcr %d15,$core_id
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
800090d6:	37 0f 48 f0 	extr %d15,%d15,0,8
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
800090da:	91 30 00 ff 	movh.a %a15,61443
800090de:	53 cf 20 f0 	mul %d15,%d15,12
800090e2:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800090e6:	10 ff       	addsc.a %a15,%a15,%d15,0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
800090e8:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
800090ea:	48 02       	ld.w %d2,[%a15]0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
800090ec:	d9 2f 00 46 	lea %a15,[%a2]24832
800090f0:	11 3f 00 ff 	addih.a %a15,%a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
800090f4:	37 02 6e 21 	extr.u %d2,%d2,2,14
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800090f8:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
800090fa:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800090fe:	2e 16       	jz.t %d15,1,8000910a <osEE_tc_core0_start+0xf8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009100:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009104:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80009108:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
8000910a:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
8000910e:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80009112:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80009114:	4c f0       	ld.w %d15,[%a15]0
80009116:	6f 0f ff ff 	jnz.t %d15,0,80009114 <osEE_tc_core0_start+0x102>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* DCACHE enable steps */
/* Step 2: Set DCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_DCON0, dcon0);
8000911a:	82 0f       	mov %d15,0
8000911c:	cd 0f 04 09 	mtcr $dcon0,%d15
80009120:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80009124:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80009126:	2e 16       	jz.t %d15,1,80009132 <osEE_tc_core0_start+0x120>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009128:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
8000912c:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80009130:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80009132:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80009136:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
8000913a:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
8000913c:	4c f0       	ld.w %d15,[%a15]0
8000913e:	6f 0f ff 7f 	jz.t %d15,0,8000913c <osEE_tc_core0_start+0x12a>
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80009142:	91 30 00 ff 	movh.a %a15,61443
80009146:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000914a:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000914c:	2e 16       	jz.t %d15,1,80009158 <osEE_tc_core0_start+0x146>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
8000914e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009152:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80009156:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80009158:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
8000915c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80009160:	91 30 00 ff 	movh.a %a15,61443
80009164:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009168:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
8000916a:	4c f0       	ld.w %d15,[%a15]0
8000916c:	91 30 00 2f 	movh.a %a2,61443
80009170:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009174:	6f 0f fb ff 	jnz.t %d15,0,8000916a <osEE_tc_core0_start+0x158>

/* Clear the ENDINIT bit in the WDT_CON0 register */
  osEE_tc_clear_cpu_endinit(0U, cpu_wdt_pw);

/* Load Base Address of Trap Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BTV, (OsEE_reg)__TRAPTAB0);
80009178:	7b 00 00 f8 	movh %d15,32768
8000917c:	1b 0f 20 f1 	addi %d15,%d15,4608
80009180:	cd 4f e2 0f 	mtcr $btv,%d15
80009184:	0d 00 c0 04 	isync 

/* Load Base Address of Interrupt Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BIV, (OsEE_reg)__INTTAB0);
80009188:	7b 00 00 f8 	movh %d15,32768
8000918c:	1b 0f 00 f2 	addi %d15,%d15,8192
80009190:	cd 0f e2 0f 	mtcr $biv,%d15
80009194:	0d 00 c0 04 	isync 

/* Load Interrupt Stack Pointer. (Not Used) */
  osEE_tc_set_csfr(OSEE_CSFR_ISP, (OsEE_reg)__ISTACK0);
80009198:	7b 20 00 f7 	movh %d15,28674
8000919c:	1b 0f b0 f9 	addi %d15,%d15,-25856
800091a0:	cd 8f e2 0f 	mtcr $isp,%d15
800091a4:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800091a8:	4c 20       	ld.w %d15,[%a2]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800091aa:	2e 16       	jz.t %d15,1,800091b6 <osEE_tc_core0_start+0x1a4>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800091ac:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800091b0:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800091b4:	6c 20       	st.w [%a2]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
800091b6:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
800091ba:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800091be:	91 30 00 ff 	movh.a %a15,61443
800091c2:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800091c6:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
800091c8:	4c f0       	ld.w %d15,[%a15]0
800091ca:	6f 0f ff 7f 	jz.t %d15,0,800091c8 <osEE_tc_core0_start+0x1b6>

/* Set the ENDINIT bit in the WDT_CON0 register back */
  osEE_tc_set_cpu_endinit(0U, cpu_wdt_pw);

/* Initialize SDA base pointers */
  osEE_tc_setareg(a0, _SMALL_DATA_);
800091ce:	91 10 00 f7 	movh.a %a15,28673
800091d2:	d9 ff 00 08 	lea %a15,[%a15]-32768 <70008000 <_SMALL_DATA_>>
800091d6:	40 f0       	mov.aa %a0,%a15
  osEE_tc_setareg(a1, _SMALL_DATA2_);
800091d8:	91 10 00 f8 	movh.a %a15,32769
800091dc:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
800091e0:	40 f1       	mov.aa %a1,%a15

/* Initialization of A8 and A9 */
  osEE_tc_setareg(a8, _SMALL_DATA3_);
800091e2:	91 10 00 f8 	movh.a %a15,32769
800091e6:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
800091ea:	40 f8       	mov.aa %a8,%a15
#if (defined(OSEE_SINGLECORE)) || (defined(OSEE_TC_DISABLE_A9_OPTIMIZATION))
  osEE_tc_setareg(a9, _SMALL_DATA4_);
800091ec:	91 10 00 fb 	movh.a %a15,45057
800091f0:	d9 ff 00 08 	lea %a15,[%a15]-32768 <b0008000 <_SMALL_DATA4_>>
800091f4:	40 f9       	mov.aa %a9,%a15
/* Nr of CSAs in area. Best solution, even though is a MISRA deviation, since
   pointers subtraction handles OsEE_csa size and p_csa_end/p_csa_begin
   are the extremes of an array constructed in linker script
   (condition under where C language specification allows pointer subtraction).
 */
  size_t const no_of_csas = (size_t)(p_csa_end - p_csa_begin);
800091f6:	7b 20 00 f7 	movh %d15,28674
800091fa:	7b 20 00 47 	movh %d4,28674
800091fe:	1b 0f c0 69 	addi %d6,%d15,-25600
80009202:	1b 04 c0 4b 	addi %d4,%d4,-17408
80009206:	a2 64       	sub %d4,%d6
80009208:	86 a4       	sha %d4,-6

/* Previous Context Pointer (CSA Link Word) */
  OsEE_reg pcxi_val = 0U;
8000920a:	82 02       	mov %d2,0
/*
  IMPORTANT:
  I initialize the Free Context List in reverse order.
  So I will end with a list that will grow toward bigger addresses.
 */
  for (i = no_of_csas; i > 0U; --i) {
8000920c:	df 04 16 00 	jeq %d4,0,80009238 <osEE_tc_core0_start+0x226>
/* CSA PCXI segment */
    OsEE_reg   pcxi_s;
/* CSA PCXI offset */
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];
80009210:	9a f4       	add %d15,%d4,-1
80009212:	06 6f       	sh %d15,6
80009214:	12 63       	add %d3,%d15,%d6

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80009216:	60 3f       	mov.a %a15,%d3
80009218:	82 00       	mov %d0,0
8000921a:	68 00       	st.w [%a15]0,%d0
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
8000921c:	60 4f       	mov.a %a15,%d4
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
8000921e:	8f 43 1e 20 	sh %d2,%d3,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80009222:	37 03 70 73 	extr.u %d7,%d3,6,16
80009226:	1b 0f fc ff 	addi %d15,%d15,-64

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
8000922a:	b0 ff       	add.a %a15,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
8000922c:	37 27 10 28 	insert %d2,%d7,%d2,16,16
80009230:	42 6f       	add %d15,%d6

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80009232:	82 53       	mov %d3,5
80009234:	fd f0 11 01 	loop %a15,80009456 <osEE_tc_core0_start+0x444>
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
    }
  }
/* Initialize the HEAD of Free Context List */
  osEE_tc_set_csfr(OSEE_CSFR_FCX, pcxi_val);
80009238:	cd 82 e3 0f 	mtcr $fcx,%d2
8000923c:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80009240:	91 30 00 ff 	movh.a %a15,61443
80009244:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009248:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000924a:	2e 16       	jz.t %d15,1,80009256 <osEE_tc_core0_start+0x244>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
8000924c:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009250:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80009254:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80009256:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
8000925a:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
8000925e:	91 30 00 ff 	movh.a %a15,61443
80009262:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009266:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80009268:	40 f2       	mov.aa %a2,%a15
8000926a:	4c 20       	ld.w %d15,[%a2]0
8000926c:	91 30 00 ff 	movh.a %a15,61443
80009270:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009274:	6f 0f fb ff 	jnz.t %d15,0,8000926a <osEE_tc_core0_start+0x258>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_cpu_wdt(OsEE_reg core_index, uint16_t pw)
{
  osEE_tc_clear_cpu_endinit(core_index, pw);
/* Set "Disable Request bit" on CPU_WDT[core_index].CON1 */
  OSEE_TC_SCU_WDTCPU[core_index].con1.bits.dr = 1U;
80009278:	4c f1       	ld.w %d15,[%a15]4
8000927a:	96 08       	or %d15,8
8000927c:	68 1f       	st.w [%a15]4,%d15
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
8000927e:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80009280:	2e 16       	jz.t %d15,1,8000928c <osEE_tc_core0_start+0x27a>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009282:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009286:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
8000928a:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
8000928c:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80009290:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80009294:	91 30 00 ff 	movh.a %a15,61443
80009298:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000929c:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
8000929e:	4c f0       	ld.w %d15,[%a15]0
800092a0:	6f 0f ff 7f 	jz.t %d15,0,8000929e <osEE_tc_core0_start+0x28c>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800092a4:	91 30 00 ff 	movh.a %a15,61443
800092a8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800092ac:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800092ae:	2e 16       	jz.t %d15,1,800092ba <osEE_tc_core0_start+0x2a8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800092b0:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800092b4:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800092b8:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
800092ba:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
800092be:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
800092c2:	91 30 00 ff 	movh.a %a15,61443
800092c6:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800092ca:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
800092cc:	40 f2       	mov.aa %a2,%a15
800092ce:	4c 20       	ld.w %d15,[%a2]0
800092d0:	91 30 00 ff 	movh.a %a15,61443
800092d4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800092d8:	6f 0f fb ff 	jnz.t %d15,0,800092ce <osEE_tc_core0_start+0x2bc>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_safety_wdt(uint16_t pw)
{
  osEE_tc_clear_safety_endinit(pw);
/* Set "Disable Request bit" on CPU_WDTS.CON1 */
  OSEE_TC_SCU_WDTS.con1.bits.dr = 1U;
800092dc:	4c f1       	ld.w %d15,[%a15]4
800092de:	96 08       	or %d15,8
800092e0:	68 1f       	st.w [%a15]4,%d15
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800092e2:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800092e4:	2e 16       	jz.t %d15,1,800092f0 <osEE_tc_core0_start+0x2de>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800092e6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800092ea:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800092ee:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
800092f0:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
800092f4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
800092f8:	91 30 00 ff 	movh.a %a15,61443
800092fc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80009300:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80009302:	4c f0       	ld.w %d15,[%a15]0
80009304:	6f 0f ff 7f 	jz.t %d15,0,80009302 <osEE_tc_core0_start+0x2f0>
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
80009308:	91 00 00 48 	movh.a %a4,32768
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
        *block_to_clear.p_ull = 0ULL;
8000930c:	d2 02       	mov %e2,0
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
8000930e:	d9 44 14 31 	lea %a4,[%a4]4308 <800010d4 <__clear_table>>
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
        *block_to_clear.p_ui = 0x0U;
80009312:	82 07       	mov %d7,0
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
        *block_to_clear.p_us = 0x0U;
80009314:	82 06       	mov %d6,0
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
        *block_to_clear.p_uc = 0x0U;
80009316:	82 05       	mov %d5,0

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
80009318:	4c 41       	ld.w %d15,[%a4]4
  while (p_clear_table != NULL) {
    OsEE_tc_init_table_entry_ptr  block_to_clear;
    MemSize                       table_entry_length;

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;
8000931a:	d4 43       	ld.a %a3,[%a4]

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
8000931c:	9e f6       	jeq %d15,-1,80009348 <osEE_tc_core0_start+0x336>
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
8000931e:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80009322:	76 49       	jz %d4,80009334 <osEE_tc_core0_start+0x322>
        *block_to_clear.p_ull = 0ULL;
80009324:	60 4f       	mov.a %a15,%d4
80009326:	40 32       	mov.aa %a2,%a3
80009328:	b0 ff       	add.a %a15,-1
8000932a:	89 22 48 01 	st.d [%a2+]8,%e2
8000932e:	fc fe       	loop %a15,8000932a <osEE_tc_core0_start+0x318>
80009330:	01 34 03 36 	addsc.a %a3,%a3,%d4,3
        ++block_to_clear.p_ull;
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
80009334:	2e 22       	jz.t %d15,2,80009338 <osEE_tc_core0_start+0x326>
        *block_to_clear.p_ui = 0x0U;
80009336:	64 37       	st.w [%a3+],%d7
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
80009338:	2e 12       	jz.t %d15,1,8000933c <osEE_tc_core0_start+0x32a>
        *block_to_clear.p_us = 0x0U;
8000933a:	a4 36       	st.h [%a3+],%d6
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
8000933c:	2e 02       	jz.t %d15,0,80009340 <osEE_tc_core0_start+0x32e>
        *block_to_clear.p_uc = 0x0U;
8000933e:	34 35       	st.b [%a3],%d5
      }

/* Prepare the table pointer for the next iteration */
      ++p_clear_table;
80009340:	d9 44 08 00 	lea %a4,[%a4]8 <80000008 <BootModeHeader0+0x8>>
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
  while (p_clear_table != NULL) {
80009344:	bd 04 ea ff 	jnz.a %a4,80009318 <osEE_tc_core0_start+0x306>
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
80009348:	91 00 00 68 	movh.a %a6,32768
8000934c:	d9 66 3c 41 	lea %a6,[%a6]4412 <8000113c <__copy_table>>

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
80009350:	4c 62       	ld.w %d15,[%a6]8
    OsEE_tc_init_table_entry_ptr  block_src;
    OsEE_tc_init_table_entry_ptr  block_dest;
    MemSize                       table_entry_length;

/* Get pointer to the data source block */
    block_src = p_copy_table->block_src;
80009352:	d4 65       	ld.a %a5,[%a6]

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;
80009354:	99 64 04 00 	ld.a %a4,[%a6]4 <80000004 <BootModeHeader0+0x4>>

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
80009358:	df ff 21 00 	jeq %d15,-1,8000939a <osEE_tc_core0_start+0x388>
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
8000935c:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80009360:	76 4f       	jz %d4,8000937e <osEE_tc_core0_start+0x36c>
80009362:	60 4f       	mov.a %a15,%d4
80009364:	40 43       	mov.aa %a3,%a4
80009366:	40 52       	mov.aa %a2,%a5
80009368:	b0 ff       	add.a %a15,-1
        *block_dest.p_ull = *block_src.p_ull;
8000936a:	09 22 48 01 	ld.d %e2,[%a2+]8
8000936e:	89 32 48 01 	st.d [%a3+]8,%e2
80009372:	fc fc       	loop %a15,8000936a <osEE_tc_core0_start+0x358>
80009374:	06 34       	sh %d4,3
80009376:	01 54 00 56 	addsc.a %a5,%a5,%d4,0
8000937a:	01 44 00 46 	addsc.a %a4,%a4,%d4,0
        ++block_dest.p_ull;
        --ull_cnt;
      }

/* Copy the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
8000937e:	2e 23       	jz.t %d15,2,80009384 <osEE_tc_core0_start+0x372>
        *block_dest.p_ui = *block_src.p_ui;
80009380:	44 52       	ld.w %d2,[%a5+]
80009382:	64 42       	st.w [%a4+],%d2
        ++block_src.p_ui;
        ++block_dest.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
80009384:	2e 14       	jz.t %d15,1,8000938c <osEE_tc_core0_start+0x37a>
        *block_dest.p_us = *block_src.p_us;
80009386:	09 52 c2 00 	ld.hu %d2,[%a5+]2
8000938a:	a4 42       	st.h [%a4+],%d2
        ++block_src.p_us;
        ++block_dest.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
8000938c:	2e 03       	jz.t %d15,0,80009392 <osEE_tc_core0_start+0x380>
        *block_dest.p_uc = *block_src.p_uc;
8000938e:	0c 50       	ld.bu %d15,[%a5]0
80009390:	2c 40       	st.b [%a4]0,%d15
      }

/* Prepare the table pointer for the next iteration */
      ++p_copy_table;
80009392:	d9 66 0c 00 	lea %a6,[%a6]12 <8000000c <BootModeHeader0+0xc>>
(
  const OsEE_tc_copy_table * p_copy_table_param
)
{
  const OsEE_tc_copy_table * p_copy_table = p_copy_table_param;
  while (p_copy_table != NULL) {
80009396:	bd 06 dd ff 	jnz.a %a6,80009350 <osEE_tc_core0_start+0x33e>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
8000939a:	91 30 00 ff 	movh.a %a15,61443
8000939e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800093a2:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800093a4:	2e 16       	jz.t %d15,1,800093b0 <osEE_tc_core0_start+0x39e>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800093a6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800093aa:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800093ae:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
800093b0:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
800093b4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
800093b8:	91 30 00 ff 	movh.a %a15,61443
800093bc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800093c0:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
800093c2:	4c f0       	ld.w %d15,[%a15]0
800093c4:	6f 0f ff ff 	jnz.t %d15,0,800093c2 <osEE_tc_core0_start+0x3b0>
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON8_OFF) = OSEE_TC_SCU_CCUCON8_INIT;
#endif /* OSEE_TC_SCU_CCUCON8_INIT */

/* BUS Divisors */
/* Configure CCUCON0 */
  OSEE_TC_SCU_CCUCON0.reg = OSEE_TC_SCU_CCUCON0_INIT;
800093c8:	7b 20 22 f1 	movh %d15,4642
800093cc:	91 30 00 ff 	movh.a %a15,61443
800093d0:	1b 1f 10 f0 	addi %d15,%d15,257
800093d4:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800093d8:	68 0f       	st.w [%a15]0,%d15
#if (defined(OSEE_TC_SCU_CCUCON5_INIT))
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON5_OFF) = OSEE_TC_SCU_CCUCON5_INIT;
#endif /* OSEE_TC_SCU_CCUCON5_INIT */
/* Configure CCUCON1 and Update CCU 0, 1 & 5. Forced INSEL to 1 even for
   external configuration, otherwise PLL initialization won't work. */
  OSEE_TC_SCU_CCUCON1.reg = OSEE_TC_SCU_CCUCON1_INIT |
800093da:	7b 00 00 f5 	movh %d15,20480
800093de:	91 30 00 ff 	movh.a %a15,61443
800093e2:	1b 0f 10 f1 	addi %d15,%d15,4352
800093e6:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800093ea:	68 0f       	st.w [%a15]0,%d15
{
  /*
   * Default System Oscillator Configuration
   * MODE:    0   -> External Crystal
   */
  OSEE_TC_SCU_OSCCON.reg = OSEE_TC_SCU_OSCCON_OSCRES |
800093ec:	7b 70 00 f0 	movh %d15,7
800093f0:	91 30 00 ff 	movh.a %a15,61443
800093f4:	1b cf 01 f0 	addi %d15,%d15,28
800093f8:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
800093fc:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_OSCCON_GAINSEL | OSEE_TC_SCU_OSCCON_MODE(0U) |
    OSEE_TC_SCU_OSCCON_OSCVAL((OSEE_TC_BOARD_FOSC / 2500000U) - 1U);

  while (OSEE_TC_SCU_OSCCON.bits.plllv == 0U) {
800093fe:	4c f0       	ld.w %d15,[%a15]0
80009400:	6f 1f ff 7f 	jz.t %d15,1,800093fe <osEE_tc_core0_start+0x3ec>
    ; /* Oscillator not too low */
  }

  while (OSEE_TC_SCU_OSCCON.bits.pllhv == 0U) {
80009404:	91 30 00 ff 	movh.a %a15,61443
80009408:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
8000940c:	4c f0       	ld.w %d15,[%a15]0
8000940e:	6f 8f ff 7f 	jz.t %d15,8,8000940c <osEE_tc_core0_start+0x3fa>
/*===================== Configure CCU Clock Control =========================*/
  osEE_tc_conf_clock_ctrl();
/*===================== Configure Oscillator Control ========================*/
  osEE_tc_conf_osc_ctrl();
/*============================ Configure PLL ================================*/
  osEE_tc_set_pll_fsource(OSEE_CPU_CLOCK);
80009412:	7b c0 be 40 	movh %d4,3052
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80009416:	91 30 00 ff 	movh.a %a15,61443
8000941a:	1b 04 20 4c 	addi %d4,%d4,-15872
8000941e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80009422:	6d 00 58 00 	call 800094d2 <osEE_tc_set_pll_fsource>
80009426:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80009428:	2e 16       	jz.t %d15,1,80009434 <osEE_tc_core0_start+0x422>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
8000942a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
8000942e:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80009432:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
80009434:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
80009438:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
8000943c:	91 30 00 ff 	movh.a %a15,61443
80009440:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80009444:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80009446:	4c f0       	ld.w %d15,[%a15]0
80009448:	6f 0f ff 7f 	jz.t %d15,0,80009446 <osEE_tc_core0_start+0x434>
  osEE_tc_set_safety_endinit(safety_wdt_pw);
#endif /* OSEE_CPU_CLOCK */
#endif /* !OSEE_BYPASS_CLOCK_CONFIGURATION */
#endif /* !OSEE_TRICORE_ILLD && !OSEE_TC_2G */

  OSEE_EXIT(main());
8000944c:	6d ff 2e d9 	call 800046a8 <main>
80009450:	02 24       	mov %d4,%d2
80009452:	6d 00 ff 27 	call 8000e450 <_exit>
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80009456:	60 f2       	mov.a %a2,%d15
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80009458:	8f 4f 1e 40 	sh %d4,%d15,-28
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
8000945c:	74 22       	st.w [%a2],%d2
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
8000945e:	c2 f3       	add %d3,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80009460:	37 0f 70 23 	extr.u %d2,%d15,6,16
80009464:	37 42 10 28 	insert %d2,%d2,%d4,16,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
    if (fcd_needed_csa == 0U) {
80009468:	76 36       	jz %d3,80009474 <osEE_tc_core0_start+0x462>
8000946a:	1b 0f fc ff 	addi %d15,%d15,-64
8000946e:	fc f4       	loop %a15,80009456 <osEE_tc_core0_start+0x444>
80009470:	1d ff e4 fe 	j 80009238 <osEE_tc_core0_start+0x226>
/* After having stored the LCX, I would have to have a 32 bit wrap around to
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
80009474:	cd c2 e3 0f 	mtcr $lcx,%d2
80009478:	0d 00 c0 04 	isync 
8000947c:	3c f7       	j 8000946a <osEE_tc_core0_start+0x458>

8000947e <osEE_tc_stm_us_ticks>:
#if (defined(__TASKING__))
#define OS_STOP_SEC_GLOBAL_VAR_CLEARED
#include "Os_MemMap.h"
#endif /* __TASKING__ */

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
8000947e:	40 ae       	mov.aa %a14,%sp
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
80009480:	91 00 00 f7 	movh.a %a15,28672
80009484:	19 ff e0 b0 	ld.w %d15,[%a15]3808 <70000ee0 <osEE_tc_stm_freq_khz>>
80009488:	3b 80 3e 20 	mov %d2,1000
8000948c:	3f 2f 0c 80 	jlt.u %d15,%d2,800094a4 <osEE_tc_stm_us_ticks+0x26>
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
80009490:	7b 20 06 21 	movh %d2,4194
80009494:	1b 32 dd 24 	addi %d2,%d2,19923
80009498:	73 2f 68 20 	mul.u %e2,%d15,%d2
8000949c:	8f a3 1f 20 	sh %d2,%d3,-6
800094a0:	e2 42       	mul %d2,%d4
800094a2:	00 90       	ret 
  } else if (usec >= OSEE_KILO) {
800094a4:	02 25       	mov %d5,%d2
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
800094a6:	73 f4 0a 20 	mul %d2,%d4,%d15
800094aa:	7b 20 06 31 	movh %d3,4194
800094ae:	1b 33 dd 34 	addi %d3,%d3,19923
800094b2:	73 32 68 20 	mul.u %e2,%d2,%d3
800094b6:	8f a3 1f 20 	sh %d2,%d3,-6

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
  } else if (usec >= OSEE_KILO) {
800094ba:	3f 54 0b 80 	jlt.u %d4,%d5,800094d0 <osEE_tc_stm_us_ticks+0x52>
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
800094be:	7b 20 06 21 	movh %d2,4194
800094c2:	1b 32 dd 24 	addi %d2,%d2,19923
800094c6:	73 24 68 40 	mul.u %e4,%d4,%d2
800094ca:	8f a5 1f 20 	sh %d2,%d5,-6
800094ce:	e2 f2       	mul %d2,%d15
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
  }
  return ticks;
}
800094d0:	00 90       	ret 

800094d2 <osEE_tc_set_pll_fsource>:
#define OSEE_TC_K2_MIN      (1U)
#define OSEE_TC_N_MAX       (128U)  /* '7 bits */
#define OSEE_TC_N_MIN       (1U)
#define OSEE_TC_DEV_ALLOWED (2U)

void osEE_tc_set_pll_fsource(OsEE_reg fpll) {
800094d2:	40 ae       	mov.aa %a14,%sp
  fPllLeastError  = OSEE_TC_CLOCK_MAX;
  fPllError       = OSEE_TC_CLOCK_MAX;

  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
800094d4:	7b e0 e4 20 	movh %d2,3662
800094d8:	1b 12 c0 21 	addi %d2,%d2,7169
800094dc:	0b 24 30 f1 	lt.u %d15,%d4,%d2
800094e0:	82 22       	mov %d2,2
800094e2:	ab 12 80 ff 	sel %d15,%d15,%d2,1
800094e6:	60 f4       	mov.a %a4,%d15
800094e8:	53 ff 20 f0 	mul %d15,%d15,15
800094ec:	60 f5       	mov.a %a5,%d15
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
800094ee:	3b 00 01 e0 	mov %d14,16
800094f2:	82 03       	mov %d3,0
800094f4:	7b c0 be 20 	movh %d2,3052
800094f8:	1b 02 20 2c 	addi %d2,%d2,-15872
800094fc:	02 28       	mov %d8,%d2
800094fe:	82 01       	mov %d1,0
80009500:	82 0b       	mov %d11,0
80009502:	82 0d       	mov %d13,0
80009504:	82 0c       	mov %d12,0
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
80009506:	7b 10 13 a0 	movh %d10,305
8000950a:	1b 0a d0 a2 	addi %d10,%d10,11520

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
8000950e:	91 40 0f 60 	movh.a %a6,244
80009512:	d9 66 41 02 	lea %a6,[%a6]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
    {
      for (
80009516:	a0 1d       	mov.a %a13,1
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
80009518:	53 14 40 60 	mul.u %e6,%d4,1
8000951c:	60 62       	mov.a %a2,%d6
8000951e:	60 73       	mov.a %a3,%d7

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
80009520:	91 80 7d f1 	movh.a %a15,6104
80009524:	d9 ff 41 08 	lea %a15,[%a15]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
        {
          for (
80009528:	a0 1c       	mov.a %a12,1
8000952a:	3c 5e       	j 800095e6 <osEE_tc_set_pll_fsource+0x114>
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
8000952c:	4b ea 11 62 	div.u %e6,%d10,%d14
80009530:	82 07       	mov %d7,0

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
80009532:	7b 60 f8 ff 	movh %d15,65414
80009536:	1b 0f e0 fe 	addi %d15,%d15,-4608
8000953a:	0b f6 40 60 	addx %d6,%d6,%d15
8000953e:	8b f7 bf 50 	addc %d5,%d7,-1
80009542:	ba 05       	eq %d15,%d5,0
80009544:	80 67       	mov.d %d7,%a6
80009546:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
8000954a:	8b 05 00 f5 	or.ne %d15,%d5,0
8000954e:	ee 4a       	jnz %d15,800095e2 <osEE_tc_set_pll_fsource+0x110>
    {
      for (
80009550:	df 00 56 00 	jeq %d0,0,800095fc <osEE_tc_set_pll_fsource+0x12a>
80009554:	02 e9       	mov %d9,%d14
80009556:	80 d0       	mov.d %d0,%a13
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
80009558:	60 e7       	mov.a %a7,%d14
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
8000955a:	80 2f       	mov.d %d15,%a2
8000955c:	73 f0 68 60 	mul.u %e6,%d0,%d15
80009560:	80 3f       	mov.d %d15,%a3
80009562:	03 f0 0a 77 	madd %d7,%d7,%d0,%d15

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
80009566:	7b 80 82 fe 	movh %d15,59432
8000956a:	1b 0f c0 f7 	addi %d15,%d15,31744
8000956e:	0b f6 40 60 	addx %d6,%d6,%d15
80009572:	8b f7 bf 50 	addc %d5,%d7,-1
80009576:	ba 05       	eq %d15,%d5,0
80009578:	80 f7       	mov.d %d7,%a15
8000957a:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
8000957e:	8b 05 00 f5 	or.ne %d15,%d5,0
80009582:	ee 25       	jnz %d15,800095cc <osEE_tc_set_pll_fsource+0xfa>
        {
          for (
80009584:	0f 23 a0 f0 	or %d15,%d3,%d2
80009588:	6e 2d       	jz %d15,800095e2 <osEE_tc_set_pll_fsource+0x110>
8000958a:	80 c6       	mov.d %d6,%a12
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
8000958c:	4b 96 11 22 	div.u %e2,%d6,%d9
80009590:	02 2f       	mov %d15,%d2
80009592:	e2 af       	mul %d15,%d10
80009594:	a2 4f       	sub %d15,%d4
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
80009596:	53 1f 40 20 	mul.u %e2,%d15,1
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
8000959a:	df 0f ac 00 	jeq %d15,0,800096f2 <osEE_tc_set_pll_fsource+0x220>
              bestK2         = k2;
              bestN          = n;
              bestP          = p;
            }

            if (fPllLeastError > fPllError)
8000959e:	0b 13 00 51 	eq %d5,%d3,%d1
800095a2:	0b 8f 50 52 	and.ge.u %d5,%d15,%d8
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
800095a6:	2b f8 40 85 	sel %d8,%d5,%d8,%d15
800095aa:	ab 01 80 15 	sel %d1,%d5,%d1,0
800095ae:	2b eb 40 b5 	sel %d11,%d5,%d11,%d14
800095b2:	2b 6d 40 d5 	sel %d13,%d5,%d13,%d6
800095b6:	2b 0c 40 c5 	sel %d12,%d5,%d12,%d0
        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
800095ba:	c2 16       	add %d6,1
      {
        fVco = ((uint64_t)fpll) * k2;

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
800095bc:	8b 16 68 52 	lt.u %d5,%d6,129
800095c0:	8b 0f 20 54 	and.ne %d5,%d15,0
800095c4:	df 05 e4 ff 	jne %d5,0,8000958c <osEE_tc_set_pll_fsource+0xba>
800095c8:	02 d6       	mov %d6,%d13
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
800095ca:	02 6d       	mov %d13,%d6
    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
800095cc:	80 4f       	mov.d %d15,%a4
800095ce:	42 f0       	add %d0,%d15
800095d0:	80 56       	mov.d %d6,%a5
800095d2:	42 69       	add %d9,%d6

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
800095d4:	0f 32 a0 50 	or %d5,%d2,%d3
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
800095d8:	8b d0 61 f2 	lt.u %d15,%d0,29
800095dc:	8b 05 20 f4 	and.ne %d15,%d5,0
800095e0:	ee bd       	jnz %d15,8000955a <osEE_tc_set_pll_fsource+0x88>
800095e2:	01 45 20 50 	sub.a %a5,%a5,%a4
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
800095e6:	c2 fe       	add %d14,-1
    k2Steps = 1;
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
800095e8:	0f 32 a0 f0 	or %d15,%d2,%d3
800095ec:	8b 0f 20 02 	ne %d0,%d15,0
  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
  }

  for (
800095f0:	8b 0e 20 52 	ne %d5,%d14,0
800095f4:	8b 0f 20 54 	and.ne %d5,%d15,0
800095f8:	df 05 9a ff 	jne %d5,0,8000952c <osEE_tc_set_pll_fsource+0x5a>
      }
    }
  }

  /* Percent ALLOWED_DEVIATION error allowed */
  fpll_maxerrorallowed = (fpll * OSEE_TC_DEV_ALLOWED) / ((OsEE_reg)100U);
800095fc:	06 14       	sh %d4,1
800095fe:	7b c0 1e f5 	movh %d15,20972
80009602:	1b ff 51 f8 	addi %d15,%d15,-31457
80009606:	73 f4 68 40 	mul.u %e4,%d4,%d15
8000960a:	8f b5 1f 20 	sh %d2,%d5,-5
  if (fPllLeastError < (uint64_t)fpll_maxerrorallowed)
8000960e:	ba 01       	eq %d15,%d1,0
80009610:	0b 28 50 f2 	and.ge.u %d15,%d8,%d2
80009614:	8b 01 00 f5 	or.ne %d15,%d1,0
80009618:	ee 73       	jnz %d15,800096fe <osEE_tc_set_pll_fsource+0x22c>
  {
    /* Divide by K2DIV + 1 */
    OSEE_TC_SCU_PLLCON1.bits.k2div = (uint8_t)(bestK2 - 1U);
8000961a:	c2 fc       	add %d12,-1
8000961c:	91 30 00 ff 	movh.a %a15,61443
80009620:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009624:	4c f0       	ld.w %d15,[%a15]0
80009626:	37 cf 07 c0 	insert %d12,%d15,%d12,0,7
8000962a:	68 0c       	st.w [%a15]0,%d12

    while (OSEE_TC_SCU_PLLSTAT.bits.k2rdy == 0U) {
8000962c:	91 30 00 ff 	movh.a %a15,61443
80009630:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009634:	4c f0       	ld.w %d15,[%a15]0
80009636:	6f 5f ff 7f 	jz.t %d15,5,80009634 <osEE_tc_set_pll_fsource+0x162>
    }

    /* K1 divider default value */

    /* Enabled the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 1U;
8000963a:	91 30 00 ff 	movh.a %a15,61443
8000963e:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009642:	4c f0       	ld.w %d15,[%a15]0
80009644:	96 01       	or %d15,1
80009646:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 0U) {
80009648:	91 30 00 ff 	movh.a %a15,61443
8000964c:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009650:	4c f0       	ld.w %d15,[%a15]0
80009652:	6f 0f ff 7f 	jz.t %d15,0,80009650 <osEE_tc_set_pll_fsource+0x17e>
      ; /* Wait until prescaler mode is entered */
    }

    /* I will use n=80 and p=2. Because I can get al the
       needed values */
    OSEE_TC_SCU_PLLCON0.bits.pdiv = (uint8_t)(bestP - 1U);
80009656:	9a fb       	add %d15,%d11,-1
80009658:	91 30 00 ff 	movh.a %a15,61443
8000965c:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009660:	16 0f       	and %d15,15
80009662:	8f 8f 01 f0 	sh %d15,%d15,24
80009666:	48 02       	ld.w %d2,[%a15]0
80009668:	b7 02 04 2c 	insert %d2,%d2,0,24,4
8000966c:	a6 2f       	or %d15,%d2
8000966e:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_PLLCON0.bits.ndiv = (uint8_t)(bestN - 1U);
80009670:	9a fd       	add %d15,%d13,-1
80009672:	16 7f       	and %d15,127
80009674:	8f 9f 00 f0 	sh %d15,%d15,9
80009678:	48 02       	ld.w %d2,[%a15]0
8000967a:	b7 02 87 24 	insert %d2,%d2,0,9,7
8000967e:	a6 2f       	or %d15,%d2
80009680:	68 0f       	st.w [%a15]0,%d15

    /* Power down VCO Normal Behavior */
    OSEE_TC_SCU_PLLCON0.bits.vcopwd = 0U;
80009682:	4c f0       	ld.w %d15,[%a15]0
80009684:	8f 2f c0 f1 	andn %d15,%d15,2
80009688:	68 0f       	st.w [%a15]0,%d15

    /***** Configure PLL normal mode. *****/

    /* Automatic oscillator disconnect disabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 1U;
8000968a:	4c f0       	ld.w %d15,[%a15]0
8000968c:	96 40       	or %d15,64
8000968e:	68 0f       	st.w [%a15]0,%d15
    /* Connect VCO to the oscillator */
    OSEE_TC_SCU_PLLCON0.bits.clrfindis = 1U;
80009690:	4c f0       	ld.w %d15,[%a15]0
80009692:	96 20       	or %d15,32
80009694:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.findis == 1U) {
80009696:	91 30 00 ff 	movh.a %a15,61443
8000969a:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
8000969e:	4c f0       	ld.w %d15,[%a15]0
800096a0:	6f 3f ff ff 	jnz.t %d15,3,8000969e <osEE_tc_set_pll_fsource+0x1cc>
      ; /* Wait until oscillator is connected to the VCO */
    }

    /* Restart VCO lock detection */
    OSEE_TC_SCU_PLLCON0.bits.resld = 1U;
800096a4:	91 30 00 ff 	movh.a %a15,61443
800096a8:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800096ac:	4c f0       	ld.w %d15,[%a15]0
800096ae:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800096b2:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcolock == 0U) {
800096b4:	91 30 00 ff 	movh.a %a15,61443
800096b8:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800096bc:	4c f0       	ld.w %d15,[%a15]0
800096be:	6f 2f ff 7f 	jz.t %d15,2,800096bc <osEE_tc_set_pll_fsource+0x1ea>
      ; /* Wait until the VCO becomes locked */
    }

    /* Disable the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 0U;
800096c2:	91 30 00 ff 	movh.a %a15,61443
800096c6:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800096ca:	4c f0       	ld.w %d15,[%a15]0
800096cc:	8f 1f c0 f1 	andn %d15,%d15,1
800096d0:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 1U) {
800096d2:	91 30 00 ff 	movh.a %a15,61443
800096d6:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800096da:	4c f0       	ld.w %d15,[%a15]0
800096dc:	6f 0f ff ff 	jnz.t %d15,0,800096da <osEE_tc_set_pll_fsource+0x208>
      ; /* Wait until normal mode is entered */
    }

    /* Automatic oscillator disconnect enabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
800096e0:	91 30 00 ff 	movh.a %a15,61443
800096e4:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800096e8:	4c f0       	ld.w %d15,[%a15]0
800096ea:	8f 0f c4 f1 	andn %d15,%d15,64
800096ee:	68 0f       	st.w [%a15]0,%d15
800096f0:	00 90       	ret 
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
            {
              fPllLeastError = fPllError;
800096f2:	02 28       	mov %d8,%d2
800096f4:	02 31       	mov %d1,%d3
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
800096f6:	80 7b       	mov.d %d11,%a7
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
800096f8:	02 0c       	mov %d12,%d0
800096fa:	1d ff 68 ff 	j 800095ca <osEE_tc_set_pll_fsource+0xf8>
800096fe:	00 90       	ret 

80009700 <osEE_tc_get_fsource>:
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
  }

}

OsEE_reg osEE_tc_get_fsource(void) {
80009700:	40 ae       	mov.aa %a14,%sp
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
80009702:	91 30 00 ff 	movh.a %a15,61443
80009706:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000970a:	4c f0       	ld.w %d15,[%a15]0
8000970c:	37 0f 62 fe 	extr.u %d15,%d15,28,2
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
      }
    }
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
80009710:	7b 60 5f 20 	movh %d2,1526
80009714:	1b 02 10 2e 	addi %d2,%d2,-7936

OsEE_reg osEE_tc_get_fsource(void) {
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
80009718:	6e 45       	jz %d15,800097a2 <osEE_tc_get_fsource+0xa2>
    /* PLL */
    /* PLL dividers */
    OsEE_reg k1, k2, p, n;
    /* Prescaler mode */
    if (OSEE_TC_SCU_PLLSTAT.bits.vcobyst != 0U)
8000971a:	91 30 00 ff 	movh.a %a15,61443
8000971e:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009722:	4c f0       	ld.w %d15,[%a15]0
80009724:	6f 0f 11 00 	jz.t %d15,0,80009746 <osEE_tc_get_fsource+0x46>
    {
      k1 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k1div + 1U;
80009728:	91 30 00 ff 	movh.a %a15,61443
8000972c:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009730:	48 02       	ld.w %d2,[%a15]0
80009732:	37 02 67 28 	extr.u %d2,%d2,16,7
80009736:	c2 12       	add %d2,1
      fsource = OSEE_TC_BOARD_FOSC / k1;
80009738:	7b 10 13 f0 	movh %d15,305
8000973c:	1b 0f d0 f2 	addi %d15,%d15,11520
80009740:	4b 2f 11 22 	div.u %e2,%d15,%d2
80009744:	00 90       	ret 
    } else {
      /* Free running mode */
      if (OSEE_TC_SCU_PLLSTAT.bits.findis != 0U)
80009746:	4c f0       	ld.w %d15,[%a15]0
80009748:	6f 3f 11 00 	jz.t %d15,3,8000976a <osEE_tc_get_fsource+0x6a>
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
8000974c:	91 30 00 ff 	movh.a %a15,61443
80009750:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009754:	48 02       	ld.w %d2,[%a15]0
80009756:	8f f2 07 21 	and %d2,%d2,127
8000975a:	9a 12       	add %d15,%d2,1
        fsource = OSEE_TC_BOARD_FOSC / k2;
8000975c:	7b 10 13 20 	movh %d2,305
80009760:	1b 02 d0 22 	addi %d2,%d2,11520
80009764:	4b f2 11 22 	div.u %e2,%d2,%d15
80009768:	00 90       	ret 
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
8000976a:	91 30 00 ff 	movh.a %a15,61443
8000976e:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009772:	4c f0       	ld.w %d15,[%a15]0
80009774:	8f ff 07 51 	and %d5,%d15,127
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
80009778:	91 30 00 ff 	movh.a %a15,61443
8000977c:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009780:	4c f0       	ld.w %d15,[%a15]0
80009782:	37 0f 64 3c 	extr.u %d3,%d15,24,4
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;
80009786:	48 02       	ld.w %d2,[%a15]0
80009788:	37 02 e7 44 	extr.u %d4,%d2,9,7
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
        fsource = OSEE_TC_BOARD_FOSC / k2;
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
8000978c:	9a 15       	add %d15,%d5,1
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;

        /* cpu clock value fclk = (fosc * n)/(P * k2) */
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
8000978e:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80009792:	7b 10 13 20 	movh %d2,305
80009796:	1b 02 d0 22 	addi %d2,%d2,11520
8000979a:	4b f2 11 22 	div.u %e2,%d2,%d15
8000979e:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
  }
  return fsource;
}
800097a2:	00 90       	ret 

800097a4 <osEE_tc_stm_set_clockpersec>:
  return ticks;
}

/* Set inside std time reference  */
void osEE_tc_stm_set_clockpersec(void)
{
800097a4:	40 ae       	mov.aa %a14,%sp
#if (defined(__TASKING__))
  /* I don't know where is declared */
  extern unsigned long long setfoschz ( unsigned long long );
#endif /* __TASKING__ */
  /* fSOURCE Frequency */
  OsEE_reg const fsource  = osEE_tc_get_fsource();
800097a6:	6d ff ad ff 	call 80009700 <osEE_tc_get_fsource>
  /* Standard Timer Module period rounded */
  OsEE_reg const fstm     = (fsource + 1U) / OSEE_SCU_HW_FSTM_DIV;
800097aa:	91 30 00 ff 	movh.a %a15,61443
800097ae:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800097b2:	4c f0       	ld.w %d15,[%a15]0
800097b4:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800097b8:	c2 12       	add %d2,1
800097ba:	4b f2 11 22 	div.u %e2,%d2,%d15

  /* Set Global variable with freq in Khz value */
  osEE_tc_stm_freq_khz = fstm / OSEE_KILO;
800097be:	7b 20 06 f1 	movh %d15,4194
800097c2:	1b 3f dd f4 	addi %d15,%d15,19923
800097c6:	73 f2 68 20 	mul.u %e2,%d2,%d15
800097ca:	8f a3 1f f0 	sh %d15,%d3,-6
800097ce:	91 00 00 f7 	movh.a %a15,28672
800097d2:	59 ff e0 b0 	st.w [%a15]3808 <70000ee0 <osEE_tc_stm_freq_khz>>,%d15
800097d6:	00 90       	ret 

800097d8 <osEE_tc_stm_set_sr0>:
    that qualifier on pointers.
 */

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0(OsEE_reg usec,
    OsEE_tc_isr_hw_prio intvec)
{
800097d8:	40 ae       	mov.aa %a14,%sp
800097da:	02 59       	mov %d9,%d5
800097dc:	4d c0 e1 8f 	mfcr %d8,$core_id
    5U;
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
800097e0:	6d ff 4f fe 	call 8000947e <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
800097e4:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
800097e8:	8f 38 00 f1 	and %d15,%d8,3
800097ec:	9b 0f 0f 40 	addih %d4,%d15,240
800097f0:	8f 84 00 40 	sh %d4,%d4,8
800097f4:	60 4f       	mov.a %a15,%d4
 *  \return The timer lower word value read.
 */
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_tc_stm_get_time_lower_word(OsEE_reg stm_id)
{
  return OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_TIM0_OFF);
800097f6:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
800097f8:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
800097fa:	68 c2       	st.w [%a15]48,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
800097fc:	df 09 23 00 	jeq %d9,0,80009842 <osEE_tc_stm_set_sr0+0x6a>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
80009800:	48 e2       	ld.w %d2,[%a15]56
80009802:	b7 02 05 24 	insert %d2,%d2,0,8,5
80009806:	68 e2       	st.w [%a15]56,%d2
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
80009808:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize0   = size_of_compare;
8000980c:	48 e2       	ld.w %d2,[%a15]56
8000980e:	37 32 05 30 	insert %d3,%d2,%d3,0,5
80009812:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 0 with Compare Register 0 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0os     = 0U;
80009814:	48 f2       	ld.w %d2,[%a15]60
80009816:	8f 42 c0 21 	andn %d2,%d2,4
8000981a:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en     = 1U;
8000981c:	48 f2       	ld.w %d2,[%a15]60
8000981e:	8f 12 40 21 	or %d2,%d2,1
80009822:	68 f2       	st.w [%a15]60,%d2

/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 0U), intvec);
80009824:	06 3f       	sh %d15,3
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
80009826:	60 f2       	mov.a %a2,%d15
80009828:	d9 2f 50 28 	lea %a15,[%a2]-31600
8000982c:	11 4f 00 ff 	addih.a %a15,%a15,61444
80009830:	b7 89 99 93 	insert %d9,%d9,8,7,25
80009834:	8f 38 00 81 	and %d8,%d8,3
80009838:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
8000983c:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000983e:	68 09       	st.w [%a15]0,%d9
80009840:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en                 = 0U;
80009842:	48 f2       	ld.w %d2,[%a15]60
80009844:	8f 12 c0 21 	andn %d2,%d2,1
80009848:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 0U)) = 0U;
8000984a:	1b 2f 09 f7 	addi %d15,%d15,28818
8000984e:	9b 0f e0 f1 	addih %d15,%d15,7680
80009852:	06 3f       	sh %d15,3
80009854:	82 02       	mov %d2,0
80009856:	60 ff       	mov.a %a15,%d15
80009858:	68 02       	st.w [%a15]0,%d2
8000985a:	00 90       	ret 

8000985c <osEE_tc_stm_set_sr0_next_match>:
  }
}

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0_next_match(OsEE_reg usec)
{
8000985c:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000985e:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP0IRR bit 0 => 0x1 | CMP0IRS bit 1 => 0x2 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x1U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) += osEE_tc_stm_us_ticks(usec);
80009862:	6d ff 0e fe 	call 8000947e <osEE_tc_stm_us_ticks>
80009866:	16 03       	and %d15,3
80009868:	9b 0f 0f f0 	addih %d15,%d15,240
8000986c:	8f 8f 00 f0 	sh %d15,%d15,8
80009870:	60 ff       	mov.a %a15,%d15
80009872:	4c fc       	ld.w %d15,[%a15]48
80009874:	42 f2       	add %d2,%d15
80009876:	68 c2       	st.w [%a15]48,%d2
80009878:	00 90       	ret 

8000987a <osEE_tc_stm_set_sr1>:
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1(OsEE_reg usec,
  OsEE_tc_isr_hw_prio intvec)
{
8000987a:	40 ae       	mov.aa %a14,%sp
8000987c:	02 59       	mov %d9,%d5
8000987e:	4d c0 e1 8f 	mfcr %d8,$core_id
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
80009882:	6d ff fe fd 	call 8000947e <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
80009886:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
8000988a:	8f 38 00 f1 	and %d15,%d8,3
8000988e:	9b 0f 0f 40 	addih %d4,%d15,240
80009892:	8f 84 00 40 	sh %d4,%d4,8
80009896:	60 4f       	mov.a %a15,%d4
80009898:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
8000989a:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
8000989c:	68 d2       	st.w [%a15]52,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
8000989e:	df 09 28 00 	jeq %d9,0,800098ee <osEE_tc_stm_set_sr1+0x74>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
800098a2:	48 e2       	ld.w %d2,[%a15]56
800098a4:	b7 02 05 2c 	insert %d2,%d2,0,24,5
800098a8:	68 e2       	st.w [%a15]56,%d2
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
800098aa:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize1   = size_of_compare;
800098ae:	8f f3 01 31 	and %d3,%d3,31
800098b2:	8f 03 01 30 	sh %d3,%d3,16
800098b6:	48 e2       	ld.w %d2,[%a15]56
800098b8:	b7 02 05 28 	insert %d2,%d2,0,16,5
800098bc:	a6 23       	or %d3,%d2
800098be:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 1 with Compare Register 1 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1os     = 1U;
800098c0:	48 f2       	ld.w %d2,[%a15]60
800098c2:	8f 02 44 21 	or %d2,%d2,64
800098c6:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en     = 1U;
800098c8:	48 f2       	ld.w %d2,[%a15]60
800098ca:	8f 02 41 21 	or %d2,%d2,16
800098ce:	68 f2       	st.w [%a15]60,%d2
/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 1U), intvec);
800098d0:	06 3f       	sh %d15,3
800098d2:	60 f2       	mov.a %a2,%d15
800098d4:	d9 2f 54 28 	lea %a15,[%a2]-31596
800098d8:	11 4f 00 ff 	addih.a %a15,%a15,61444
800098dc:	b7 89 99 93 	insert %d9,%d9,8,7,25
800098e0:	8f 38 00 81 	and %d8,%d8,3
800098e4:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
800098e8:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
800098ea:	68 09       	st.w [%a15]0,%d9
800098ec:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en                 = 0U;
800098ee:	48 f2       	ld.w %d2,[%a15]60
800098f0:	8f 02 c1 21 	andn %d2,%d2,16
800098f4:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 1U)) = 0U;
800098f6:	06 3f       	sh %d15,3
800098f8:	60 f2       	mov.a %a2,%d15
800098fa:	d9 2f 54 28 	lea %a15,[%a2]-31596
800098fe:	11 4f 00 ff 	addih.a %a15,%a15,61444
80009902:	82 0f       	mov %d15,0
80009904:	68 0f       	st.w [%a15]0,%d15
80009906:	00 90       	ret 

80009908 <osEE_tc_stm_set_sr1_next_match>:
  }
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1_next_match(OsEE_reg usec)
{
80009908:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000990a:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP1IRR bit 2 => 0x4 | CMP1IRS bit 3 => 0x8 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x4U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) += osEE_tc_stm_us_ticks(usec);
8000990e:	6d ff b8 fd 	call 8000947e <osEE_tc_stm_us_ticks>
80009912:	16 03       	and %d15,3
80009914:	9b 0f 0f f0 	addih %d15,%d15,240
80009918:	8f 8f 00 f0 	sh %d15,%d15,8
8000991c:	60 ff       	mov.a %a15,%d15
8000991e:	4c fd       	ld.w %d15,[%a15]52
80009920:	42 f2       	add %d2,%d15
80009922:	68 d2       	st.w [%a15]52,%d2
80009924:	00 90       	ret 

80009926 <osEE_tc_delay>:
}

void osEE_tc_delay(OsEE_reg usec)
{
80009926:	40 ae       	mov.aa %a14,%sp
80009928:	4d c0 e1 ff 	mfcr %d15,$core_id
8000992c:	16 03       	and %d15,3
8000992e:	9b 0f 0f f0 	addih %d15,%d15,240
80009932:	8f 8f 00 f0 	sh %d15,%d15,8
80009936:	60 f2       	mov.a %a2,%d15
80009938:	d9 2f 10 00 	lea %a15,[%a2]16
8000993c:	19 28 10 00 	ld.w %d8,[%a2]16
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
  /* Read Start Point */
  OsEE_reg    const start = osEE_tc_stm_get_time_lower_word(stm_id);
  /* Evaluate End Point */
  OsEE_reg    const ticks = osEE_tc_stm_us_ticks(usec);
80009940:	6d ff 9f fd 	call 8000947e <osEE_tc_stm_us_ticks>
80009944:	4c f0       	ld.w %d15,[%a15]0

  while (ticks > (osEE_tc_stm_get_time_lower_word(stm_id) - start)) {
80009946:	a2 8f       	sub %d15,%d8
80009948:	3f 2f fe ff 	jlt.u %d15,%d2,80009944 <osEE_tc_delay+0x1e>
    ; /* Wait */
  }
}
8000994c:	00 90       	ret 

8000994e <osEE_tc_isr2_wrapper>:

#if (defined(__GNUC__))
#pragma section
#endif /* __GNUC__ */

static void OSEE_COMPILER_KEEP osEE_tc_isr2_wrapper(TaskType isr2_tid) {
8000994e:	40 ae       	mov.aa %a14,%sp
    }
    /* TODO: handle other internal priorities? System Timer? */
  } else
#endif /* !OSEE_SINGLECORE */
  {
    osEE_activate_isr2(isr2_tid);
80009950:	6d 00 86 05 	call 8000a45c <osEE_activate_isr2>
  __asm__ volatile ("svlcx" : : : "memory");
}

/** The rslcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rslcx(void) {
  __asm__ volatile ("rslcx" : : : "memory");
80009954:	0d 00 40 02 	rslcx 
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
80009958:	00 80       	rfe 
8000995a:	00 90       	ret 

8000995c <osEE_shutdown_os>:
  osEE_shutdown_os
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST) p_cdb,
  VAR(StatusType, AUTOMATIC)                Error
)
{
8000995c:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000995e:	cc 40       	ld.a %a15,[%a4]0
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009960:	39 ff 10 00 	ld.bu %d15,[%a15]16

  p_ccb->os_status = OSEE_KERNEL_SHUTDOWN;
80009964:	82 32       	mov %d2,3
80009966:	e9 f2 10 00 	st.b [%a15]16,%d2
  /* Used to propagate the error to the ShutdownHook */
  p_ccb->last_error = Error;
8000996a:	e9 f4 12 00 	st.b [%a15]18,%d4

  if (os_status == OSEE_KERNEL_STARTED) {
8000996e:	5e 25       	jne %d15,2,80009978 <osEE_shutdown_os+0x1c>
    osEE_idle_task_terminate(p_cdb->p_idle_task);
80009970:	99 44 04 00 	ld.a %a4,[%a4]4
80009974:	6d 00 89 06 	call 8000a686 <osEE_idle_task_terminate>
  } else {
    osEE_call_shutdown_hook(p_ccb, Error);
  }
  for (;;) {
    ; /* Endless Loop (entered only if Kernel Not Started) */
  }
80009978:	3c 00       	j 80009978 <osEE_shutdown_os+0x1c>

8000997a <DisableAllInterrupts>:
FUNC(void, OS_CODE)
  DisableAllInterrupts
(
  void
)
{
8000997a:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000997c:	91 00 00 f8 	movh.a %a15,32768
80009980:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
80009984:	0d 00 40 03 	disable 
  osEE_hal_disableIRQ();

  osEE_stack_monitoring(p_cdb);

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_DisableAllInterrupts);
  p_ccb->d_isr_all_cnt = 1U;
80009988:	82 1f       	mov %d15,1
8000998a:	e9 ff 1e 00 	st.b [%a15]30,%d15
8000998e:	00 90       	ret 

80009990 <EnableAllInterrupts>:
FUNC(void, OS_CODE)
  EnableAllInterrupts
(
  void
)
{
80009990:	40 ae       	mov.aa %a14,%sp
   * ResumeOSInterrupts() are called and no corresponding DisableAllInterupts()
   * /SuspendAllInterrupts()/SuspendOSInterrupts() was done before, the
   * Operating System module shall not perform this Operating System service.
   * (SRS_Os_11009) */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009992:	91 00 00 f8 	movh.a %a15,32768
80009996:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_EnableAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->d_isr_all_cnt > 0U) {
8000999a:	39 ff 1e 00 	ld.bu %d15,[%a15]30 <80000148 <osEE_cdb_var>>
8000999e:	6e 06       	jz %d15,800099aa <EnableAllInterrupts+0x1a>
    p_ccb->d_isr_all_cnt = 0U;
800099a0:	82 0f       	mov %d15,0
800099a2:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
800099a6:	0d 00 00 03 	enable 
800099aa:	00 90       	ret 

800099ac <SuspendAllInterrupts>:
FUNC(void, OS_CODE)
  SuspendAllInterrupts
(
  void
)
{
800099ac:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800099ae:	91 00 00 f8 	movh.a %a15,32768
800099b2:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
(
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb,
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb
)
{
  if (p_ccb->s_isr_all_cnt == 0U) {
800099b6:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <80000148 <osEE_cdb_var>>
800099ba:	ee 0c       	jnz %d15,800099d2 <SuspendAllInterrupts+0x26>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800099bc:	4d c0 e2 ff 	mfcr %d15,$icr
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
800099c0:	0d 00 40 03 	disable 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_suspendIRQ();
    p_ccb->prev_s_isr_all_status = flags;
800099c4:	68 5f       	st.w [%a15]20,%d15
    ++p_ccb->s_isr_all_cnt;
800099c6:	39 ff 1c 00 	ld.bu %d15,[%a15]28
800099ca:	c2 1f       	add %d15,1
800099cc:	e9 ff 1c 00 	st.b [%a15]28,%d15
800099d0:	00 90       	ret 
  } else if (p_ccb->s_isr_all_cnt < OSEE_MAX_BYTE) {
800099d2:	8b ff 0f 22 	eq %d2,%d15,255
800099d6:	f6 25       	jnz %d2,800099e0 <SuspendAllInterrupts+0x34>
    ++p_ccb->s_isr_all_cnt;
800099d8:	c2 1f       	add %d15,1
800099da:	e9 ff 1c 00 	st.b [%a15]28,%d15
800099de:	00 90       	ret 
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
800099e0:	91 00 00 48 	movh.a %a4,32768
800099e4:	d9 44 08 50 	lea %a4,[%a4]328 <80000148 <osEE_cdb_var>>
800099e8:	3b 90 01 40 	mov %d4,25
800099ec:	3c b8       	j 8000995c <osEE_shutdown_os>

800099ee <ResumeAllInterrupts>:
FUNC(void, OS_CODE)
  ResumeAllInterrupts
(
  void
)
{
800099ee:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800099f0:	91 00 00 f8 	movh.a %a15,32768
800099f4:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_all_cnt > 0U) {
800099f8:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <80000148 <osEE_cdb_var>>
800099fc:	6e 0b       	jz %d15,80009a12 <ResumeAllInterrupts+0x24>
    --p_ccb->s_isr_all_cnt;
800099fe:	c2 ff       	add %d15,-1
80009a00:	16 ff       	and %d15,255
80009a02:	e9 ff 1c 00 	st.b [%a15]28,%d15

    if (p_ccb->s_isr_all_cnt == 0U) {
80009a06:	ee 06       	jnz %d15,80009a12 <ResumeAllInterrupts+0x24>
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009a08:	4c f5       	ld.w %d15,[%a15]20
80009a0a:	cd cf e2 0f 	mtcr $icr,%d15
80009a0e:	0d 00 c0 04 	isync 
80009a12:	00 90       	ret 

80009a14 <SuspendOSInterrupts>:
FUNC(void, OS_CODE)
  SuspendOSInterrupts
(
  void
)
{
80009a14:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009a16:	91 00 00 f8 	movh.a %a15,32768
80009a1a:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_SuspendOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt == 0U) {
80009a1e:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <80000148 <osEE_cdb_var>>
80009a22:	ee 18       	jnz %d15,80009a52 <SuspendOSInterrupts+0x3e>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009a24:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009a28:	8f f2 0f f1 	and %d15,%d2,255
80009a2c:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009a30:	ee 0a       	jnz %d15,80009a44 <SuspendOSInterrupts+0x30>
    OsEE_icr icr_temp = icr;
80009a32:	02 2f       	mov %d15,%d2
80009a34:	3b 30 01 30 	mov %d3,19
80009a38:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009a3c:	cd cf e2 0f 	mtcr $icr,%d15
80009a40:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_begin_nested_primitive();
    p_ccb->prev_s_isr_os_status = flags;
80009a44:	68 62       	st.w [%a15]24,%d2
    ++p_ccb->s_isr_os_cnt;
80009a46:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80009a4a:	c2 1f       	add %d15,1
80009a4c:	e9 ff 1d 00 	st.b [%a15]29,%d15
80009a50:	00 90       	ret 
  } else if (p_ccb->s_isr_os_cnt < OSEE_MAX_BYTE) {
80009a52:	8b ff 0f 22 	eq %d2,%d15,255
80009a56:	f6 25       	jnz %d2,80009a60 <SuspendOSInterrupts+0x4c>
    ++p_ccb->s_isr_os_cnt;
80009a58:	c2 1f       	add %d15,1
80009a5a:	e9 ff 1d 00 	st.b [%a15]29,%d15
80009a5e:	00 90       	ret 
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
80009a60:	91 00 00 48 	movh.a %a4,32768
80009a64:	d9 44 08 50 	lea %a4,[%a4]328 <80000148 <osEE_cdb_var>>
80009a68:	3b 90 01 40 	mov %d4,25
80009a6c:	1d ff 78 ff 	j 8000995c <osEE_shutdown_os>

80009a70 <ResumeOSInterrupts>:
FUNC(void, OS_CODE)
  ResumeOSInterrupts
(
  void
)
{
80009a70:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009a72:	91 00 00 f8 	movh.a %a15,32768
80009a76:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt > 0U) {
80009a7a:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <80000148 <osEE_cdb_var>>
80009a7e:	6e 16       	jz %d15,80009aaa <ResumeOSInterrupts+0x3a>
    --p_ccb->s_isr_os_cnt;
80009a80:	c2 ff       	add %d15,-1
80009a82:	16 ff       	and %d15,255
80009a84:	e9 ff 1d 00 	st.b [%a15]29,%d15

    if (p_ccb->s_isr_os_cnt == 0U) {
80009a88:	ee 11       	jnz %d15,80009aaa <ResumeOSInterrupts+0x3a>
      osEE_hal_end_nested_primitive(p_ccb->prev_s_isr_os_status);
80009a8a:	48 62       	ld.w %d2,[%a15]24
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009a8c:	4d c0 e2 3f 	mfcr %d3,$icr
80009a90:	02 3f       	mov %d15,%d3
80009a92:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009a96:	8f f2 0f 21 	and %d2,%d2,255
80009a9a:	5f 23 08 00 	jeq %d3,%d2,80009aaa <ResumeOSInterrupts+0x3a>
80009a9e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009aa2:	cd cf e2 0f 	mtcr $icr,%d15
80009aa6:	0d 00 c0 04 	isync 
80009aaa:	00 90       	ret 

80009aac <StartOS>:
FUNC(StatusType, OS_CODE)
  StartOS
(
  VAR(AppModeType, AUTOMATIC) Mode
)
{
80009aac:	40 ae       	mov.aa %a14,%sp
80009aae:	02 49       	mov %d9,%d4
  CONST(CoreIdType, AUTOMATIC)           curr_core_id = osEE_get_curr_core_id();
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)  p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)   p_kcb = p_kdb->p_kcb;
#endif /* !OSEE_SINGLECORE */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009ab0:	91 00 00 f8 	movh.a %a15,32768
80009ab4:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009ab8:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009abc:	8f f8 0f f1 	and %d15,%d8,255
80009ac0:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009ac4:	ee 0a       	jnz %d15,80009ad8 <StartOS+0x2c>
    OsEE_icr icr_temp = icr;
80009ac6:	02 8f       	mov %d15,%d8
80009ac8:	3b 30 01 20 	mov %d2,19
80009acc:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009ad0:	cd cf e2 0f 	mtcr $icr,%d15
80009ad4:	0d 00 c0 04 	isync 
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
80009ad8:	39 ff 10 00 	ld.bu %d15,[%a15]16
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
    ev = E_OS_ACCESS;
80009adc:	82 15       	mov %d5,1
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
80009ade:	ee 21       	jnz %d15,80009b20 <StartOS+0x74>
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
80009ae0:	6d 00 e6 05 	call 8000a6ac <osEE_cpu_startos>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
      osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
      ev = E_OS_SYS_INIT;
80009ae4:	3b 80 01 50 	mov %d5,24
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
80009ae8:	df 02 1c 00 	jeq %d2,0,80009b20 <StartOS+0x74>
80009aec:	3c 24       	j 80009b34 <StartOS+0x88>
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
      p_ccb->os_status = OSEE_KERNEL_STARTED;
80009aee:	82 2f       	mov %d15,2
80009af0:	e9 ff 10 00 	st.b [%a15]16,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */

    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);

#if (!defined(OSEE_STARTOS_RETURN)) && (!defined(OSEE_API_DYNAMIC))
    if (p_ccb->os_status == OSEE_KERNEL_STARTED) {
80009af4:	39 ff 10 00 	ld.bu %d15,[%a15]16
80009af8:	5e 2a       	jne %d15,2,80009b0c <StartOS+0x60>
  osEE_idle_task_start
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_idle_tdb
)
{
  osEE_hal_save_ctx_and_ready2stacked(p_idle_tdb, p_idle_tdb->hdb.p_scb,
80009afa:	40 c4       	mov.aa %a4,%a12
80009afc:	99 c5 04 00 	ld.a %a5,[%a12]4
80009b00:	40 56       	mov.aa %a6,%a5
80009b02:	6d 00 3a 06 	call 8000a776 <osEE_hal_save_ctx_and_ready2stacked>
      osEE_idle_task_start(p_idle_tdb);
      osEE_task_end(p_idle_tdb);
80009b06:	40 c4       	mov.aa %a4,%a12
80009b08:	6d 00 8a 04 	call 8000a41c <osEE_task_end>
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
80009b0c:	0d 00 40 03 	disable 
    }
#if (!defined(OSEE_SHUTDOWN_DO_NOT_RETURN_ON_MAIN))
    osEE_hal_disableIRQ();
    osEE_shutdown_os_extra();
    osEE_call_shutdown_hook(p_ccb, p_ccb->last_error);
    for(;;) {} /* Endless Loop */
80009b10:	3c 00       	j 80009b10 <StartOS+0x64>
80009b12:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009b16:	cd cf e2 0f 	mtcr $icr,%d15
80009b1a:	0d 00 c0 04 	isync 
80009b1e:	3c 1b       	j 80009b54 <StartOS+0xa8>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009b20:	4d c0 e2 4f 	mfcr %d4,$icr
80009b24:	02 4f       	mov %d15,%d4
80009b26:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009b2a:	8f f8 0f 31 	and %d3,%d8,255
80009b2e:	5f 34 f2 ff 	jne %d4,%d3,80009b12 <StartOS+0x66>
80009b32:	3c 11       	j 80009b54 <StartOS+0xa8>
  }
#endif /* !OSEE_SINGLECORE */
  if (ev == E_OK) {
#if (!defined(OSEE_STARTOS_RETURN)) || (defined(OSEE_API_DYNAMIC))
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_idle_tdb = p_cdb->p_idle_task;
80009b34:	91 00 00 28 	movh.a %a2,32768
80009b38:	d9 22 08 50 	lea %a2,[%a2]328 <80000148 <osEE_cdb_var>>
80009b3c:	99 2c 04 00 	ld.a %a12,[%a2]4 <80000004 <BootModeHeader0+0x4>>
    /* Fill CCB */
    p_ccb->p_curr                   = p_idle_tdb;
#endif /* OSEE_API_DYNAMIC */

    /* GetActiveApplicationMode can be called inside StartupHook */
    p_ccb->os_status                = OSEE_KERNEL_STARTING;
80009b40:	82 1f       	mov %d15,1
80009b42:	e9 ff 10 00 	st.b [%a15]16,%d15
    p_ccb->app_mode                 = real_mode;
80009b46:	e9 f9 11 00 	st.b [%a15]17,%d9
    }
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
80009b4a:	39 ff 10 00 	ld.bu %d15,[%a15]16
80009b4e:	df 1f d3 ff 	jne %d15,1,80009af4 <StartOS+0x48>
80009b52:	3c ce       	j 80009aee <StartOS+0x42>
    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);
    osEE_end_primitive(flags);
  }

  return ev;
}
80009b54:	02 52       	mov %d2,%d5
80009b56:	00 90       	ret 

80009b58 <GetActiveApplicationMode>:
FUNC(AppModeType, OS_CODE)
  GetActiveApplicationMode
(
  void
)
{
80009b58:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI */
    p_ccb = p_cdb->p_ccb;
80009b5a:	91 00 00 f8 	movh.a %a15,32768
80009b5e:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
80009b62:	39 ff 10 00 	ld.bu %d15,[%a15]16 <80000148 <osEE_cdb_var>>
    app_mode = p_ccb->app_mode;
  } else {
    app_mode = INVALID_APPMODE;
80009b66:	3b f0 0f 20 	mov %d2,255

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
80009b6a:	6e 03       	jz %d15,80009b70 <GetActiveApplicationMode+0x18>
    app_mode = p_ccb->app_mode;
80009b6c:	39 f2 11 00 	ld.bu %d2,[%a15]17
  }

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetActiveApplicationMode);

  return app_mode;
}
80009b70:	00 90       	ret 

80009b72 <ActivateTask>:
FUNC(StatusType, OS_CODE)
  ActivateTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
80009b72:	40 ae       	mov.aa %a14,%sp
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
80009b74:	91 00 00 f8 	movh.a %a15,32768
80009b78:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
80009b7c:	4c f2       	ld.w %d15,[%a15]8
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009b7e:	82 38       	mov %d8,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009b80:	7f f4 39 80 	jge.u %d4,%d15,80009bf2 <ActivateTask+0x80>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009b84:	91 00 00 f8 	movh.a %a15,32768
80009b88:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
80009b8c:	c8 1f       	ld.a %a15,[%a15]4
80009b8e:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009b92:	c8 0f       	ld.a %a15,[%a15]0

    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009b94:	39 ff 14 00 	ld.bu %d15,[%a15]20
80009b98:	ff 2f 2d 80 	jge.u %d15,2,80009bf2 <ActivateTask+0x80>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009b9c:	4d c0 e2 9f 	mfcr %d9,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009ba0:	8f f9 0f f1 	and %d15,%d9,255
80009ba4:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009ba8:	ee 0a       	jnz %d15,80009bbc <ActivateTask+0x4a>
    OsEE_icr icr_temp = icr;
80009baa:	02 9f       	mov %d15,%d9
80009bac:	3b 30 01 20 	mov %d2,19
80009bb0:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009bb4:	cd cf e2 0f 	mtcr $icr,%d15
80009bb8:	0d 00 c0 04 	isync 
      CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

      ev = osEE_task_activated(p_tdb_act);
80009bbc:	40 f4       	mov.aa %a4,%a15
80009bbe:	6d 00 23 04 	call 8000a404 <osEE_task_activated>
80009bc2:	02 28       	mov %d8,%d2

      if (ev == E_OK) {
80009bc4:	f6 28       	jnz %d2,80009bd4 <ActivateTask+0x62>
        (void)osEE_scheduler_task_activated(p_kdb, p_tdb_act);
80009bc6:	91 00 00 48 	movh.a %a4,32768
80009bca:	d9 44 34 40 	lea %a4,[%a4]308 <80000134 <osEE_kdb_var>>
80009bce:	40 f5       	mov.aa %a5,%a15
80009bd0:	6d 00 57 04 	call 8000a47e <osEE_scheduler_task_activated>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009bd4:	4d c0 e2 3f 	mfcr %d3,$icr
80009bd8:	02 3f       	mov %d15,%d3
80009bda:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009bde:	8f f9 0f 21 	and %d2,%d9,255
80009be2:	5f 23 08 00 	jeq %d3,%d2,80009bf2 <ActivateTask+0x80>
80009be6:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009bea:	cd cf e2 0f 	mtcr $icr,%d15
80009bee:	0d 00 c0 04 	isync 
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ActivateTask);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
80009bf2:	02 82       	mov %d2,%d8
80009bf4:	00 90       	ret 

80009bf6 <ChainTask>:
FUNC(StatusType, OS_CODE)
  ChainTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
80009bf6:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb = p_cdb->p_ccb;
80009bf8:	91 00 00 f8 	movh.a %a15,32768
80009bfc:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
80009c00:	48 03       	ld.w %d3,[%a15]0
80009c02:	91 00 00 28 	movh.a %a2,32768
80009c06:	d9 22 34 40 	lea %a2,[%a2]308 <80000134 <osEE_kdb_var>>
80009c0a:	4c 22       	ld.w %d15,[%a2]8
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009c0c:	82 32       	mov %d2,3
  )
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009c0e:	7f f4 5e 80 	jge.u %d4,%d15,80009cca <ChainTask+0xd4>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009c12:	91 00 00 28 	movh.a %a2,32768
80009c16:	d9 22 34 40 	lea %a2,[%a2]308 <80000134 <osEE_kdb_var>>
80009c1a:	99 22 04 00 	ld.a %a2,[%a2]4 <80000004 <BootModeHeader0+0x4>>
80009c1e:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80009c22:	d4 2c       	ld.a %a12,[%a2]
      ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
    } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009c24:	39 cf 14 00 	ld.bu %d15,[%a12]20
80009c28:	ff 2f 51 80 	jge.u %d15,2,80009cca <ChainTask+0xd4>
      VAR(OsEE_reg, AUTOMATIC)  flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
80009c2c:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009c30:	6e 09       	jz %d15,80009c42 <ChainTask+0x4c>
        p_ccb->s_isr_all_cnt = 0U;
80009c32:	82 0f       	mov %d15,0
80009c34:	e9 ff 1c 00 	st.b [%a15]28,%d15
80009c38:	4c f5       	ld.w %d15,[%a15]20
80009c3a:	cd cf e2 0f 	mtcr $icr,%d15
80009c3e:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
80009c42:	39 ff 1e 00 	ld.bu %d15,[%a15]30
80009c46:	6e 06       	jz %d15,80009c52 <ChainTask+0x5c>
        p_ccb->d_isr_all_cnt = 0U;
80009c48:	82 0f       	mov %d15,0
80009c4a:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009c4e:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009c52:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009c56:	8f f8 0f f1 	and %d15,%d8,255
80009c5a:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009c5e:	ee 0a       	jnz %d15,80009c72 <ChainTask+0x7c>
    OsEE_icr icr_temp = icr;
80009c60:	02 8f       	mov %d15,%d8
80009c62:	3b 30 01 20 	mov %d2,19
80009c66:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009c6a:	cd cf e2 0f 	mtcr $icr,%d15
80009c6e:	0d 00 c0 04 	isync 
      }
#endif /* !OSEE_HAS_SERVICE_PROTECTION */

      flags = osEE_begin_primitive();

      if (p_tdb_act == p_curr) {
80009c72:	80 cf       	mov.d %d15,%a12
80009c74:	7e 35       	jne %d15,%d3,80009c7e <ChainTask+0x88>
        /* If the Task chain on it self, flag it. */
        p_tdb_act->p_tcb->status = OSEE_TASK_CHAINED;
80009c76:	cc c3       	ld.a %a15,[%a12]12
80009c78:	82 5f       	mov %d15,5
80009c7a:	28 2f       	st.b [%a15]2,%d15
80009c7c:	3c 15       	j 80009ca6 <ChainTask+0xb0>
        ev = E_OK;
      } else {
        ev = osEE_task_activated(p_tdb_act);
80009c7e:	40 c4       	mov.aa %a4,%a12
80009c80:	6d 00 c2 03 	call 8000a404 <osEE_task_activated>
        if (ev == E_OK) {
80009c84:	df 02 1a 80 	jne %d2,0,80009cb8 <ChainTask+0xc2>
          (void)osEE_scheduler_task_insert(p_kdb, p_tdb_act);
80009c88:	91 00 00 48 	movh.a %a4,32768
80009c8c:	d9 44 34 40 	lea %a4,[%a4]308 <80000134 <osEE_kdb_var>>
80009c90:	40 c5       	mov.aa %a5,%a12
80009c92:	6d 00 2a 04 	call 8000a4e6 <osEE_scheduler_task_insert>
80009c96:	3c 08       	j 80009ca6 <ChainTask+0xb0>
80009c98:	37 8f 08 f0 	insert %d15,%d15,%d8,0,8
80009c9c:	cd cf e2 0f 	mtcr $icr,%d15
80009ca0:	0d 00 c0 04 	isync 
80009ca4:	00 90       	ret 
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
80009ca6:	91 00 00 f8 	movh.a %a15,32768
80009caa:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
80009cae:	c8 0f       	ld.a %a15,[%a15]0
80009cb0:	c8 14       	ld.a %a4,[%a15]4
80009cb2:	a0 05       	mov.a %a5,0
80009cb4:	1d 00 98 05 	j 8000a7e4 <osEE_hal_terminate_ctx>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009cb8:	4d c0 e2 3f 	mfcr %d3,$icr
80009cbc:	02 3f       	mov %d15,%d3
80009cbe:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009cc2:	8f f8 0f 81 	and %d8,%d8,255
80009cc6:	5f 83 e9 ff 	jne %d3,%d8,80009c98 <ChainTask+0xa2>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ChainTask);

  return ev;
}
80009cca:	00 90       	ret 

80009ccc <TerminateTask>:
FUNC(StatusType, OS_CODE)
  TerminateTask
(
  void
)
{
80009ccc:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb       = p_cdb->p_ccb;
80009cce:	91 00 00 f8 	movh.a %a15,32768
80009cd2:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009cd6:	c8 02       	ld.a %a2,[%a15]0
#endif /* OSEE_HAS_CHECKS elif (OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING) */
  {
    VAR(OsEE_reg, AUTOMATIC) flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
80009cd8:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <80000148 <osEE_cdb_var>>
80009cdc:	6e 09       	jz %d15,80009cee <TerminateTask+0x22>
        p_ccb->s_isr_all_cnt = 0U;
80009cde:	82 0f       	mov %d15,0
80009ce0:	e9 ff 1c 00 	st.b [%a15]28,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009ce4:	4c f5       	ld.w %d15,[%a15]20
80009ce6:	cd cf e2 0f 	mtcr $icr,%d15
80009cea:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
80009cee:	39 ff 1e 00 	ld.bu %d15,[%a15]30
80009cf2:	6e 06       	jz %d15,80009cfe <TerminateTask+0x32>
        p_ccb->d_isr_all_cnt = 0U;
80009cf4:	82 0f       	mov %d15,0
80009cf6:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009cfa:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009cfe:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009d02:	8f ff 0f 21 	and %d2,%d15,255
80009d06:	8b 32 a1 22 	ge.u %d2,%d2,19
80009d0a:	f6 29       	jnz %d2,80009d1c <TerminateTask+0x50>
80009d0c:	3b 30 01 20 	mov %d2,19
80009d10:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009d14:	cd cf e2 0f 	mtcr $icr,%d15
80009d18:	0d 00 c0 04 	isync 
80009d1c:	99 24 04 00 	ld.a %a4,[%a2]4
80009d20:	a0 05       	mov.a %a5,0
80009d22:	1d 00 61 05 	j 8000a7e4 <osEE_hal_terminate_ctx>

80009d26 <Schedule>:
FUNC(StatusType, OS_CODE)
  Schedule
(
  void
)
{
80009d26:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb  = p_cdb->p_ccb;
80009d28:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_curr = p_ccb->p_curr;
80009d2c:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
80009d30:	c8 0f       	ld.a %a15,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb  = p_curr->p_tcb;
80009d32:	c8 3c       	ld.a %a12,[%a15]12
    ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
  } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
  if (p_tcb->current_prio == p_curr->dispatch_prio)
80009d34:	39 c2 01 00 	ld.bu %d2,[%a12]1 <80000148 <osEE_cdb_var>>
80009d38:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <80000148 <osEE_cdb_var>>
80009d3c:	5f f2 2d 80 	jne %d2,%d15,80009d96 <Schedule+0x70>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009d40:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009d44:	8f f8 0f f1 	and %d15,%d8,255
80009d48:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009d4c:	ee 0a       	jnz %d15,80009d60 <Schedule+0x3a>
    OsEE_icr icr_temp = icr;
80009d4e:	02 8f       	mov %d15,%d8
80009d50:	3b 30 01 20 	mov %d2,19
80009d54:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009d58:	cd cf e2 0f 	mtcr $icr,%d15
80009d5c:	0d 00 c0 04 	isync 
  {
    /* Begin primitive */
    CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

    /* Release internal resources */
    p_tcb->current_prio = p_curr->ready_prio;
80009d60:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009d64:	2c c1       	st.b [%a12]1,%d15
    /* Try preemption */
    (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
80009d66:	91 00 00 48 	movh.a %a4,32768
80009d6a:	d9 44 34 40 	lea %a4,[%a4]308 <80000134 <osEE_kdb_var>>
80009d6e:	6d 00 36 04 	call 8000a5da <osEE_scheduler_task_preemption_point>
    /* Restore internal resources */
    p_tcb->current_prio = p_curr->dispatch_prio;
80009d72:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80009d76:	2c c1       	st.b [%a12]1,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009d78:	4d c0 e2 3f 	mfcr %d3,$icr
80009d7c:	02 3f       	mov %d15,%d3
80009d7e:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009d82:	8f f8 0f 21 	and %d2,%d8,255
80009d86:	5f 23 08 00 	jeq %d3,%d2,80009d96 <Schedule+0x70>
80009d8a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009d8e:	cd cf e2 0f 	mtcr $icr,%d15
80009d92:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_Schedule);

  return ev;
}
80009d96:	82 02       	mov %d2,0
80009d98:	00 90       	ret 

80009d9a <GetResource>:
FUNC(StatusType, OS_CODE)
  GetResource
(
  VAR(ResourceType, AUTOMATIC) ResID
)
{
80009d9a:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009d9c:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
80009da0:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
80009da4:	c8 04       	ld.a %a4,[%a15]0
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (res_id < p_kdb->p_kcb->free_res_index);
#else
  return (res_id < p_kdb->res_array_size);
80009da6:	91 00 00 f8 	movh.a %a15,32768
80009daa:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
80009dae:	4c f4       	ld.w %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
80009db0:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
80009db2:	7f f4 4c 80 	jge.u %d4,%d15,80009e4a <GetResource+0xb0>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, OS_APPL_CONST)
      p_reso_db     = (*p_kdb->p_res_ptr_array)[ResID];
80009db6:	91 00 00 f8 	movh.a %a15,32768
80009dba:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
80009dbe:	c8 3f       	ld.a %a15,[%a15]12
80009dc0:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009dc4:	c8 03       	ld.a %a3,[%a15]0
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, OS_APPL_DATA)
      p_reso_cb     = p_reso_db->p_cb;
80009dc6:	d4 32       	ld.a %a2,[%a3]
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_curr_tcb    = p_curr->p_tcb;
80009dc8:	cc 43       	ld.a %a15,[%a4]12
    CONST(TaskPrio, AUTOMATIC)
      reso_prio     = p_reso_db->prio;
80009dca:	0c 34       	ld.bu %d15,[%a3]4
    CONST(TaskPrio, AUTOMATIC)
      current_prio  = p_curr_tcb->current_prio;
80009dcc:	08 14       	ld.bu %d4,[%a15]1
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009dce:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009dd2:	8f f2 0f 31 	and %d3,%d2,255
80009dd6:	8b 33 a1 32 	ge.u %d3,%d3,19
80009dda:	f6 3a       	jnz %d3,80009dee <GetResource+0x54>
    OsEE_icr icr_temp = icr;
80009ddc:	02 23       	mov %d3,%d2
80009dde:	3b 30 01 50 	mov %d5,19
80009de2:	37 53 08 30 	insert %d3,%d3,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009de6:	cd c3 e2 0f 	mtcr $icr,%d3
80009dea:	0d 00 c0 04 	isync 
    /* Set new CCPN value */
    icr_temp.bits.ccpn = OSEE_ISR2_MAX_HW_PRIO;
    osEE_tc_set_icr(icr_temp);
  }

  return icr.reg;
80009dee:	02 23       	mov %d3,%d2
      ev = E_OS_CORE;
    } else
#endif /* !OSEE_SINGLECORE */
#endif /* OSEE_HAS_CHECKS */
    {
      if (current_prio < reso_prio) {
80009df0:	7f f4 16 80 	jge.u %d4,%d15,80009e1c <GetResource+0x82>
        p_curr_tcb->current_prio = reso_prio;
80009df4:	28 1f       	st.b [%a15]1,%d15

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009df6:	37 0f 48 50 	extr %d5,%d15,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009dfa:	8b ff 2f 72 	ne %d7,%d15,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
80009dfe:	16 7f       	and %d15,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
80009e00:	c2 1f       	add %d15,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
80009e02:	8f 02 d0 61 	andn %d6,%d2,256
80009e06:	8f f2 cf 31 	andn %d3,%d2,255
80009e0a:	a6 f3       	or %d3,%d15
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009e0c:	8f f2 cf 21 	andn %d2,%d2,255
80009e10:	2b 63 40 37 	sel %d3,%d7,%d3,%d6
80009e14:	8b 05 40 52 	lt %d5,%d5,0
80009e18:	2b 23 40 35 	sel %d3,%d5,%d3,%d2
        flags = osEE_hal_prepare_ipl(flags, reso_prio);
      }

      p_reso_cb->p_owner    = p_curr;
80009e1c:	b5 24 08 00 	st.a [%a2]8,%a4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009e20:	4d c0 e2 5f 	mfcr %d5,$icr
80009e24:	02 5f       	mov %d15,%d5
80009e26:	8f f5 0f 51 	and %d5,%d5,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009e2a:	8f f3 0f 21 	and %d2,%d3,255
80009e2e:	5f 25 08 00 	jeq %d5,%d2,80009e3e <GetResource+0xa4>
80009e32:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009e36:	cd cf e2 0f 	mtcr $icr,%d15
80009e3a:	0d 00 c0 04 	isync 

      osEE_end_primitive(flags);

      p_reso_cb->p_next     = p_curr_tcb->p_last_m;
80009e3e:	4c f1       	ld.w %d15,[%a15]4
80009e40:	6c 20       	st.w [%a2]0,%d15
      p_reso_cb->prev_prio  = current_prio;
80009e42:	e9 24 04 00 	st.b [%a2]4,%d4
      p_curr_tcb->p_last_m  = p_reso_db;
80009e46:	e8 13       	st.a [%a15]4,%a3

      ev = E_OK;
80009e48:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetResource);

  return ev;
}
80009e4a:	00 90       	ret 

80009e4c <ReleaseResource>:
FUNC(StatusType, OS_CODE)
  ReleaseResource
(
  VAR(ResourceType, AUTOMATIC) ResID
)
{
80009e4c:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009e4e:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_curr = p_ccb->p_curr;
80009e52:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
80009e56:	c8 03       	ld.a %a3,[%a15]0
80009e58:	91 00 00 f8 	movh.a %a15,32768
80009e5c:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
80009e60:	4c f4       	ld.w %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
80009e62:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
80009e64:	7f f4 69 80 	jge.u %d4,%d15,80009f36 <ReleaseResource+0xea>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, TYPEDEF)
      p_curr_tcb  = p_curr->p_tcb;
80009e68:	cc 33       	ld.a %a15,[%a3]12
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, TYPEDEF)
      p_reso_db   = (*p_kdb->p_res_ptr_array)[ResID];
80009e6a:	91 00 00 28 	movh.a %a2,32768
80009e6e:	d9 22 34 40 	lea %a2,[%a2]308 <80000134 <osEE_kdb_var>>
80009e72:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
80009e76:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, TYPEDEF)
      p_reso_cb   = p_reso_db->p_cb;
80009e7a:	d4 22       	ld.a %a2,[%a2]
80009e7c:	d4 22       	ld.a %a2,[%a2]
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009e7e:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009e82:	8f ff 0f 21 	and %d2,%d15,255
80009e86:	8b 32 a1 22 	ge.u %d2,%d2,19
80009e8a:	f6 2a       	jnz %d2,80009e9e <ReleaseResource+0x52>
    OsEE_icr icr_temp = icr;
80009e8c:	02 f2       	mov %d2,%d15
80009e8e:	3b 30 01 30 	mov %d3,19
80009e92:	37 32 08 20 	insert %d2,%d2,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009e96:	cd c2 e2 0f 	mtcr $icr,%d2
80009e9a:	0d 00 c0 04 	isync 
    {
      VAR(OsEE_reg, AUTOMATIC)
        flags = osEE_begin_primitive();

      /* Pop the Resources head */
      p_curr_tcb->p_last_m = p_curr_tcb->p_last_m->p_cb->p_next;
80009e9e:	c8 14       	ld.a %a4,[%a15]4
80009ea0:	d4 44       	ld.a %a4,[%a4]
80009ea2:	54 42       	ld.w %d2,[%a4]
80009ea4:	68 12       	st.w [%a15]4,%d2

      if (p_curr_tcb->p_last_m != NULL) {
80009ea6:	df 02 1a 00 	jeq %d2,0,80009eda <ReleaseResource+0x8e>
        CONST(TaskPrio, AUTOMATIC)
          prev_prio = p_reso_cb->prev_prio;
80009eaa:	39 23 04 00 	ld.bu %d3,[%a2]4

        p_curr_tcb->current_prio = prev_prio;
80009eae:	28 13       	st.b [%a15]1,%d3

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009eb0:	37 03 48 40 	extr %d4,%d3,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009eb4:	8b f3 2f 62 	ne %d6,%d3,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
80009eb8:	8f f3 07 31 	and %d3,%d3,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
80009ebc:	c2 13       	add %d3,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
80009ebe:	8f 0f d0 51 	andn %d5,%d15,256
80009ec2:	8f ff cf 21 	andn %d2,%d15,255
80009ec6:	a6 32       	or %d2,%d3
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009ec8:	8f ff cf f1 	andn %d15,%d15,255
80009ecc:	2b 52 40 26 	sel %d2,%d6,%d2,%d5
80009ed0:	8b 04 40 42 	lt %d4,%d4,0
80009ed4:	2b f2 40 f4 	sel %d15,%d4,%d2,%d15
80009ed8:	3c 17       	j 80009f06 <ReleaseResource+0xba>
        flags = osEE_hal_prepare_ipl(flags, prev_prio);
      } else {
        CONST(TaskPrio, AUTOMATIC)
          dispatch_prio = p_curr->dispatch_prio;
80009eda:	39 35 1d 00 	ld.bu %d5,[%a3]29

        p_curr_tcb->current_prio = dispatch_prio;
80009ede:	28 15       	st.b [%a15]1,%d5

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009ee0:	37 05 48 60 	extr %d6,%d5,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009ee4:	8b f5 2f 42 	ne %d4,%d5,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
80009ee8:	8f f5 07 51 	and %d5,%d5,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
80009eec:	c2 15       	add %d5,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
80009eee:	8f 0f d0 21 	andn %d2,%d15,256
80009ef2:	8f ff cf 31 	andn %d3,%d15,255
80009ef6:	a6 53       	or %d3,%d5
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009ef8:	8f ff cf 51 	andn %d5,%d15,255
80009efc:	2b 23 40 34 	sel %d3,%d4,%d3,%d2
80009f00:	fa 06       	lt %d15,%d6,0
80009f02:	2b 53 40 ff 	sel %d15,%d15,%d3,%d5
        flags = osEE_hal_prepare_ipl(flags, dispatch_prio);
      }

      p_reso_cb->p_owner = NULL;
80009f06:	82 02       	mov %d2,0
80009f08:	59 22 08 00 	st.w [%a2]8,%d2

      /* Preemption point */
      (void)osEE_scheduler_task_preemption_point(p_kdb);
80009f0c:	91 00 00 48 	movh.a %a4,32768
80009f10:	d9 44 34 40 	lea %a4,[%a4]308 <80000134 <osEE_kdb_var>>
80009f14:	6d 00 63 03 	call 8000a5da <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009f18:	4d c0 e2 5f 	mfcr %d5,$icr
80009f1c:	02 53       	mov %d3,%d5
80009f1e:	8f f5 0f 51 	and %d5,%d5,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009f22:	16 ff       	and %d15,255
80009f24:	5f f5 08 00 	jeq %d5,%d15,80009f34 <ReleaseResource+0xe8>
80009f28:	37 f3 08 30 	insert %d3,%d3,%d15,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009f2c:	cd c3 e2 0f 	mtcr $icr,%d3
80009f30:	0d 00 c0 04 	isync 

      osEE_end_primitive(flags);

      ev = E_OK;
80009f34:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ReleaseResource);

  return ev;
}
80009f36:	00 90       	ret 

80009f38 <ShutdownOS>:
FUNC(StatusType, OS_CODE)
  ShutdownOS
(
  VAR(StatusType, AUTOMATIC) Error
)
{
80009f38:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009f3a:	91 00 00 f8 	movh.a %a15,32768
80009f3e:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009f42:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009f46:	8f f2 0f f1 	and %d15,%d2,255
80009f4a:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009f4e:	ee 0a       	jnz %d15,80009f62 <ShutdownOS+0x2a>
    OsEE_icr icr_temp = icr;
80009f50:	02 2f       	mov %d15,%d2
80009f52:	3b 30 01 30 	mov %d3,19
80009f56:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009f5a:	cd cf e2 0f 	mtcr $icr,%d15
80009f5e:	0d 00 c0 04 	isync 
  CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009f62:	39 ff 10 00 	ld.bu %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  {
    if ((os_status == OSEE_KERNEL_STARTED) ||
80009f66:	c2 ff       	add %d15,-1
80009f68:	16 ff       	and %d15,255
80009f6a:	ff 2f 08 80 	jge.u %d15,2,80009f7a <ShutdownOS+0x42>
        (os_status == OSEE_KERNEL_STARTING))
    {
      osEE_shutdown_os(p_cdb, Error);
80009f6e:	91 00 00 48 	movh.a %a4,32768
80009f72:	d9 44 08 50 	lea %a4,[%a4]328 <80000148 <osEE_cdb_var>>
80009f76:	1d ff f3 fc 	j 8000995c <osEE_shutdown_os>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009f7a:	4d c0 e2 3f 	mfcr %d3,$icr
80009f7e:	02 3f       	mov %d15,%d3
80009f80:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009f84:	8f f2 0f 21 	and %d2,%d2,255
80009f88:	5f 23 08 00 	jeq %d3,%d2,80009f98 <ShutdownOS+0x60>
80009f8c:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009f90:	cd cf e2 0f 	mtcr $icr,%d15
80009f94:	0d 00 c0 04 	isync 

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ShutdownOS);
  osEE_end_primitive(flags);

  return ev;
}
80009f98:	82 72       	mov %d2,7
80009f9a:	00 90       	ret 

80009f9c <GetTaskID>:
FUNC(StatusType, OS_CODE)
  GetTaskID
(
  VAR(TaskRefType, AUTOMATIC) TaskID
)
{
80009f9c:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009f9e:	91 00 00 f8 	movh.a %a15,32768
80009fa2:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
80009fa6:	3b e0 00 20 	mov %d2,14
  /* [OS566]: The Operating System API shall check in extended mode all pointer
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
80009faa:	bd 04 24 00 	jz.a %a4,80009ff2 <GetTaskID+0x56>
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
      p_tdb = p_ccb->p_curr;
80009fae:	c8 02       	ld.a %a2,[%a15]0
       value to return. If it its ISR2 we have to follow the chain and
       find the first task in the list (which is the running task
       which was preempted by the ISR, which could be the idle task),
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009fb0:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009fb4:	ff 2f 05 80 	jge.u %d15,2,80009fbe <GetTaskID+0x22>
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
80009fb8:	19 22 10 00 	ld.w %d2,[%a2]16
80009fbc:	3c 19       	j 80009fee <GetTaskID+0x52>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
80009fbe:	82 f2       	mov %d2,-1
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
    } else if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
80009fc0:	de 27       	jne %d15,2,80009fee <GetTaskID+0x52>
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;
80009fc2:	c8 3f       	ld.a %a15,[%a15]12
80009fc4:	c8 0f       	ld.a %a15,[%a15]0

      while (p_sn != NULL) {
80009fc6:	bd 0f 14 00 	jz.a %a15,80009fee <GetTaskID+0x52>
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
80009fca:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009fcc:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009fd0:	ff 2f 0b 80 	jge.u %d15,2,80009fe6 <GetTaskID+0x4a>
80009fd4:	3c 06       	j 80009fe0 <GetTaskID+0x44>
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
80009fd6:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009fd8:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009fdc:	ff 2f 05 80 	jge.u %d15,2,80009fe6 <GetTaskID+0x4a>
          tid = p_searched_tdb->tid;
80009fe0:	19 22 10 00 	ld.w %d2,[%a2]16
          break;
80009fe4:	3c 05       	j 80009fee <GetTaskID+0x52>
        } else {
          p_sn = p_sn->p_next;
80009fe6:	c8 0f       	ld.a %a15,[%a15]0
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
80009fe8:	bd 0f f7 ff 	jnz.a %a15,80009fd6 <GetTaskID+0x3a>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
80009fec:	82 f2       	mov %d2,-1
    } else {
      /* This is the case of the IDLE task. we do nothing because tid
         is already initialized */
    }
    /* XXX: This SHALL be atomic. */
    (*TaskID) = tid;
80009fee:	74 42       	st.w [%a4],%d2
    ev = E_OK;
80009ff0:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskID);

  return ev;
}
80009ff2:	00 90       	ret 

80009ff4 <GetTaskState>:
  GetTaskState
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(TaskStateRefType, AUTOMATIC)  State
)
{
80009ff4:	40 ae       	mov.aa %a14,%sp
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
80009ff6:	3b e0 00 20 	mov %d2,14
  /* [SWS_Os_00566]: The Operating System API shall check in extended mode all
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
80009ffa:	bd 04 38 00 	jz.a %a4,8000a06a <GetTaskState+0x76>
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
80009ffe:	91 00 00 f8 	movh.a %a15,32768
8000a002:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
8000a006:	4c f2       	ld.w %d15,[%a15]8
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
8000a008:	82 32       	mov %d2,3
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
8000a00a:	7f f4 30 80 	jge.u %d4,%d15,8000a06a <GetTaskState+0x76>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000a00e:	91 00 00 f8 	movh.a %a15,32768
8000a012:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
8000a016:	c8 1f       	ld.a %a15,[%a15]4
8000a018:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
8000a01c:	c8 0f       	ld.a %a15,[%a15]0
8000a01e:	c8 3f       	ld.a %a15,[%a15]12
    switch (local_state) {
8000a020:	0c f2       	ld.bu %d15,[%a15]2
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
8000a022:	82 02       	mov %d2,0
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
8000a024:	ff 6f 23 80 	jge.u %d15,6,8000a06a <GetTaskState+0x76>
8000a028:	91 10 00 f8 	movh.a %a15,32769
8000a02c:	d9 ff 34 0a 	lea %a15,[%a15]-24524 <8000a034 <GetTaskState+0x40>>
8000a030:	90 ff       	addsc.a %a15,%a15,%d15,2
8000a032:	dc 0f       	ji %a15
8000a034:	1d 00 0c 00 	j 8000a04c <GetTaskState+0x58>
8000a038:	1d 00 0e 00 	j 8000a054 <GetTaskState+0x60>
8000a03c:	1d 00 0c 00 	j 8000a054 <GetTaskState+0x60>
8000a040:	1d 00 0e 00 	j 8000a05c <GetTaskState+0x68>
8000a044:	1d 00 10 00 	j 8000a064 <GetTaskState+0x70>
8000a048:	1d 00 0e 00 	j 8000a064 <GetTaskState+0x70>
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
8000a04c:	82 0f       	mov %d15,0
8000a04e:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
8000a050:	82 02       	mov %d2,0
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
        break;
8000a052:	00 90       	ret 
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
8000a054:	82 1f       	mov %d15,1
8000a056:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
8000a058:	82 02       	mov %d2,0
        (*State) = SUSPENDED;
        break;
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
8000a05a:	00 90       	ret 
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
8000a05c:	82 3f       	mov %d15,3
8000a05e:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
8000a060:	82 02       	mov %d2,0
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
        break;
8000a062:	00 90       	ret 
      case OSEE_TASK_RUNNING:
      case OSEE_TASK_CHAINED:
        (*State) = RUNNING;
8000a064:	82 4f       	mov %d15,4
8000a066:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
8000a068:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskState);

  return ev;
}
8000a06a:	00 90       	ret 

8000a06c <WaitEvent>:
FUNC(StatusType, OS_CODE)
  WaitEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
8000a06c:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb       = p_cdb->p_ccb;
8000a06e:	91 00 00 f8 	movh.a %a15,32768
8000a072:	99 fc 08 50 	ld.a %a12,[%a15]328 <80000148 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
8000a076:	d4 cd       	ld.a %a13,[%a12]
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
8000a078:	cc d3       	ld.a %a15,[%a13]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a07a:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a07e:	8f f8 0f f1 	and %d15,%d8,255
8000a082:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a086:	ee 0a       	jnz %d15,8000a09a <WaitEvent+0x2e>
    OsEE_icr icr_temp = icr;
8000a088:	02 8f       	mov %d15,%d8
8000a08a:	3b 30 01 20 	mov %d2,19
8000a08e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a092:	cd cf e2 0f 	mtcr $icr,%d15
8000a096:	0d 00 c0 04 	isync 
    /* Start Critical Section */
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);

    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
8000a09a:	4c f3       	ld.w %d15,[%a15]12
8000a09c:	26 4f       	and %d15,%d4
8000a09e:	ee 13       	jnz %d15,8000a0c4 <WaitEvent+0x58>
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;
8000a0a0:	68 24       	st.w [%a15]8,%d4

      p_curr_tcb->p_own_sn =
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
8000a0a2:	91 00 00 48 	movh.a %a4,32768
8000a0a6:	d9 44 08 50 	lea %a4,[%a4]328 <80000148 <osEE_cdb_var>>
8000a0aa:	d9 c5 04 00 	lea %a5,[%a12]4 <80000148 <osEE_cdb_var>>
8000a0ae:	6d 00 98 01 	call 8000a3de <osEE_scheduler_core_pop_running>
    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;

      p_curr_tcb->p_own_sn =
8000a0b2:	e8 42       	st.a [%a15]16,%a2
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);

      p_curr_tcb->status = OSEE_TASK_WAITING;
8000a0b4:	82 3f       	mov %d15,3
8000a0b6:	28 2f       	st.b [%a15]2,%d15

      osEE_unlock_core(p_cdb);

      osEE_change_context_from_running(p_curr, p_ccb->p_curr);
8000a0b8:	40 d4       	mov.aa %a4,%a13
8000a0ba:	d4 c5       	ld.a %a5,[%a12]
8000a0bc:	6d 00 c1 02 	call 8000a63e <osEE_change_context_from_running>

      /* Reset the waiting mask when we exit from the wait condition. */
      p_curr_tcb->wait_mask = 0U;
8000a0c0:	82 0f       	mov %d15,0
8000a0c2:	68 2f       	st.w [%a15]8,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a0c4:	4d c0 e2 3f 	mfcr %d3,$icr
8000a0c8:	02 3f       	mov %d15,%d3
8000a0ca:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a0ce:	8f f8 0f 21 	and %d2,%d8,255
8000a0d2:	5f 23 08 00 	jeq %d3,%d2,8000a0e2 <WaitEvent+0x76>
8000a0d6:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a0da:	cd cf e2 0f 	mtcr $icr,%d15
8000a0de:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
}
8000a0e2:	82 02       	mov %d2,0
8000a0e4:	00 90       	ret 

8000a0e6 <SetEvent>:
  SetEvent
(
  VAR(TaskType,      AUTOMATIC) TaskID,
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
8000a0e6:	40 ae       	mov.aa %a14,%sp
8000a0e8:	20 08       	sub.a %sp,8
8000a0ea:	91 00 00 f8 	movh.a %a15,32768
8000a0ee:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
8000a0f2:	4c f2       	ld.w %d15,[%a15]8
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
8000a0f4:	3f f4 06 80 	jlt.u %d4,%d15,8000a100 <SetEvent+0x1a>
    ev = E_OS_ID;
8000a0f8:	82 3f       	mov %d15,3
8000a0fa:	e9 ef ff ff 	st.b [%a14]-1,%d15
8000a0fe:	3c 3c       	j 8000a176 <SetEvent+0x90>
  } else {
    P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_sn;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_waking_up = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000a100:	91 00 00 f8 	movh.a %a15,32768
8000a104:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
8000a108:	c8 1f       	ld.a %a15,[%a15]4
8000a10a:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000a10e:	c8 04       	ld.a %a4,[%a15]0
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a110:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a114:	8f f8 0f f1 	and %d15,%d8,255
8000a118:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a11c:	ee 0a       	jnz %d15,8000a130 <SetEvent+0x4a>
    OsEE_icr icr_temp = icr;
8000a11e:	02 8f       	mov %d15,%d8
8000a120:	3b 30 01 20 	mov %d2,19
8000a124:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a128:	cd cf e2 0f 	mtcr $icr,%d15
8000a12c:	0d 00 c0 04 	isync 
8000a130:	02 54       	mov %d4,%d5
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();

    p_sn = osEE_task_event_set_mask(p_tdb_waking_up, Mask, &ev);
8000a132:	d9 e5 ff ff 	lea %a5,[%a14]-1
8000a136:	6d 00 82 01 	call 8000a43a <osEE_task_event_set_mask>

    if (p_sn != NULL) {
8000a13a:	bc 2f       	jz.a %a2,8000a158 <SetEvent+0x72>
      /* Release the TASK (and the SN) */
      if (osEE_scheduler_task_unblocked(p_kdb, p_sn))
8000a13c:	91 00 00 48 	movh.a %a4,32768
8000a140:	d9 44 34 40 	lea %a4,[%a4]308 <80000134 <osEE_kdb_var>>
8000a144:	40 25       	mov.aa %a5,%a2
8000a146:	6d 00 e7 01 	call 8000a514 <osEE_scheduler_task_unblocked>
8000a14a:	76 27       	jz %d2,8000a158 <SetEvent+0x72>
      {
        (void)osEE_scheduler_task_preemption_point(p_kdb);
8000a14c:	91 00 00 48 	movh.a %a4,32768
8000a150:	d9 44 34 40 	lea %a4,[%a4]308 <80000134 <osEE_kdb_var>>
8000a154:	6d 00 43 02 	call 8000a5da <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a158:	4d c0 e2 3f 	mfcr %d3,$icr
8000a15c:	02 3f       	mov %d15,%d3
8000a15e:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a162:	8f f8 0f 21 	and %d2,%d8,255
8000a166:	5f 23 08 00 	jeq %d3,%d2,8000a176 <SetEvent+0x90>
8000a16a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a16e:	cd cf e2 0f 	mtcr $icr,%d15
8000a172:	0d 00 c0 04 	isync 
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
8000a176:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
8000a17a:	00 90       	ret 

8000a17c <GetEvent>:
  GetEvent
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(EventMaskRefType, AUTOMATIC)  Event
)
{
8000a17c:	40 ae       	mov.aa %a14,%sp
8000a17e:	91 00 00 f8 	movh.a %a15,32768
8000a182:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
8000a186:	4c f2       	ld.w %d15,[%a15]8
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
8000a188:	82 32       	mov %d2,3
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
8000a18a:	7f f4 11 80 	jge.u %d4,%d15,8000a1ac <GetEvent+0x30>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000a18e:	91 00 00 f8 	movh.a %a15,32768
8000a192:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
8000a196:	c8 1f       	ld.a %a15,[%a15]4
8000a198:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
8000a19c:	c8 0f       	ld.a %a15,[%a15]0
8000a19e:	c8 3f       	ld.a %a15,[%a15]12
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
      ev = E_OS_PARAM_POINTER;
8000a1a0:	3b e0 00 20 	mov %d2,14
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
8000a1a4:	bc 44       	jz.a %a4,8000a1ac <GetEvent+0x30>
      ev = E_OS_PARAM_POINTER;
    } else
    {
      /* N.B. XXX This MUST Be ATOMIC! */
      (*Event) = p_tcb_event->event_mask;
8000a1a6:	4c f3       	ld.w %d15,[%a15]12
8000a1a8:	6c 40       	st.w [%a4]0,%d15

      ev = E_OK;
8000a1aa:	82 02       	mov %d2,0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
8000a1ac:	00 90       	ret 

8000a1ae <ClearEvent>:
FUNC(StatusType, OS_CODE)
  ClearEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
8000a1ae:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb       = p_cdb->p_ccb;
8000a1b0:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
8000a1b4:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
8000a1b8:	c8 0f       	ld.a %a15,[%a15]0
8000a1ba:	c8 3f       	ld.a %a15,[%a15]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a1bc:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a1c0:	8f f2 0f f1 	and %d15,%d2,255
8000a1c4:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a1c8:	ee 0a       	jnz %d15,8000a1dc <ClearEvent+0x2e>
    OsEE_icr icr_temp = icr;
8000a1ca:	02 2f       	mov %d15,%d2
8000a1cc:	3b 30 01 30 	mov %d3,19
8000a1d0:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a1d4:	cd cf e2 0f 	mtcr $icr,%d15
8000a1d8:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);
    /* XXX: Maybe we need to introduce an HAL for atomic Load-Modify-Store
            Operations */
    p_curr_tcb->event_mask &= ~Mask;
8000a1dc:	4c f3       	ld.w %d15,[%a15]12
8000a1de:	0f 4f e0 40 	andn %d4,%d15,%d4
8000a1e2:	68 34       	st.w [%a15]12,%d4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a1e4:	4d c0 e2 3f 	mfcr %d3,$icr
8000a1e8:	02 3f       	mov %d15,%d3
8000a1ea:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a1ee:	8f f2 0f 21 	and %d2,%d2,255
8000a1f2:	5f 23 08 00 	jeq %d3,%d2,8000a202 <ClearEvent+0x54>
8000a1f6:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a1fa:	cd cf e2 0f 	mtcr $icr,%d15
8000a1fe:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
8000a202:	82 02       	mov %d2,0
8000a204:	00 90       	ret 

8000a206 <GetISRID>:
FUNC(ISRType, OS_CODE)
  GetISRID
(
  void
)
{
8000a206:	40 ae       	mov.aa %a14,%sp
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
8000a208:	91 00 00 f8 	movh.a %a15,32768
8000a20c:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
8000a210:	c8 0f       	ld.a %a15,[%a15]0
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000a212:	39 ff 14 00 	ld.bu %d15,[%a15]20 <80000148 <osEE_cdb_var>>
    isr_id = p_tdb->tid;
  } else {
    isr_id = INVALID_ISR;
8000a216:	82 f2       	mov %d2,-1
{
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000a218:	5e 22       	jne %d15,2,8000a21c <GetISRID+0x16>
    isr_id = p_tdb->tid;
8000a21a:	48 42       	ld.w %d2,[%a15]16
  } else {
    isr_id = INVALID_ISR;
  }

  return isr_id;
}
8000a21c:	00 90       	ret 
	...

8000a220 <osEE_release_all_m>:
static FUNC_P2VAR(OsEE_MDB, OS_APPL_CONST, OS_CODE)
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
8000a220:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a222:	99 43 0c 00 	ld.a %a3,[%a4]12

  while ((p_tcb->p_last_m != NULL)
8000a226:	cc 31       	ld.a %a15,[%a3]4
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
8000a228:	a0 02       	mov.a %a2,0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
8000a22a:	bc fb       	jz.a %a15,8000a240 <osEE_release_all_m+0x20>
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
8000a22c:	82 0f       	mov %d15,0
    && (p_tcb->p_last_m->p_cb->p_owner == p_tdb)
#endif /* OSEE_HAS_SPINLOCKS */
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
8000a22e:	c8 0f       	ld.a %a15,[%a15]0
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
8000a230:	68 2f       	st.w [%a15]8,%d15
    /* Save the first M not realesed */
    if (p_mdb == NULL) {
8000a232:	7c 23       	jnz.a %a2,8000a238 <osEE_release_all_m+0x18>
      p_mdb = p_tcb->p_last_m;
8000a234:	99 32 04 00 	ld.a %a2,[%a3]4
      osEE_hal_spin_unlock(p_tcb->p_last_m->p_spinlock_arch);
    }
#endif /* OSEE_HAS_SPINLOCKS */

    /* Pop the M head */
    p_tcb->p_last_m = p_last_m_cb->p_next;
8000a238:	c8 0f       	ld.a %a15,[%a15]0
8000a23a:	ec 31       	st.a [%a3]4,%a15
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
8000a23c:	bd 0f f9 ff 	jnz.a %a15,8000a22e <osEE_release_all_m+0xe>
    p_tcb->p_last_m = NULL;
  }
#endif /* OSEE_HAS_SPINLOCKS */

  return p_mdb;
}
8000a240:	00 90       	ret 

8000a242 <osEE_scheduler_task_wrapper_restore>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_restore
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
8000a242:	40 ae       	mov.aa %a14,%sp
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
8000a244:	cc 43       	ld.a %a15,[%a4]12
8000a246:	82 4f       	mov %d15,4
8000a248:	28 2f       	st.b [%a15]2,%d15
8000a24a:	00 90       	ret 

8000a24c <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
8000a24c:	40 ae       	mov.aa %a14,%sp
8000a24e:	40 4f       	mov.aa %a15,%a4
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
8000a250:	99 42 0c 00 	ld.a %a2,[%a4]12
8000a254:	39 22 01 00 	ld.bu %d2,[%a2]1
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
8000a258:	82 4f       	mov %d15,4
8000a25a:	2c 22       	st.b [%a2]2,%d15
)
{
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_priority < OSEE_ISR_ALL_PRIO) {
8000a25c:	8b f2 0f f2 	eq %d15,%d2,255
8000a260:	ee 13       	jnz %d15,8000a286 <osEE_scheduler_task_wrapper_run+0x3a>
8000a262:	4d c0 e2 ff 	mfcr %d15,$icr

/* We always use virtual priorities */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_set_ipl(TaskPrio virt_prio)
{
  OsEE_icr icr  = osEE_tc_get_icr();
  icr.bits.ccpn = (virt_prio < OSEE_ISR2_PRIO_BIT)?
8000a266:	37 02 48 40 	extr %d4,%d2,0,8
8000a26a:	82 03       	mov %d3,0
8000a26c:	ce 45       	jgez %d4,8000a276 <osEE_scheduler_task_wrapper_run+0x2a>
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
8000a26e:	8f f2 07 21 	and %d2,%d2,127
8000a272:	1b 12 00 30 	addi %d3,%d2,1
8000a276:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a27a:	cd cf e2 0f 	mtcr $icr,%d15
8000a27e:	0d 00 c0 04 	isync 
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
8000a282:	0d 00 00 03 	enable 
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_priority);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
8000a286:	c8 62       	ld.a %a2,[%a15]24
8000a288:	2d 02 00 00 	calli %a2
)
{
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000a28c:	91 00 00 28 	movh.a %a2,32768
8000a290:	99 22 08 50 	ld.a %a2,[%a2]328 <80000148 <osEE_cdb_var>>

  /* Reset ISR Counters */
/* [SWS_Os_00239] If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and interrupts are still disabled,
    the Operating System module shall enable them. */
  p_ccb->s_isr_os_cnt  = 0U;
8000a294:	82 0f       	mov %d15,0
8000a296:	e9 2f 1d 00 	st.b [%a2]29,%d15
  /* I won't re-enable OS Interrupts since I'm going to enter rescheduling
     critical section */
  if (p_ccb->s_isr_all_cnt > 0U) {
8000a29a:	39 2f 1c 00 	ld.bu %d15,[%a2]28
8000a29e:	6e 09       	jz %d15,8000a2b0 <osEE_scheduler_task_wrapper_run+0x64>
    p_ccb->s_isr_all_cnt = 0U;
8000a2a0:	82 0f       	mov %d15,0
8000a2a2:	e9 2f 1c 00 	st.b [%a2]28,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a2a6:	4c 25       	ld.w %d15,[%a2]20
8000a2a8:	cd cf e2 0f 	mtcr $icr,%d15
8000a2ac:	0d 00 c0 04 	isync 
    osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
  }
  if (p_ccb->d_isr_all_cnt > 0U) {
8000a2b0:	39 2f 1e 00 	ld.bu %d15,[%a2]30
8000a2b4:	6e 06       	jz %d15,8000a2c0 <osEE_scheduler_task_wrapper_run+0x74>
    p_ccb->d_isr_all_cnt = 0U;
8000a2b6:	82 0f       	mov %d15,0
8000a2b8:	e9 2f 1e 00 	st.b [%a2]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
8000a2bc:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a2c0:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a2c4:	8f ff 0f 21 	and %d2,%d15,255
8000a2c8:	8b 32 a1 22 	ge.u %d2,%d2,19
8000a2cc:	f6 29       	jnz %d2,8000a2de <osEE_scheduler_task_wrapper_run+0x92>
8000a2ce:	3b 30 01 20 	mov %d2,19
8000a2d2:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a2d6:	cd cf e2 0f 	mtcr $icr,%d15
8000a2da:	0d 00 c0 04 	isync 

  (void)osEE_begin_primitive();

  osEE_stack_monitoring(p_cdb);

  if (p_to_term->task_type == OSEE_TASK_TYPE_ISR2) {
8000a2de:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000a2e2:	5e 24       	jne %d15,2,8000a2ea <osEE_scheduler_task_wrapper_run+0x9e>
  /* [SWS_Os_00369]: If a Category 2 ISR calls GetResource() and ends (returns)
      without calling the corresponding ReleaseResource(), the Operating System
      module shall perform the ReleaseResource() call and shall call the
      ErrorHook() E_OS_RESOURCE */
    CONSTP2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)
      p_mdb = osEE_release_all_m(p_to_term);
8000a2e4:	40 f4       	mov.aa %a4,%a15
8000a2e6:	5c 9d       	call 8000a220 <osEE_release_all_m>
8000a2e8:	3c 03       	j 8000a2ee <osEE_scheduler_task_wrapper_run+0xa2>
    osEE_call_error_hook(p_ccb, E_OS_MISSINGEND);
#if (defined(OSEE_HAS_RESOURCES)) || (defined(OSEE_HAS_SPINLOCKS))
/* [SWS_Os_0070]: If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and still holds OSEK Resources,
    the Operating System shall release them. */
    (void)osEE_release_all_m(p_to_term);
8000a2ea:	40 f4       	mov.aa %a4,%a15
8000a2ec:	5c 9a       	call 8000a220 <osEE_release_all_m>
8000a2ee:	c8 14       	ld.a %a4,[%a15]4
8000a2f0:	a0 05       	mov.a %a5,0
8000a2f2:	1d 00 79 02 	j 8000a7e4 <osEE_hal_terminate_ctx>

8000a2f6 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
8000a2f6:	40 ae       	mov.aa %a14,%sp
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
8000a2f8:	91 00 00 f8 	movh.a %a15,32768
8000a2fc:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
8000a300:	39 ff 10 00 	ld.bu %d15,[%a15]16 <80000148 <osEE_cdb_var>>
8000a304:	df 2f fe 7f 	jeq %d15,2,8000a300 <osEE_idle_hook_wrapper+0xa>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
8000a308:	91 00 00 f8 	movh.a %a15,32768
8000a30c:	d9 ff 08 50 	lea %a15,[%a15]328 <80000148 <osEE_cdb_var>>
8000a310:	c8 14       	ld.a %a4,[%a15]4
8000a312:	6d 00 ba 01 	call 8000a686 <osEE_idle_task_terminate>
8000a316:	00 90       	ret 

8000a318 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
8000a318:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a31a:	d4 43       	ld.a %a3,[%a4]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
8000a31c:	cc 50       	ld.a %a15,[%a5]0
  P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)     p_ret_sn = p_ccb->p_stk_sn;
8000a31e:	99 32 0c 00 	ld.a %a2,[%a3]12

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
8000a322:	bd 02 13 00 	jz.a %a2,8000a348 <osEE_scheduler_core_rq_preempt_stk+0x30>
    p_ret_tdb = p_ret_sn->p_tdb;
8000a326:	99 22 04 00 	ld.a %a2,[%a2]4
    if (p_rq_sn != NULL) {
8000a32a:	bd 0f 1b 00 	jz.a %a15,8000a360 <osEE_scheduler_core_rq_preempt_stk+0x48>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
8000a32e:	99 24 0c 00 	ld.a %a4,[%a2]12
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
8000a332:	c8 16       	ld.a %a6,[%a15]4
8000a334:	99 66 0c 00 	ld.a %a6,[%a6]12
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
8000a338:	39 42 01 00 	ld.bu %d2,[%a4]1
8000a33c:	0c 61       	ld.bu %d15,[%a6]1
8000a33e:	7f f2 13 80 	jge.u %d2,%d15,8000a364 <osEE_scheduler_core_rq_preempt_stk+0x4c>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
8000a342:	82 2f       	mov %d15,2
8000a344:	2c 42       	st.b [%a4]2,%d15
8000a346:	3c 11       	j 8000a368 <osEE_scheduler_core_rq_preempt_stk+0x50>
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
8000a348:	a0 02       	mov.a %a2,0

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
8000a34a:	bd 0f 1e 00 	jz.a %a15,8000a386 <osEE_scheduler_core_rq_preempt_stk+0x6e>
    /* Only Idle TASK stacked -> RQ preempt STK. */
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    p_ret_tdb                 = p_cdb->p_idle_task;
8000a34e:	99 42 04 00 	ld.a %a2,[%a4]4
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000a352:	99 24 0c 00 	ld.a %a4,[%a2]12
8000a356:	82 2f       	mov %d15,2
8000a358:	2c 42       	st.b [%a4]2,%d15
8000a35a:	3c 07       	j 8000a368 <osEE_scheduler_core_rq_preempt_stk+0x50>
  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    if (p_tcb->current_prio < dispatch_prio) {
      p_tcb->current_prio = dispatch_prio;
8000a35c:	2c 51       	st.b [%a5]1,%d15
8000a35e:	00 90       	ret 
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
8000a360:	a0 02       	mov.a %a2,0
8000a362:	00 90       	ret 
8000a364:	a0 02       	mov.a %a2,0
8000a366:	00 90       	ret 
    p_ret_tdb = NULL;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
8000a368:	4c f0       	ld.w %d15,[%a15]0
8000a36a:	6c 50       	st.w [%a5]0,%d15
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
8000a36c:	c8 14       	ld.a %a4,[%a15]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a36e:	99 45 0c 00 	ld.a %a5,[%a4]12
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
8000a372:	4c 33       	ld.w %d15,[%a3]12
8000a374:	68 0f       	st.w [%a15]0,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
8000a376:	ec 33       	st.a [%a3]12,%a15
  p_ccb->p_curr                 = p_tdb;
8000a378:	f4 34       	st.a [%a3],%a4

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
8000a37a:	39 4f 1d 00 	ld.bu %d15,[%a4]29
    if (p_tcb->current_prio < dispatch_prio) {
8000a37e:	39 52 01 00 	ld.bu %d2,[%a5]1
8000a382:	3f f2 ed ff 	jlt.u %d2,%d15,8000a35c <osEE_scheduler_core_rq_preempt_stk+0x44>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
8000a386:	00 90       	ret 

8000a388 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
8000a388:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
8000a38a:	cc 51       	ld.a %a15,[%a5]4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
8000a38c:	c8 32       	ld.a %a2,[%a15]12
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
8000a38e:	76 44       	jz %d4,8000a396 <osEE_sn_priority_insert+0xe>
8000a390:	39 f2 1c 00 	ld.bu %d2,[%a15]28
8000a394:	3c 03       	j 8000a39a <osEE_sn_priority_insert+0x12>
8000a396:	39 22 01 00 	ld.bu %d2,[%a2]1
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
8000a39a:	cc 40       	ld.a %a15,[%a4]0
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
8000a39c:	a0 06       	mov.a %a6,0
8000a39e:	7c f3       	jnz.a %a15,8000a3a4 <osEE_sn_priority_insert+0x1c>
8000a3a0:	3c 14       	j 8000a3c8 <osEE_sn_priority_insert+0x40>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000a3a2:	60 ff       	mov.a %a15,%d15
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
8000a3a4:	c8 12       	ld.a %a2,[%a15]4
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
8000a3a6:	99 23 0c 00 	ld.a %a3,[%a2]12

    if (as_ready) {
8000a3aa:	76 44       	jz %d4,8000a3b2 <osEE_sn_priority_insert+0x2a>
      prio_to_check = p_cur_tdb->ready_prio;
8000a3ac:	39 2f 1c 00 	ld.bu %d15,[%a2]28
8000a3b0:	3c 02       	j 8000a3b4 <osEE_sn_priority_insert+0x2c>
    } else {
      prio_to_check = p_cur_tcb->current_prio;
8000a3b2:	0c 31       	ld.bu %d15,[%a3]1
    }

    if (new_task_prio <= prio_to_check)
8000a3b4:	3f 2f 06 80 	jlt.u %d15,%d2,8000a3c0 <osEE_sn_priority_insert+0x38>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000a3b8:	4c f0       	ld.w %d15,[%a15]0
8000a3ba:	40 f6       	mov.aa %a6,%a15
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
8000a3bc:	ee f3       	jnz %d15,8000a3a2 <osEE_sn_priority_insert+0x1a>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000a3be:	60 ff       	mov.a %a15,%d15
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
8000a3c0:	bc 64       	jz.a %a6,8000a3c8 <osEE_sn_priority_insert+0x40>
    p_prev->p_next = p_sn_new;
8000a3c2:	f4 65       	st.a [%a6],%a5
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
8000a3c4:	82 02       	mov %d2,0
8000a3c6:	3c 03       	j 8000a3cc <osEE_sn_priority_insert+0x44>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
8000a3c8:	f4 45       	st.a [%a4],%a5
    head_changed  = OSEE_TRUE;
8000a3ca:	82 12       	mov %d2,1
  }

  p_sn_new->p_next = p_curr;
8000a3cc:	ec 50       	st.a [%a5]0,%a15

  return head_changed;
}
8000a3ce:	00 90       	ret 

8000a3d0 <osEE_scheduler_rq_insert>:
(
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
8000a3d0:	40 ae       	mov.aa %a14,%sp
  p_sn_new->p_tdb = p_tdb_new;
8000a3d2:	b5 56 04 00 	st.a [%a5]4,%a6

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
8000a3d6:	82 14       	mov %d4,1
8000a3d8:	6d ff d8 ff 	call 8000a388 <osEE_sn_priority_insert>
#else
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_FALSE);
#endif /* !OSEE_SCHEDULER_GLOBAL */
}
8000a3dc:	00 90       	ret 

8000a3de <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
8000a3de:	40 ae       	mov.aa %a14,%sp
8000a3e0:	40 4d       	mov.aa %a13,%a4
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
8000a3e2:	cc 40       	ld.a %a15,[%a4]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
8000a3e4:	c8 3c       	ld.a %a12,[%a15]12
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
8000a3e6:	4c c0       	ld.w %d15,[%a12]0
8000a3e8:	68 3f       	st.w [%a15]12,%d15
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
8000a3ea:	6d ff 97 ff 	call 8000a318 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
8000a3ee:	4c f3       	ld.w %d15,[%a15]12

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
8000a3f0:	7c 28       	jnz.a %a2,8000a400 <osEE_scheduler_core_pop_running+0x22>
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if (p_curr_stk_sn != NULL) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
8000a3f2:	80 d3       	mov.d %d3,%a13
8000a3f4:	c2 43       	add %d3,4
8000a3f6:	92 42       	add %d2,%d15,4
8000a3f8:	6a 32       	cmovn %d2,%d15,%d3
8000a3fa:	60 2d       	mov.a %a13,%d2
8000a3fc:	4c d0       	ld.w %d15,[%a13]0
8000a3fe:	68 0f       	st.w [%a15]0,%d15
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
8000a400:	40 c2       	mov.aa %a2,%a12
8000a402:	00 90       	ret 

8000a404 <osEE_task_activated>:

FUNC(StatusType, OS_CODE) osEE_task_activated
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000a404:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act = p_tdb_act->p_tcb;
8000a406:	cc 43       	ld.a %a15,[%a4]12
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
8000a408:	0c f0       	ld.bu %d15,[%a15]0
8000a40a:	39 43 1e 00 	ld.bu %d3,[%a4]30
    ++p_tcb_act->current_num_of_act;
    ev = E_OK;
  } else {
    ev = E_OS_LIMIT;
8000a40e:	82 42       	mov %d2,4
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
8000a410:	7f 3f 05 80 	jge.u %d15,%d3,8000a41a <osEE_task_activated+0x16>
    ++p_tcb_act->current_num_of_act;
8000a414:	c2 1f       	add %d15,1
8000a416:	28 0f       	st.b [%a15]0,%d15
    ev = E_OK;
8000a418:	82 02       	mov %d2,0
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return ev;
}
8000a41a:	00 90       	ret 

8000a41c <osEE_task_end>:
FUNC(void, OS_CODE)
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
8000a41c:	40 ae       	mov.aa %a14,%sp
  /* It has to be called already in Multi-Core critical section */
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a41e:	cc 43       	ld.a %a15,[%a4]12

  p_tcb->current_prio = p_tdb->ready_prio;
8000a420:	39 4f 1c 00 	ld.bu %d15,[%a4]28
8000a424:	28 1f       	st.b [%a15]1,%d15

  --p_tcb->current_num_of_act;
8000a426:	0c f0       	ld.bu %d15,[%a15]0
8000a428:	c2 ff       	add %d15,-1
8000a42a:	16 ff       	and %d15,255
8000a42c:	28 0f       	st.b [%a15]0,%d15

  if (p_tcb->current_num_of_act == 0U) {
8000a42e:	ee 03       	jnz %d15,8000a434 <osEE_task_end+0x18>
    p_tcb->status = OSEE_TASK_SUSPENDED;
8000a430:	28 2f       	st.b [%a15]2,%d15
8000a432:	00 90       	ret 
  } else {
    p_tcb->status = OSEE_TASK_READY;
8000a434:	82 1f       	mov %d15,1
8000a436:	28 2f       	st.b [%a15]2,%d15
8000a438:	00 90       	ret 

8000a43a <osEE_task_event_set_mask>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)    p_tdb_waking_up,
  VAR(EventMaskType, AUTOMATIC)               Mask,
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
8000a43a:	40 ae       	mov.aa %a14,%sp
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_waking_up = p_tdb_waking_up->p_tcb;
8000a43c:	cc 43       	ld.a %a15,[%a4]12
    *p_ev = E_OS_STATE;
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;
8000a43e:	02 42       	mov %d2,%d4
8000a440:	02 43       	mov %d3,%d4
8000a442:	49 f2 4c 08 	ldmst [%a15]12,%e2

    *p_ev = E_OK;
8000a446:	82 0f       	mov %d15,0
8000a448:	2c 50       	st.b [%a5]0,%d15

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
8000a44a:	4c f2       	ld.w %d15,[%a15]8
8000a44c:	26 f4       	and %d4,%d15
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
8000a44e:	a0 02       	mov.a %a2,0
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;

    *p_ev = E_OK;

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
8000a450:	76 45       	jz %d4,8000a45a <osEE_task_event_set_mask+0x20>
      p_own_sn = p_tcb_waking_up->p_own_sn;
8000a452:	c8 42       	ld.a %a2,[%a15]16

      /* Set p_own_sn of waking up task to NULL so it won't be inserted in
         RQ more than once. */
      if (p_own_sn != NULL) {
8000a454:	bc 23       	jz.a %a2,8000a45a <osEE_task_event_set_mask+0x20>
        p_tcb_waking_up->p_own_sn = NULL;
8000a456:	82 0f       	mov %d15,0
8000a458:	68 4f       	st.w [%a15]16,%d15
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return p_own_sn;
}
8000a45a:	00 90       	ret 

8000a45c <osEE_activate_isr2>:
FUNC(void, OS_CODE)
  osEE_activate_isr2
(
  VAR(TaskType, AUTOMATIC) isr2_id
)
{
8000a45c:	40 ae       	mov.aa %a14,%sp
  osEE_stack_monitoring(osEE_get_curr_core());
#endif /* OSEE_HAS_STACK_MONITORING */
  {
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
8000a45e:	91 00 00 48 	movh.a %a4,32768
8000a462:	d9 44 34 40 	lea %a4,[%a4]308 <80000134 <osEE_kdb_var>>
8000a466:	cc 41       	ld.a %a15,[%a4]4
8000a468:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000a46c:	c8 05       	ld.a %a5,[%a15]0

    /* Mark the TASK as Activated (I don't need to protect this increment
       since ISRs cannot be activated by another core (exception done for
       IPI, that have to be handled in a special way in any case). */
    ++p_act_tdb->p_tcb->current_num_of_act;
8000a46e:	cc 53       	ld.a %a15,[%a5]12
8000a470:	0c f0       	ld.bu %d15,[%a15]0
8000a472:	c2 1f       	add %d15,1
8000a474:	28 0f       	st.b [%a15]0,%d15

    osEE_scheduler_task_set_running(p_kdb, p_act_tdb, NULL);
8000a476:	a0 06       	mov.a %a6,0
8000a478:	6d 00 c4 00 	call 8000a600 <osEE_scheduler_task_set_running>
8000a47c:	00 90       	ret 

8000a47e <osEE_scheduler_task_activated>:
  osEE_scheduler_task_activated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000a47e:	40 ae       	mov.aa %a14,%sp
8000a480:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   is_preemption;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act   = p_tdb_act->p_tcb;
8000a482:	99 52 0c 00 	ld.a %a2,[%a5]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
8000a486:	91 00 00 f8 	movh.a %a15,32768
8000a48a:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
8000a48e:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
8000a490:	99 43 0c 00 	ld.a %a3,[%a4]12 <80000148 <osEE_cdb_var>>
    }
    is_preemption = OSEE_FALSE;
  } else
#endif /* !OSEE_SINGLECORE */
  /* Preemption Check */
  if (p_curr_tcb->current_prio < p_tcb_act->current_prio) {
8000a494:	39 32 01 00 	ld.bu %d2,[%a3]1 <80000148 <osEE_cdb_var>>
8000a498:	0c 21       	ld.bu %d15,[%a2]1
8000a49a:	7f f2 15 80 	jge.u %d2,%d15,8000a4c4 <osEE_scheduler_task_activated+0x46>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000a49e:	c8 22       	ld.a %a2,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a4a0:	4c 20       	ld.w %d15,[%a2]0
8000a4a2:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a4a4:	82 02       	mov %d2,0
8000a4a6:	74 22       	st.w [%a2],%d2
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

    /* Set Previous TASK status as Ready but stacked */
    p_curr_tcb->status = OSEE_TASK_READY_STACKED;
8000a4a8:	82 2f       	mov %d15,2
8000a4aa:	2c 32       	st.b [%a3]2,%d15

    /* Set the activated TASK as current */
    p_new_stk->p_tdb            = p_tdb_act;
8000a4ac:	b5 25 04 00 	st.a [%a2]4,%a5
    p_new_stk->p_next           = p_ccb->p_stk_sn;
8000a4b0:	4c f3       	ld.w %d15,[%a15]12
8000a4b2:	6c 20       	st.w [%a2]0,%d15
    p_ccb->p_stk_sn             = p_new_stk;
8000a4b4:	e8 32       	st.a [%a15]12,%a2
    p_ccb->p_curr               = p_tdb_act;
8000a4b6:	e8 05       	st.a [%a15]0,%a5
    osEE_task_event_reset_mask(p_tdb_act->p_tcb);
8000a4b8:	cc 53       	ld.a %a15,[%a5]12
  osEE_task_event_reset_mask
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
  p_tcb->event_mask = 0U;
8000a4ba:	68 32       	st.w [%a15]12,%d2

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_curr, p_tdb_act);
8000a4bc:	6d 00 c1 00 	call 8000a63e <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
8000a4c0:	82 12       	mov %d2,1
8000a4c2:	00 90       	ret 
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
8000a4c4:	0c 22       	ld.bu %d15,[%a2]2
8000a4c6:	ee 05       	jnz %d15,8000a4d0 <osEE_scheduler_task_activated+0x52>
    p_tcb_act->status = OSEE_TASK_READY;
8000a4c8:	82 1f       	mov %d15,1
8000a4ca:	2c 22       	st.b [%a2]2,%d15
8000a4cc:	82 0f       	mov %d15,0
8000a4ce:	6c 23       	st.w [%a2]12,%d15
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000a4d0:	c8 25       	ld.a %a5,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a4d2:	4c 50       	ld.w %d15,[%a5]0
8000a4d4:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a4d6:	82 0f       	mov %d15,0
8000a4d8:	6c 50       	st.w [%a5]0,%d15
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
8000a4da:	d9 f4 04 00 	lea %a4,[%a15]4
8000a4de:	6d ff 79 ff 	call 8000a3d0 <osEE_scheduler_rq_insert>
    /* Actually Insert the activated in READY Queue */
    (void)osEE_scheduler_task_insert_rq(p_ccb, p_tdb_act, p_tcb_act);

    osEE_unlock_core(p_cdb);

    is_preemption = OSEE_FALSE;
8000a4e2:	82 02       	mov %d2,0
  }

  return is_preemption;
}
8000a4e4:	00 90       	ret 

8000a4e6 <osEE_scheduler_task_insert>:
  osEE_scheduler_task_insert
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000a4e6:	40 ae       	mov.aa %a14,%sp
8000a4e8:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   head_changed;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act     = p_tdb_act->p_tcb;
8000a4ea:	cc 53       	ld.a %a15,[%a5]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb         = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb         = p_cdb->p_ccb;
8000a4ec:	91 00 00 28 	movh.a %a2,32768
8000a4f0:	99 24 08 50 	ld.a %a4,[%a2]328 <80000148 <osEE_cdb_var>>
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
8000a4f4:	0c f2       	ld.bu %d15,[%a15]2
8000a4f6:	ee 05       	jnz %d15,8000a500 <osEE_scheduler_task_insert+0x1a>
    p_tcb_act->status = OSEE_TASK_READY;
8000a4f8:	82 1f       	mov %d15,1
8000a4fa:	28 2f       	st.b [%a15]2,%d15
8000a4fc:	82 0f       	mov %d15,0
8000a4fe:	68 3f       	st.w [%a15]12,%d15
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000a500:	99 45 08 00 	ld.a %a5,[%a4]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a504:	4c 50       	ld.w %d15,[%a5]0
8000a506:	6c 42       	st.w [%a4]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a508:	82 0f       	mov %d15,0
8000a50a:	6c 50       	st.w [%a5]0,%d15
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
8000a50c:	b0 44       	add.a %a4,4
8000a50e:	6d ff 61 ff 	call 8000a3d0 <osEE_scheduler_rq_insert>

    osEE_unlock_core(p_cdb);
  }

  return head_changed;
}
8000a512:	00 90       	ret 

8000a514 <osEE_scheduler_task_unblocked>:
  osEE_scheduler_task_unblocked
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
8000a514:	40 ae       	mov.aa %a14,%sp
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
8000a516:	99 56 04 00 	ld.a %a6,[%a5]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
8000a51a:	cc 63       	ld.a %a15,[%a6]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_released);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000a51c:	91 00 00 28 	movh.a %a2,32768
8000a520:	99 2c 08 50 	ld.a %a12,[%a2]328 <80000148 <osEE_cdb_var>>

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
8000a524:	82 2f       	mov %d15,2
8000a526:	28 2f       	st.b [%a15]2,%d15
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
8000a528:	39 6f 1c 00 	ld.bu %d15,[%a6]28
8000a52c:	28 1f       	st.b [%a15]1,%d15
  /* Touch unused parameters */
  (void)p_kdb;

  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
8000a52e:	d9 c4 04 00 	lea %a4,[%a12]4
8000a532:	6d ff 4f ff 	call 8000a3d0 <osEE_scheduler_rq_insert>
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
8000a536:	82 0f       	mov %d15,0
  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
8000a538:	df 12 0a 80 	jne %d2,1,8000a54c <osEE_scheduler_task_unblocked+0x38>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
8000a53c:	d4 c2       	ld.a %a2,[%a12]
8000a53e:	99 22 0c 00 	ld.a %a2,[%a2]12

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
    is_preemption = (p_tcb_released->current_prio >
8000a542:	0c f1       	ld.bu %d15,[%a15]1
8000a544:	39 22 01 00 	ld.bu %d2,[%a2]1
8000a548:	0b f2 30 f1 	lt.u %d15,%d2,%d15
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
8000a54c:	02 f2       	mov %d2,%d15
8000a54e:	00 90       	ret 

8000a550 <osEE_scheduler_task_terminated>:
  osEE_scheduler_task_terminated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
8000a550:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a552:	91 00 00 f8 	movh.a %a15,32768
8000a556:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
8000a55a:	c8 0d       	ld.a %a13,[%a15]0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
8000a55c:	99 dc 0c 00 	ld.a %a12,[%a13]12 <80000148 <osEE_cdb_var>>

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
8000a560:	f4 5d       	st.a [%a5],%a13

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
8000a562:	0c c2       	ld.bu %d15,[%a12]2
8000a564:	de 4a       	jne %d15,4,8000a598 <osEE_scheduler_task_terminated+0x48>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
8000a566:	91 00 00 48 	movh.a %a4,32768
8000a56a:	d9 44 08 50 	lea %a4,[%a4]328 <80000148 <osEE_cdb_var>>
8000a56e:	d9 f5 04 00 	lea %a5,[%a15]4 <80000148 <osEE_cdb_var>>
8000a572:	6d ff 36 ff 	call 8000a3de <osEE_scheduler_core_pop_running>
8000a576:	80 28       	mov.d %d8,%a2

      p_tdb_to = p_ccb->p_curr;
8000a578:	4c f0       	ld.w %d15,[%a15]0

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
8000a57a:	80 d2       	mov.d %d2,%a13
8000a57c:	5f f2 06 00 	jeq %d2,%d15,8000a588 <osEE_scheduler_task_terminated+0x38>
        osEE_task_end(p_tdb_term);
8000a580:	40 d4       	mov.aa %a4,%a13
8000a582:	6d ff 4d ff 	call 8000a41c <osEE_task_end>
8000a586:	3c 04       	j 8000a58e <osEE_scheduler_task_terminated+0x3e>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
8000a588:	14 c2       	ld.bu %d2,[%a12]
8000a58a:	c2 f2       	add %d2,-1
8000a58c:	34 c2       	st.b [%a12],%d2
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
8000a58e:	48 22       	ld.w %d2,[%a15]8
8000a590:	60 82       	mov.a %a2,%d8
8000a592:	74 22       	st.w [%a2],%d2
  (*pp_first)       = p_to_free;
8000a594:	68 28       	st.w [%a15]8,%d8
8000a596:	3c 20       	j 8000a5d6 <osEE_scheduler_task_terminated+0x86>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
8000a598:	c8 35       	ld.a %a5,[%a15]12

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
8000a59a:	54 52       	ld.w %d2,[%a5]
8000a59c:	68 32       	st.w [%a15]12,%d2
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
8000a59e:	39 df 1c 00 	ld.bu %d15,[%a13]28
8000a5a2:	2c c1       	st.b [%a12]1,%d15
      p_tcb_term->status = OSEE_TASK_READY;
8000a5a4:	82 1f       	mov %d15,1
8000a5a6:	2c c2       	st.b [%a12]2,%d15
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transition from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
8000a5a8:	0c c0       	ld.bu %d15,[%a12]0
8000a5aa:	5e 13       	jne %d15,1,8000a5b0 <osEE_scheduler_task_terminated+0x60>
8000a5ac:	82 0f       	mov %d15,0
8000a5ae:	6c c3       	st.w [%a12]12,%d15
        osEE_task_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
8000a5b0:	d9 fc 04 00 	lea %a12,[%a15]4
8000a5b4:	40 c4       	mov.aa %a4,%a12
8000a5b6:	40 d6       	mov.aa %a6,%a13
8000a5b8:	6d ff 0c ff 	call 8000a3d0 <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
8000a5bc:	91 00 00 48 	movh.a %a4,32768
8000a5c0:	d9 44 08 50 	lea %a4,[%a4]328 <80000148 <osEE_cdb_var>>
8000a5c4:	40 c5       	mov.aa %a5,%a12
8000a5c6:	6d ff a9 fe 	call 8000a318 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
8000a5ca:	7c 25       	jnz.a %a2,8000a5d4 <osEE_scheduler_task_terminated+0x84>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
8000a5cc:	c8 32       	ld.a %a2,[%a15]12
8000a5ce:	4c 21       	ld.w %d15,[%a2]4
          p_ccb->p_curr           = p_tdb_to;
8000a5d0:	68 0f       	st.w [%a15]0,%d15
8000a5d2:	3c 02       	j 8000a5d6 <osEE_scheduler_task_terminated+0x86>
        } else {
          p_tdb_to = p_ccb->p_curr;
8000a5d4:	4c f0       	ld.w %d15,[%a15]0
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
8000a5d6:	60 f2       	mov.a %a2,%d15
8000a5d8:	00 90       	ret 

8000a5da <osEE_scheduler_task_preemption_point>:
FUNC(OsEE_bool, OS_CODE)
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb
)
{
8000a5da:	40 ae       	mov.aa %a14,%sp
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a5dc:	91 00 00 48 	movh.a %a4,32768
8000a5e0:	99 4f 08 50 	ld.a %a15,[%a4]328 <80000148 <osEE_cdb_var>>
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
8000a5e4:	d9 44 08 50 	lea %a4,[%a4]328 <80000148 <osEE_cdb_var>>
8000a5e8:	d9 f5 04 00 	lea %a5,[%a15]4 <80000148 <osEE_cdb_var>>
8000a5ec:	6d ff 96 fe 	call 8000a318 <osEE_scheduler_core_rq_preempt_stk>

    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    is_preemption = OSEE_FALSE;
8000a5f0:	82 02       	mov %d2,0
  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);

  /* Unlock the Scheduler (critical section terminated) */
  osEE_unlock_core(p_cdb);

  if (p_prev != NULL) {
8000a5f2:	bc 26       	jz.a %a2,8000a5fe <osEE_scheduler_task_preemption_point+0x24>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_change_context_from_running(p_prev, p_curr);
8000a5f4:	40 24       	mov.aa %a4,%a2
8000a5f6:	c8 05       	ld.a %a5,[%a15]0
8000a5f8:	6d 00 23 00 	call 8000a63e <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
8000a5fc:	82 12       	mov %d2,1
  } else {
    is_preemption = OSEE_FALSE;
  }

  return is_preemption;
}
8000a5fe:	00 90       	ret 

8000a600 <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn
)
{
8000a600:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a602:	91 00 00 f8 	movh.a %a15,32768
8000a606:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
8000a60a:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
8000a60c:	48 32       	ld.w %d2,[%a15]12

  /* Set previous TASK as stacked only if the activation has been completed */
  if (p_preempted->p_tcb->status == OSEE_TASK_RUNNING) {
8000a60e:	99 42 0c 00 	ld.a %a2,[%a4]12 <80000148 <osEE_cdb_var>>
8000a612:	0c 22       	ld.bu %d15,[%a2]2
8000a614:	5e 43       	jne %d15,4,8000a61a <osEE_scheduler_task_set_running+0x1a>
    p_preempted->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000a616:	82 2f       	mov %d15,2
8000a618:	2c 22       	st.b [%a2]2,%d15
  }
  p_ccb->p_curr                 = p_tdb;
8000a61a:	e8 05       	st.a [%a15]0,%a5

  /* Touch unused parameters */
  (void)p_kdb;
  if (p_sn == NULL) {
8000a61c:	7c 68       	jnz.a %a6,8000a62c <osEE_scheduler_task_set_running+0x2c>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000a61e:	c8 22       	ld.a %a2,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a620:	4c 20       	ld.w %d15,[%a2]0
8000a622:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a624:	82 0f       	mov %d15,0
8000a626:	6c 20       	st.w [%a2]0,%d15
    osEE_lock_core(p_cdb);
    /* Alloc the SN for the new Running TASK */
    p_ccb->p_stk_sn             = osEE_sn_alloc(&p_ccb->p_free_sn);
8000a628:	e8 32       	st.a [%a15]12,%a2
8000a62a:	3c 02       	j 8000a62e <osEE_scheduler_task_set_running+0x2e>
    osEE_unlock_core(p_cdb);
  } else {
    p_ccb->p_stk_sn             = p_sn;
8000a62c:	e8 36       	st.a [%a15]12,%a6
  }

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
8000a62e:	c8 32       	ld.a %a2,[%a15]12
8000a630:	b5 25 04 00 	st.a [%a2]4,%a5
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
8000a634:	c8 3f       	ld.a %a15,[%a15]12
8000a636:	68 02       	st.w [%a15]0,%d2

  osEE_change_context_from_running(p_preempted, p_tdb);
8000a638:	6d 00 03 00 	call 8000a63e <osEE_change_context_from_running>
8000a63c:	00 90       	ret 

8000a63e <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000a63e:	40 ae       	mov.aa %a14,%sp
8000a640:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a642:	99 52 0c 00 	ld.a %a2,[%a5]12
8000a646:	0c 22       	ld.bu %d15,[%a2]2
8000a648:	5e 28       	jne %d15,2,8000a658 <osEE_change_context_from_running+0x1a>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
8000a64a:	40 54       	mov.aa %a4,%a5
8000a64c:	99 55 04 00 	ld.a %a5,[%a5]4
8000a650:	c8 16       	ld.a %a6,[%a15]4
8000a652:	6d 00 73 00 	call 8000a738 <osEE_hal_save_ctx_and_restore_ctx>
8000a656:	00 90       	ret 
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
8000a658:	40 54       	mov.aa %a4,%a5
8000a65a:	99 55 04 00 	ld.a %a5,[%a5]4
8000a65e:	c8 16       	ld.a %a6,[%a15]4
8000a660:	6d 00 8b 00 	call 8000a776 <osEE_hal_save_ctx_and_ready2stacked>
8000a664:	00 90       	ret 

8000a666 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000a666:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a668:	cc 53       	ld.a %a15,[%a5]12
8000a66a:	0c f2       	ld.bu %d15,[%a15]2
8000a66c:	5e 27       	jne %d15,2,8000a67a <osEE_change_context_from_task_end+0x14>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
8000a66e:	40 54       	mov.aa %a4,%a5
8000a670:	99 55 04 00 	ld.a %a5,[%a5]4
8000a674:	6d 00 74 00 	call 8000a75c <osEE_hal_restore_ctx>
8000a678:	00 90       	ret 
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
8000a67a:	40 54       	mov.aa %a4,%a5
8000a67c:	99 55 04 00 	ld.a %a5,[%a5]4
8000a680:	6d 00 8d 00 	call 8000a79a <osEE_hal_ready2stacked>
8000a684:	00 90       	ret 

8000a686 <osEE_idle_task_terminate>:
FUNC(void, OS_CODE)
  osEE_idle_task_terminate
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_idle_tdb
)
{
8000a686:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
8000a688:	99 45 04 00 	ld.a %a5,[%a4]4
  CONSTP2CONST(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos     = p_sdb->p_bos;
8000a68c:	cc 40       	ld.a %a15,[%a4]0
8000a68e:	48 03       	ld.w %d3,[%a15]0
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
8000a690:	cc 50       	ld.a %a15,[%a5]0
8000a692:	3c 02       	j 8000a696 <osEE_idle_task_terminate+0x10>

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
8000a694:	60 ff       	mov.a %a15,%d15
8000a696:	4c f0       	ld.w %d15,[%a15]0
  } while ((p_tos != NULL) && (p_tos != p_bos));
8000a698:	8b 0f 20 22 	ne %d2,%d15,0
8000a69c:	0b 3f 10 22 	and.ne %d2,%d15,%d3
8000a6a0:	df 02 fa ff 	jne %d2,0,8000a694 <osEE_idle_task_terminate+0xe>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
8000a6a4:	ec 50       	st.a [%a5]0,%a15

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
8000a6a6:	6d 00 5b 00 	call 8000a75c <osEE_hal_restore_ctx>
8000a6aa:	00 90       	ret 

8000a6ac <osEE_cpu_startos>:
}
#endif /* OSEE_SINGLECORE */
#endif /* OSEE_TC_HAS_ISR1_TO_CONF */

OsEE_bool osEE_cpu_startos(void)
{
8000a6ac:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000a6ae:	4d c0 e1 5f 	mfcr %d5,$core_id
#if (!defined(OSEE_SINGLECORE))
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
8000a6b2:	91 00 00 f8 	movh.a %a15,32768
8000a6b6:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
8000a6ba:	c8 2f       	ld.a %a15,[%a15]8
8000a6bc:	b0 ff       	add.a %a15,-1
  for (i = 0U; i < tdb_size; ++i) {
8000a6be:	bd 0f 2a 00 	jz.a %a15,8000a712 <osEE_cpu_startos+0x66>
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
8000a6c2:	91 00 00 28 	movh.a %a2,32768
8000a6c6:	d9 22 34 40 	lea %a2,[%a2]308 <80000134 <osEE_kdb_var>>
8000a6ca:	19 23 04 00 	ld.w %d3,[%a2]4 <80000004 <BootModeHeader0+0x4>>
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000a6ce:	8f 35 00 51 	and %d5,%d5,3
8000a6d2:	8f b5 00 50 	sh %d5,%d5,11
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
8000a6d6:	bb f0 ff 4f 	mov.u %d4,65535
8000a6da:	82 0f       	mov %d15,0
8000a6dc:	b0 ff       	add.a %a15,-1
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
8000a6de:	60 33       	mov.a %a3,%d3
8000a6e0:	90 32       	addsc.a %a2,%a3,%d15,2
8000a6e2:	d4 22       	ld.a %a2,[%a2]
#if (!defined(OSEE_SINGLECORE))
    if (p_tdb->orig_core_id == curr_core_id) {
#endif /* !OSEE_SINGLECORE */
      if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000a6e4:	39 22 14 00 	ld.bu %d2,[%a2]20
8000a6e8:	df 22 12 80 	jne %d2,2,8000a70c <osEE_cpu_startos+0x60>
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
8000a6ec:	b9 22 08 00 	ld.hu %d2,[%a2]8
8000a6f0:	5f 42 0e 00 	jeq %d2,%d4,8000a70c <osEE_cpu_startos+0x60>
8000a6f4:	60 24       	mov.a %a4,%d2
8000a6f6:	d9 43 00 08 	lea %a3,[%a4]-32768
8000a6fa:	11 43 00 3f 	addih.a %a3,%a3,61444
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
8000a6fe:	39 22 1c 00 	ld.bu %d2,[%a2]28
8000a702:	c2 12       	add %d2,1
8000a704:	b7 82 99 23 	insert %d2,%d2,8,7,25
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
8000a708:	a6 52       	or %d2,%d5
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000a70a:	74 32       	st.w [%a3],%d2
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
8000a70c:	c2 1f       	add %d15,1
8000a70e:	fd f0 e8 7f 	loop %a15,8000a6de <osEE_cpu_startos+0x32>
    }
  }
#endif /* OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING */

  return osEE_std_cpu_startos();
}
8000a712:	82 12       	mov %d2,1
8000a714:	00 90       	ret 

8000a716 <osEE_tc_change_context_from_task_end>:
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a716:	99 42 0c 00 	ld.a %a2,[%a4]12
static FUNC(void, OS_CODE) OSEE_NEVER_INLINE
  osEE_tc_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000a71a:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a71c:	0c 22       	ld.bu %d15,[%a2]2
8000a71e:	1e 27       	jeq %d15,2,8000a72c <osEE_tc_change_context_from_task_end+0x16>
    osEE_tc_setareg(a4, p_to);
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
    osEE_tc_jump(osEE_hal_restore_ctx);
  } else {
    osEE_tc_setareg(a4, p_to);
8000a720:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000a722:	c8 1f       	ld.a %a15,[%a15]4
8000a724:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_ready2stacked);
8000a726:	1d 00 3a 00 	j 8000a79a <osEE_hal_ready2stacked>
8000a72a:	00 90       	ret 
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
    osEE_tc_setareg(a4, p_to);
8000a72c:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000a72e:	c8 1f       	ld.a %a15,[%a15]4
8000a730:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_restore_ctx);
8000a732:	1d 00 15 00 	j 8000a75c <osEE_hal_restore_ctx>
8000a736:	00 90       	ret 

8000a738 <osEE_hal_save_ctx_and_restore_ctx>:
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
8000a738:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000a73a:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000a73e:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000a740:	4c 60       	ld.w %d15,[%a6]0
8000a742:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a746:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a74a:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000a74e:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a750:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a754:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the restore CTX */
  osEE_tc_jump(osEE_hal_restore_ctx);
8000a756:	1d 00 03 00 	j 8000a75c <osEE_hal_restore_ctx>
8000a75a:	00 90       	ret 

8000a75c <osEE_hal_restore_ctx>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to_tdb,
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_to_scb
)
{
  OsEE_CTX  const * const p_ctx = p_to_scb->p_tos;
8000a75c:	cc 50       	ld.a %a15,[%a5]0
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
8000a75e:	c8 32       	ld.a %a2,[%a15]12
  OsEE_pcxi const         pcxi  = p_ctx->pcxi;
8000a760:	4c f2       	ld.w %d15,[%a15]8
8000a762:	40 2b       	mov.aa %a11,%a2

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
8000a764:	cd 0f e0 0f 	mtcr $pcxi,%d15
8000a768:	0d 00 c0 04 	isync 
/* Set the return address back */
  osEE_tc_set_RA(p_ctx->ra);
/* Set the PCXI back */
  osEE_tc_csa_set_pcxi(pcxi);
/* Restore the previous Top of Stack */
  p_to_scb->p_tos = p_ctx->p_ctx;
8000a76c:	4c f0       	ld.w %d15,[%a15]0
8000a76e:	6c 50       	st.w [%a5]0,%d15
/* Jump to Kernel Wrapper: it will be the "ret" inside
   osEE_scheduler_task_wrapper_restore at:
   1) Restore the CSA so the SP,
   2) Return at RA address, that is the address after change context calling
      site */
  osEE_tc_jump(osEE_scheduler_task_wrapper_restore);
8000a770:	1d ff 69 fd 	j 8000a242 <osEE_scheduler_task_wrapper_restore>
8000a774:	00 90       	ret 

8000a776 <osEE_hal_save_ctx_and_ready2stacked>:
8000a776:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000a778:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000a77c:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000a77e:	4c 60       	ld.w %d15,[%a6]0
8000a780:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a784:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a788:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000a78c:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a78e:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a792:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the ready to stacked */
  osEE_tc_jump(osEE_hal_ready2stacked);
8000a794:	1d 00 03 00 	j 8000a79a <osEE_hal_ready2stacked>
8000a798:	00 90       	ret 

8000a79a <osEE_hal_ready2stacked>:
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000a79a:	cc 50       	ld.a %a15,[%a5]0
8000a79c:	40 fa       	mov.aa %sp,%a15
  __asm__ volatile ("isync" : : : "memory");
}

/** The svlcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_svlcx(void) {
  __asm__ volatile ("svlcx" : : : "memory");
8000a79e:	0d 00 00 02 	svlcx 
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
8000a7a2:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000a7a4:	d9 f2 f0 ff 	lea %a2,[%a15]-16
8000a7a8:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000a7aa:	4c 50       	ld.w %d15,[%a5]0
8000a7ac:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a7b0:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a7b4:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000a7b8:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a7ba:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a7be:	f4 52       	st.a [%a5],%a2
   N.B. The RA saved in this context is not useful, but I prefer to use one
        save ctx code for all the cases for code readability, instead using an
        optimized one for this case */
  osEE_tc_save_ctx(p_to_scb);
/* Jump to Kernel Wrapper */
  osEE_tc_jump(osEE_scheduler_task_wrapper_run);
8000a7c0:	1d ff 46 fd 	j 8000a24c <osEE_scheduler_task_wrapper_run>
8000a7c4:	00 90       	ret 

8000a7c6 <osEE_tc_change_context_from_isr2_end>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
/* Reset PSW Call Depth Counter, so I can force a RFE */
  osEE_tc_set_csfr(OSEE_CSFR_PSW,
8000a7c6:	4d 40 e0 ff 	mfcr %d15,$psw
8000a7ca:	8f ff c7 f1 	andn %d15,%d15,127
8000a7ce:	cd 4f e0 0f 	mtcr $psw,%d15
8000a7d2:	0d 00 c0 04 	isync 
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
8000a7d6:	91 10 00 f8 	movh.a %a15,32769
8000a7da:	d9 ff 56 ca 	lea %a15,[%a15]-22762 <8000a716 <osEE_tc_change_context_from_task_end>>
8000a7de:	40 fb       	mov.aa %a11,%a15
  __asm__ volatile ("rslcx" : : : "memory");
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
8000a7e0:	00 80       	rfe 
8000a7e2:	00 90       	ret 

8000a7e4 <osEE_hal_terminate_ctx>:
  osEE_hal_terminate_ctx
(
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_term_scb,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
8000a7e4:	20 08       	sub.a %sp,8

/* Returns the first CSA in the Free Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_fcx(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_FCX);
8000a7e6:	4d 80 e3 2f 	mfcr %d2,$fcx

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a7ea:	4d 00 e0 ff 	mfcr %d15,$pcxi
    OsEE_csa_link fcx                 = osEE_tc_csa_get_fcx();
/* Obtain Previous CSA list head, That is the head of the to_free_queue
   (will be new FCX) */
    OsEE_csa_link to_free_queue_head  = osEE_tc_csa_get_pcxi();
/* Get the the of the CSA list to be freed */
    OsEE_csa_link to_free_queue_tail  = p_term_scb->p_tos->pcxi;
8000a7ee:	cc 40       	ld.a %a15,[%a4]0
8000a7f0:	48 23       	ld.w %d3,[%a15]8
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000a7f2:	b9 f4 08 00 	ld.hu %d4,[%a15]8
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
8000a7f6:	37 03 64 38 	extr.u %d3,%d3,16,4
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000a7fa:	06 64       	sh %d4,6
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
8000a7fc:	8f c3 01 30 	sh %d3,%d3,28
8000a800:	a6 43       	or %d3,%d4
8000a802:	60 3f       	mov.a %a15,%d3
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    l_next = p_csa->l_next;
  } else {
    l_next.reg = 0U;
8000a804:	82 03       	mov %d3,0
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE
  osEE_tc_csa_get_next(OsEE_csa_link l_csa_at)
{
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
8000a806:	bc f3       	jz.a %a15,8000a80c <osEE_hal_terminate_ctx+0x28>
    l_next = p_csa->l_next;
8000a808:	48 03       	ld.w %d3,[%a15]0
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_next(OsEE_csa_link l_csa_at, OsEE_csa_link l_next)
{
  OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    p_csa->l_next = l_next;
8000a80a:	68 02       	st.w [%a15]0,%d2

/* Set the first CSA in the Free Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_fcx(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_FCX, l_csa.reg);
8000a80c:	cd 8f e3 0f 	mtcr $fcx,%d15
8000a810:	0d 00 c0 04 	isync 

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
8000a814:	cd 03 e0 0f 	mtcr $pcxi,%d3
8000a818:	0d 00 c0 04 	isync 
   since a TASK, not yet started with higher priority of the stacked ones,
   could have been activated. */
   osEE_tc_set_RA(p_term_scb->p_tos->ra);
#endif /* 0 */
/* Pop ERIKA's context */
   p_term_scb->p_tos = p_term_scb->p_tos->p_ctx;
8000a81c:	cc 40       	ld.a %a15,[%a4]0
8000a81e:	4c f0       	ld.w %d15,[%a15]0
8000a820:	6c 40       	st.w [%a4]0,%d15
   "osEE_hal_ready2stacked" PCXI. */
  {
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);
8000a822:	91 00 00 48 	movh.a %a4,32768
8000a826:	d9 44 34 40 	lea %a4,[%a4]308 <80000134 <osEE_kdb_var>>
8000a82a:	d9 a5 04 00 	lea %a5,[%sp]4 <80000134 <osEE_kdb_var>>
8000a82e:	6d ff 91 fe 	call 8000a550 <osEE_scheduler_task_terminated>

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
8000a832:	d8 01       	ld.a %a15,[%sp]4
8000a834:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000a838:	1e 25       	jeq %d15,2,8000a842 <osEE_hal_terminate_ctx+0x5e>
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
    } else {
/* Prepare to jump to osEE_tc_change_context_from_task_end */
      osEE_tc_setareg(a4, p_to);
8000a83a:	40 24       	mov.aa %a4,%a2
      osEE_tc_jump(osEE_tc_change_context_from_task_end);
8000a83c:	1d ff 6d ff 	j 8000a716 <osEE_tc_change_context_from_task_end>
    }
  }
/* Fake infinite loop: to turn off 'noreturn' function does return warning */
  for(;;) {
    ;
  }
8000a840:	3c 00       	j 8000a840 <osEE_hal_terminate_ctx+0x5c>

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
8000a842:	40 24       	mov.aa %a4,%a2
8000a844:	6d ff c1 ff 	call 8000a7c6 <osEE_tc_change_context_from_isr2_end>
8000a848:	3c fc       	j 8000a840 <osEE_hal_terminate_ctx+0x5c>

8000a84a <__lshrdi3>:
8000a84a:	6f 56 0c 80 	jnz.t %d6,5,8000a862 <__lshrdi3+0x18>
8000a84e:	8b 06 02 71 	rsub %d7,%d6,32
8000a852:	32 56       	rsub %d6
8000a854:	17 45 80 27 	dextr %d2,%d5,%d4,%d7
8000a858:	0f 65 00 30 	sh %d3,%d5,%d6
8000a85c:	2b 42 40 26 	sel %d2,%d6,%d2,%d4
8000a860:	00 90       	ret 
8000a862:	8b 06 02 60 	add %d6,%d6,32
8000a866:	32 56       	rsub %d6
8000a868:	0f 65 00 20 	sh %d2,%d5,%d6
8000a86c:	82 03       	mov %d3,0
8000a86e:	00 90       	ret 

8000a870 <__extendsfdf2>:
8000a870:	20 20       	sub.a %sp,32
8000a872:	d9 a4 20 00 	lea %a4,[%sp]32
8000a876:	89 44 2c f5 	st.w [+%a4]-20,%d4
8000a87a:	d9 a5 10 00 	lea %a5,[%sp]16
8000a87e:	6d 00 d8 02 	call 8000ae2e <__unpack_f>
8000a882:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000a886:	39 a4 10 00 	ld.bu %d4,[%sp]16
8000a88a:	8f e2 1f f0 	sh %d15,%d2,-2
8000a88e:	8f e2 01 20 	sh %d2,%d2,30
8000a892:	74 a2       	st.w [%sp],%d2
8000a894:	78 01       	st.w [%sp]4,%d15
8000a896:	19 a5 14 00 	ld.w %d5,[%sp]20
8000a89a:	19 a6 18 00 	ld.w %d6,[%sp]24
8000a89e:	1d 00 8e 02 	j 8000adba <__make_dp>

8000a8a2 <_fpadd_parts>:
8000a8a2:	0c 40       	ld.bu %d15,[%a4]0
8000a8a4:	40 42       	mov.aa %a2,%a4
8000a8a6:	bf 2f cb 80 	jlt.u %d15,2,8000aa3c <_fpadd_parts+0x19a>
8000a8aa:	14 52       	ld.bu %d2,[%a5]
8000a8ac:	40 52       	mov.aa %a2,%a5
8000a8ae:	bf 22 c7 80 	jlt.u %d2,2,8000aa3c <_fpadd_parts+0x19a>
8000a8b2:	5e 4e       	jne %d15,4,8000a8ce <_fpadd_parts+0x2c>
8000a8b4:	40 42       	mov.aa %a2,%a4
8000a8b6:	df 42 c3 80 	jne %d2,4,8000aa3c <_fpadd_parts+0x19a>
8000a8ba:	19 42 04 00 	ld.w %d2,[%a4]4
8000a8be:	4c 51       	ld.w %d15,[%a5]4
8000a8c0:	5f f2 be 00 	jeq %d2,%d15,8000aa3c <_fpadd_parts+0x19a>
8000a8c4:	91 00 00 f8 	movh.a %a15,32768
8000a8c8:	d9 f2 ec b0 	lea %a2,[%a15]3820 <80000eec <__thenan_df>>
8000a8cc:	00 90       	ret 
8000a8ce:	40 52       	mov.aa %a2,%a5
8000a8d0:	df 42 b6 00 	jeq %d2,4,8000aa3c <_fpadd_parts+0x19a>
8000a8d4:	df 22 11 80 	jne %d2,2,8000a8f6 <_fpadd_parts+0x54>
8000a8d8:	40 42       	mov.aa %a2,%a4
8000a8da:	df 2f b1 80 	jne %d15,2,8000aa3c <_fpadd_parts+0x19a>
8000a8de:	40 63       	mov.aa %a3,%a6
8000a8e0:	a0 4f       	mov.a %a15,4
8000a8e2:	44 4f       	ld.w %d15,[%a4+]
8000a8e4:	64 3f       	st.w [%a3+],%d15
8000a8e6:	fc fe       	loop %a15,8000a8e2 <_fpadd_parts+0x40>
8000a8e8:	4c 21       	ld.w %d15,[%a2]4
8000a8ea:	19 52 04 00 	ld.w %d2,[%a5]4
8000a8ee:	40 62       	mov.aa %a2,%a6
8000a8f0:	26 2f       	and %d15,%d2
8000a8f2:	6c 61       	st.w [%a6]4,%d15
8000a8f4:	00 90       	ret 
8000a8f6:	40 52       	mov.aa %a2,%a5
8000a8f8:	df 2f a2 00 	jeq %d15,2,8000aa3c <_fpadd_parts+0x19a>
8000a8fc:	4c 42       	ld.w %d15,[%a4]8
8000a8fe:	19 52 08 00 	ld.w %d2,[%a5]8
8000a902:	40 6f       	mov.aa %a15,%a6
8000a904:	52 23       	sub %d3,%d15,%d2
8000a906:	0b 30 c0 c1 	abs %d12,%d3
8000a90a:	8b 0c 84 42 	ge %d4,%d12,64
8000a90e:	40 5c       	mov.aa %a12,%a5
8000a910:	40 4d       	mov.aa %a13,%a4
8000a912:	09 4a 4c 09 	ld.d %e10,[%a4]12
8000a916:	09 58 4c 09 	ld.d %e8,[%a5]12
8000a91a:	df 04 35 80 	jne %d4,0,8000a984 <_fpadd_parts+0xe2>
8000a91e:	bf 13 19 00 	jlt %d3,1,8000a950 <_fpadd_parts+0xae>
8000a922:	0b 89 10 48 	mov %e4,%d9,%d8
8000a926:	02 c6       	mov %d6,%d12
8000a928:	6d ff 91 ff 	call 8000a84a <__lshrdi3>
8000a92c:	d2 14       	mov %e4,1
8000a92e:	02 c6       	mov %d6,%d12
8000a930:	02 2e       	mov %d14,%d2
8000a932:	02 3d       	mov %d13,%d3
8000a934:	6d 00 70 02 	call 8000ae14 <__ashldi3>
8000a938:	8b f2 9f 20 	addx %d2,%d2,-1
8000a93c:	8b f3 bf 30 	addc %d3,%d3,-1
8000a940:	26 82       	and %d2,%d8
8000a942:	26 93       	and %d3,%d9
8000a944:	a6 23       	or %d3,%d2
8000a946:	02 e8       	mov %d8,%d14
8000a948:	8b 03 00 85 	or.ne %d8,%d3,0
8000a94c:	02 d9       	mov %d9,%d13
8000a94e:	3c 21       	j 8000a990 <_fpadd_parts+0xee>
8000a950:	df 03 20 00 	jeq %d3,0,8000a990 <_fpadd_parts+0xee>
8000a954:	0b ab 10 48 	mov %e4,%d11,%d10
8000a958:	02 c6       	mov %d6,%d12
8000a95a:	6d ff 78 ff 	call 8000a84a <__lshrdi3>
8000a95e:	d2 14       	mov %e4,1
8000a960:	02 c6       	mov %d6,%d12
8000a962:	02 2e       	mov %d14,%d2
8000a964:	02 3d       	mov %d13,%d3
8000a966:	6d 00 57 02 	call 8000ae14 <__ashldi3>
8000a96a:	8b f2 9f 20 	addx %d2,%d2,-1
8000a96e:	8b f3 bf 30 	addc %d3,%d3,-1
8000a972:	26 a2       	and %d2,%d10
8000a974:	26 b3       	and %d3,%d11
8000a976:	a6 23       	or %d3,%d2
8000a978:	02 ea       	mov %d10,%d14
8000a97a:	42 cf       	add %d15,%d12
8000a97c:	8b 03 00 a5 	or.ne %d10,%d3,0
8000a980:	02 db       	mov %d11,%d13
8000a982:	3c 07       	j 8000a990 <_fpadd_parts+0xee>
8000a984:	3f f2 05 00 	jlt %d2,%d15,8000a98e <_fpadd_parts+0xec>
8000a988:	02 2f       	mov %d15,%d2
8000a98a:	d2 0a       	mov %e10,0
8000a98c:	3c 02       	j 8000a990 <_fpadd_parts+0xee>
8000a98e:	d2 08       	mov %e8,0
8000a990:	19 d4 04 00 	ld.w %d4,[%a13]4
8000a994:	19 c2 04 00 	ld.w %d2,[%a12]4
8000a998:	5f 24 34 00 	jeq %d4,%d2,8000aa00 <_fpadd_parts+0x15e>
8000a99c:	0b 8a c0 20 	subx %d2,%d10,%d8
8000a9a0:	0b 9b d0 30 	subc %d3,%d11,%d9
8000a9a4:	76 45       	jz %d4,8000a9ae <_fpadd_parts+0x10c>
8000a9a6:	0b a8 c0 20 	subx %d2,%d8,%d10
8000a9aa:	0b b9 d0 30 	subc %d3,%d9,%d11
8000a9ae:	0e 37       	jltz %d3,8000a9bc <_fpadd_parts+0x11a>
8000a9b0:	82 04       	mov %d4,0
8000a9b2:	68 14       	st.w [%a15]4,%d4
8000a9b4:	68 2f       	st.w [%a15]8,%d15
8000a9b6:	89 f2 4c 09 	st.d [%a15]12,%e2
8000a9ba:	3c 0c       	j 8000a9d2 <_fpadd_parts+0x130>
8000a9bc:	68 2f       	st.w [%a15]8,%d15
8000a9be:	8b 03 00 f1 	rsub %d15,%d3,0
8000a9c2:	82 14       	mov %d4,1
8000a9c4:	8b 02 00 31 	rsub %d3,%d2,0
8000a9c8:	ab ff 1f f2 	cadd %d15,%d2,%d15,-1
8000a9cc:	68 14       	st.w [%a15]4,%d4
8000a9ce:	68 33       	st.w [%a15]12,%d3
8000a9d0:	68 4f       	st.w [%a15]16,%d15
8000a9d2:	82 f5       	mov %d5,-1
8000a9d4:	06 c5       	sh %d5,-4
8000a9d6:	48 32       	ld.w %d2,[%a15]12
8000a9d8:	48 43       	ld.w %d3,[%a15]16
8000a9da:	8b f2 9f 60 	addx %d6,%d2,-1
8000a9de:	8b f3 bf 40 	addc %d4,%d3,-1
8000a9e2:	3a 54       	eq %d15,%d4,%d5
8000a9e4:	8b f6 3f f4 	and.ne %d15,%d6,-1
8000a9e8:	0b 54 a0 f2 	or.lt.u %d15,%d4,%d5
8000a9ec:	6e 12       	jz %d15,8000aa10 <_fpadd_parts+0x16e>
8000a9ee:	4c f2       	ld.w %d15,[%a15]8
8000a9f0:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a9f4:	c2 ff       	add %d15,-1
8000a9f6:	06 12       	sh %d2,1
8000a9f8:	68 32       	st.w [%a15]12,%d2
8000a9fa:	68 43       	st.w [%a15]16,%d3
8000a9fc:	68 2f       	st.w [%a15]8,%d15
8000a9fe:	3c ec       	j 8000a9d6 <_fpadd_parts+0x134>
8000aa00:	0b a8 40 20 	addx %d2,%d8,%d10
8000aa04:	68 2f       	st.w [%a15]8,%d15
8000aa06:	0b b9 50 f0 	addc %d15,%d9,%d11
8000aa0a:	68 14       	st.w [%a15]4,%d4
8000aa0c:	68 32       	st.w [%a15]12,%d2
8000aa0e:	68 4f       	st.w [%a15]16,%d15
8000aa10:	82 3f       	mov %d15,3
8000aa12:	28 0f       	st.b [%a15]0,%d15
8000aa14:	4c f4       	ld.w %d15,[%a15]16
8000aa16:	7b 00 00 42 	movh %d4,8192
8000aa1a:	0b 4f 30 31 	lt.u %d3,%d15,%d4
8000aa1e:	48 32       	ld.w %d2,[%a15]12
8000aa20:	40 f2       	mov.aa %a2,%a15
8000aa22:	f6 3d       	jnz %d3,8000aa3c <_fpadd_parts+0x19a>
8000aa24:	8f 12 00 31 	and %d3,%d2,1
8000aa28:	77 2f 80 2f 	dextr %d2,%d15,%d2,31
8000aa2c:	06 ff       	sh %d15,-1
8000aa2e:	96 00       	or %d15,0
8000aa30:	68 4f       	st.w [%a15]16,%d15
8000aa32:	4c f2       	ld.w %d15,[%a15]8
8000aa34:	a6 32       	or %d2,%d3
8000aa36:	c2 1f       	add %d15,1
8000aa38:	68 32       	st.w [%a15]12,%d2
8000aa3a:	68 2f       	st.w [%a15]8,%d15
8000aa3c:	00 90       	ret 

8000aa3e <__adddf3>:
8000aa3e:	20 50       	sub.a %sp,80
8000aa40:	d9 a4 04 00 	lea %a4,[%sp]4
8000aa44:	d9 a5 14 00 	lea %a5,[%sp]20
8000aa48:	89 a4 44 09 	st.d [%sp]4,%e4
8000aa4c:	89 a6 4c 09 	st.d [%sp]12,%e6
8000aa50:	6d 00 c0 02 	call 8000afd0 <__unpack_d>
8000aa54:	d9 a4 0c 00 	lea %a4,[%sp]12
8000aa58:	d9 a5 28 00 	lea %a5,[%sp]40
8000aa5c:	6d 00 ba 02 	call 8000afd0 <__unpack_d>
8000aa60:	d9 a4 14 00 	lea %a4,[%sp]20
8000aa64:	d9 a5 28 00 	lea %a5,[%sp]40
8000aa68:	d9 a6 3c 00 	lea %a6,[%sp]60
8000aa6c:	6d ff 1b ff 	call 8000a8a2 <_fpadd_parts>
8000aa70:	40 24       	mov.aa %a4,%a2
8000aa72:	1d 00 26 02 	j 8000aebe <__pack_d>

8000aa76 <__subdf3>:
8000aa76:	20 50       	sub.a %sp,80
8000aa78:	d9 a4 04 00 	lea %a4,[%sp]4
8000aa7c:	d9 a5 14 00 	lea %a5,[%sp]20
8000aa80:	89 a4 44 09 	st.d [%sp]4,%e4
8000aa84:	89 a6 4c 09 	st.d [%sp]12,%e6
8000aa88:	6d 00 a4 02 	call 8000afd0 <__unpack_d>
8000aa8c:	d9 a4 0c 00 	lea %a4,[%sp]12
8000aa90:	d9 a5 28 00 	lea %a5,[%sp]40
8000aa94:	6d 00 9e 02 	call 8000afd0 <__unpack_d>
8000aa98:	58 0b       	ld.w %d15,[%sp]44
8000aa9a:	d9 a4 14 00 	lea %a4,[%sp]20
8000aa9e:	8f 1f 80 f1 	xor %d15,%d15,1
8000aaa2:	d9 a5 28 00 	lea %a5,[%sp]40
8000aaa6:	d9 a6 3c 00 	lea %a6,[%sp]60
8000aaaa:	78 0b       	st.w [%sp]44,%d15
8000aaac:	6d ff fb fe 	call 8000a8a2 <_fpadd_parts>
8000aab0:	40 24       	mov.aa %a4,%a2
8000aab2:	1d 00 06 02 	j 8000aebe <__pack_d>

8000aab6 <__muldf3>:
8000aab6:	20 50       	sub.a %sp,80
8000aab8:	d9 a4 04 00 	lea %a4,[%sp]4
8000aabc:	d9 a5 14 00 	lea %a5,[%sp]20
8000aac0:	89 a4 44 09 	st.d [%sp]4,%e4
8000aac4:	89 a6 4c 09 	st.d [%sp]12,%e6
8000aac8:	6d 00 84 02 	call 8000afd0 <__unpack_d>
8000aacc:	d9 a4 0c 00 	lea %a4,[%sp]12
8000aad0:	d9 a5 28 00 	lea %a5,[%sp]40
8000aad4:	6d 00 7e 02 	call 8000afd0 <__unpack_d>
8000aad8:	39 a3 14 00 	ld.bu %d3,[%sp]20
8000aadc:	ff 23 0c 80 	jge.u %d3,2,8000aaf4 <__muldf3+0x3e>
8000aae0:	19 a2 18 00 	ld.w %d2,[%sp]24
8000aae4:	58 0b       	ld.w %d15,[%sp]44
8000aae6:	d9 a4 14 00 	lea %a4,[%sp]20
8000aaea:	0b f2 10 f1 	ne %d15,%d2,%d15
8000aaee:	78 06       	st.w [%sp]24,%d15
8000aaf0:	1d 00 b3 00 	j 8000ac56 <__muldf3+0x1a0>
8000aaf4:	39 af 28 00 	ld.bu %d15,[%sp]40
8000aaf8:	ff 2f 0c 80 	jge.u %d15,2,8000ab10 <__muldf3+0x5a>
8000aafc:	58 0b       	ld.w %d15,[%sp]44
8000aafe:	19 a2 18 00 	ld.w %d2,[%sp]24
8000ab02:	d9 a4 28 00 	lea %a4,[%sp]40
8000ab06:	0b f2 10 f1 	ne %d15,%d2,%d15
8000ab0a:	78 0b       	st.w [%sp]44,%d15
8000ab0c:	1d 00 a5 00 	j 8000ac56 <__muldf3+0x1a0>
8000ab10:	df 43 09 80 	jne %d3,4,8000ab22 <__muldf3+0x6c>
8000ab14:	91 00 00 48 	movh.a %a4,32768
8000ab18:	d9 44 ec b0 	lea %a4,[%a4]3820 <80000eec <__thenan_df>>
8000ab1c:	df 2f 9d 00 	jeq %d15,2,8000ac56 <__muldf3+0x1a0>
8000ab20:	3c e0       	j 8000aae0 <__muldf3+0x2a>
8000ab22:	5e 48       	jne %d15,4,8000ab32 <__muldf3+0x7c>
8000ab24:	91 00 00 48 	movh.a %a4,32768
8000ab28:	d9 44 ec b0 	lea %a4,[%a4]3820 <80000eec <__thenan_df>>
8000ab2c:	df 23 95 00 	jeq %d3,2,8000ac56 <__muldf3+0x1a0>
8000ab30:	3c e6       	j 8000aafc <__muldf3+0x46>
8000ab32:	df 23 d7 7f 	jeq %d3,2,8000aae0 <__muldf3+0x2a>
8000ab36:	df 2f e3 7f 	jeq %d15,2,8000aafc <__muldf3+0x46>
8000ab3a:	58 08       	ld.w %d15,[%sp]32
8000ab3c:	19 ab 38 00 	ld.w %d11,[%sp]56 <80000008 <BootModeHeader0+0x8>>
8000ab40:	d2 00       	mov %e0,0
8000ab42:	19 a0 34 00 	ld.w %d0,[%sp]52
8000ab46:	73 bf 68 60 	mul.u %e6,%d15,%d11
8000ab4a:	82 0c       	mov %d12,0
8000ab4c:	73 0f 68 40 	mul.u %e4,%d15,%d0
8000ab50:	19 aa 24 00 	ld.w %d10,[%sp]36
8000ab54:	82 02       	mov %d2,0
8000ab56:	03 cf 0a 77 	madd %d7,%d7,%d15,%d12
8000ab5a:	03 b2 0a 77 	madd %d7,%d7,%d2,%d11
8000ab5e:	03 1f 0a 55 	madd %d5,%d5,%d15,%d1
8000ab62:	03 02 0a 55 	madd %d5,%d5,%d2,%d0
8000ab66:	82 0d       	mov %d13,0
8000ab68:	03 a0 68 26 	madd.u %e2,%e6,%d0,%d10
8000ab6c:	03 d0 0a 33 	madd %d3,%d3,%d0,%d13
8000ab70:	03 a1 0a 33 	madd %d3,%d3,%d1,%d10
8000ab74:	0b 54 10 08 	mov %e0,%d4,%d5
8000ab78:	42 20       	add %d0,%d2
8000ab7a:	3a 73       	eq %d15,%d3,%d7
8000ab7c:	0b 62 50 f2 	and.ge.u %d15,%d2,%d6
8000ab80:	0b 37 a0 f2 	or.lt.u %d15,%d7,%d3
8000ab84:	8b 0f 00 62 	eq %d6,%d15,0
8000ab88:	3a 50       	eq %d15,%d0,%d5
8000ab8a:	0b 41 50 f2 	and.ge.u %d15,%d1,%d4
8000ab8e:	0b 05 a0 f2 	or.lt.u %d15,%d5,%d0
8000ab92:	ba 0f       	eq %d15,%d15,0
8000ab94:	53 1f 40 40 	mul.u %e4,%d15,1
8000ab98:	02 38       	mov %d8,%d3
8000ab9a:	82 09       	mov %d9,0
8000ab9c:	03 ab 68 28 	madd.u %e2,%e8,%d11,%d10
8000aba0:	02 5f       	mov %d15,%d5
8000aba2:	03 db 0a 33 	madd %d3,%d3,%d11,%d13
8000aba6:	42 6f       	add %d15,%d6
8000aba8:	03 ac 0a 33 	madd %d3,%d3,%d12,%d10
8000abac:	0b 4f 10 68 	mov %e6,%d15,%d4
8000abb0:	0b 62 40 40 	addx %d4,%d2,%d6
8000abb4:	0b 73 50 20 	addc %d2,%d3,%d7
8000abb8:	58 07       	ld.w %d15,[%sp]28
8000abba:	19 a3 30 00 	ld.w %d3,[%sp]48
8000abbe:	19 a5 18 00 	ld.w %d5,[%sp]24
8000abc2:	42 3f       	add %d15,%d3
8000abc4:	19 a3 2c 00 	ld.w %d3,[%sp]44
8000abc8:	c2 4f       	add %d15,4
8000abca:	0b 35 10 31 	ne %d3,%d5,%d3
8000abce:	59 a3 00 10 	st.w [%sp]64,%d3
8000abd2:	7b 00 00 52 	movh %d5,8192
8000abd6:	0b 52 50 31 	ge.u %d3,%d2,%d5
8000abda:	df 03 1b 00 	jeq %d3,0,8000ac10 <__muldf3+0x15a>
8000abde:	8f 14 00 31 	and %d3,%d4,1
8000abe2:	76 37       	jz %d3,8000abf0 <__muldf3+0x13a>
8000abe4:	8f f0 1f 30 	sh %d3,%d0,-1
8000abe8:	77 10 80 1f 	dextr %d1,%d0,%d1,31
8000abec:	b7 f3 81 0f 	insert %d0,%d3,15,31,1
8000abf0:	77 42 80 4f 	dextr %d4,%d2,%d4,31
8000abf4:	c2 1f       	add %d15,1
8000abf6:	06 f2       	sh %d2,-1
8000abf8:	3c ed       	j 8000abd2 <__muldf3+0x11c>
8000abfa:	77 42 80 20 	dextr %d2,%d2,%d4,1
8000abfe:	06 14       	sh %d4,1
8000ac00:	ce 04       	jgez %d0,8000ac08 <__muldf3+0x152>
8000ac02:	8f 14 40 51 	or %d5,%d4,1
8000ac06:	02 54       	mov %d4,%d5
8000ac08:	77 10 80 00 	dextr %d0,%d0,%d1,1
8000ac0c:	c2 ff       	add %d15,-1
8000ac0e:	06 11       	sh %d1,1
8000ac10:	7b 00 00 51 	movh %d5,4096
8000ac14:	0b 52 30 31 	lt.u %d3,%d2,%d5
8000ac18:	df 03 f1 ff 	jne %d3,0,8000abfa <__muldf3+0x144>
8000ac1c:	78 11       	st.w [%sp]68,%d15
8000ac1e:	02 4f       	mov %d15,%d4
8000ac20:	16 ff       	and %d15,255
8000ac22:	8b 0f 28 f2 	ne %d15,%d15,128
8000ac26:	ee 0f       	jnz %d15,8000ac44 <__muldf3+0x18e>
8000ac28:	a6 10       	or %d0,%d1
8000ac2a:	77 42 00 fc 	dextr %d15,%d2,%d4,24
8000ac2e:	8b 00 20 02 	ne %d0,%d0,0
8000ac32:	0f f0 e0 00 	andn %d0,%d0,%d15
8000ac36:	76 07       	jz %d0,8000ac44 <__muldf3+0x18e>
8000ac38:	8b 04 88 40 	addx %d4,%d4,128
8000ac3c:	8b 02 a0 20 	addc %d2,%d2,0
8000ac40:	8f f4 cf 41 	andn %d4,%d4,255
8000ac44:	d9 a4 10 10 	lea %a4,[%sp]80
8000ac48:	82 3f       	mov %d15,3
8000ac4a:	59 a4 08 10 	st.w [%sp]72,%d4
8000ac4e:	59 a2 0c 10 	st.w [%sp]76,%d2
8000ac52:	89 4f 2c f4 	st.b [+%a4]-20 <800003ec <IfxAsclin2_TX_P33_8_OUT+0x4>>,%d15
8000ac56:	1d 00 34 01 	j 8000aebe <__pack_d>

8000ac5a <__divdf3>:
8000ac5a:	20 38       	sub.a %sp,56
8000ac5c:	40 a4       	mov.aa %a4,%sp
8000ac5e:	d9 a5 10 00 	lea %a5,[%sp]16
8000ac62:	89 a4 40 09 	st.d [%sp],%e4
8000ac66:	89 a6 48 09 	st.d [%sp]8,%e6
8000ac6a:	6d 00 b3 01 	call 8000afd0 <__unpack_d>
8000ac6e:	d9 a4 08 00 	lea %a4,[%sp]8
8000ac72:	d9 a5 24 00 	lea %a5,[%sp]36
8000ac76:	6d 00 ad 01 	call 8000afd0 <__unpack_d>
8000ac7a:	39 a2 10 00 	ld.bu %d2,[%sp]16
8000ac7e:	bf 22 76 80 	jlt.u %d2,2,8000ad6a <__divdf3+0x110>
8000ac82:	39 af 24 00 	ld.bu %d15,[%sp]36
8000ac86:	d9 a4 24 00 	lea %a4,[%sp]36
8000ac8a:	bf 2f 72 80 	jlt.u %d15,2,8000ad6e <__divdf3+0x114>
8000ac8e:	19 a4 14 00 	ld.w %d4,[%sp]20
8000ac92:	19 a3 28 00 	ld.w %d3,[%sp]40
8000ac96:	c6 43       	xor %d3,%d4
8000ac98:	59 a3 14 00 	st.w [%sp]20,%d3
8000ac9c:	1b e2 ff 3f 	addi %d3,%d2,-2
8000aca0:	8f d3 0f 31 	and %d3,%d3,253
8000aca4:	f6 38       	jnz %d3,8000acb4 <__divdf3+0x5a>
8000aca6:	91 00 00 48 	movh.a %a4,32768
8000acaa:	d9 44 ec b0 	lea %a4,[%a4]3820 <80000eec <__thenan_df>>
8000acae:	5f f2 5e 80 	jne %d2,%d15,8000ad6a <__divdf3+0x110>
8000acb2:	3c 5e       	j 8000ad6e <__divdf3+0x114>
8000acb4:	5e 47       	jne %d15,4,8000acc2 <__divdf3+0x68>
8000acb6:	d2 02       	mov %e2,0
8000acb8:	82 0f       	mov %d15,0
8000acba:	89 a2 5c 09 	st.d [%sp]28,%e2
8000acbe:	78 06       	st.w [%sp]24,%d15
8000acc0:	3c 55       	j 8000ad6a <__divdf3+0x110>
8000acc2:	5e 25       	jne %d15,2,8000accc <__divdf3+0x72>
8000acc4:	82 4f       	mov %d15,4
8000acc6:	e9 af 10 00 	st.b [%sp]16,%d15
8000acca:	3c 50       	j 8000ad6a <__divdf3+0x110>
8000accc:	58 06       	ld.w %d15,[%sp]24
8000acce:	09 a2 5c 09 	ld.d %e2,[%sp]28
8000acd2:	09 a4 70 09 	ld.d %e4,[%sp]48
8000acd6:	19 a6 2c 00 	ld.w %d6,[%sp]44
8000acda:	52 66       	sub %d6,%d15,%d6
8000acdc:	3a 53       	eq %d15,%d3,%d5
8000acde:	0b 42 50 f2 	and.ge.u %d15,%d2,%d4
8000ace2:	59 a6 18 00 	st.w [%sp]24,%d6
8000ace6:	0b 35 a0 f2 	or.lt.u %d15,%d5,%d3
8000acea:	ee 07       	jnz %d15,8000acf8 <__divdf3+0x9e>
8000acec:	c2 f6       	add %d6,-1
8000acee:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000acf2:	59 a6 18 00 	st.w [%sp]24,%d6
8000acf6:	06 12       	sh %d2,1
8000acf8:	82 01       	mov %d1,0
8000acfa:	7b 00 00 f1 	movh %d15,4096
8000acfe:	82 00       	mov %d0,0
8000ad00:	82 07       	mov %d7,0
8000ad02:	c5 0f 3c 00 	lea %a15,3c <_.+0x3b>
8000ad06:	0b 53 00 61 	eq %d6,%d3,%d5
8000ad0a:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
8000ad0e:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
8000ad12:	f6 6b       	jnz %d6,8000ad28 <__divdf3+0xce>
8000ad14:	0f 10 a0 80 	or %d8,%d0,%d1
8000ad18:	0f f7 a0 60 	or %d6,%d7,%d15
8000ad1c:	0b 42 c0 20 	subx %d2,%d2,%d4
8000ad20:	02 80       	mov %d0,%d8
8000ad22:	02 67       	mov %d7,%d6
8000ad24:	0b 53 d0 30 	subc %d3,%d3,%d5
8000ad28:	77 1f 80 1f 	dextr %d1,%d15,%d1,31
8000ad2c:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000ad30:	06 ff       	sh %d15,-1
8000ad32:	06 12       	sh %d2,1
8000ad34:	fd f0 e9 7f 	loop %a15,8000ad06 <__divdf3+0xac>
8000ad38:	02 0f       	mov %d15,%d0
8000ad3a:	16 ff       	and %d15,255
8000ad3c:	8b 0f 28 f2 	ne %d15,%d15,128
8000ad40:	0b 70 10 48 	mov %e4,%d0,%d7
8000ad44:	ee 0f       	jnz %d15,8000ad62 <__divdf3+0x108>
8000ad46:	a6 32       	or %d2,%d3
8000ad48:	77 07 00 fc 	dextr %d15,%d7,%d0,24
8000ad4c:	8b 02 20 22 	ne %d2,%d2,0
8000ad50:	0f f2 e0 20 	andn %d2,%d2,%d15
8000ad54:	76 27       	jz %d2,8000ad62 <__divdf3+0x108>
8000ad56:	8b 00 88 00 	addx %d0,%d0,128
8000ad5a:	8b 07 a0 40 	addc %d4,%d7,0
8000ad5e:	8f f0 cf 51 	andn %d5,%d0,255
8000ad62:	59 a5 1c 00 	st.w [%sp]28,%d5
8000ad66:	59 a4 20 00 	st.w [%sp]32,%d4
8000ad6a:	d9 a4 10 00 	lea %a4,[%sp]16
8000ad6e:	1d 00 a8 00 	j 8000aebe <__pack_d>

8000ad72 <__floatsidf>:
8000ad72:	20 18       	sub.a %sp,24
8000ad74:	82 3f       	mov %d15,3
8000ad76:	2c a4       	st.b [%sp]4,%d15
8000ad78:	8f 14 1e f0 	sh %d15,%d4,-31
8000ad7c:	78 02       	st.w [%sp]8,%d15
8000ad7e:	f6 44       	jnz %d4,8000ad86 <__floatsidf+0x14>
8000ad80:	82 2f       	mov %d15,2
8000ad82:	2c a4       	st.b [%sp]4,%d15
8000ad84:	3c 16       	j 8000adb0 <__floatsidf+0x3e>
8000ad86:	6e 09       	jz %d15,8000ad98 <__floatsidf+0x26>
8000ad88:	7b 00 00 f8 	movh %d15,32768
8000ad8c:	82 02       	mov %d2,0
8000ad8e:	7b 00 1e 3c 	movh %d3,49632
8000ad92:	5f f4 13 00 	jeq %d4,%d15,8000adb8 <__floatsidf+0x46>
8000ad96:	32 54       	rsub %d4
8000ad98:	0f 04 b0 f1 	clz %d15,%d4
8000ad9c:	1b df 01 60 	addi %d6,%d15,29
8000ada0:	82 05       	mov %d5,0
8000ada2:	6d 00 39 00 	call 8000ae14 <__ashldi3>
8000ada6:	8b ff 01 f1 	rsub %d15,%d15,31
8000adaa:	89 a2 50 09 	st.d [%sp]16,%e2
8000adae:	78 03       	st.w [%sp]12,%d15
8000adb0:	d9 a4 04 00 	lea %a4,[%sp]4
8000adb4:	6d 00 85 00 	call 8000aebe <__pack_d>
8000adb8:	00 90       	ret 

8000adba <__make_dp>:
8000adba:	20 18       	sub.a %sp,24
8000adbc:	09 a2 58 09 	ld.d %e2,[%sp]24
8000adc0:	d9 a4 04 00 	lea %a4,[%sp]4
8000adc4:	e9 a4 04 00 	st.b [%sp]4,%d4
8000adc8:	59 a5 08 00 	st.w [%sp]8,%d5
8000adcc:	59 a6 0c 00 	st.w [%sp]12,%d6
8000add0:	89 a2 50 09 	st.d [%sp]16,%e2
8000add4:	1d 00 75 00 	j 8000aebe <__pack_d>

8000add8 <__truncdfsf2>:
8000add8:	20 20       	sub.a %sp,32
8000adda:	d9 a4 20 00 	lea %a4,[%sp]32
8000adde:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000ade2:	d9 a5 0c 00 	lea %a5,[%sp]12
8000ade6:	6d 00 f5 00 	call 8000afd0 <__unpack_d>
8000adea:	19 a7 18 00 	ld.w %d7,[%sp]24
8000adee:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000adf2:	39 a4 0c 00 	ld.bu %d4,[%sp]12
8000adf6:	77 72 00 21 	dextr %d2,%d2,%d7,2
8000adfa:	b7 07 02 7f 	insert %d7,%d7,0,30,2
8000adfe:	02 23       	mov %d3,%d2
8000ae00:	8f 12 40 21 	or %d2,%d2,1
8000ae04:	19 a5 10 00 	ld.w %d5,[%sp]16
8000ae08:	19 a6 14 00 	ld.w %d6,[%sp]20
8000ae0c:	2b 32 40 77 	sel %d7,%d7,%d2,%d3
8000ae10:	1d 00 4c 00 	j 8000aea8 <__make_fp>

8000ae14 <__ashldi3>:
8000ae14:	6f 56 07 80 	jnz.t %d6,5,8000ae22 <__ashldi3+0xe>
8000ae18:	0f 64 00 20 	sh %d2,%d4,%d6
8000ae1c:	17 45 80 36 	dextr %d3,%d5,%d4,%d6
8000ae20:	00 90       	ret 
8000ae22:	8b 06 1e 60 	add %d6,%d6,-32
8000ae26:	82 02       	mov %d2,0
8000ae28:	0f 64 00 30 	sh %d3,%d4,%d6
8000ae2c:	00 90       	ret 

8000ae2e <__unpack_f>:
8000ae2e:	54 43       	ld.w %d3,[%a4]
8000ae30:	37 03 77 f0 	extr.u %d15,%d3,0,23
8000ae34:	37 03 e8 2b 	extr.u %d2,%d3,23,8
8000ae38:	8f 13 1e 30 	sh %d3,%d3,-31
8000ae3c:	59 53 04 00 	st.w [%a5]4,%d3
8000ae40:	df 02 18 80 	jne %d2,0,8000ae70 <__unpack_f+0x42>
8000ae44:	ee 03       	jnz %d15,8000ae4a <__unpack_f+0x1c>
8000ae46:	82 2f       	mov %d15,2
8000ae48:	3c 19       	j 8000ae7a <__unpack_f+0x4c>
8000ae4a:	3b 20 f8 2f 	mov %d2,-126
8000ae4e:	59 52 08 00 	st.w [%a5]8,%d2
8000ae52:	82 32       	mov %d2,3
8000ae54:	34 52       	st.b [%a5],%d2
8000ae56:	06 7f       	sh %d15,7
8000ae58:	3b 10 f8 2f 	mov %d2,-127
8000ae5c:	7b 00 00 44 	movh %d4,16384
8000ae60:	06 1f       	sh %d15,1
8000ae62:	02 23       	mov %d3,%d2
8000ae64:	c2 f2       	add %d2,-1
8000ae66:	3f 4f fd ff 	jlt.u %d15,%d4,8000ae60 <__unpack_f+0x32>
8000ae6a:	59 53 08 00 	st.w [%a5]8,%d3
8000ae6e:	3c 1b       	j 8000aea4 <__unpack_f+0x76>
8000ae70:	8b f2 2f 32 	ne %d3,%d2,255
8000ae74:	f6 3f       	jnz %d3,8000ae92 <__unpack_f+0x64>
8000ae76:	ee 04       	jnz %d15,8000ae7e <__unpack_f+0x50>
8000ae78:	82 4f       	mov %d15,4
8000ae7a:	2c 50       	st.b [%a5]0,%d15
8000ae7c:	00 90       	ret 
8000ae7e:	7b 00 04 20 	movh %d2,64
8000ae82:	26 f2       	and %d2,%d15
8000ae84:	76 22       	jz %d2,8000ae88 <__unpack_f+0x5a>
8000ae86:	82 12       	mov %d2,1
8000ae88:	b7 0f 01 fb 	insert %d15,%d15,0,22,1
8000ae8c:	34 52       	st.b [%a5],%d2
8000ae8e:	06 7f       	sh %d15,7
8000ae90:	3c 0a       	j 8000aea4 <__unpack_f+0x76>
8000ae92:	1b 12 f8 2f 	addi %d2,%d2,-127
8000ae96:	06 7f       	sh %d15,7
8000ae98:	59 52 08 00 	st.w [%a5]8,%d2
8000ae9c:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000aea0:	82 32       	mov %d2,3
8000aea2:	34 52       	st.b [%a5],%d2
8000aea4:	6c 53       	st.w [%a5]12,%d15
8000aea6:	00 90       	ret 

8000aea8 <__make_fp>:
8000aea8:	20 10       	sub.a %sp,16
8000aeaa:	40 a4       	mov.aa %a4,%sp
8000aeac:	34 a4       	st.b [%sp],%d4
8000aeae:	59 a5 04 00 	st.w [%sp]4,%d5
8000aeb2:	59 a6 08 00 	st.w [%sp]8,%d6
8000aeb6:	59 a7 0c 00 	st.w [%sp]12,%d7
8000aeba:	1d 00 e1 00 	j 8000b07c <__pack_f>

8000aebe <__pack_d>:
8000aebe:	14 42       	ld.bu %d2,[%a4]
8000aec0:	19 49 0c 00 	ld.w %d9,[%a4]12
8000aec4:	19 48 10 00 	ld.w %d8,[%a4]16
8000aec8:	19 4c 04 00 	ld.w %d12,[%a4]4
8000aecc:	ff 22 0b 80 	jge.u %d2,2,8000aee2 <__pack_d+0x24>
8000aed0:	77 98 00 9c 	dextr %d9,%d8,%d9,24
8000aed4:	06 88       	sh %d8,-8
8000aed6:	02 95       	mov %d5,%d9
8000aed8:	b7 18 8d 49 	insert %d4,%d8,1,19,13
8000aedc:	3b f0 7f f0 	mov %d15,2047
8000aee0:	3c 6f       	j 8000afbe <__pack_d+0x100>
8000aee2:	3b f0 7f f0 	mov %d15,2047
8000aee6:	d2 04       	mov %e4,0
8000aee8:	df 42 6b 00 	jeq %d2,4,8000afbe <__pack_d+0x100>
8000aeec:	0f 89 a0 f0 	or %d15,%d9,%d8
8000aef0:	8b 22 00 32 	eq %d3,%d2,2
8000aef4:	8b 0f e0 34 	or.eq %d3,%d15,0
8000aef8:	82 0f       	mov %d15,0
8000aefa:	df 03 62 80 	jne %d3,0,8000afbe <__pack_d+0x100>
8000aefe:	19 42 08 00 	ld.w %d2,[%a4]8
8000af02:	3b 20 c0 ff 	mov %d15,-1022
8000af06:	7f f2 36 00 	jge %d2,%d15,8000af72 <__pack_d+0xb4>
8000af0a:	a2 2f       	sub %d15,%d2
8000af0c:	8b 9f 83 42 	ge %d4,%d15,57
8000af10:	82 02       	mov %d2,0
8000af12:	df 04 18 80 	jne %d4,0,8000af42 <__pack_d+0x84>
8000af16:	0b 98 10 48 	mov %e4,%d8,%d9
8000af1a:	02 f6       	mov %d6,%d15
8000af1c:	6d ff 97 fc 	call 8000a84a <__lshrdi3>
8000af20:	d2 14       	mov %e4,1
8000af22:	02 f6       	mov %d6,%d15
8000af24:	0b 32 10 a8 	mov %e10,%d2,%d3
8000af28:	6d ff 76 ff 	call 8000ae14 <__ashldi3>
8000af2c:	8b f2 9f 20 	addx %d2,%d2,-1
8000af30:	8b f3 bf 30 	addc %d3,%d3,-1
8000af34:	26 29       	and %d9,%d2
8000af36:	26 38       	and %d8,%d3
8000af38:	a6 98       	or %d8,%d9
8000af3a:	02 b2       	mov %d2,%d11
8000af3c:	8b 08 00 25 	or.ne %d2,%d8,0
8000af40:	02 a3       	mov %d3,%d10
8000af42:	02 2f       	mov %d15,%d2
8000af44:	16 ff       	and %d15,255
8000af46:	8b 0f 28 f2 	ne %d15,%d15,128
8000af4a:	ee 07       	jnz %d15,8000af58 <__pack_d+0x9a>
8000af4c:	8f 02 10 f1 	and %d15,%d2,256
8000af50:	6e 08       	jz %d15,8000af60 <__pack_d+0xa2>
8000af52:	8b 02 88 20 	addx %d2,%d2,128
8000af56:	3c 03       	j 8000af5c <__pack_d+0x9e>
8000af58:	8b f2 87 20 	addx %d2,%d2,127
8000af5c:	8b 03 a0 30 	addc %d3,%d3,0
8000af60:	7b 00 00 41 	movh %d4,4096
8000af64:	0b 43 50 f1 	ge.u %d15,%d3,%d4
8000af68:	77 23 00 5c 	dextr %d5,%d3,%d2,24
8000af6c:	8f 83 1f 40 	sh %d4,%d3,-8
8000af70:	3c 27       	j 8000afbe <__pack_d+0x100>
8000af72:	3b 00 40 30 	mov %d3,1024
8000af76:	3b f0 7f f0 	mov %d15,2047
8000af7a:	7f 32 22 00 	jge %d2,%d3,8000afbe <__pack_d+0x100>
8000af7e:	02 9f       	mov %d15,%d9
8000af80:	16 ff       	and %d15,255
8000af82:	8b 0f 28 f2 	ne %d15,%d15,128
8000af86:	ee 07       	jnz %d15,8000af94 <__pack_d+0xd6>
8000af88:	8f 09 10 f1 	and %d15,%d9,256
8000af8c:	6e 08       	jz %d15,8000af9c <__pack_d+0xde>
8000af8e:	8b 09 88 90 	addx %d9,%d9,128
8000af92:	3c 03       	j 8000af98 <__pack_d+0xda>
8000af94:	8b f9 87 90 	addx %d9,%d9,127
8000af98:	8b 08 a0 80 	addc %d8,%d8,0
8000af9c:	7b 00 00 32 	movh %d3,8192
8000afa0:	0b 38 50 f1 	ge.u %d15,%d8,%d3
8000afa4:	ee 04       	jnz %d15,8000afac <__pack_d+0xee>
8000afa6:	1b f2 3f f0 	addi %d15,%d2,1023
8000afaa:	3c 06       	j 8000afb6 <__pack_d+0xf8>
8000afac:	77 98 80 9f 	dextr %d9,%d8,%d9,31
8000afb0:	1b 02 40 f0 	addi %d15,%d2,1024
8000afb4:	06 f8       	sh %d8,-1
8000afb6:	77 98 00 5c 	dextr %d5,%d8,%d9,24
8000afba:	8f 88 1f 40 	sh %d4,%d8,-8
8000afbe:	d2 02       	mov %e2,0
8000afc0:	37 43 14 40 	insert %d4,%d3,%d4,0,20
8000afc4:	37 f4 0b fa 	insert %d15,%d4,%d15,20,11
8000afc8:	02 52       	mov %d2,%d5
8000afca:	37 cf 81 3f 	insert %d3,%d15,%d12,31,1
8000afce:	00 90       	ret 

8000afd0 <__unpack_d>:
8000afd0:	19 44 04 00 	ld.w %d4,[%a4]4
8000afd4:	54 42       	ld.w %d2,[%a4]
8000afd6:	37 04 74 50 	extr.u %d5,%d4,0,20
8000afda:	37 04 6b fa 	extr.u %d15,%d4,20,11
8000afde:	8f 14 1e 40 	sh %d4,%d4,-31
8000afe2:	59 54 04 00 	st.w [%a5]4,%d4
8000afe6:	02 53       	mov %d3,%d5
8000afe8:	ee 21       	jnz %d15,8000b02a <__unpack_d+0x5a>
8000afea:	0f 25 a0 f0 	or %d15,%d5,%d2
8000afee:	ee 03       	jnz %d15,8000aff4 <__unpack_d+0x24>
8000aff0:	82 2f       	mov %d15,2
8000aff2:	3c 23       	j 8000b038 <__unpack_d+0x68>
8000aff4:	3b 20 c0 ff 	mov %d15,-1022
8000aff8:	6c 52       	st.w [%a5]8,%d15
8000affa:	82 3f       	mov %d15,3
8000affc:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000b000:	2c 50       	st.b [%a5]0,%d15
8000b002:	8f 82 00 20 	sh %d2,%d2,8
8000b006:	3b 10 c0 ff 	mov %d15,-1023
8000b00a:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000b00e:	7b 00 00 61 	movh %d6,4096
8000b012:	0b 63 30 51 	lt.u %d5,%d3,%d6
8000b016:	02 f4       	mov %d4,%d15
8000b018:	06 12       	sh %d2,1
8000b01a:	c2 ff       	add %d15,-1
8000b01c:	df 05 f7 ff 	jne %d5,0,8000b00a <__unpack_d+0x3a>
8000b020:	59 54 08 00 	st.w [%a5]8,%d4
8000b024:	59 52 0c 00 	st.w [%a5]12,%d2
8000b028:	3c 27       	j 8000b076 <__unpack_d+0xa6>
8000b02a:	3b f0 7f 40 	mov %d4,2047
8000b02e:	fe 47       	jne %d15,%d4,8000b05c <__unpack_d+0x8c>
8000b030:	0f 25 a0 f0 	or %d15,%d5,%d2
8000b034:	ee 04       	jnz %d15,8000b03c <__unpack_d+0x6c>
8000b036:	82 4f       	mov %d15,4
8000b038:	2c 50       	st.b [%a5]0,%d15
8000b03a:	00 90       	ret 
8000b03c:	7b 80 00 f0 	movh %d15,8
8000b040:	26 5f       	and %d15,%d5
8000b042:	6e 02       	jz %d15,8000b046 <__unpack_d+0x76>
8000b044:	82 1f       	mov %d15,1
8000b046:	2c 50       	st.b [%a5]0,%d15
8000b048:	b7 03 81 f9 	insert %d15,%d3,0,19,1
8000b04c:	77 2f 00 f4 	dextr %d15,%d15,%d2,8
8000b050:	8f 82 00 40 	sh %d4,%d2,8
8000b054:	59 54 0c 00 	st.w [%a5]12,%d4
8000b058:	6c 54       	st.w [%a5]16,%d15
8000b05a:	00 90       	ret 
8000b05c:	1b 1f c0 ff 	addi %d15,%d15,-1023
8000b060:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000b064:	6c 52       	st.w [%a5]8,%d15
8000b066:	8f 82 00 20 	sh %d2,%d2,8
8000b06a:	82 3f       	mov %d15,3
8000b06c:	b7 f3 01 3e 	insert %d3,%d3,15,28,1
8000b070:	2c 50       	st.b [%a5]0,%d15
8000b072:	59 52 0c 00 	st.w [%a5]12,%d2
8000b076:	59 53 10 00 	st.w [%a5]16,%d3
8000b07a:	00 90       	ret 

8000b07c <__pack_f>:
8000b07c:	14 45       	ld.bu %d5,[%a4]
8000b07e:	4c 43       	ld.w %d15,[%a4]12
8000b080:	19 47 04 00 	ld.w %d7,[%a4]4
8000b084:	ff 25 09 80 	jge.u %d5,2,8000b096 <__pack_f+0x1a>
8000b088:	37 0f f6 33 	extr.u %d3,%d15,7,22
8000b08c:	b7 f3 01 3b 	insert %d3,%d3,15,22,1
8000b090:	3b f0 0f 40 	mov %d4,255
8000b094:	3c 4f       	j 8000b132 <__pack_f+0xb6>
8000b096:	3b f0 0f 40 	mov %d4,255
8000b09a:	82 03       	mov %d3,0
8000b09c:	df 45 4b 00 	jeq %d5,4,8000b132 <__pack_f+0xb6>
8000b0a0:	8b 25 00 62 	eq %d6,%d5,2
8000b0a4:	8b 0f e0 64 	or.eq %d6,%d15,0
8000b0a8:	82 04       	mov %d4,0
8000b0aa:	df 06 44 80 	jne %d6,0,8000b132 <__pack_f+0xb6>
8000b0ae:	19 45 08 00 	ld.w %d5,[%a4]8
8000b0b2:	8b 25 98 42 	ge %d4,%d5,-126
8000b0b6:	df 04 24 80 	jne %d4,0,8000b0fe <__pack_f+0x82>
8000b0ba:	8b 25 18 51 	rsub %d5,%d5,-126
8000b0be:	8b a5 81 42 	ge %d4,%d5,26
8000b0c2:	f6 4c       	jnz %d4,8000b0da <__pack_f+0x5e>
8000b0c4:	82 12       	mov %d2,1
8000b0c6:	0f 52 00 20 	sh %d2,%d2,%d5
8000b0ca:	8b 05 00 31 	rsub %d3,%d5,0
8000b0ce:	c2 f2       	add %d2,-1
8000b0d0:	0f 3f 00 30 	sh %d3,%d15,%d3
8000b0d4:	26 2f       	and %d15,%d2
8000b0d6:	8b 0f 00 35 	or.ne %d3,%d15,0
8000b0da:	8f f3 07 f1 	and %d15,%d3,127
8000b0de:	8b 0f 24 f2 	ne %d15,%d15,64
8000b0e2:	ee 06       	jnz %d15,8000b0ee <__pack_f+0x72>
8000b0e4:	8f 03 08 f1 	and %d15,%d3,128
8000b0e8:	ab 03 04 3f 	cadd %d3,%d15,%d3,64
8000b0ec:	3c 03       	j 8000b0f2 <__pack_f+0x76>
8000b0ee:	1b f3 03 30 	addi %d3,%d3,63
8000b0f2:	7b 00 00 f4 	movh %d15,16384
8000b0f6:	0b f3 50 41 	ge.u %d4,%d3,%d15
8000b0fa:	06 93       	sh %d3,-7
8000b0fc:	3c 1b       	j 8000b132 <__pack_f+0xb6>
8000b0fe:	8b 05 88 62 	ge %d6,%d5,128
8000b102:	3b f0 0f 40 	mov %d4,255
8000b106:	df 06 16 80 	jne %d6,0,8000b132 <__pack_f+0xb6>
8000b10a:	8f ff 07 31 	and %d3,%d15,127
8000b10e:	8b 03 24 32 	ne %d3,%d3,64
8000b112:	f6 36       	jnz %d3,8000b11e <__pack_f+0xa2>
8000b114:	8f 0f 08 31 	and %d3,%d15,128
8000b118:	ab 0f 04 f3 	cadd %d15,%d3,%d15,64
8000b11c:	3c 03       	j 8000b122 <__pack_f+0xa6>
8000b11e:	1b ff 03 f0 	addi %d15,%d15,63
8000b122:	1b f5 07 40 	addi %d4,%d5,127
8000b126:	ce f4       	jgez %d15,8000b12e <__pack_f+0xb2>
8000b128:	06 ff       	sh %d15,-1
8000b12a:	1b 05 08 40 	addi %d4,%d5,128
8000b12e:	8f 9f 1f 30 	sh %d3,%d15,-7
8000b132:	82 02       	mov %d2,0
8000b134:	37 32 17 20 	insert %d2,%d2,%d3,0,23
8000b138:	37 42 88 2b 	insert %d2,%d2,%d4,23,8
8000b13c:	37 72 81 2f 	insert %d2,%d2,%d7,31,1
8000b140:	00 90       	ret 

8000b142 <malloc>:
8000b142:	91 00 00 f7 	movh.a %a15,28672
8000b146:	99 f4 68 40 	ld.a %a4,[%a15]1320 <70000528 <_impure_ptr>>
8000b14a:	1d 00 09 00 	j 8000b15c <_malloc_r>

8000b14e <free>:
8000b14e:	91 00 00 f7 	movh.a %a15,28672
8000b152:	40 45       	mov.aa %a5,%a4
8000b154:	99 f4 68 40 	ld.a %a4,[%a15]1320 <70000528 <_impure_ptr>>
8000b158:	1d 00 f7 02 	j 8000b746 <_free_r>

8000b15c <_malloc_r>:
8000b15c:	1b b4 00 f0 	addi %d15,%d4,11
8000b160:	8b 7f 61 82 	lt.u %d8,%d15,23
8000b164:	8f 7f c0 f1 	andn %d15,%d15,7
8000b168:	ab 0f a1 88 	seln %d8,%d8,%d15,16
8000b16c:	0b 48 30 41 	lt.u %d4,%d8,%d4
8000b170:	8b 08 20 45 	or.lt %d4,%d8,0
8000b174:	40 4d       	mov.aa %a13,%a4
8000b176:	76 45       	jz %d4,8000b180 <_malloc_r+0x24>
8000b178:	da 0c       	mov %d15,12
8000b17a:	6c 40       	st.w [%a4]0,%d15
8000b17c:	1d 00 2a 02 	j 8000b5d0 <_malloc_r+0x474>
8000b180:	91 00 00 f7 	movh.a %a15,28672
8000b184:	8b 88 bf f2 	ge.u %d15,%d8,504
8000b188:	6d 00 37 02 	call 8000b5f6 <__malloc_lock>
8000b18c:	d9 ff 20 40 	lea %a15,[%a15]288 <70000120 <__malloc_av_>>
8000b190:	ee 19       	jnz %d15,8000b1c2 <_malloc_r+0x66>
8000b192:	8f d8 1f 20 	sh %d2,%d8,-3
8000b196:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000b19a:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000b19e:	7d 2c 09 80 	jne.a %a12,%a2,8000b1b0 <_malloc_r+0x54>
8000b1a2:	d9 c2 08 00 	lea %a2,[%a12]8
8000b1a6:	99 cc 14 00 	ld.a %a12,[%a12]20
8000b1aa:	c2 22       	add %d2,2
8000b1ac:	7d 2c 58 00 	jeq.a %a12,%a2,8000b25c <_malloc_r+0x100>
8000b1b0:	cc c3       	ld.a %a15,[%a12]12
8000b1b2:	99 c2 08 00 	ld.a %a2,[%a12]8
8000b1b6:	4c c1       	ld.w %d15,[%a12]4
8000b1b8:	ec 23       	st.a [%a2]12,%a15
8000b1ba:	8f 3f c0 f1 	andn %d15,%d15,3
8000b1be:	e8 22       	st.a [%a15]8,%a2
8000b1c0:	3c 74       	j 8000b2a8 <_malloc_r+0x14c>
8000b1c2:	8f 78 1f f0 	sh %d15,%d8,-9
8000b1c6:	3b f0 03 20 	mov %d2,63
8000b1ca:	6e 27       	jz %d15,8000b218 <_malloc_r+0xbc>
8000b1cc:	8f a8 1f 20 	sh %d2,%d8,-6
8000b1d0:	1b 82 03 20 	addi %d2,%d2,56
8000b1d4:	bf 5f 22 80 	jlt.u %d15,5,8000b218 <_malloc_r+0xbc>
8000b1d8:	8b 5f a1 22 	ge.u %d2,%d15,21
8000b1dc:	f6 24       	jnz %d2,8000b1e4 <_malloc_r+0x88>
8000b1de:	1b bf 05 20 	addi %d2,%d15,91
8000b1e2:	3c 1b       	j 8000b218 <_malloc_r+0xbc>
8000b1e4:	8b 5f a5 22 	ge.u %d2,%d15,85
8000b1e8:	f6 26       	jnz %d2,8000b1f4 <_malloc_r+0x98>
8000b1ea:	8f 48 1f 20 	sh %d2,%d8,-12
8000b1ee:	1b e2 06 20 	addi %d2,%d2,110
8000b1f2:	3c 13       	j 8000b218 <_malloc_r+0xbc>
8000b1f4:	8b 5f b5 22 	ge.u %d2,%d15,341
8000b1f8:	f6 26       	jnz %d2,8000b204 <_malloc_r+0xa8>
8000b1fa:	8f 18 1f 20 	sh %d2,%d8,-15
8000b1fe:	1b 72 07 20 	addi %d2,%d2,119
8000b202:	3c 0b       	j 8000b218 <_malloc_r+0xbc>
8000b204:	3b 50 55 30 	mov %d3,1365
8000b208:	3b e0 07 20 	mov %d2,126
8000b20c:	7f 3f 06 80 	jge.u %d15,%d3,8000b218 <_malloc_r+0xbc>
8000b210:	8f e8 1e 20 	sh %d2,%d8,-18
8000b214:	1b c2 07 20 	addi %d2,%d2,124
8000b218:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000b21c:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000b220:	7d 2c 1d 00 	jeq.a %a12,%a2,8000b25a <_malloc_r+0xfe>
8000b224:	19 c4 04 00 	ld.w %d4,[%a12]4
8000b228:	8f 34 c0 41 	andn %d4,%d4,3
8000b22c:	5a 84       	sub %d15,%d4,%d8
8000b22e:	8b 0f 41 32 	lt %d3,%d15,16
8000b232:	f6 33       	jnz %d3,8000b238 <_malloc_r+0xdc>
8000b234:	c2 f2       	add %d2,-1
8000b236:	3c 12       	j 8000b25a <_malloc_r+0xfe>
8000b238:	0e fe       	jltz %d15,8000b254 <_malloc_r+0xf8>
8000b23a:	cc c3       	ld.a %a15,[%a12]12
8000b23c:	99 c2 08 00 	ld.a %a2,[%a12]8
8000b240:	ec 23       	st.a [%a2]12,%a15
8000b242:	e8 22       	st.a [%a15]8,%a2
8000b244:	01 c4 00 f6 	addsc.a %a15,%a12,%d4,0
8000b248:	b7 10 21 20 	imask %e2,1,0,1
8000b24c:	49 f2 44 08 	ldmst [%a15]4,%e2
8000b250:	1d 00 cc 01 	j 8000b5e8 <_malloc_r+0x48c>
8000b254:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000b258:	3c e4       	j 8000b220 <_malloc_r+0xc4>
8000b25a:	c2 12       	add %d2,1
8000b25c:	c8 4c       	ld.a %a12,[%a15]16
8000b25e:	91 00 00 37 	movh.a %a3,28672
8000b262:	d9 33 28 40 	lea %a3,[%a3]296 <70000128 <__malloc_av_+0x8>>
8000b266:	7d 3c 83 00 	jeq.a %a12,%a3,8000b36c <_malloc_r+0x210>
8000b26a:	4c c1       	ld.w %d15,[%a12]4
8000b26c:	8f 3f c0 f1 	andn %d15,%d15,3
8000b270:	52 83       	sub %d3,%d15,%d8
8000b272:	8b 03 41 42 	lt %d4,%d3,16
8000b276:	df 04 16 80 	jne %d4,0,8000b2a2 <_malloc_r+0x146>
8000b27a:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b27e:	8f 18 40 81 	or %d8,%d8,1
8000b282:	59 c8 04 00 	st.w [%a12]4,%d8
8000b286:	e8 52       	st.a [%a15]20,%a2
8000b288:	e8 42       	st.a [%a15]16,%a2
8000b28a:	8f 13 40 f1 	or %d15,%d3,1
8000b28e:	b5 23 0c 00 	st.a [%a2]12,%a3
8000b292:	b5 23 08 00 	st.a [%a2]8,%a3
8000b296:	6c 21       	st.w [%a2]4,%d15
8000b298:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000b29c:	74 23       	st.w [%a2],%d3
8000b29e:	1d 00 a5 01 	j 8000b5e8 <_malloc_r+0x48c>
8000b2a2:	e8 53       	st.a [%a15]20,%a3
8000b2a4:	e8 43       	st.a [%a15]16,%a3
8000b2a6:	0e 33       	jltz %d3,8000b2ac <_malloc_r+0x150>
8000b2a8:	10 cf       	addsc.a %a15,%a12,%d15,0
8000b2aa:	3c cf       	j 8000b248 <_malloc_r+0xec>
8000b2ac:	3b 00 20 30 	mov %d3,512
8000b2b0:	7f 3f 15 80 	jge.u %d15,%d3,8000b2da <_malloc_r+0x17e>
8000b2b4:	06 df       	sh %d15,-3
8000b2b6:	d0 f2       	addsc.a %a2,%a15,%d15,3
8000b2b8:	48 14       	ld.w %d4,[%a15]4
8000b2ba:	99 24 08 00 	ld.a %a4,[%a2]8
8000b2be:	8f ef 3f 30 	sha %d3,%d15,-2
8000b2c2:	b5 c2 0c 00 	st.a [%a12]12,%a2
8000b2c6:	b5 c4 08 00 	st.a [%a12]8,%a4
8000b2ca:	d7 14 01 33 	insert %d3,%d4,1,%d3,1
8000b2ce:	b5 2c 08 00 	st.a [%a2]8,%a12
8000b2d2:	68 13       	st.w [%a15]4,%d3
8000b2d4:	b5 4c 0c 00 	st.a [%a4]12,%a12
8000b2d8:	3c 4a       	j 8000b36c <_malloc_r+0x210>
8000b2da:	8f af 1f 40 	sh %d4,%d15,-6
8000b2de:	8f 7f 1f 30 	sh %d3,%d15,-9
8000b2e2:	1b 84 03 40 	addi %d4,%d4,56
8000b2e6:	bf 53 22 80 	jlt.u %d3,5,8000b32a <_malloc_r+0x1ce>
8000b2ea:	8b 53 a1 42 	ge.u %d4,%d3,21
8000b2ee:	f6 44       	jnz %d4,8000b2f6 <_malloc_r+0x19a>
8000b2f0:	1b b3 05 40 	addi %d4,%d3,91
8000b2f4:	3c 1b       	j 8000b32a <_malloc_r+0x1ce>
8000b2f6:	8b 53 a5 42 	ge.u %d4,%d3,85
8000b2fa:	f6 46       	jnz %d4,8000b306 <_malloc_r+0x1aa>
8000b2fc:	8f 4f 1f 40 	sh %d4,%d15,-12
8000b300:	1b e4 06 40 	addi %d4,%d4,110
8000b304:	3c 13       	j 8000b32a <_malloc_r+0x1ce>
8000b306:	8b 53 b5 42 	ge.u %d4,%d3,341
8000b30a:	f6 46       	jnz %d4,8000b316 <_malloc_r+0x1ba>
8000b30c:	8f 1f 1f 40 	sh %d4,%d15,-15
8000b310:	1b 74 07 40 	addi %d4,%d4,119
8000b314:	3c 0b       	j 8000b32a <_malloc_r+0x1ce>
8000b316:	3b 50 55 50 	mov %d5,1365
8000b31a:	3b e0 07 40 	mov %d4,126
8000b31e:	7f 53 06 80 	jge.u %d3,%d5,8000b32a <_malloc_r+0x1ce>
8000b322:	8f ef 1e 40 	sh %d4,%d15,-18
8000b326:	1b c4 07 40 	addi %d4,%d4,124
8000b32a:	01 f4 03 46 	addsc.a %a4,%a15,%d4,3
8000b32e:	99 42 08 00 	ld.a %a2,[%a4]8
8000b332:	7d 42 0d 80 	jne.a %a2,%a4,8000b34c <_malloc_r+0x1f0>
8000b336:	4c f1       	ld.w %d15,[%a15]4
8000b338:	86 e4       	sha %d4,-2
8000b33a:	d7 1f 01 44 	insert %d4,%d15,1,%d4,1
8000b33e:	40 24       	mov.aa %a4,%a2
8000b340:	68 14       	st.w [%a15]4,%d4
8000b342:	3c 0d       	j 8000b35c <_malloc_r+0x200>
8000b344:	99 22 08 00 	ld.a %a2,[%a2]8
8000b348:	7d 42 08 00 	jeq.a %a2,%a4,8000b358 <_malloc_r+0x1fc>
8000b34c:	19 23 04 00 	ld.w %d3,[%a2]4
8000b350:	8f 33 c0 31 	andn %d3,%d3,3
8000b354:	3f 3f f8 ff 	jlt.u %d15,%d3,8000b344 <_malloc_r+0x1e8>
8000b358:	99 24 0c 00 	ld.a %a4,[%a2]12
8000b35c:	b5 c4 0c 00 	st.a [%a12]12,%a4
8000b360:	b5 c2 08 00 	st.a [%a12]8,%a2
8000b364:	b5 4c 08 00 	st.a [%a4]8,%a12
8000b368:	b5 2c 0c 00 	st.a [%a2]12,%a12
8000b36c:	8f e2 3f 30 	sha %d3,%d2,-2
8000b370:	82 1f       	mov %d15,1
8000b372:	0f 3f 00 f0 	sh %d15,%d15,%d3
8000b376:	48 13       	ld.w %d3,[%a15]4
8000b378:	3f f3 73 80 	jlt.u %d3,%d15,8000b45e <_malloc_r+0x302>
8000b37c:	0f 3f 80 40 	and %d4,%d15,%d3
8000b380:	f6 49       	jnz %d4,8000b392 <_malloc_r+0x236>
8000b382:	8f 32 c0 21 	andn %d2,%d2,3
8000b386:	06 1f       	sh %d15,1
8000b388:	0f 3f 80 40 	and %d4,%d15,%d3
8000b38c:	c2 42       	add %d2,4
8000b38e:	df 04 fc 7f 	jeq %d4,0,8000b386 <_malloc_r+0x22a>
8000b392:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000b396:	02 24       	mov %d4,%d2
8000b398:	40 24       	mov.aa %a4,%a2
8000b39a:	99 4c 0c 00 	ld.a %a12,[%a4]12
8000b39e:	7d 4c 3c 00 	jeq.a %a12,%a4,8000b416 <_malloc_r+0x2ba>
8000b3a2:	19 c6 04 00 	ld.w %d6,[%a12]4
8000b3a6:	8f 36 c0 61 	andn %d6,%d6,3
8000b3aa:	0b 86 80 30 	sub %d3,%d6,%d8
8000b3ae:	8b 03 41 52 	lt %d5,%d3,16
8000b3b2:	df 05 1d 80 	jne %d5,0,8000b3ec <_malloc_r+0x290>
8000b3b6:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b3ba:	8f 18 40 81 	or %d8,%d8,1
8000b3be:	59 c8 04 00 	st.w [%a12]4,%d8
8000b3c2:	99 c4 0c 00 	ld.a %a4,[%a12]12
8000b3c6:	09 c5 88 05 	ld.a %a5,[+%a12]8
8000b3ca:	8f 13 40 f1 	or %d15,%d3,1
8000b3ce:	b5 54 0c 00 	st.a [%a5]12,%a4
8000b3d2:	b5 45 08 00 	st.a [%a4]8,%a5
8000b3d6:	e8 52       	st.a [%a15]20,%a2
8000b3d8:	e8 42       	st.a [%a15]16,%a2
8000b3da:	b5 23 0c 00 	st.a [%a2]12,%a3
8000b3de:	b5 23 08 00 	st.a [%a2]8,%a3
8000b3e2:	6c 21       	st.w [%a2]4,%d15
8000b3e4:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000b3e8:	74 23       	st.w [%a2],%d3
8000b3ea:	3c 0e       	j 8000b406 <_malloc_r+0x2aa>
8000b3ec:	bf 03 12 00 	jlt %d3,0,8000b410 <_malloc_r+0x2b4>
8000b3f0:	01 c6 00 f6 	addsc.a %a15,%a12,%d6,0
8000b3f4:	b7 10 21 20 	imask %e2,1,0,1
8000b3f8:	49 f2 44 08 	ldmst [%a15]4,%e2
8000b3fc:	cc c3       	ld.a %a15,[%a12]12
8000b3fe:	09 c2 88 05 	ld.a %a2,[+%a12]8
8000b402:	ec 23       	st.a [%a2]12,%a15
8000b404:	e8 22       	st.a [%a15]8,%a2
8000b406:	40 d4       	mov.aa %a4,%a13
8000b408:	6d 00 f8 00 	call 8000b5f8 <__malloc_unlock>
8000b40c:	1d 00 f3 00 	j 8000b5f2 <_malloc_r+0x496>
8000b410:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000b414:	3c c5       	j 8000b39e <_malloc_r+0x242>
8000b416:	c2 14       	add %d4,1
8000b418:	8f 34 00 31 	and %d3,%d4,3
8000b41c:	d9 44 08 00 	lea %a4,[%a4]8
8000b420:	df 03 bd ff 	jne %d3,0,8000b39a <_malloc_r+0x23e>
8000b424:	8f 32 00 31 	and %d3,%d2,3
8000b428:	f6 36       	jnz %d3,8000b434 <_malloc_r+0x2d8>
8000b42a:	48 12       	ld.w %d2,[%a15]4
8000b42c:	0f f2 e0 20 	andn %d2,%d2,%d15
8000b430:	68 12       	st.w [%a15]4,%d2
8000b432:	3c 07       	j 8000b440 <_malloc_r+0x2e4>
8000b434:	d9 24 f8 ff 	lea %a4,[%a2]-8
8000b438:	d4 22       	ld.a %a2,[%a2]
8000b43a:	c2 f2       	add %d2,-1
8000b43c:	7d 42 f4 7f 	jeq.a %a2,%a4,8000b424 <_malloc_r+0x2c8>
8000b440:	06 1f       	sh %d15,1
8000b442:	48 12       	ld.w %d2,[%a15]4
8000b444:	8b 0f 20 32 	ne %d3,%d15,0
8000b448:	0b f2 50 32 	and.ge.u %d3,%d2,%d15
8000b44c:	76 39       	jz %d3,8000b45e <_malloc_r+0x302>
8000b44e:	0f 2f 80 30 	and %d3,%d15,%d2
8000b452:	f6 34       	jnz %d3,8000b45a <_malloc_r+0x2fe>
8000b454:	c2 44       	add %d4,4
8000b456:	06 1f       	sh %d15,1
8000b458:	3c fb       	j 8000b44e <_malloc_r+0x2f2>
8000b45a:	02 42       	mov %d2,%d4
8000b45c:	3c 9b       	j 8000b392 <_malloc_r+0x236>
8000b45e:	c8 2c       	ld.a %a12,[%a15]8
8000b460:	19 ca 04 00 	ld.w %d10,[%a12]4
8000b464:	8f 3a c0 a1 	andn %d10,%d10,3
8000b468:	5a 8a       	sub %d15,%d10,%d8
8000b46a:	8b 0f 41 22 	lt %d2,%d15,16
8000b46e:	0b 8a a0 22 	or.lt.u %d2,%d10,%d8
8000b472:	df 02 b1 00 	jeq %d2,0,8000b5d4 <_malloc_r+0x478>
8000b476:	91 00 00 27 	movh.a %a2,28672
8000b47a:	19 2b d8 c0 	ld.w %d11,[%a2]3864 <70000f18 <__malloc_top_pad>>
8000b47e:	91 00 00 27 	movh.a %a2,28672
8000b482:	42 8b       	add %d11,%d8
8000b484:	19 23 18 40 	ld.w %d3,[%a2]280 <70000118 <__malloc_sbrk_base>>
8000b488:	1b fb 00 f1 	addi %d15,%d11,4111
8000b48c:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000b490:	1b 0b 01 20 	addi %d2,%d11,16
8000b494:	8b f3 3f b2 	ne %d11,%d3,-1
8000b498:	2b 2f 40 bb 	sel %d11,%d11,%d15,%d2
8000b49c:	40 d4       	mov.aa %a4,%a13
8000b49e:	02 b4       	mov %d4,%d11
8000b4a0:	80 2c       	mov.d %d12,%a2
8000b4a2:	6d 00 ac 00 	call 8000b5fa <_sbrk_r>
8000b4a6:	80 29       	mov.d %d9,%a2
8000b4a8:	df f9 86 00 	jeq %d9,-1,8000b5b4 <_malloc_r+0x458>
8000b4ac:	80 c2       	mov.d %d2,%a12
8000b4ae:	80 c3       	mov.d %d3,%a12
8000b4b0:	42 a2       	add %d2,%d10
8000b4b2:	80 f4       	mov.d %d4,%a15
8000b4b4:	0b 29 30 f1 	lt.u %d15,%d9,%d2
8000b4b8:	0b 43 10 f2 	and.ne %d15,%d3,%d4
8000b4bc:	01 fc 10 d4 	ne.a %d13,%a12,%a15
8000b4c0:	ee 7a       	jnz %d15,8000b5b4 <_malloc_r+0x458>
8000b4c2:	91 00 00 e7 	movh.a %a14,28672
8000b4c6:	19 e3 e8 b0 	ld.w %d3,[%a14]3816 <70000ee8 <__malloc_current_mallinfo>>
8000b4ca:	42 b3       	add %d3,%d11
8000b4cc:	59 e3 e8 b0 	st.w [%a14]3816 <70000ee8 <__malloc_current_mallinfo>>,%d3
8000b4d0:	5f 29 0c 80 	jne %d9,%d2,8000b4e8 <_malloc_r+0x38c>
8000b4d4:	b7 09 14 f6 	insert %d15,%d9,0,12,20
8000b4d8:	ee 08       	jnz %d15,8000b4e8 <_malloc_r+0x38c>
8000b4da:	c8 22       	ld.a %a2,[%a15]8
8000b4dc:	42 ba       	add %d10,%d11
8000b4de:	8f 1a 40 a1 	or %d10,%d10,1
8000b4e2:	59 2a 04 00 	st.w [%a2]4,%d10
8000b4e6:	3c 55       	j 8000b590 <_malloc_r+0x434>
8000b4e8:	60 c2       	mov.a %a2,%d12
8000b4ea:	19 2f 18 40 	ld.w %d15,[%a2]280
8000b4ee:	5e f6       	jne %d15,-1,8000b4fa <_malloc_r+0x39e>
8000b4f0:	91 00 00 27 	movh.a %a2,28672
8000b4f4:	59 29 18 40 	st.w [%a2]280 <70000118 <__malloc_sbrk_base>>,%d9
8000b4f8:	3c 06       	j 8000b504 <_malloc_r+0x3a8>
8000b4fa:	0b 29 80 20 	sub %d2,%d9,%d2
8000b4fe:	42 23       	add %d3,%d2
8000b500:	59 e3 e8 b0 	st.w [%a14]3816 <70000ee8 <__malloc_current_mallinfo>>,%d3
8000b504:	8f 79 00 21 	and %d2,%d9,7
8000b508:	82 0f       	mov %d15,0
8000b50a:	76 24       	jz %d2,8000b512 <_malloc_r+0x3b6>
8000b50c:	8b 82 00 f1 	rsub %d15,%d2,8
8000b510:	42 f9       	add %d9,%d15
8000b512:	42 9b       	add %d11,%d9
8000b514:	b7 0b 14 b6 	insert %d11,%d11,0,12,20
8000b518:	1b 0f 00 21 	addi %d2,%d15,4096
8000b51c:	5a b2       	sub %d15,%d2,%d11
8000b51e:	40 d4       	mov.aa %a4,%a13
8000b520:	02 f4       	mov %d4,%d15
8000b522:	6d 00 6c 00 	call 8000b5fa <_sbrk_r>
8000b526:	80 22       	mov.d %d2,%a2
8000b528:	df f2 04 80 	jne %d2,-1,8000b530 <_malloc_r+0x3d4>
8000b52c:	60 92       	mov.a %a2,%d9
8000b52e:	82 0f       	mov %d15,0
8000b530:	80 2b       	mov.d %d11,%a2
8000b532:	19 e2 e8 b0 	ld.w %d2,[%a14]3816 <70000ee8 <__malloc_current_mallinfo>>
8000b536:	a2 9b       	sub %d11,%d9
8000b538:	42 f2       	add %d2,%d15
8000b53a:	60 92       	mov.a %a2,%d9
8000b53c:	42 bf       	add %d15,%d11
8000b53e:	68 29       	st.w [%a15]8,%d9
8000b540:	8f 1f 40 31 	or %d3,%d15,1
8000b544:	59 e2 e8 b0 	st.w [%a14]3816 <70000ee8 <__malloc_current_mallinfo>>,%d2
8000b548:	59 23 04 00 	st.w [%a2]4 <70000ee8 <__malloc_current_mallinfo>>,%d3
8000b54c:	df 0d 22 00 	jeq %d13,0,8000b590 <_malloc_r+0x434>
8000b550:	8b 0a a1 f2 	ge.u %d15,%d10,16
8000b554:	ee 05       	jnz %d15,8000b55e <_malloc_r+0x402>
8000b556:	82 12       	mov %d2,1
8000b558:	59 22 04 00 	st.w [%a2]4,%d2
8000b55c:	3c 2c       	j 8000b5b4 <_malloc_r+0x458>
8000b55e:	1b 4a ff af 	addi %d10,%d10,-12
8000b562:	8f 7a c0 f1 	andn %d15,%d10,7
8000b566:	10 c2       	addsc.a %a2,%a12,%d15,0
8000b568:	82 52       	mov %d2,5
8000b56a:	59 22 04 00 	st.w [%a2]4,%d2
8000b56e:	59 22 08 00 	st.w [%a2]8,%d2
8000b572:	19 c2 04 00 	ld.w %d2,[%a12]4
8000b576:	8f 12 00 21 	and %d2,%d2,1
8000b57a:	a6 f2       	or %d2,%d15
8000b57c:	59 c2 04 00 	st.w [%a12]4,%d2
8000b580:	8b 0f 61 f2 	lt.u %d15,%d15,16
8000b584:	ee 06       	jnz %d15,8000b590 <_malloc_r+0x434>
8000b586:	40 d4       	mov.aa %a4,%a13
8000b588:	d9 c5 08 00 	lea %a5,[%a12]8
8000b58c:	6d 00 dd 00 	call 8000b746 <_free_r>
8000b590:	91 00 00 27 	movh.a %a2,28672
8000b594:	19 ef e8 b0 	ld.w %d15,[%a14]3816 <70000ee8 <__malloc_current_mallinfo>>
8000b598:	19 22 d4 c0 	ld.w %d2,[%a2]3860 <70000f14 <__malloc_max_sbrked_mem>>
8000b59c:	7f f2 04 80 	jge.u %d2,%d15,8000b5a4 <_malloc_r+0x448>
8000b5a0:	59 2f d4 c0 	st.w [%a2]3860 <70000f14 <__malloc_max_sbrked_mem>>,%d15
8000b5a4:	91 00 00 27 	movh.a %a2,28672
8000b5a8:	19 22 d0 c0 	ld.w %d2,[%a2]3856 <70000f10 <__malloc_max_total_mem>>
8000b5ac:	7f f2 04 80 	jge.u %d2,%d15,8000b5b4 <_malloc_r+0x458>
8000b5b0:	59 2f d0 c0 	st.w [%a2]3856 <70000f10 <__malloc_max_total_mem>>,%d15
8000b5b4:	c8 22       	ld.a %a2,[%a15]8
8000b5b6:	19 22 04 00 	ld.w %d2,[%a2]4 <70000f10 <__malloc_max_total_mem>>
8000b5ba:	8f 32 c0 21 	andn %d2,%d2,3
8000b5be:	5a 82       	sub %d15,%d2,%d8
8000b5c0:	8b 0f 41 32 	lt %d3,%d15,16
8000b5c4:	0b 82 a0 32 	or.lt.u %d3,%d2,%d8
8000b5c8:	76 36       	jz %d3,8000b5d4 <_malloc_r+0x478>
8000b5ca:	40 d4       	mov.aa %a4,%a13
8000b5cc:	6d 00 16 00 	call 8000b5f8 <__malloc_unlock>
8000b5d0:	a0 0c       	mov.a %a12,0
8000b5d2:	3c 10       	j 8000b5f2 <_malloc_r+0x496>
8000b5d4:	c8 2c       	ld.a %a12,[%a15]8
8000b5d6:	8f 18 40 21 	or %d2,%d8,1
8000b5da:	96 01       	or %d15,1
8000b5dc:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b5e0:	59 c2 04 00 	st.w [%a12]4,%d2
8000b5e4:	e8 22       	st.a [%a15]8,%a2
8000b5e6:	6c 21       	st.w [%a2]4,%d15
8000b5e8:	40 d4       	mov.aa %a4,%a13
8000b5ea:	6d 00 07 00 	call 8000b5f8 <__malloc_unlock>
8000b5ee:	d9 cc 08 00 	lea %a12,[%a12]8
8000b5f2:	40 c2       	mov.aa %a2,%a12
8000b5f4:	00 90       	ret 

8000b5f6 <__malloc_lock>:
8000b5f6:	00 90       	ret 

8000b5f8 <__malloc_unlock>:
8000b5f8:	00 90       	ret 

8000b5fa <_sbrk_r>:
8000b5fa:	82 0f       	mov %d15,0
8000b5fc:	91 00 00 c7 	movh.a %a12,28672
8000b600:	59 cf e0 c0 	st.w [%a12]3872 <70000f20 <errno>>,%d15
8000b604:	40 4f       	mov.aa %a15,%a4
8000b606:	6d 00 2d 17 	call 8000e460 <sbrk>
8000b60a:	80 2f       	mov.d %d15,%a2
8000b60c:	5e f5       	jne %d15,-1,8000b616 <_sbrk_r+0x1c>
8000b60e:	19 cf e0 c0 	ld.w %d15,[%a12]3872 <70000f20 <errno>>
8000b612:	6e 02       	jz %d15,8000b616 <_sbrk_r+0x1c>
8000b614:	68 0f       	st.w [%a15]0,%d15
8000b616:	00 90       	ret 

8000b618 <strlen>:
8000b618:	80 42       	mov.d %d2,%a4
8000b61a:	80 4f       	mov.d %d15,%a4
8000b61c:	60 ff       	mov.a %a15,%d15
8000b61e:	79 f3 00 00 	ld.b %d3,[%a15]0
8000b622:	76 33       	jz %d3,8000b628 <strlen+0x10>
8000b624:	c2 1f       	add %d15,1
8000b626:	3c fb       	j 8000b61c <strlen+0x4>
8000b628:	52 22       	sub %d2,%d15,%d2
8000b62a:	00 90       	ret 

8000b62c <_vsnprintf_r>:
8000b62c:	20 68       	sub.a %sp,104
8000b62e:	40 4f       	mov.aa %a15,%a4
8000b630:	ce 45       	jgez %d4,8000b63a <_vsnprintf_r+0xe>
8000b632:	da 8b       	mov %d15,139
8000b634:	6c 40       	st.w [%a4]0,%d15
8000b636:	82 f2       	mov %d2,-1
8000b638:	00 90       	ret 
8000b63a:	02 4f       	mov %d15,%d4
8000b63c:	3b 80 20 20 	mov %d2,520
8000b640:	f9 a2 0c 00 	st.h [%sp]12,%d2
8000b644:	92 f2       	add %d2,%d15,-1
8000b646:	ea 02       	cmovn %d2,%d15,0
8000b648:	f4 a5       	st.a [%sp],%a5
8000b64a:	b5 a5 10 00 	st.a [%sp]16,%a5
8000b64e:	59 a2 08 00 	st.w [%sp]8,%d2
8000b652:	59 a2 14 00 	st.w [%sp]20,%d2
8000b656:	40 a5       	mov.aa %a5,%sp
8000b658:	82 f2       	mov %d2,-1
8000b65a:	f9 a2 0e 00 	st.h [%sp]14,%d2
8000b65e:	6d 00 4b 01 	call 8000b8f4 <_svfprintf_r>
8000b662:	ff f2 05 00 	jge %d2,-1,8000b66c <_vsnprintf_r+0x40>
8000b666:	3b b0 08 30 	mov %d3,139
8000b66a:	68 03       	st.w [%a15]0,%d3
8000b66c:	6e 04       	jz %d15,8000b674 <_vsnprintf_r+0x48>
8000b66e:	d8 00       	ld.a %a15,[%sp]0
8000b670:	82 0f       	mov %d15,0
8000b672:	28 0f       	st.b [%a15]0,%d15
8000b674:	00 90       	ret 

8000b676 <vsnprintf>:
8000b676:	91 00 00 37 	movh.a %a3,28672
8000b67a:	40 42       	mov.aa %a2,%a4
8000b67c:	99 34 68 40 	ld.a %a4,[%a3]1320 <70000528 <_impure_ptr>>
8000b680:	40 5f       	mov.aa %a15,%a5
8000b682:	40 67       	mov.aa %a7,%a6
8000b684:	40 25       	mov.aa %a5,%a2
8000b686:	40 f6       	mov.aa %a6,%a15
8000b688:	1d ff d2 ff 	j 8000b62c <_vsnprintf_r>

8000b68c <_malloc_trim_r>:
8000b68c:	02 4f       	mov %d15,%d4
8000b68e:	40 4f       	mov.aa %a15,%a4
8000b690:	6d ff b3 ff 	call 8000b5f6 <__malloc_lock>
8000b694:	91 00 00 c7 	movh.a %a12,28672
8000b698:	d9 cc 20 40 	lea %a12,[%a12]288 <70000120 <__malloc_av_>>
8000b69c:	99 c2 08 00 	ld.a %a2,[%a12]8 <70000008 <sendActuatorPkt+0x4>>
8000b6a0:	3b 00 00 21 	mov %d2,4096
8000b6a4:	19 28 04 00 	ld.w %d8,[%a2]4
8000b6a8:	8f 38 c0 81 	andn %d8,%d8,3
8000b6ac:	5a f8       	sub %d15,%d8,%d15
8000b6ae:	1b ff fe f0 	addi %d15,%d15,4079
8000b6b2:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000b6b6:	1b 0f 00 ff 	addi %d15,%d15,-4096
8000b6ba:	7f 2f 07 00 	jge %d15,%d2,8000b6c8 <_malloc_trim_r+0x3c>
8000b6be:	40 f4       	mov.aa %a4,%a15
8000b6c0:	6d ff 9c ff 	call 8000b5f8 <__malloc_unlock>
8000b6c4:	82 02       	mov %d2,0
8000b6c6:	00 90       	ret 
8000b6c8:	40 f4       	mov.aa %a4,%a15
8000b6ca:	82 04       	mov %d4,0
8000b6cc:	6d ff 97 ff 	call 8000b5fa <_sbrk_r>
8000b6d0:	99 c3 08 00 	ld.a %a3,[%a12]8
8000b6d4:	60 84       	mov.a %a4,%d8
8000b6d6:	30 43       	add.a %a3,%a4
8000b6d8:	7d 32 f3 ff 	jne.a %a2,%a3,8000b6be <_malloc_trim_r+0x32>
8000b6dc:	40 f4       	mov.aa %a4,%a15
8000b6de:	8b 0f 00 41 	rsub %d4,%d15,0
8000b6e2:	6d ff 8c ff 	call 8000b5fa <_sbrk_r>
8000b6e6:	80 22       	mov.d %d2,%a2
8000b6e8:	df f2 1c 80 	jne %d2,-1,8000b720 <_malloc_trim_r+0x94>
8000b6ec:	40 f4       	mov.aa %a4,%a15
8000b6ee:	82 04       	mov %d4,0
8000b6f0:	6d ff 85 ff 	call 8000b5fa <_sbrk_r>
8000b6f4:	99 c3 08 00 	ld.a %a3,[%a12]8
8000b6f8:	01 32 20 40 	sub.a %a4,%a2,%a3
8000b6fc:	80 4f       	mov.d %d15,%a4
8000b6fe:	8b 0f 41 22 	lt %d2,%d15,16
8000b702:	df 02 de ff 	jne %d2,0,8000b6be <_malloc_trim_r+0x32>
8000b706:	91 00 00 47 	movh.a %a4,28672
8000b70a:	99 44 18 40 	ld.a %a4,[%a4]280 <70000118 <__malloc_sbrk_base>>
8000b70e:	96 01       	or %d15,1
8000b710:	6c 31       	st.w [%a3]4,%d15
8000b712:	01 42 20 20 	sub.a %a2,%a2,%a4
8000b716:	91 00 00 47 	movh.a %a4,28672
8000b71a:	b5 42 e8 b0 	st.a [%a4]3816 <70000ee8 <__malloc_current_mallinfo>>,%a2
8000b71e:	3c d0       	j 8000b6be <_malloc_trim_r+0x32>
8000b720:	99 c2 08 00 	ld.a %a2,[%a12]8
8000b724:	a2 f8       	sub %d8,%d15
8000b726:	8f 18 40 81 	or %d8,%d8,1
8000b72a:	59 28 04 00 	st.w [%a2]4,%d8
8000b72e:	91 00 00 27 	movh.a %a2,28672
8000b732:	19 22 e8 b0 	ld.w %d2,[%a2]3816 <70000ee8 <__malloc_current_mallinfo>>
8000b736:	40 f4       	mov.aa %a4,%a15
8000b738:	5a f2       	sub %d15,%d2,%d15
8000b73a:	59 2f e8 b0 	st.w [%a2]3816 <70000ee8 <__malloc_current_mallinfo>>,%d15
8000b73e:	6d ff 5d ff 	call 8000b5f8 <__malloc_unlock>
8000b742:	82 12       	mov %d2,1
8000b744:	00 90       	ret 

8000b746 <_free_r>:
8000b746:	40 4d       	mov.aa %a13,%a4
8000b748:	bd 05 d4 00 	jz.a %a5,8000b8f0 <_free_r+0x1aa>
8000b74c:	40 5c       	mov.aa %a12,%a5
8000b74e:	6d ff 54 ff 	call 8000b5f6 <__malloc_lock>
8000b752:	19 c4 fc ff 	ld.w %d4,[%a12]-4
8000b756:	d9 cf f8 ff 	lea %a15,[%a12]-8
8000b75a:	8f 14 c0 f1 	andn %d15,%d4,1
8000b75e:	91 00 00 27 	movh.a %a2,28672
8000b762:	10 f3       	addsc.a %a3,%a15,%d15,0
8000b764:	d9 22 20 40 	lea %a2,[%a2]288 <70000120 <__malloc_av_>>
8000b768:	99 24 08 00 	ld.a %a4,[%a2]8 <70000008 <sendActuatorPkt+0x4>>
8000b76c:	19 33 04 00 	ld.w %d3,[%a3]4 <70000008 <sendActuatorPkt+0x4>>
8000b770:	8f 14 00 41 	and %d4,%d4,1
8000b774:	8f 33 c0 31 	andn %d3,%d3,3
8000b778:	7d 43 24 80 	jne.a %a3,%a4,8000b7c0 <_free_r+0x7a>
8000b77c:	42 3f       	add %d15,%d3
8000b77e:	f6 4d       	jnz %d4,8000b798 <_free_r+0x52>
8000b780:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000b784:	60 23       	mov.a %a3,%d2
8000b786:	42 2f       	add %d15,%d2
8000b788:	01 3f 20 f0 	sub.a %a15,%a15,%a3
8000b78c:	c8 33       	ld.a %a3,[%a15]12
8000b78e:	c8 24       	ld.a %a4,[%a15]8
8000b790:	b5 43 0c 00 	st.a [%a4]12,%a3
8000b794:	b5 34 08 00 	st.a [%a3]8,%a4
8000b798:	8f 1f 40 21 	or %d2,%d15,1
8000b79c:	68 12       	st.w [%a15]4,%d2
8000b79e:	ec 22       	st.a [%a2]8,%a15
8000b7a0:	91 00 00 f7 	movh.a %a15,28672
8000b7a4:	19 f2 1c 40 	ld.w %d2,[%a15]284 <7000011c <__malloc_trim_threshold>>
8000b7a8:	3f 2f 09 80 	jlt.u %d15,%d2,8000b7ba <_free_r+0x74>
8000b7ac:	91 00 00 f7 	movh.a %a15,28672
8000b7b0:	40 d4       	mov.aa %a4,%a13
8000b7b2:	19 f4 d8 c0 	ld.w %d4,[%a15]3864 <70000f18 <__malloc_top_pad>>
8000b7b6:	6d ff 6b ff 	call 8000b68c <_malloc_trim_r>
8000b7ba:	40 d4       	mov.aa %a4,%a13
8000b7bc:	1d ff 1e ff 	j 8000b5f8 <__malloc_unlock>
8000b7c0:	59 33 04 00 	st.w [%a3]4,%d3
8000b7c4:	82 02       	mov %d2,0
8000b7c6:	df 04 16 80 	jne %d4,0,8000b7f2 <_free_r+0xac>
8000b7ca:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000b7ce:	60 24       	mov.a %a4,%d2
8000b7d0:	42 2f       	add %d15,%d2
8000b7d2:	01 4f 20 f0 	sub.a %a15,%a15,%a4
8000b7d6:	c8 25       	ld.a %a5,[%a15]8
8000b7d8:	91 00 00 47 	movh.a %a4,28672
8000b7dc:	d9 44 28 40 	lea %a4,[%a4]296 <70000128 <__malloc_av_+0x8>>
8000b7e0:	82 12       	mov %d2,1
8000b7e2:	7d 45 08 00 	jeq.a %a5,%a4,8000b7f2 <_free_r+0xac>
8000b7e6:	c8 34       	ld.a %a4,[%a15]12
8000b7e8:	82 02       	mov %d2,0
8000b7ea:	b5 54 0c 00 	st.a [%a5]12,%a4
8000b7ee:	b5 45 08 00 	st.a [%a4]8,%a5
8000b7f2:	01 33 00 46 	addsc.a %a4,%a3,%d3,0
8000b7f6:	19 44 04 00 	ld.w %d4,[%a4]4
8000b7fa:	6f 04 18 80 	jnz.t %d4,0,8000b82a <_free_r+0xe4>
8000b7fe:	42 3f       	add %d15,%d3
8000b800:	99 35 08 00 	ld.a %a5,[%a3]8
8000b804:	f6 2d       	jnz %d2,8000b81e <_free_r+0xd8>
8000b806:	91 00 00 47 	movh.a %a4,28672
8000b80a:	d9 44 28 40 	lea %a4,[%a4]296 <70000128 <__malloc_av_+0x8>>
8000b80e:	7d 45 08 80 	jne.a %a5,%a4,8000b81e <_free_r+0xd8>
8000b812:	ec 25       	st.a [%a2]20,%a15
8000b814:	ec 24       	st.a [%a2]16,%a15
8000b816:	e8 35       	st.a [%a15]12,%a5
8000b818:	e8 25       	st.a [%a15]8,%a5
8000b81a:	82 12       	mov %d2,1
8000b81c:	3c 07       	j 8000b82a <_free_r+0xe4>
8000b81e:	99 33 0c 00 	ld.a %a3,[%a3]12
8000b822:	b5 53 0c 00 	st.a [%a5]12,%a3
8000b826:	b5 35 08 00 	st.a [%a3]8,%a5
8000b82a:	8f 1f 40 31 	or %d3,%d15,1
8000b82e:	10 f3       	addsc.a %a3,%a15,%d15,0
8000b830:	68 13       	st.w [%a15]4,%d3
8000b832:	6c 30       	st.w [%a3]0,%d15
8000b834:	df 02 c3 ff 	jne %d2,0,8000b7ba <_free_r+0x74>
8000b838:	3b 00 20 20 	mov %d2,512
8000b83c:	7f 2f 12 80 	jge.u %d15,%d2,8000b860 <_free_r+0x11a>
8000b840:	19 23 04 00 	ld.w %d3,[%a2]4
8000b844:	06 df       	sh %d15,-3
8000b846:	8f ef 3f 20 	sha %d2,%d15,-2
8000b84a:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
8000b84e:	59 22 04 00 	st.w [%a2]4,%d2
8000b852:	d0 22       	addsc.a %a2,%a2,%d15,3
8000b854:	99 23 08 00 	ld.a %a3,[%a2]8
8000b858:	e8 32       	st.a [%a15]12,%a2
8000b85a:	e8 23       	st.a [%a15]8,%a3
8000b85c:	ec 22       	st.a [%a2]8,%a15
8000b85e:	3c 46       	j 8000b8ea <_free_r+0x1a4>
8000b860:	8f af 1f 30 	sh %d3,%d15,-6
8000b864:	8f 7f 1f 20 	sh %d2,%d15,-9
8000b868:	1b 83 03 30 	addi %d3,%d3,56
8000b86c:	bf 52 22 80 	jlt.u %d2,5,8000b8b0 <_free_r+0x16a>
8000b870:	8b 52 a1 32 	ge.u %d3,%d2,21
8000b874:	f6 34       	jnz %d3,8000b87c <_free_r+0x136>
8000b876:	1b b2 05 30 	addi %d3,%d2,91
8000b87a:	3c 1b       	j 8000b8b0 <_free_r+0x16a>
8000b87c:	8b 52 a5 32 	ge.u %d3,%d2,85
8000b880:	f6 36       	jnz %d3,8000b88c <_free_r+0x146>
8000b882:	8f 4f 1f 30 	sh %d3,%d15,-12
8000b886:	1b e3 06 30 	addi %d3,%d3,110
8000b88a:	3c 13       	j 8000b8b0 <_free_r+0x16a>
8000b88c:	8b 52 b5 32 	ge.u %d3,%d2,341
8000b890:	f6 36       	jnz %d3,8000b89c <_free_r+0x156>
8000b892:	8f 1f 1f 30 	sh %d3,%d15,-15
8000b896:	1b 73 07 30 	addi %d3,%d3,119
8000b89a:	3c 0b       	j 8000b8b0 <_free_r+0x16a>
8000b89c:	3b 50 55 40 	mov %d4,1365
8000b8a0:	3b e0 07 30 	mov %d3,126
8000b8a4:	7f 42 06 80 	jge.u %d2,%d4,8000b8b0 <_free_r+0x16a>
8000b8a8:	8f ef 1e 30 	sh %d3,%d15,-18
8000b8ac:	1b c3 07 30 	addi %d3,%d3,124
8000b8b0:	01 23 03 66 	addsc.a %a6,%a2,%d3,3
8000b8b4:	99 65 08 00 	ld.a %a5,[%a6]8
8000b8b8:	40 53       	mov.aa %a3,%a5
8000b8ba:	7d 65 0d 80 	jne.a %a5,%a6,8000b8d4 <_free_r+0x18e>
8000b8be:	4c 21       	ld.w %d15,[%a2]4
8000b8c0:	86 e3       	sha %d3,-2
8000b8c2:	d7 1f 01 33 	insert %d3,%d15,1,%d3,1
8000b8c6:	59 23 04 00 	st.w [%a2]4,%d3
8000b8ca:	3c 0d       	j 8000b8e4 <_free_r+0x19e>
8000b8cc:	99 33 08 00 	ld.a %a3,[%a3]8
8000b8d0:	7d 63 08 00 	jeq.a %a3,%a6,8000b8e0 <_free_r+0x19a>
8000b8d4:	19 32 04 00 	ld.w %d2,[%a3]4
8000b8d8:	8f 32 c0 21 	andn %d2,%d2,3
8000b8dc:	3f 2f f8 ff 	jlt.u %d15,%d2,8000b8cc <_free_r+0x186>
8000b8e0:	99 35 0c 00 	ld.a %a5,[%a3]12
8000b8e4:	e8 35       	st.a [%a15]12,%a5
8000b8e6:	e8 23       	st.a [%a15]8,%a3
8000b8e8:	ec 52       	st.a [%a5]8,%a15
8000b8ea:	ec 33       	st.a [%a3]12,%a15
8000b8ec:	1d ff 67 ff 	j 8000b7ba <_free_r+0x74>
8000b8f0:	00 90       	ret 
	...

8000b8f4 <_svfprintf_r>:
8000b8f4:	20 d0       	sub.a %sp,208
8000b8f6:	80 5b       	mov.d %d11,%a5
8000b8f8:	80 4c       	mov.d %d12,%a4
8000b8fa:	b5 a6 18 00 	st.a [%sp]24,%a6
8000b8fe:	40 7f       	mov.aa %a15,%a7
8000b900:	6d 00 c4 0f 	call 8000d888 <_localeconv_r>
8000b904:	d4 22       	ld.a %a2,[%a2]
8000b906:	40 24       	mov.aa %a4,%a2
8000b908:	b5 a2 34 00 	st.a [%sp]52,%a2
8000b90c:	6d ff 86 fe 	call 8000b618 <strlen>
8000b910:	60 b2       	mov.a %a2,%d11
8000b912:	59 a2 20 00 	st.w [%sp]32,%d2
8000b916:	8c 26       	ld.h %d15,[%a2]12
8000b918:	6f 7f 16 00 	jz.t %d15,7,8000b944 <_svfprintf_r+0x50>
8000b91c:	4c 24       	ld.w %d15,[%a2]16
8000b91e:	ee 13       	jnz %d15,8000b944 <_svfprintf_r+0x50>
8000b920:	60 c4       	mov.a %a4,%d12
8000b922:	3b 00 04 40 	mov %d4,64
8000b926:	6d ff 1b fc 	call 8000b15c <_malloc_r>
8000b92a:	60 b3       	mov.a %a3,%d11
8000b92c:	f4 32       	st.a [%a3],%a2
8000b92e:	b5 32 10 00 	st.a [%a3]16,%a2
8000b932:	7c 26       	jnz.a %a2,8000b93e <_svfprintf_r+0x4a>
8000b934:	60 cf       	mov.a %a15,%d12
8000b936:	da 0c       	mov %d15,12
8000b938:	68 0f       	st.w [%a15]0,%d15
8000b93a:	82 f2       	mov %d2,-1
8000b93c:	00 90       	ret 
8000b93e:	60 b2       	mov.a %a2,%d11
8000b940:	da 40       	mov %d15,64
8000b942:	6c 25       	st.w [%a2]20,%d15
8000b944:	82 0f       	mov %d15,0
8000b946:	d9 a2 10 20 	lea %a2,[%sp]144
8000b94a:	a0 03       	mov.a %a3,0
8000b94c:	b5 a2 1c 10 	st.a [%sp]92,%a2
8000b950:	78 19       	st.w [%sp]100,%d15
8000b952:	78 18       	st.w [%sp]96,%d15
8000b954:	78 05       	st.w [%sp]20,%d15
8000b956:	78 0b       	st.w [%sp]44,%d15
8000b958:	78 0c       	st.w [%sp]48,%d15
8000b95a:	b5 a3 3c 00 	st.a [%sp]60,%a3
8000b95e:	78 0e       	st.w [%sp]56,%d15
8000b960:	78 0a       	st.w [%sp]40,%d15
8000b962:	40 2e       	mov.aa %a14,%a2
8000b964:	99 ac 18 00 	ld.a %a12,[%sp]24
8000b968:	79 cf 00 00 	ld.b %d15,[%a12]0
8000b96c:	8b 0f 20 32 	ne %d3,%d15,0
8000b970:	8b 5f 22 34 	and.ne %d3,%d15,37
8000b974:	76 33       	jz %d3,8000b97a <_svfprintf_r+0x86>
8000b976:	b0 1c       	add.a %a12,1
8000b978:	3c f8       	j 8000b968 <_svfprintf_r+0x74>
8000b97a:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b97e:	01 3c 20 30 	sub.a %a3,%a12,%a3
8000b982:	80 3f       	mov.d %d15,%a3
8000b984:	6e 23       	jz %d15,8000b9ca <_svfprintf_r+0xd6>
8000b986:	19 a3 24 10 	ld.w %d3,[%sp]100
8000b98a:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b98e:	42 f3       	add %d3,%d15
8000b990:	59 a3 24 10 	st.w [%sp]100,%d3
8000b994:	19 a3 20 10 	ld.w %d3,[%sp]96
8000b998:	f4 e3       	st.a [%a14],%a3
8000b99a:	c2 13       	add %d3,1
8000b99c:	6c e1       	st.w [%a14]4,%d15
8000b99e:	59 a3 20 10 	st.w [%sp]96,%d3
8000b9a2:	8b 83 80 32 	ge %d3,%d3,8
8000b9a6:	d9 ee 08 00 	lea %a14,[%a14]8
8000b9aa:	76 3b       	jz %d3,8000b9c0 <_svfprintf_r+0xcc>
8000b9ac:	60 c4       	mov.a %a4,%d12
8000b9ae:	60 b5       	mov.a %a5,%d11
8000b9b0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000b9b4:	6d 00 7d 12 	call 8000deae <__ssprint_r>
8000b9b8:	df 02 69 88 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000b9bc:	d9 ae 10 20 	lea %a14,[%sp]144
8000b9c0:	19 a2 28 00 	ld.w %d2,[%sp]40
8000b9c4:	42 f2       	add %d2,%d15
8000b9c6:	59 a2 28 00 	st.w [%sp]40,%d2
8000b9ca:	79 cf 00 00 	ld.b %d15,[%a12]0
8000b9ce:	df 0f 56 08 	jeq %d15,0,8000ca7a <_svfprintf_r+0x1186>
8000b9d2:	82 0f       	mov %d15,0
8000b9d4:	82 02       	mov %d2,0
8000b9d6:	e9 af 01 10 	st.b [%sp]65,%d15
8000b9da:	d9 c2 01 00 	lea %a2,[%a12]1
8000b9de:	82 0f       	mov %d15,0
8000b9e0:	82 fe       	mov %d14,-1
8000b9e2:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b9e6:	82 0a       	mov %d10,0
8000b9e8:	79 22 00 00 	ld.b %d2,[%a2]0
8000b9ec:	d9 23 01 00 	lea %a3,[%a2]1
8000b9f0:	b5 a3 18 00 	st.a [%sp]24,%a3
8000b9f4:	59 a2 10 00 	st.w [%sp]16,%d2
8000b9f8:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b9fc:	1b 02 fe 3f 	addi %d3,%d2,-32
8000ba00:	8b 93 a5 42 	ge.u %d4,%d3,89
8000ba04:	df 04 19 84 	jne %d4,0,8000c236 <_svfprintf_r+0x942>
8000ba08:	91 10 00 28 	movh.a %a2,32769
8000ba0c:	d9 22 98 8b 	lea %a2,[%a2]-17896 <8000ba18 <_svfprintf_r+0x124>>
8000ba10:	01 23 02 76 	addsc.a %a7,%a2,%d3,2
8000ba14:	dc 07       	ji %a7
8000ba16:	00 00       	nop 
8000ba18:	1d 00 c3 00 	j 8000bb9e <_svfprintf_r+0x2aa>
8000ba1c:	1d 00 0d 04 	j 8000c236 <_svfprintf_r+0x942>
8000ba20:	1d 00 0b 04 	j 8000c236 <_svfprintf_r+0x942>
8000ba24:	1d 00 c0 00 	j 8000bba4 <_svfprintf_r+0x2b0>
8000ba28:	1d 00 07 04 	j 8000c236 <_svfprintf_r+0x942>
8000ba2c:	1d 00 05 04 	j 8000c236 <_svfprintf_r+0x942>
8000ba30:	1d 00 03 04 	j 8000c236 <_svfprintf_r+0x942>
8000ba34:	1d 00 01 04 	j 8000c236 <_svfprintf_r+0x942>
8000ba38:	1d 00 ff 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba3c:	1d 00 fd 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba40:	1d 00 b5 00 	j 8000bbaa <_svfprintf_r+0x2b6>
8000ba44:	1d 00 9c 00 	j 8000bb7c <_svfprintf_r+0x288>
8000ba48:	1d 00 f7 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba4c:	1d 00 b8 00 	j 8000bbbc <_svfprintf_r+0x2c8>
8000ba50:	1d 00 b9 00 	j 8000bbc2 <_svfprintf_r+0x2ce>
8000ba54:	1d 00 f1 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba58:	1d 00 de 00 	j 8000bc14 <_svfprintf_r+0x320>
8000ba5c:	1d 00 df 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba60:	1d 00 dd 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba64:	1d 00 db 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba68:	1d 00 d9 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba6c:	1d 00 d7 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba70:	1d 00 d5 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba74:	1d 00 d3 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba78:	1d 00 d1 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba7c:	1d 00 cf 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba80:	1d 00 db 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba84:	1d 00 d9 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba88:	1d 00 d7 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba8c:	1d 00 d5 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba90:	1d 00 d3 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba94:	1d 00 d1 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba98:	1d 00 cf 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba9c:	1d 00 cd 03 	j 8000c236 <_svfprintf_r+0x942>
8000baa0:	1d 00 cb 03 	j 8000c236 <_svfprintf_r+0x942>
8000baa4:	1d 00 c9 03 	j 8000c236 <_svfprintf_r+0x942>
8000baa8:	1d 00 f9 00 	j 8000bc9a <_svfprintf_r+0x3a6>
8000baac:	1d 00 21 01 	j 8000bcee <_svfprintf_r+0x3fa>
8000bab0:	1d 00 c3 03 	j 8000c236 <_svfprintf_r+0x942>
8000bab4:	1d 00 1d 01 	j 8000bcee <_svfprintf_r+0x3fa>
8000bab8:	1d 00 bf 03 	j 8000c236 <_svfprintf_r+0x942>
8000babc:	1d 00 bd 03 	j 8000c236 <_svfprintf_r+0x942>
8000bac0:	1d 00 bb 03 	j 8000c236 <_svfprintf_r+0x942>
8000bac4:	1d 00 b9 03 	j 8000c236 <_svfprintf_r+0x942>
8000bac8:	1d 00 c6 00 	j 8000bc54 <_svfprintf_r+0x360>
8000bacc:	1d 00 b5 03 	j 8000c236 <_svfprintf_r+0x942>
8000bad0:	1d 00 b3 03 	j 8000c236 <_svfprintf_r+0x942>
8000bad4:	1d 00 92 02 	j 8000bff8 <_svfprintf_r+0x704>
8000bad8:	1d 00 af 03 	j 8000c236 <_svfprintf_r+0x942>
8000badc:	1d 00 ad 03 	j 8000c236 <_svfprintf_r+0x942>
8000bae0:	1d 00 ab 03 	j 8000c236 <_svfprintf_r+0x942>
8000bae4:	1d 00 a9 03 	j 8000c236 <_svfprintf_r+0x942>
8000bae8:	1d 00 a7 03 	j 8000c236 <_svfprintf_r+0x942>
8000baec:	1d 00 d0 02 	j 8000c08c <_svfprintf_r+0x798>
8000baf0:	1d 00 a3 03 	j 8000c236 <_svfprintf_r+0x942>
8000baf4:	1d 00 a1 03 	j 8000c236 <_svfprintf_r+0x942>
8000baf8:	1d 00 4b 00 	j 8000bb8e <_svfprintf_r+0x29a>
8000bafc:	1d 00 9d 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb00:	1d 00 9b 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb04:	1d 00 99 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb08:	1d 00 97 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb0c:	1d 00 95 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb10:	1d 00 93 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb14:	1d 00 91 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb18:	1d 00 8f 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb1c:	1d 00 8d 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb20:	1d 00 8b 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb24:	1d 00 b0 00 	j 8000bc84 <_svfprintf_r+0x390>
8000bb28:	1d 00 2f 00 	j 8000bb86 <_svfprintf_r+0x292>
8000bb2c:	1d 00 e1 00 	j 8000bcee <_svfprintf_r+0x3fa>
8000bb30:	1d 00 df 00 	j 8000bcee <_svfprintf_r+0x3fa>
8000bb34:	1d 00 dd 00 	j 8000bcee <_svfprintf_r+0x3fa>
8000bb38:	1d 00 91 00 	j 8000bc5a <_svfprintf_r+0x366>
8000bb3c:	1d 00 25 00 	j 8000bb86 <_svfprintf_r+0x292>
8000bb40:	1d 00 7b 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb44:	1d 00 79 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb48:	1d 00 8c 00 	j 8000bc60 <_svfprintf_r+0x36c>
8000bb4c:	1d 00 75 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb50:	1d 00 39 02 	j 8000bfc2 <_svfprintf_r+0x6ce>
8000bb54:	1d 00 54 02 	j 8000bffc <_svfprintf_r+0x708>
8000bb58:	1d 00 66 02 	j 8000c024 <_svfprintf_r+0x730>
8000bb5c:	1d 00 90 00 	j 8000bc7c <_svfprintf_r+0x388>
8000bb60:	1d 00 6b 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb64:	1d 00 77 02 	j 8000c052 <_svfprintf_r+0x75e>
8000bb68:	1d 00 67 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb6c:	1d 00 92 02 	j 8000c090 <_svfprintf_r+0x79c>
8000bb70:	1d 00 63 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb74:	1d 00 61 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb78:	1d 00 a0 02 	j 8000c0b8 <_svfprintf_r+0x7c4>
8000bb7c:	da 2b       	mov %d15,43
8000bb7e:	99 a2 18 00 	ld.a %a2,[%sp]24
8000bb82:	1d ff 33 ff 	j 8000b9e8 <_svfprintf_r+0xf4>
8000bb86:	e9 af 01 10 	st.b [%sp]65,%d15
8000bb8a:	1d 00 8c 00 	j 8000bca2 <_svfprintf_r+0x3ae>
8000bb8e:	e9 af 01 10 	st.b [%sp]65,%d15
8000bb92:	7b 00 00 f8 	movh %d15,32768
8000bb96:	1b 8f f1 f0 	addi %d15,%d15,3864
8000bb9a:	1d 00 95 02 	j 8000c0c4 <_svfprintf_r+0x7d0>
8000bb9e:	ab 0f 82 ff 	sel %d15,%d15,%d15,32
8000bba2:	3c ee       	j 8000bb7e <_svfprintf_r+0x28a>
8000bba4:	8f 1a 40 a1 	or %d10,%d10,1
8000bba8:	3c eb       	j 8000bb7e <_svfprintf_r+0x28a>
8000bbaa:	48 02       	ld.w %d2,[%a15]0
8000bbac:	b0 4f       	add.a %a15,4
8000bbae:	59 a2 1c 00 	st.w [%sp]28,%d2
8000bbb2:	ff 02 e6 7f 	jge %d2,0,8000bb7e <_svfprintf_r+0x28a>
8000bbb6:	32 52       	rsub %d2
8000bbb8:	59 a2 1c 00 	st.w [%sp]28,%d2
8000bbbc:	8f 4a 40 a1 	or %d10,%d10,4
8000bbc0:	3c df       	j 8000bb7e <_svfprintf_r+0x28a>
8000bbc2:	99 a3 18 00 	ld.a %a3,[%sp]24
8000bbc6:	99 a2 18 00 	ld.a %a2,[%sp]24
8000bbca:	79 32 00 00 	ld.b %d2,[%a3]0
8000bbce:	b0 12       	add.a %a2,1
8000bbd0:	59 a2 10 00 	st.w [%sp]16,%d2
8000bbd4:	8b a2 02 32 	eq %d3,%d2,42
8000bbd8:	f6 33       	jnz %d3,8000bbde <_svfprintf_r+0x2ea>
8000bbda:	82 05       	mov %d5,0
8000bbdc:	3c 08       	j 8000bbec <_svfprintf_r+0x2f8>
8000bbde:	48 0e       	ld.w %d14,[%a15]0
8000bbe0:	b5 a2 18 00 	st.a [%sp]24,%a2
8000bbe4:	b0 4f       	add.a %a15,4
8000bbe6:	8b fe 5f e3 	max %d14,%d14,-1
8000bbea:	3c ca       	j 8000bb7e <_svfprintf_r+0x28a>
8000bbec:	19 a2 10 00 	ld.w %d2,[%sp]16
8000bbf0:	1b 02 fd 3f 	addi %d3,%d2,-48
8000bbf4:	ff a3 0a 80 	jge.u %d3,10,8000bc08 <_svfprintf_r+0x314>
8000bbf8:	79 22 00 00 	ld.b %d2,[%a2]0
8000bbfc:	13 a5 20 53 	madd %d5,%d3,%d5,10
8000bc00:	59 a2 10 00 	st.w [%sp]16,%d2
8000bc04:	b0 12       	add.a %a2,1
8000bc06:	3c f3       	j 8000bbec <_svfprintf_r+0x2f8>
8000bc08:	8b f5 5f e3 	max %d14,%d5,-1
8000bc0c:	b5 a2 18 00 	st.a [%sp]24,%a2
8000bc10:	1d ff f4 fe 	j 8000b9f8 <_svfprintf_r+0x104>
8000bc14:	8f 0a 48 a1 	or %d10,%d10,128
8000bc18:	3c b3       	j 8000bb7e <_svfprintf_r+0x28a>
8000bc1a:	82 02       	mov %d2,0
8000bc1c:	59 a2 1c 00 	st.w [%sp]28,%d2
8000bc20:	19 a2 10 00 	ld.w %d2,[%sp]16
8000bc24:	99 a3 18 00 	ld.a %a3,[%sp]24
8000bc28:	1b 02 fd 4f 	addi %d4,%d2,-48
8000bc2c:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000bc30:	99 a2 18 00 	ld.a %a2,[%sp]24
8000bc34:	13 a2 20 24 	madd %d2,%d4,%d2,10
8000bc38:	b0 12       	add.a %a2,1
8000bc3a:	59 a2 1c 00 	st.w [%sp]28,%d2
8000bc3e:	79 32 00 00 	ld.b %d2,[%a3]0
8000bc42:	b5 a2 18 00 	st.a [%sp]24,%a2
8000bc46:	59 a2 10 00 	st.w [%sp]16,%d2
8000bc4a:	1b 02 fd 4f 	addi %d4,%d2,-48
8000bc4e:	bf a4 e9 ff 	jlt.u %d4,10,8000bc20 <_svfprintf_r+0x32c>
8000bc52:	3c dd       	j 8000bc0c <_svfprintf_r+0x318>
8000bc54:	8f 8a 40 a1 	or %d10,%d10,8
8000bc58:	3c 93       	j 8000bb7e <_svfprintf_r+0x28a>
8000bc5a:	8f 0a 44 a1 	or %d10,%d10,64
8000bc5e:	3c 90       	j 8000bb7e <_svfprintf_r+0x28a>
8000bc60:	99 a3 18 00 	ld.a %a3,[%sp]24
8000bc64:	79 33 00 00 	ld.b %d3,[%a3]0
8000bc68:	8b c3 26 32 	ne %d3,%d3,108
8000bc6c:	f6 35       	jnz %d3,8000bc76 <_svfprintf_r+0x382>
8000bc6e:	b0 13       	add.a %a3,1
8000bc70:	b5 a3 18 00 	st.a [%sp]24,%a3
8000bc74:	3c 04       	j 8000bc7c <_svfprintf_r+0x388>
8000bc76:	8f 0a 41 a1 	or %d10,%d10,16
8000bc7a:	3c 82       	j 8000bb7e <_svfprintf_r+0x28a>
8000bc7c:	8f 0a 42 a1 	or %d10,%d10,32
8000bc80:	1d ff 7f ff 	j 8000bb7e <_svfprintf_r+0x28a>
8000bc84:	48 03       	ld.w %d3,[%a15]0
8000bc86:	d9 fc 04 00 	lea %a12,[%a15]4
8000bc8a:	e9 a3 28 10 	st.b [%sp]104,%d3
8000bc8e:	82 03       	mov %d3,0
8000bc90:	e9 a3 01 10 	st.b [%sp]65,%d3
8000bc94:	60 ad       	mov.a %a13,%d10
8000bc96:	1d 00 dc 02 	j 8000c24e <_svfprintf_r+0x95a>
8000bc9a:	e9 af 01 10 	st.b [%sp]65,%d15
8000bc9e:	8f 0a 41 a1 	or %d10,%d10,16
8000bca2:	60 ad       	mov.a %a13,%d10
8000bca4:	6f 5a 07 00 	jz.t %d10,5,8000bcb2 <_svfprintf_r+0x3be>
8000bca8:	d9 fc 08 00 	lea %a12,[%a15]8
8000bcac:	09 f8 40 09 	ld.d %e8,[%a15]
8000bcb0:	3c 12       	j 8000bcd4 <_svfprintf_r+0x3e0>
8000bcb2:	d9 f2 04 00 	lea %a2,[%a15]4
8000bcb6:	6f 4a 05 00 	jz.t %d10,4,8000bcc0 <_svfprintf_r+0x3cc>
8000bcba:	40 2c       	mov.aa %a12,%a2
8000bcbc:	48 08       	ld.w %d8,[%a15]0
8000bcbe:	3c 09       	j 8000bcd0 <_svfprintf_r+0x3dc>
8000bcc0:	48 03       	ld.w %d3,[%a15]0
8000bcc2:	40 2c       	mov.aa %a12,%a2
8000bcc4:	0b 30 00 88 	mov %e8,%d3
8000bcc8:	6f 6a 06 00 	jz.t %d10,6,8000bcd4 <_svfprintf_r+0x3e0>
8000bccc:	37 03 50 80 	extr %d8,%d3,0,16
8000bcd0:	0b 80 00 88 	mov %e8,%d8
8000bcd4:	82 13       	mov %d3,1
8000bcd6:	ff 09 1d 02 	jge %d9,0,8000c110 <_svfprintf_r+0x81c>
8000bcda:	32 59       	rsub %d9
8000bcdc:	32 58       	rsub %d8
8000bcde:	3b d0 02 70 	mov %d7,45
8000bce2:	ab f9 1f 98 	cadd %d9,%d8,%d9,-1
8000bce6:	e9 a7 01 10 	st.b [%sp]65,%d7
8000bcea:	1d 00 13 02 	j 8000c110 <_svfprintf_r+0x81c>
8000bcee:	e9 af 01 10 	st.b [%sp]65,%d15
8000bcf2:	4c f0       	ld.w %d15,[%a15]0
8000bcf4:	d9 fc 08 00 	lea %a12,[%a15]8
8000bcf8:	78 0b       	st.w [%sp]44,%d15
8000bcfa:	4c f1       	ld.w %d15,[%a15]4
8000bcfc:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000bd00:	78 0c       	st.w [%sp]48,%d15
8000bd02:	19 a5 30 00 	ld.w %d5,[%sp]48
8000bd06:	6d 00 b3 10 	call 8000de6c <__fpclassifyd>
8000bd0a:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000bd0e:	19 a5 30 00 	ld.w %d5,[%sp]48
8000bd12:	df 12 18 80 	jne %d2,1,8000bd42 <_svfprintf_r+0x44e>
8000bd16:	d2 06       	mov %e6,0
8000bd18:	6d 00 50 14 	call 8000e5b8 <__ltdf2>
8000bd1c:	ce 25       	jgez %d2,8000bd26 <_svfprintf_r+0x432>
8000bd1e:	3b d0 02 30 	mov %d3,45
8000bd22:	e9 a3 01 10 	st.b [%sp]65,%d3
8000bd26:	58 04       	ld.w %d15,[%sp]16
8000bd28:	7b 00 00 78 	movh %d7,32768
8000bd2c:	8b 8f 84 32 	ge %d3,%d15,72
8000bd30:	1b c7 f0 d0 	addi %d13,%d7,3852
8000bd34:	df 03 17 80 	jne %d3,0,8000bd62 <_svfprintf_r+0x46e>
8000bd38:	7b 00 00 78 	movh %d7,32768
8000bd3c:	1b 87 f0 d0 	addi %d13,%d7,3848
8000bd40:	3c 11       	j 8000bd62 <_svfprintf_r+0x46e>
8000bd42:	6d 00 95 10 	call 8000de6c <__fpclassifyd>
8000bd46:	58 04       	ld.w %d15,[%sp]16
8000bd48:	df 02 13 80 	jne %d2,0,8000bd6e <_svfprintf_r+0x47a>
8000bd4c:	7b 00 00 78 	movh %d7,32768
8000bd50:	8b 8f 84 32 	ge %d3,%d15,72
8000bd54:	1b 47 f1 d0 	addi %d13,%d7,3860
8000bd58:	f6 35       	jnz %d3,8000bd62 <_svfprintf_r+0x46e>
8000bd5a:	7b 00 00 78 	movh %d7,32768
8000bd5e:	1b 07 f1 d0 	addi %d13,%d7,3856
8000bd62:	8f 0a c8 a1 	andn %d10,%d10,128
8000bd66:	60 ad       	mov.a %a13,%d10
8000bd68:	82 39       	mov %d9,3
8000bd6a:	1d 00 78 02 	j 8000c25a <_svfprintf_r+0x966>
8000bd6e:	8f 0f c2 f1 	andn %d15,%d15,32
8000bd72:	78 01       	st.w [%sp]4,%d15
8000bd74:	df fe 09 00 	jeq %d14,-1,8000bd86 <_svfprintf_r+0x492>
8000bd78:	8b 0e 00 72 	eq %d7,%d14,0
8000bd7c:	8b 7f 04 74 	and.eq %d7,%d15,71
8000bd80:	ab 1e a0 e7 	seln %d14,%d7,%d14,1
8000bd84:	3c 02       	j 8000bd88 <_svfprintf_r+0x494>
8000bd86:	82 6e       	mov %d14,6
8000bd88:	19 a3 30 00 	ld.w %d3,[%sp]48
8000bd8c:	8f 0a 50 21 	or %d2,%d10,256
8000bd90:	60 2d       	mov.a %a13,%d2
8000bd92:	d8 0b       	ld.a %a15,[%sp]44
8000bd94:	82 0f       	mov %d15,0
8000bd96:	ce 34       	jgez %d3,8000bd9e <_svfprintf_r+0x4aa>
8000bd98:	9b 03 00 38 	addih %d3,%d3,32768
8000bd9c:	da 2d       	mov %d15,45
8000bd9e:	78 09       	st.w [%sp]36,%d15
8000bda0:	58 01       	ld.w %d15,[%sp]4
8000bda2:	02 e9       	mov %d9,%d14
8000bda4:	8b 6f 04 22 	eq %d2,%d15,70
8000bda8:	82 36       	mov %d6,3
8000bdaa:	f6 28       	jnz %d2,8000bdba <_svfprintf_r+0x4c6>
8000bdac:	8b 5f 24 12 	ne %d1,%d15,69
8000bdb0:	1b 1e 00 50 	addi %d5,%d14,1
8000bdb4:	82 26       	mov %d6,2
8000bdb6:	2b e5 50 91 	seln %d9,%d1,%d5,%d14
8000bdba:	60 c4       	mov.a %a4,%d12
8000bdbc:	80 f4       	mov.d %d4,%a15
8000bdbe:	02 35       	mov %d5,%d3
8000bdc0:	02 97       	mov %d7,%d9
8000bdc2:	d9 a5 04 10 	lea %a5,[%sp]68
8000bdc6:	d9 a6 08 10 	lea %a6,[%sp]72
8000bdca:	d9 a7 14 10 	lea %a7,[%sp]84
8000bdce:	59 a2 0c 00 	st.w [%sp]12,%d2
8000bdd2:	59 a3 08 00 	st.w [%sp]8,%d3
8000bdd6:	6d 00 ef 06 	call 8000cbb4 <_dtoa_r>
8000bdda:	58 01       	ld.w %d15,[%sp]4
8000bddc:	80 2d       	mov.d %d13,%a2
8000bdde:	8b 7f 24 12 	ne %d1,%d15,71
8000bde2:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000bde6:	19 a3 08 00 	ld.w %d3,[%sp]8
8000bdea:	df 01 11 80 	jne %d1,0,8000be0c <_svfprintf_r+0x518>
8000bdee:	6f 0a 0f 80 	jnz.t %d10,0,8000be0c <_svfprintf_r+0x518>
8000bdf2:	19 a2 14 10 	ld.w %d2,[%sp]84
8000bdf6:	58 01       	ld.w %d15,[%sp]4
8000bdf8:	a2 d2       	sub %d2,%d13
8000bdfa:	59 a2 14 00 	st.w [%sp]20,%d2
8000bdfe:	8b 7f 04 42 	eq %d4,%d15,71
8000be02:	19 a5 04 10 	ld.w %d5,[%sp]68
8000be06:	df 04 36 80 	jne %d4,0,8000be72 <_svfprintf_r+0x57e>
8000be0a:	3c 3e       	j 8000be86 <_svfprintf_r+0x592>
8000be0c:	0b 9d 00 80 	add %d8,%d13,%d9
8000be10:	df 02 1c 00 	jeq %d2,0,8000be48 <_svfprintf_r+0x554>
8000be14:	60 d2       	mov.a %a2,%d13
8000be16:	80 f4       	mov.d %d4,%a15
8000be18:	79 20 00 00 	ld.b %d0,[%a2]0
8000be1c:	d2 06       	mov %e6,0
8000be1e:	02 35       	mov %d5,%d3
8000be20:	8b 00 03 f2 	eq %d15,%d0,48
8000be24:	59 a3 08 00 	st.w [%sp]8,%d3
8000be28:	6d 00 68 13 	call 8000e4f8 <__nedf2>
8000be2c:	8b 02 20 22 	ne %d2,%d2,0
8000be30:	0f 2f 80 00 	and %d0,%d15,%d2
8000be34:	19 a3 08 00 	ld.w %d3,[%sp]8
8000be38:	76 05       	jz %d0,8000be42 <_svfprintf_r+0x54e>
8000be3a:	8b 19 00 01 	rsub %d0,%d9,1
8000be3e:	59 a0 04 10 	st.w [%sp]68,%d0
8000be42:	19 a2 04 10 	ld.w %d2,[%sp]68
8000be46:	42 28       	add %d8,%d2
8000be48:	80 f4       	mov.d %d4,%a15
8000be4a:	d2 06       	mov %e6,0
8000be4c:	02 35       	mov %d5,%d3
8000be4e:	6d 00 35 13 	call 8000e4b8 <__eqdf2>
8000be52:	f6 23       	jnz %d2,8000be58 <_svfprintf_r+0x564>
8000be54:	59 a8 14 10 	st.w [%sp]84,%d8
8000be58:	3b 00 03 00 	mov %d0,48
8000be5c:	19 a3 14 10 	ld.w %d3,[%sp]84
8000be60:	7f 83 c9 ff 	jge.u %d3,%d8,8000bdf2 <_svfprintf_r+0x4fe>
8000be64:	1b 13 00 10 	addi %d1,%d3,1
8000be68:	60 32       	mov.a %a2,%d3
8000be6a:	59 a1 14 10 	st.w [%sp]84,%d1
8000be6e:	34 20       	st.b [%a2],%d0
8000be70:	3c f6       	j 8000be5c <_svfprintf_r+0x568>
8000be72:	0b 5e 20 31 	lt %d3,%d14,%d5
8000be76:	8b d5 3f 35 	or.lt %d3,%d5,-3
8000be7a:	df 03 88 00 	jeq %d3,0,8000bf8a <_svfprintf_r+0x696>
8000be7e:	58 04       	ld.w %d15,[%sp]16
8000be80:	c2 ef       	add %d15,-2
8000be82:	78 04       	st.w [%sp]16,%d15
8000be84:	3c 06       	j 8000be90 <_svfprintf_r+0x59c>
8000be86:	58 04       	ld.w %d15,[%sp]16
8000be88:	8b 6f 86 32 	ge %d3,%d15,102
8000be8c:	df 03 69 80 	jne %d3,0,8000bf5e <_svfprintf_r+0x66a>
8000be90:	19 a2 10 00 	ld.w %d2,[%sp]16
8000be94:	9a f5       	add %d15,%d5,-1
8000be96:	78 11       	st.w [%sp]68,%d15
8000be98:	e9 a2 0d 10 	st.b [%sp]77,%d2
8000be9c:	3b b0 02 30 	mov %d3,43
8000bea0:	ce f4       	jgez %d15,8000bea8 <_svfprintf_r+0x5b4>
8000bea2:	32 5f       	rsub %d15
8000bea4:	3b d0 02 30 	mov %d3,45
8000bea8:	e9 a3 0e 10 	st.b [%sp]78,%d3
8000beac:	8b af 40 32 	lt %d3,%d15,10
8000beb0:	df 03 3e 80 	jne %d3,0,8000bf2c <_svfprintf_r+0x638>
8000beb4:	82 06       	mov %d6,0
8000beb6:	3b a0 00 00 	mov %d0,10
8000beba:	4b 0f 01 42 	div %e4,%d15,%d0
8000bebe:	8b 66 00 71 	rsub %d7,%d6,6
8000bec2:	60 72       	mov.a %a2,%d7
8000bec4:	d9 af 14 10 	lea %a15,[%sp]84
8000bec8:	1b 05 03 30 	addi %d3,%d5,48
8000becc:	30 2f       	add.a %a15,%a2
8000bece:	28 03       	st.b [%a15]0,%d3
8000bed0:	8b a4 80 32 	ge %d3,%d4,10
8000bed4:	02 4f       	mov %d15,%d4
8000bed6:	c2 16       	add %d6,1
8000bed8:	df 03 f1 ff 	jne %d3,0,8000beba <_svfprintf_r+0x5c6>
8000bedc:	60 74       	mov.a %a4,%d7
8000bede:	d9 a2 10 30 	lea %a2,[%sp]208
8000bee2:	1b 04 03 f0 	addi %d15,%d4,48
8000bee6:	30 42       	add.a %a2,%a4
8000bee8:	d9 f7 ff ff 	lea %a7,[%a15]-1
8000beec:	e9 ff ff ff 	st.b [%a15]-1,%d15
8000bef0:	80 22       	mov.d %d2,%a2
8000bef2:	d9 af 1b 10 	lea %a15,[%sp]91
8000bef6:	80 ff       	mov.d %d15,%a15
8000bef8:	1b 32 f8 4f 	addi %d4,%d2,-125
8000befc:	82 03       	mov %d3,0
8000befe:	01 7f 20 30 	sub.a %a3,%a15,%a7
8000bf02:	3f 4f 08 80 	jlt.u %d15,%d4,8000bf12 <_svfprintf_r+0x61e>
8000bf06:	80 a2       	mov.d %d2,%sp
8000bf08:	1b 02 0d 20 	addi %d2,%d2,208
8000bf0c:	8b 52 07 42 	eq %d4,%d2,117
8000bf10:	76 46       	jz %d4,8000bf1c <_svfprintf_r+0x628>
8000bf12:	a0 03       	mov.a %a3,0
8000bf14:	3c 04       	j 8000bf1c <_svfprintf_r+0x628>
8000bf16:	0c 70       	ld.bu %d15,[%a7]0
8000bf18:	b0 17       	add.a %a7,1
8000bf1a:	28 0f       	st.b [%a15]0,%d15
8000bf1c:	60 3f       	mov.a %a15,%d3
8000bf1e:	d9 a2 0d 10 	lea %a2,[%sp]77
8000bf22:	b0 2f       	add.a %a15,2
8000bf24:	30 2f       	add.a %a15,%a2
8000bf26:	c2 13       	add %d3,1
8000bf28:	fc 37       	loop %a3,8000bf16 <_svfprintf_r+0x622>
8000bf2a:	3c 0b       	j 8000bf40 <_svfprintf_r+0x64c>
8000bf2c:	3b 00 03 30 	mov %d3,48
8000bf30:	1b 0f 03 f0 	addi %d15,%d15,48
8000bf34:	e9 a3 0f 10 	st.b [%sp]79,%d3
8000bf38:	e9 af 10 10 	st.b [%sp]80,%d15
8000bf3c:	d9 af 11 10 	lea %a15,[%sp]81
8000bf40:	d9 a7 0d 10 	lea %a7,[%sp]77
8000bf44:	01 7f 20 70 	sub.a %a7,%a15,%a7
8000bf48:	80 79       	mov.d %d9,%a7
8000bf4a:	58 05       	ld.w %d15,[%sp]20
8000bf4c:	b5 a7 38 00 	st.a [%sp]56,%a7
8000bf50:	42 f9       	add %d9,%d15
8000bf52:	ff 2f 04 00 	jge %d15,2,8000bf5a <_svfprintf_r+0x666>
8000bf56:	6f 0a 2c 00 	jz.t %d10,0,8000bfae <_svfprintf_r+0x6ba>
8000bf5a:	c2 19       	add %d9,1
8000bf5c:	3c 29       	j 8000bfae <_svfprintf_r+0x6ba>
8000bf5e:	58 04       	ld.w %d15,[%sp]16
8000bf60:	8b 6f 26 42 	ne %d4,%d15,102
8000bf64:	df 04 15 80 	jne %d4,0,8000bf8e <_svfprintf_r+0x69a>
8000bf68:	02 59       	mov %d9,%d5
8000bf6a:	8e 59       	jlez %d5,8000bf7c <_svfprintf_r+0x688>
8000bf6c:	f6 e3       	jnz %d14,8000bf72 <_svfprintf_r+0x67e>
8000bf6e:	6f 0a 20 00 	jz.t %d10,0,8000bfae <_svfprintf_r+0x6ba>
8000bf72:	1b 1e 00 30 	addi %d3,%d14,1
8000bf76:	0b 35 00 90 	add %d9,%d5,%d3
8000bf7a:	3c 1a       	j 8000bfae <_svfprintf_r+0x6ba>
8000bf7c:	f6 e4       	jnz %d14,8000bf84 <_svfprintf_r+0x690>
8000bf7e:	82 19       	mov %d9,1
8000bf80:	6f 0a 17 00 	jz.t %d10,0,8000bfae <_svfprintf_r+0x6ba>
8000bf84:	1b 2e 00 90 	addi %d9,%d14,2
8000bf88:	3c 13       	j 8000bfae <_svfprintf_r+0x6ba>
8000bf8a:	da 67       	mov %d15,103
8000bf8c:	78 04       	st.w [%sp]16,%d15
8000bf8e:	58 05       	ld.w %d15,[%sp]20
8000bf90:	8f 1a 00 a1 	and %d10,%d10,1
8000bf94:	0b a5 00 90 	add %d9,%d5,%d10
8000bf98:	7f f5 0b 00 	jge %d5,%d15,8000bfae <_svfprintf_r+0x6ba>
8000bf9c:	8b 15 40 92 	lt %d9,%d5,1
8000bfa0:	8b 25 00 31 	rsub %d3,%d5,2
8000bfa4:	ab 13 80 39 	sel %d3,%d9,%d3,1
8000bfa8:	19 a9 14 00 	ld.w %d9,[%sp]20
8000bfac:	42 39       	add %d9,%d3
8000bfae:	58 09       	ld.w %d15,[%sp]36
8000bfb0:	82 0e       	mov %d14,0
8000bfb2:	df 0f 55 01 	jeq %d15,0,8000c25c <_svfprintf_r+0x968>
8000bfb6:	3b d0 02 70 	mov %d7,45
8000bfba:	e9 a7 01 10 	st.b [%sp]65,%d7
8000bfbe:	1d 00 4f 01 	j 8000c25c <_svfprintf_r+0x968>
8000bfc2:	e9 af 01 10 	st.b [%sp]65,%d15
8000bfc6:	d9 f2 04 00 	lea %a2,[%a15]4
8000bfca:	6f 5a 09 00 	jz.t %d10,5,8000bfdc <_svfprintf_r+0x6e8>
8000bfce:	58 0a       	ld.w %d15,[%sp]40
8000bfd0:	c8 03       	ld.a %a3,[%a15]0
8000bfd2:	0b f0 00 48 	mov %e4,%d15
8000bfd6:	89 34 40 09 	st.d [%a3],%e4
8000bfda:	3c 0c       	j 8000bff2 <_svfprintf_r+0x6fe>
8000bfdc:	6f 4a 08 80 	jnz.t %d10,4,8000bfec <_svfprintf_r+0x6f8>
8000bfe0:	6f 6a 06 00 	jz.t %d10,6,8000bfec <_svfprintf_r+0x6f8>
8000bfe4:	c8 03       	ld.a %a3,[%a15]0
8000bfe6:	58 0a       	ld.w %d15,[%sp]40
8000bfe8:	ac 30       	st.h [%a3]0,%d15
8000bfea:	3c 04       	j 8000bff2 <_svfprintf_r+0x6fe>
8000bfec:	c8 03       	ld.a %a3,[%a15]0
8000bfee:	58 0a       	ld.w %d15,[%sp]40
8000bff0:	6c 30       	st.w [%a3]0,%d15
8000bff2:	40 2f       	mov.aa %a15,%a2
8000bff4:	1d ff b8 fc 	j 8000b964 <_svfprintf_r+0x70>
8000bff8:	8f 0a 41 a1 	or %d10,%d10,16
8000bffc:	6f 5a 07 00 	jz.t %d10,5,8000c00a <_svfprintf_r+0x716>
8000c000:	d9 fc 08 00 	lea %a12,[%a15]8
8000c004:	09 f8 40 09 	ld.d %e8,[%a15]
8000c008:	3c 0c       	j 8000c020 <_svfprintf_r+0x72c>
8000c00a:	d9 fc 04 00 	lea %a12,[%a15]4
8000c00e:	6f 4a 07 80 	jnz.t %d10,4,8000c01c <_svfprintf_r+0x728>
8000c012:	6f 6a 05 00 	jz.t %d10,6,8000c01c <_svfprintf_r+0x728>
8000c016:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000c01a:	3c 02       	j 8000c01e <_svfprintf_r+0x72a>
8000c01c:	48 08       	ld.w %d8,[%a15]0
8000c01e:	82 09       	mov %d9,0
8000c020:	82 03       	mov %d3,0
8000c022:	3c 73       	j 8000c108 <_svfprintf_r+0x814>
8000c024:	3b 00 03 40 	mov %d4,48
8000c028:	7b 00 00 f8 	movh %d15,32768
8000c02c:	1b 9f f2 f0 	addi %d15,%d15,3881
8000c030:	e9 a4 02 10 	st.b [%sp]66,%d4
8000c034:	3b 80 07 40 	mov %d4,120
8000c038:	78 0f       	st.w [%sp]60,%d15
8000c03a:	02 4f       	mov %d15,%d4
8000c03c:	d9 fc 04 00 	lea %a12,[%a15]4
8000c040:	48 08       	ld.w %d8,[%a15]0
8000c042:	82 09       	mov %d9,0
8000c044:	8f 2a 40 a1 	or %d10,%d10,2
8000c048:	e9 a4 03 10 	st.b [%sp]67,%d4
8000c04c:	82 23       	mov %d3,2
8000c04e:	78 04       	st.w [%sp]16,%d15
8000c050:	3c 5c       	j 8000c108 <_svfprintf_r+0x814>
8000c052:	82 07       	mov %d7,0
8000c054:	48 0d       	ld.w %d13,[%a15]0
8000c056:	e9 a7 01 10 	st.b [%sp]65,%d7
8000c05a:	02 e9       	mov %d9,%d14
8000c05c:	60 ad       	mov.a %a13,%d10
8000c05e:	d9 fc 04 00 	lea %a12,[%a15]4
8000c062:	60 d4       	mov.a %a4,%d13
8000c064:	0e ef       	jltz %d14,8000c082 <_svfprintf_r+0x78e>
8000c066:	82 04       	mov %d4,0
8000c068:	02 e5       	mov %d5,%d14
8000c06a:	6d 00 14 0c 	call 8000d892 <memchr>
8000c06e:	bd 02 f6 00 	jz.a %a2,8000c25a <_svfprintf_r+0x966>
8000c072:	60 d4       	mov.a %a4,%d13
8000c074:	01 42 20 30 	sub.a %a3,%a2,%a4
8000c078:	80 32       	mov.d %d2,%a3
8000c07a:	0b e2 80 91 	min %d9,%d2,%d14
8000c07e:	1d 00 ee 00 	j 8000c25a <_svfprintf_r+0x966>
8000c082:	6d ff cb fa 	call 8000b618 <strlen>
8000c086:	02 29       	mov %d9,%d2
8000c088:	1d 00 e9 00 	j 8000c25a <_svfprintf_r+0x966>
8000c08c:	8f 0a 41 a1 	or %d10,%d10,16
8000c090:	6f 5a 07 00 	jz.t %d10,5,8000c09e <_svfprintf_r+0x7aa>
8000c094:	d9 fc 08 00 	lea %a12,[%a15]8
8000c098:	09 f8 40 09 	ld.d %e8,[%a15]
8000c09c:	3c 0c       	j 8000c0b4 <_svfprintf_r+0x7c0>
8000c09e:	d9 fc 04 00 	lea %a12,[%a15]4
8000c0a2:	6f 4a 07 80 	jnz.t %d10,4,8000c0b0 <_svfprintf_r+0x7bc>
8000c0a6:	6f 6a 05 00 	jz.t %d10,6,8000c0b0 <_svfprintf_r+0x7bc>
8000c0aa:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000c0ae:	3c 02       	j 8000c0b2 <_svfprintf_r+0x7be>
8000c0b0:	48 08       	ld.w %d8,[%a15]0
8000c0b2:	82 09       	mov %d9,0
8000c0b4:	82 13       	mov %d3,1
8000c0b6:	3c 29       	j 8000c108 <_svfprintf_r+0x814>
8000c0b8:	e9 af 01 10 	st.b [%sp]65,%d15
8000c0bc:	7b 00 00 f8 	movh %d15,32768
8000c0c0:	1b 9f f2 f0 	addi %d15,%d15,3881
8000c0c4:	78 0f       	st.w [%sp]60,%d15
8000c0c6:	6f 5a 07 00 	jz.t %d10,5,8000c0d4 <_svfprintf_r+0x7e0>
8000c0ca:	d9 fc 08 00 	lea %a12,[%a15]8
8000c0ce:	09 f8 40 09 	ld.d %e8,[%a15]
8000c0d2:	3c 0c       	j 8000c0ea <_svfprintf_r+0x7f6>
8000c0d4:	d9 fc 04 00 	lea %a12,[%a15]4
8000c0d8:	6f 4a 07 80 	jnz.t %d10,4,8000c0e6 <_svfprintf_r+0x7f2>
8000c0dc:	6f 6a 05 00 	jz.t %d10,6,8000c0e6 <_svfprintf_r+0x7f2>
8000c0e0:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000c0e4:	3c 02       	j 8000c0e8 <_svfprintf_r+0x7f4>
8000c0e6:	48 08       	ld.w %d8,[%a15]0
8000c0e8:	82 09       	mov %d9,0
8000c0ea:	82 23       	mov %d3,2
8000c0ec:	6f 0a 0e 00 	jz.t %d10,0,8000c108 <_svfprintf_r+0x814>
8000c0f0:	0f 89 a0 40 	or %d4,%d9,%d8
8000c0f4:	76 4a       	jz %d4,8000c108 <_svfprintf_r+0x814>
8000c0f6:	58 04       	ld.w %d15,[%sp]16
8000c0f8:	3b 00 03 70 	mov %d7,48
8000c0fc:	e9 a7 02 10 	st.b [%sp]66,%d7
8000c100:	e9 af 03 10 	st.b [%sp]67,%d15
8000c104:	8f 2a 40 a1 	or %d10,%d10,2
8000c108:	82 07       	mov %d7,0
8000c10a:	60 ad       	mov.a %a13,%d10
8000c10c:	e9 a7 01 10 	st.b [%sp]65,%d7
8000c110:	80 d2       	mov.d %d2,%a13
8000c112:	8b 0e 80 72 	ge %d7,%d14,0
8000c116:	8f 02 c8 41 	andn %d4,%d2,128
8000c11a:	2b 24 40 27 	sel %d2,%d7,%d4,%d2
8000c11e:	0f 98 a0 60 	or %d6,%d8,%d9
8000c122:	8b 0e 20 42 	ne %d4,%d14,0
8000c126:	8b 06 00 45 	or.ne %d4,%d6,0
8000c12a:	60 2d       	mov.a %a13,%d2
8000c12c:	df 04 72 00 	jeq %d4,0,8000c210 <_svfprintf_r+0x91c>
8000c130:	df 13 06 00 	jeq %d3,1,8000c13c <_svfprintf_r+0x848>
8000c134:	df 23 57 00 	jeq %d3,2,8000c1e2 <_svfprintf_r+0x8ee>
8000c138:	82 03       	mov %d3,0
8000c13a:	3c 03       	j 8000c140 <_svfprintf_r+0x84c>
8000c13c:	82 04       	mov %d4,0
8000c13e:	3c 22       	j 8000c182 <_svfprintf_r+0x88e>
8000c140:	8b 73 02 71 	rsub %d7,%d3,39
8000c144:	60 72       	mov.a %a2,%d7
8000c146:	8f 78 00 41 	and %d4,%d8,7
8000c14a:	d9 a3 28 10 	lea %a3,[%sp]104
8000c14e:	77 89 80 8e 	dextr %d8,%d9,%d8,29
8000c152:	30 23       	add.a %a3,%a2
8000c154:	1b 04 03 40 	addi %d4,%d4,48
8000c158:	06 d9       	sh %d9,-3
8000c15a:	34 34       	st.b [%a3],%d4
8000c15c:	0f 89 a0 60 	or %d6,%d9,%d8
8000c160:	c2 13       	add %d3,1
8000c162:	df 06 ef ff 	jne %d6,0,8000c140 <_svfprintf_r+0x84c>
8000c166:	80 d2       	mov.d %d2,%a13
8000c168:	80 3d       	mov.d %d13,%a3
8000c16a:	6f 02 61 00 	jz.t %d2,0,8000c22c <_svfprintf_r+0x938>
8000c16e:	8b 04 03 42 	eq %d4,%d4,48
8000c172:	df 04 5d 80 	jne %d4,0,8000c22c <_svfprintf_r+0x938>
8000c176:	3b 00 03 70 	mov %d7,48
8000c17a:	c2 fd       	add %d13,-1
8000c17c:	e9 37 ff ff 	st.b [%a3]-1,%d7
8000c180:	3c 56       	j 8000c22c <_svfprintf_r+0x938>
8000c182:	8b 84 02 71 	rsub %d7,%d4,40
8000c186:	8b 09 00 32 	eq %d3,%d9,0
8000c18a:	60 73       	mov.a %a3,%d7
8000c18c:	8b a8 a0 34 	and.ge.u %d3,%d8,10
8000c190:	d9 a7 28 10 	lea %a7,[%sp]104
8000c194:	8b 09 00 35 	or.ne %d3,%d9,0
8000c198:	30 37       	add.a %a7,%a3
8000c19a:	1b 14 00 d0 	addi %d13,%d4,1
8000c19e:	df 03 1b 00 	jeq %d3,0,8000c1d4 <_svfprintf_r+0x8e0>
8000c1a2:	8b 74 02 41 	rsub %d4,%d4,39
8000c1a6:	60 42       	mov.a %a2,%d4
8000c1a8:	fb a0 00 60 	mov %e6,10
8000c1ac:	0b 89 10 48 	mov %e4,%d9,%d8
8000c1b0:	d9 af 28 10 	lea %a15,[%sp]104
8000c1b4:	30 2f       	add.a %a15,%a2
8000c1b6:	6d 00 b1 12 	call 8000e718 <__umoddi3>
8000c1ba:	0b 89 10 48 	mov %e4,%d9,%d8
8000c1be:	1b 02 03 20 	addi %d2,%d2,48
8000c1c2:	fb a0 00 60 	mov %e6,10
8000c1c6:	28 02       	st.b [%a15]0,%d2
8000c1c8:	6d 00 58 12 	call 8000e678 <__udivdi3>
8000c1cc:	02 d4       	mov %d4,%d13
8000c1ce:	0b 23 10 88 	mov %e8,%d3,%d2
8000c1d2:	3c d8       	j 8000c182 <_svfprintf_r+0x88e>
8000c1d4:	80 7d       	mov.d %d13,%a7
8000c1d6:	1b 08 03 80 	addi %d8,%d8,48
8000c1da:	c2 fd       	add %d13,-1
8000c1dc:	e9 78 ff ff 	st.b [%a7]-1,%d8
8000c1e0:	3c 26       	j 8000c22c <_svfprintf_r+0x938>
8000c1e2:	82 03       	mov %d3,0
8000c1e4:	d8 0f       	ld.a %a15,[%sp]60
8000c1e6:	80 ad       	mov.d %d13,%sp
8000c1e8:	8f f8 00 f1 	and %d15,%d8,15
8000c1ec:	8b 73 02 71 	rsub %d7,%d3,39
8000c1f0:	1b 8d 06 d0 	addi %d13,%d13,104
8000c1f4:	10 f7       	addsc.a %a7,%a15,%d15,0
8000c1f6:	42 7d       	add %d13,%d7
8000c1f8:	77 89 00 8e 	dextr %d8,%d9,%d8,28
8000c1fc:	0c 70       	ld.bu %d15,[%a7]0
8000c1fe:	60 d2       	mov.a %a2,%d13
8000c200:	06 c9       	sh %d9,-4
8000c202:	2c 20       	st.b [%a2]0,%d15
8000c204:	0f 89 a0 40 	or %d4,%d9,%d8
8000c208:	c2 13       	add %d3,1
8000c20a:	df 04 ed ff 	jne %d4,0,8000c1e4 <_svfprintf_r+0x8f0>
8000c20e:	3c 0f       	j 8000c22c <_svfprintf_r+0x938>
8000c210:	80 a2       	mov.d %d2,%sp
8000c212:	1b 02 09 d0 	addi %d13,%d2,144
8000c216:	f6 3b       	jnz %d3,8000c22c <_svfprintf_r+0x938>
8000c218:	80 df       	mov.d %d15,%a13
8000c21a:	2e 09       	jz.t %d15,0,8000c22c <_svfprintf_r+0x938>
8000c21c:	1b 02 0d d0 	addi %d13,%d2,208
8000c220:	60 d2       	mov.a %a2,%d13
8000c222:	3b 00 03 70 	mov %d7,48
8000c226:	89 27 3f e4 	st.b [+%a2]-65,%d7
8000c22a:	80 2d       	mov.d %d13,%a2
8000c22c:	d9 a3 10 20 	lea %a3,[%sp]144
8000c230:	80 39       	mov.d %d9,%a3
8000c232:	a2 d9       	sub %d9,%d13
8000c234:	3c 14       	j 8000c25c <_svfprintf_r+0x968>
8000c236:	e9 af 01 10 	st.b [%sp]65,%d15
8000c23a:	58 04       	ld.w %d15,[%sp]16
8000c23c:	df 0f 1f 04 	jeq %d15,0,8000ca7a <_svfprintf_r+0x1186>
8000c240:	82 03       	mov %d3,0
8000c242:	60 ad       	mov.a %a13,%d10
8000c244:	e9 af 28 10 	st.b [%sp]104,%d15
8000c248:	e9 a3 01 10 	st.b [%sp]65,%d3
8000c24c:	40 fc       	mov.aa %a12,%a15
8000c24e:	80 a2       	mov.d %d2,%sp
8000c250:	82 19       	mov %d9,1
8000c252:	82 0e       	mov %d14,0
8000c254:	1b 82 06 d0 	addi %d13,%d2,104
8000c258:	3c 02       	j 8000c25c <_svfprintf_r+0x968>
8000c25a:	82 0e       	mov %d14,0
8000c25c:	79 a7 01 10 	ld.b %d7,[%sp]65
8000c260:	80 df       	mov.d %d15,%a13
8000c262:	0b e9 a0 a1 	max %d10,%d9,%d14
8000c266:	80 d2       	mov.d %d2,%a13
8000c268:	16 02       	and %d15,2
8000c26a:	ab 1a 00 a7 	cadd %d10,%d7,%d10,1
8000c26e:	60 ff       	mov.a %a15,%d15
8000c270:	8a 2a       	cadd %d10,%d15,2
8000c272:	8f 42 08 f1 	and %d15,%d2,132
8000c276:	ee 48       	jnz %d15,8000c306 <_svfprintf_r+0xa12>
8000c278:	19 a8 1c 00 	ld.w %d8,[%sp]28
8000c27c:	a2 a8       	sub %d8,%d10
8000c27e:	bf 18 44 00 	jlt %d8,1,8000c306 <_svfprintf_r+0xa12>
8000c282:	91 00 00 28 	movh.a %a2,32768
8000c286:	d9 22 cc d0 	lea %a2,[%a2]3916 <80000f4c <blanks.4035>>
8000c28a:	19 a1 24 10 	ld.w %d1,[%sp]100 <80000f4c <blanks.4035>>
8000c28e:	19 a4 20 10 	ld.w %d4,[%sp]96 <80000f4c <blanks.4035>>
8000c292:	8b 18 81 72 	ge %d7,%d8,17
8000c296:	f4 e2       	st.a [%a14],%a2
8000c298:	df 07 20 00 	jeq %d7,0,8000c2d8 <_svfprintf_r+0x9e4>
8000c29c:	1b 14 00 00 	addi %d0,%d4,1
8000c2a0:	3b 00 01 20 	mov %d2,16
8000c2a4:	1b 01 01 10 	addi %d1,%d1,16
8000c2a8:	59 e2 04 00 	st.w [%a14]4,%d2
8000c2ac:	59 a0 20 10 	st.w [%sp]96,%d0
8000c2b0:	59 a1 24 10 	st.w [%sp]100,%d1
8000c2b4:	8b 80 80 02 	ge %d0,%d0,8
8000c2b8:	d9 ee 08 00 	lea %a14,[%a14]8
8000c2bc:	76 0b       	jz %d0,8000c2d2 <_svfprintf_r+0x9de>
8000c2be:	60 c4       	mov.a %a4,%d12
8000c2c0:	60 b5       	mov.a %a5,%d11
8000c2c2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c2c6:	6d 00 f4 0d 	call 8000deae <__ssprint_r>
8000c2ca:	df 02 e0 83 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c2ce:	d9 ae 10 20 	lea %a14,[%sp]144
8000c2d2:	1b 08 ff 8f 	addi %d8,%d8,-16
8000c2d6:	3c d6       	j 8000c282 <_svfprintf_r+0x98e>
8000c2d8:	c2 14       	add %d4,1
8000c2da:	42 81       	add %d1,%d8
8000c2dc:	59 e8 04 00 	st.w [%a14]4,%d8
8000c2e0:	59 a4 20 10 	st.w [%sp]96,%d4
8000c2e4:	59 a1 24 10 	st.w [%sp]100,%d1
8000c2e8:	8b 84 80 42 	ge %d4,%d4,8
8000c2ec:	d9 ee 08 00 	lea %a14,[%a14]8
8000c2f0:	76 4b       	jz %d4,8000c306 <_svfprintf_r+0xa12>
8000c2f2:	60 c4       	mov.a %a4,%d12
8000c2f4:	60 b5       	mov.a %a5,%d11
8000c2f6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c2fa:	6d 00 da 0d 	call 8000deae <__ssprint_r>
8000c2fe:	df 02 c6 83 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c302:	d9 ae 10 20 	lea %a14,[%sp]144
8000c306:	79 a4 01 10 	ld.b %d4,[%sp]65
8000c30a:	df 04 21 00 	jeq %d4,0,8000c34c <_svfprintf_r+0xa58>
8000c30e:	19 a4 24 10 	ld.w %d4,[%sp]100
8000c312:	d9 a7 01 10 	lea %a7,[%sp]65
8000c316:	c2 14       	add %d4,1
8000c318:	59 a4 24 10 	st.w [%sp]100,%d4
8000c31c:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c320:	82 17       	mov %d7,1
8000c322:	c2 14       	add %d4,1
8000c324:	f4 e7       	st.a [%a14],%a7
8000c326:	59 e7 04 00 	st.w [%a14]4,%d7
8000c32a:	59 a4 20 10 	st.w [%sp]96,%d4
8000c32e:	8b 84 80 42 	ge %d4,%d4,8
8000c332:	d9 ee 08 00 	lea %a14,[%a14]8
8000c336:	76 4b       	jz %d4,8000c34c <_svfprintf_r+0xa58>
8000c338:	60 c4       	mov.a %a4,%d12
8000c33a:	60 b5       	mov.a %a5,%d11
8000c33c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c340:	6d 00 b7 0d 	call 8000deae <__ssprint_r>
8000c344:	df 02 a3 83 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c348:	d9 ae 10 20 	lea %a14,[%sp]144
8000c34c:	bd 0f 21 00 	jz.a %a15,8000c38e <_svfprintf_r+0xa9a>
8000c350:	19 a4 24 10 	ld.w %d4,[%sp]100
8000c354:	d9 a7 02 10 	lea %a7,[%sp]66
8000c358:	c2 24       	add %d4,2
8000c35a:	59 a4 24 10 	st.w [%sp]100,%d4
8000c35e:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c362:	82 27       	mov %d7,2
8000c364:	c2 14       	add %d4,1
8000c366:	f4 e7       	st.a [%a14],%a7
8000c368:	59 e7 04 00 	st.w [%a14]4,%d7
8000c36c:	59 a4 20 10 	st.w [%sp]96,%d4
8000c370:	8b 84 80 42 	ge %d4,%d4,8
8000c374:	d9 ee 08 00 	lea %a14,[%a14]8
8000c378:	76 4b       	jz %d4,8000c38e <_svfprintf_r+0xa9a>
8000c37a:	60 c4       	mov.a %a4,%d12
8000c37c:	60 b5       	mov.a %a5,%d11
8000c37e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c382:	6d 00 96 0d 	call 8000deae <__ssprint_r>
8000c386:	df 02 82 83 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c38a:	d9 ae 10 20 	lea %a14,[%sp]144
8000c38e:	8b 0f 28 42 	ne %d4,%d15,128
8000c392:	df 04 48 80 	jne %d4,0,8000c422 <_svfprintf_r+0xb2e>
8000c396:	58 07       	ld.w %d15,[%sp]28
8000c398:	7b 00 00 28 	movh %d2,32768
8000c39c:	60 23       	mov.a %a3,%d2
8000c39e:	a2 af       	sub %d15,%d10
8000c3a0:	d9 3f fc c0 	lea %a15,[%a3]3900
8000c3a4:	bf 1f 3f 00 	jlt %d15,1,8000c422 <_svfprintf_r+0xb2e>
8000c3a8:	19 a7 24 10 	ld.w %d7,[%sp]100
8000c3ac:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c3b0:	8b 1f 81 82 	ge %d8,%d15,17
8000c3b4:	ec e0       	st.a [%a14]0,%a15
8000c3b6:	df 08 20 00 	jeq %d8,0,8000c3f6 <_svfprintf_r+0xb02>
8000c3ba:	1b 14 00 00 	addi %d0,%d4,1
8000c3be:	3b 00 01 20 	mov %d2,16
8000c3c2:	1b 07 01 10 	addi %d1,%d7,16
8000c3c6:	59 e2 04 00 	st.w [%a14]4,%d2
8000c3ca:	59 a0 20 10 	st.w [%sp]96,%d0
8000c3ce:	59 a1 24 10 	st.w [%sp]100,%d1
8000c3d2:	8b 80 80 02 	ge %d0,%d0,8
8000c3d6:	d9 ee 08 00 	lea %a14,[%a14]8
8000c3da:	76 0b       	jz %d0,8000c3f0 <_svfprintf_r+0xafc>
8000c3dc:	60 c4       	mov.a %a4,%d12
8000c3de:	60 b5       	mov.a %a5,%d11
8000c3e0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c3e4:	6d 00 65 0d 	call 8000deae <__ssprint_r>
8000c3e8:	df 02 51 83 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c3ec:	d9 ae 10 20 	lea %a14,[%sp]144
8000c3f0:	1b 0f ff ff 	addi %d15,%d15,-16
8000c3f4:	3c da       	j 8000c3a8 <_svfprintf_r+0xab4>
8000c3f6:	c2 14       	add %d4,1
8000c3f8:	42 f7       	add %d7,%d15
8000c3fa:	6c e1       	st.w [%a14]4,%d15
8000c3fc:	59 a4 20 10 	st.w [%sp]96,%d4
8000c400:	59 a7 24 10 	st.w [%sp]100,%d7
8000c404:	8b 84 80 42 	ge %d4,%d4,8
8000c408:	d9 ee 08 00 	lea %a14,[%a14]8
8000c40c:	76 4b       	jz %d4,8000c422 <_svfprintf_r+0xb2e>
8000c40e:	60 c4       	mov.a %a4,%d12
8000c410:	60 b5       	mov.a %a5,%d11
8000c412:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c416:	6d 00 4c 0d 	call 8000deae <__ssprint_r>
8000c41a:	df 02 38 83 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c41e:	d9 ae 10 20 	lea %a14,[%sp]144
8000c422:	7b 00 00 88 	movh %d8,32768
8000c426:	a2 9e       	sub %d14,%d9
8000c428:	1b c8 f3 80 	addi %d8,%d8,3900
8000c42c:	c5 0f 10 00 	lea %a15,10 <_.+0xf>
8000c430:	bf 1e 3c 00 	jlt %d14,1,8000c4a8 <_svfprintf_r+0xbb4>
8000c434:	19 a6 24 10 	ld.w %d6,[%sp]100
8000c438:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c43c:	8b 1e 81 02 	ge %d0,%d14,17
8000c440:	74 e8       	st.w [%a14],%d8
8000c442:	df 00 1c 00 	jeq %d0,0,8000c47a <_svfprintf_r+0xb86>
8000c446:	c2 14       	add %d4,1
8000c448:	1b 06 01 00 	addi %d0,%d6,16
8000c44c:	ec e1       	st.a [%a14]4,%a15
8000c44e:	59 a4 20 10 	st.w [%sp]96,%d4
8000c452:	59 a0 24 10 	st.w [%sp]100,%d0
8000c456:	8b 84 80 42 	ge %d4,%d4,8
8000c45a:	d9 ee 08 00 	lea %a14,[%a14]8
8000c45e:	76 4b       	jz %d4,8000c474 <_svfprintf_r+0xb80>
8000c460:	60 c4       	mov.a %a4,%d12
8000c462:	60 b5       	mov.a %a5,%d11
8000c464:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c468:	6d 00 23 0d 	call 8000deae <__ssprint_r>
8000c46c:	df 02 0f 83 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c470:	d9 ae 10 20 	lea %a14,[%sp]144
8000c474:	1b 0e ff ef 	addi %d14,%d14,-16
8000c478:	3c de       	j 8000c434 <_svfprintf_r+0xb40>
8000c47a:	c2 14       	add %d4,1
8000c47c:	42 e6       	add %d6,%d14
8000c47e:	59 ee 04 00 	st.w [%a14]4,%d14
8000c482:	59 a4 20 10 	st.w [%sp]96,%d4
8000c486:	59 a6 24 10 	st.w [%sp]100,%d6
8000c48a:	8b 84 80 42 	ge %d4,%d4,8
8000c48e:	d9 ee 08 00 	lea %a14,[%a14]8
8000c492:	76 4b       	jz %d4,8000c4a8 <_svfprintf_r+0xbb4>
8000c494:	60 c4       	mov.a %a4,%d12
8000c496:	60 b5       	mov.a %a5,%d11
8000c498:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c49c:	6d 00 09 0d 	call 8000deae <__ssprint_r>
8000c4a0:	df 02 f5 82 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c4a4:	d9 ae 10 20 	lea %a14,[%sp]144
8000c4a8:	80 df       	mov.d %d15,%a13
8000c4aa:	19 ae 24 10 	ld.w %d14,[%sp]100
8000c4ae:	19 a8 20 10 	ld.w %d8,[%sp]96
8000c4b2:	6f 8f 1d 80 	jnz.t %d15,8,8000c4ec <_svfprintf_r+0xbf8>
8000c4b6:	c2 18       	add %d8,1
8000c4b8:	59 e9 04 00 	st.w [%a14]4,%d9
8000c4bc:	42 e9       	add %d9,%d14
8000c4be:	59 a8 20 10 	st.w [%sp]96,%d8
8000c4c2:	74 ed       	st.w [%a14],%d13
8000c4c4:	59 a9 24 10 	st.w [%sp]100,%d9
8000c4c8:	8b 88 80 82 	ge %d8,%d8,8
8000c4cc:	d9 ef 08 00 	lea %a15,[%a14]8
8000c4d0:	df 08 79 02 	jeq %d8,0,8000c9c2 <_svfprintf_r+0x10ce>
8000c4d4:	60 c4       	mov.a %a4,%d12
8000c4d6:	60 b5       	mov.a %a5,%d11
8000c4d8:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c4dc:	6d 00 e9 0c 	call 8000deae <__ssprint_r>
8000c4e0:	df 02 d5 82 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c4e4:	d9 af 10 20 	lea %a15,[%sp]144
8000c4e8:	1d 00 6d 02 	j 8000c9c2 <_svfprintf_r+0x10ce>
8000c4ec:	19 a2 10 00 	ld.w %d2,[%sp]16
8000c4f0:	8b 62 46 f2 	lt %d15,%d2,102
8000c4f4:	df 0f be 81 	jne %d15,0,8000c870 <_svfprintf_r+0xf7c>
8000c4f8:	d2 06       	mov %e6,0
8000c4fa:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000c4fe:	19 a5 30 00 	ld.w %d5,[%sp]48
8000c502:	6d 00 db 0f 	call 8000e4b8 <__eqdf2>
8000c506:	df 02 78 80 	jne %d2,0,8000c5f6 <_svfprintf_r+0xd02>
8000c50a:	7b 00 00 38 	movh %d3,32768
8000c50e:	1b a3 f3 30 	addi %d3,%d3,3898
8000c512:	c2 18       	add %d8,1
8000c514:	74 e3       	st.w [%a14],%d3
8000c516:	1b 1e 00 90 	addi %d9,%d14,1
8000c51a:	82 13       	mov %d3,1
8000c51c:	59 a8 20 10 	st.w [%sp]96,%d8
8000c520:	59 e3 04 00 	st.w [%a14]4,%d3
8000c524:	59 a9 24 10 	st.w [%sp]100,%d9
8000c528:	8b 88 80 82 	ge %d8,%d8,8
8000c52c:	d9 ef 08 00 	lea %a15,[%a14]8
8000c530:	76 8b       	jz %d8,8000c546 <_svfprintf_r+0xc52>
8000c532:	60 c4       	mov.a %a4,%d12
8000c534:	60 b5       	mov.a %a5,%d11
8000c536:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c53a:	6d 00 ba 0c 	call 8000deae <__ssprint_r>
8000c53e:	df 02 a6 82 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c542:	d9 af 10 20 	lea %a15,[%sp]144
8000c546:	58 11       	ld.w %d15,[%sp]68
8000c548:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c54c:	3f 2f 05 00 	jlt %d15,%d2,8000c556 <_svfprintf_r+0xc62>
8000c550:	80 df       	mov.d %d15,%a13
8000c552:	6f 0f 38 02 	jz.t %d15,0,8000c9c2 <_svfprintf_r+0x10ce>
8000c556:	58 08       	ld.w %d15,[%sp]32
8000c558:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c55c:	68 1f       	st.w [%a15]4,%d15
8000c55e:	58 19       	ld.w %d15,[%sp]100
8000c560:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c564:	42 2f       	add %d15,%d2
8000c566:	78 19       	st.w [%sp]100,%d15
8000c568:	58 18       	ld.w %d15,[%sp]96
8000c56a:	e8 03       	st.a [%a15]0,%a3
8000c56c:	c2 1f       	add %d15,1
8000c56e:	78 18       	st.w [%sp]96,%d15
8000c570:	8b 8f 80 f2 	ge %d15,%d15,8
8000c574:	d9 ff 08 00 	lea %a15,[%a15]8
8000c578:	6e 0b       	jz %d15,8000c58e <_svfprintf_r+0xc9a>
8000c57a:	60 c4       	mov.a %a4,%d12
8000c57c:	60 b5       	mov.a %a5,%d11
8000c57e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c582:	6d 00 96 0c 	call 8000deae <__ssprint_r>
8000c586:	df 02 82 82 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c58a:	d9 af 10 20 	lea %a15,[%sp]144
8000c58e:	58 05       	ld.w %d15,[%sp]20
8000c590:	7b 00 00 88 	movh %d8,32768
8000c594:	c2 ff       	add %d15,-1
8000c596:	1b c8 f3 80 	addi %d8,%d8,3900
8000c59a:	3b 00 01 90 	mov %d9,16
8000c59e:	bf 1f 12 02 	jlt %d15,1,8000c9c2 <_svfprintf_r+0x10ce>
8000c5a2:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c5a6:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c5aa:	8b 1f 81 42 	ge %d4,%d15,17
8000c5ae:	68 08       	st.w [%a15]0,%d8
8000c5b0:	df 04 1c 00 	jeq %d4,0,8000c5e8 <_svfprintf_r+0xcf4>
8000c5b4:	c2 13       	add %d3,1
8000c5b6:	1b 05 01 40 	addi %d4,%d5,16
8000c5ba:	68 19       	st.w [%a15]4,%d9
8000c5bc:	59 a3 20 10 	st.w [%sp]96,%d3
8000c5c0:	59 a4 24 10 	st.w [%sp]100,%d4
8000c5c4:	8b 83 80 32 	ge %d3,%d3,8
8000c5c8:	d9 ff 08 00 	lea %a15,[%a15]8
8000c5cc:	76 3b       	jz %d3,8000c5e2 <_svfprintf_r+0xcee>
8000c5ce:	60 c4       	mov.a %a4,%d12
8000c5d0:	60 b5       	mov.a %a5,%d11
8000c5d2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c5d6:	6d 00 6c 0c 	call 8000deae <__ssprint_r>
8000c5da:	df 02 58 82 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c5de:	d9 af 10 20 	lea %a15,[%sp]144
8000c5e2:	1b 0f ff ff 	addi %d15,%d15,-16
8000c5e6:	3c de       	j 8000c5a2 <_svfprintf_r+0xcae>
8000c5e8:	12 54       	add %d4,%d15,%d5
8000c5ea:	68 1f       	st.w [%a15]4,%d15
8000c5ec:	59 a4 24 10 	st.w [%sp]100,%d4
8000c5f0:	9a 13       	add %d15,%d3,1
8000c5f2:	1d 00 e1 01 	j 8000c9b4 <_svfprintf_r+0x10c0>
8000c5f6:	19 a3 04 10 	ld.w %d3,[%sp]68
8000c5fa:	ff 13 8e 00 	jge %d3,1,8000c716 <_svfprintf_r+0xe22>
8000c5fe:	7b 00 00 38 	movh %d3,32768
8000c602:	1b a3 f3 30 	addi %d3,%d3,3898
8000c606:	c2 18       	add %d8,1
8000c608:	74 e3       	st.w [%a14],%d3
8000c60a:	1b 1e 00 90 	addi %d9,%d14,1
8000c60e:	82 13       	mov %d3,1
8000c610:	59 a8 20 10 	st.w [%sp]96,%d8
8000c614:	59 e3 04 00 	st.w [%a14]4,%d3
8000c618:	59 a9 24 10 	st.w [%sp]100,%d9
8000c61c:	8b 88 80 82 	ge %d8,%d8,8
8000c620:	d9 ef 08 00 	lea %a15,[%a14]8
8000c624:	76 8b       	jz %d8,8000c63a <_svfprintf_r+0xd46>
8000c626:	60 c4       	mov.a %a4,%d12
8000c628:	60 b5       	mov.a %a5,%d11
8000c62a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c62e:	6d 00 40 0c 	call 8000deae <__ssprint_r>
8000c632:	df 02 2c 82 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c636:	d9 af 10 20 	lea %a15,[%sp]144
8000c63a:	58 11       	ld.w %d15,[%sp]68
8000c63c:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c640:	a6 2f       	or %d15,%d2
8000c642:	ee 04       	jnz %d15,8000c64a <_svfprintf_r+0xd56>
8000c644:	80 df       	mov.d %d15,%a13
8000c646:	6f 0f be 01 	jz.t %d15,0,8000c9c2 <_svfprintf_r+0x10ce>
8000c64a:	58 08       	ld.w %d15,[%sp]32
8000c64c:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c650:	68 1f       	st.w [%a15]4,%d15
8000c652:	58 19       	ld.w %d15,[%sp]100
8000c654:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c658:	42 2f       	add %d15,%d2
8000c65a:	78 19       	st.w [%sp]100,%d15
8000c65c:	58 18       	ld.w %d15,[%sp]96
8000c65e:	e8 03       	st.a [%a15]0,%a3
8000c660:	c2 1f       	add %d15,1
8000c662:	78 18       	st.w [%sp]96,%d15
8000c664:	8b 8f 80 f2 	ge %d15,%d15,8
8000c668:	d9 ff 08 00 	lea %a15,[%a15]8
8000c66c:	6e 0b       	jz %d15,8000c682 <_svfprintf_r+0xd8e>
8000c66e:	60 c4       	mov.a %a4,%d12
8000c670:	60 b5       	mov.a %a5,%d11
8000c672:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c676:	6d 00 1c 0c 	call 8000deae <__ssprint_r>
8000c67a:	df 02 08 82 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c67e:	d9 af 10 20 	lea %a15,[%sp]144
8000c682:	58 11       	ld.w %d15,[%sp]68
8000c684:	7b 00 00 88 	movh %d8,32768
8000c688:	32 5f       	rsub %d15
8000c68a:	1b c8 f3 80 	addi %d8,%d8,3900
8000c68e:	3b 00 01 90 	mov %d9,16
8000c692:	bf 1f 3a 00 	jlt %d15,1,8000c706 <_svfprintf_r+0xe12>
8000c696:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c69a:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c69e:	8b 1f 81 42 	ge %d4,%d15,17
8000c6a2:	68 08       	st.w [%a15]0,%d8
8000c6a4:	df 04 1c 00 	jeq %d4,0,8000c6dc <_svfprintf_r+0xde8>
8000c6a8:	c2 13       	add %d3,1
8000c6aa:	1b 05 01 40 	addi %d4,%d5,16
8000c6ae:	68 19       	st.w [%a15]4,%d9
8000c6b0:	59 a3 20 10 	st.w [%sp]96,%d3
8000c6b4:	59 a4 24 10 	st.w [%sp]100,%d4
8000c6b8:	8b 83 80 32 	ge %d3,%d3,8
8000c6bc:	d9 ff 08 00 	lea %a15,[%a15]8
8000c6c0:	76 3b       	jz %d3,8000c6d6 <_svfprintf_r+0xde2>
8000c6c2:	60 c4       	mov.a %a4,%d12
8000c6c4:	60 b5       	mov.a %a5,%d11
8000c6c6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c6ca:	6d 00 f2 0b 	call 8000deae <__ssprint_r>
8000c6ce:	df 02 de 81 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c6d2:	d9 af 10 20 	lea %a15,[%sp]144
8000c6d6:	1b 0f ff ff 	addi %d15,%d15,-16
8000c6da:	3c de       	j 8000c696 <_svfprintf_r+0xda2>
8000c6dc:	68 1f       	st.w [%a15]4,%d15
8000c6de:	12 54       	add %d4,%d15,%d5
8000c6e0:	9a 13       	add %d15,%d3,1
8000c6e2:	78 18       	st.w [%sp]96,%d15
8000c6e4:	59 a4 24 10 	st.w [%sp]100,%d4
8000c6e8:	8b 8f 80 f2 	ge %d15,%d15,8
8000c6ec:	d9 ff 08 00 	lea %a15,[%a15]8
8000c6f0:	6e 0b       	jz %d15,8000c706 <_svfprintf_r+0xe12>
8000c6f2:	60 c4       	mov.a %a4,%d12
8000c6f4:	60 b5       	mov.a %a5,%d11
8000c6f6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c6fa:	6d 00 da 0b 	call 8000deae <__ssprint_r>
8000c6fe:	df 02 c6 81 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c702:	d9 af 10 20 	lea %a15,[%sp]144
8000c706:	58 05       	ld.w %d15,[%sp]20
8000c708:	68 0d       	st.w [%a15]0,%d13
8000c70a:	68 1f       	st.w [%a15]4,%d15
8000c70c:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c710:	58 19       	ld.w %d15,[%sp]100
8000c712:	1d 00 4d 01 	j 8000c9ac <_svfprintf_r+0x10b8>
8000c716:	58 05       	ld.w %d15,[%sp]20
8000c718:	74 ed       	st.w [%a14],%d13
8000c71a:	3f f3 6a 00 	jlt %d3,%d15,8000c7ee <_svfprintf_r+0xefa>
8000c71e:	02 f9       	mov %d9,%d15
8000c720:	c2 18       	add %d8,1
8000c722:	42 e9       	add %d9,%d14
8000c724:	59 a8 20 10 	st.w [%sp]96,%d8
8000c728:	6c e1       	st.w [%a14]4,%d15
8000c72a:	59 a9 24 10 	st.w [%sp]100,%d9
8000c72e:	8b 88 80 82 	ge %d8,%d8,8
8000c732:	d9 ef 08 00 	lea %a15,[%a14]8
8000c736:	76 8b       	jz %d8,8000c74c <_svfprintf_r+0xe58>
8000c738:	60 c4       	mov.a %a4,%d12
8000c73a:	60 b5       	mov.a %a5,%d11
8000c73c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c740:	6d 00 b7 0b 	call 8000deae <__ssprint_r>
8000c744:	df 02 a3 81 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c748:	d9 af 10 20 	lea %a15,[%sp]144
8000c74c:	58 11       	ld.w %d15,[%sp]68
8000c74e:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c752:	7b 00 00 88 	movh %d8,32768
8000c756:	a2 2f       	sub %d15,%d2
8000c758:	1b c8 f3 80 	addi %d8,%d8,3900
8000c75c:	3b 00 01 90 	mov %d9,16
8000c760:	bf 1f 3a 00 	jlt %d15,1,8000c7d4 <_svfprintf_r+0xee0>
8000c764:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c768:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c76c:	8b 1f 81 42 	ge %d4,%d15,17
8000c770:	68 08       	st.w [%a15]0,%d8
8000c772:	df 04 1c 00 	jeq %d4,0,8000c7aa <_svfprintf_r+0xeb6>
8000c776:	c2 13       	add %d3,1
8000c778:	1b 05 01 40 	addi %d4,%d5,16
8000c77c:	68 19       	st.w [%a15]4,%d9
8000c77e:	59 a3 20 10 	st.w [%sp]96,%d3
8000c782:	59 a4 24 10 	st.w [%sp]100,%d4
8000c786:	8b 83 80 32 	ge %d3,%d3,8
8000c78a:	d9 ff 08 00 	lea %a15,[%a15]8
8000c78e:	76 3b       	jz %d3,8000c7a4 <_svfprintf_r+0xeb0>
8000c790:	60 c4       	mov.a %a4,%d12
8000c792:	60 b5       	mov.a %a5,%d11
8000c794:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c798:	6d 00 8b 0b 	call 8000deae <__ssprint_r>
8000c79c:	df 02 77 81 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c7a0:	d9 af 10 20 	lea %a15,[%sp]144
8000c7a4:	1b 0f ff ff 	addi %d15,%d15,-16
8000c7a8:	3c de       	j 8000c764 <_svfprintf_r+0xe70>
8000c7aa:	68 1f       	st.w [%a15]4,%d15
8000c7ac:	12 54       	add %d4,%d15,%d5
8000c7ae:	9a 13       	add %d15,%d3,1
8000c7b0:	78 18       	st.w [%sp]96,%d15
8000c7b2:	59 a4 24 10 	st.w [%sp]100,%d4
8000c7b6:	8b 8f 80 f2 	ge %d15,%d15,8
8000c7ba:	d9 ff 08 00 	lea %a15,[%a15]8
8000c7be:	6e 0b       	jz %d15,8000c7d4 <_svfprintf_r+0xee0>
8000c7c0:	60 c4       	mov.a %a4,%d12
8000c7c2:	60 b5       	mov.a %a5,%d11
8000c7c4:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c7c8:	6d 00 73 0b 	call 8000deae <__ssprint_r>
8000c7cc:	df 02 5f 81 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c7d0:	d9 af 10 20 	lea %a15,[%sp]144
8000c7d4:	80 df       	mov.d %d15,%a13
8000c7d6:	6f 0f f6 00 	jz.t %d15,0,8000c9c2 <_svfprintf_r+0x10ce>
8000c7da:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c7de:	58 08       	ld.w %d15,[%sp]32
8000c7e0:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c7e4:	68 1f       	st.w [%a15]4,%d15
8000c7e6:	e8 03       	st.a [%a15]0,%a3
8000c7e8:	58 19       	ld.w %d15,[%sp]100
8000c7ea:	1d 00 e1 00 	j 8000c9ac <_svfprintf_r+0x10b8>
8000c7ee:	c2 18       	add %d8,1
8000c7f0:	59 e3 04 00 	st.w [%a14]4,%d3
8000c7f4:	42 e3       	add %d3,%d14
8000c7f6:	59 a8 20 10 	st.w [%sp]96,%d8
8000c7fa:	59 a3 24 10 	st.w [%sp]100,%d3
8000c7fe:	8b 88 80 82 	ge %d8,%d8,8
8000c802:	d9 ef 08 00 	lea %a15,[%a14]8
8000c806:	76 8b       	jz %d8,8000c81c <_svfprintf_r+0xf28>
8000c808:	60 c4       	mov.a %a4,%d12
8000c80a:	60 b5       	mov.a %a5,%d11
8000c80c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c810:	6d 00 4f 0b 	call 8000deae <__ssprint_r>
8000c814:	df 02 3b 81 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c818:	d9 af 10 20 	lea %a15,[%sp]144
8000c81c:	58 08       	ld.w %d15,[%sp]32
8000c81e:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c822:	68 1f       	st.w [%a15]4,%d15
8000c824:	58 19       	ld.w %d15,[%sp]100
8000c826:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c82a:	42 2f       	add %d15,%d2
8000c82c:	78 19       	st.w [%sp]100,%d15
8000c82e:	58 18       	ld.w %d15,[%sp]96
8000c830:	99 ae 04 10 	ld.a %a14,[%sp]68
8000c834:	c2 1f       	add %d15,1
8000c836:	60 d2       	mov.a %a2,%d13
8000c838:	e8 03       	st.a [%a15]0,%a3
8000c83a:	78 18       	st.w [%sp]96,%d15
8000c83c:	8b 8f 80 f2 	ge %d15,%d15,8
8000c840:	30 2e       	add.a %a14,%a2
8000c842:	d9 ff 08 00 	lea %a15,[%a15]8
8000c846:	6e 0b       	jz %d15,8000c85c <_svfprintf_r+0xf68>
8000c848:	60 c4       	mov.a %a4,%d12
8000c84a:	60 b5       	mov.a %a5,%d11
8000c84c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c850:	6d 00 2f 0b 	call 8000deae <__ssprint_r>
8000c854:	df 02 1b 81 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c858:	d9 af 10 20 	lea %a15,[%sp]144
8000c85c:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c860:	58 11       	ld.w %d15,[%sp]68
8000c862:	e8 0e       	st.a [%a15]0,%a14
8000c864:	5a f2       	sub %d15,%d2,%d15
8000c866:	68 1f       	st.w [%a15]4,%d15
8000c868:	19 a2 24 10 	ld.w %d2,[%sp]100
8000c86c:	1d 00 a0 00 	j 8000c9ac <_svfprintf_r+0x10b8>
8000c870:	c2 18       	add %d8,1
8000c872:	82 13       	mov %d3,1
8000c874:	1b 1e 00 90 	addi %d9,%d14,1
8000c878:	58 05       	ld.w %d15,[%sp]20
8000c87a:	59 a8 20 10 	st.w [%sp]96,%d8
8000c87e:	74 ed       	st.w [%a14],%d13
8000c880:	59 e3 04 00 	st.w [%a14]4,%d3
8000c884:	59 a9 24 10 	st.w [%sp]100,%d9
8000c888:	8b 88 80 82 	ge %d8,%d8,8
8000c88c:	ff 2f 05 00 	jge %d15,2,8000c896 <_svfprintf_r+0xfa2>
8000c890:	80 d2       	mov.d %d2,%a13
8000c892:	6f 02 81 00 	jz.t %d2,0,8000c994 <_svfprintf_r+0x10a0>
8000c896:	d9 ef 08 00 	lea %a15,[%a14]8
8000c89a:	76 8b       	jz %d8,8000c8b0 <_svfprintf_r+0xfbc>
8000c89c:	60 c4       	mov.a %a4,%d12
8000c89e:	60 b5       	mov.a %a5,%d11
8000c8a0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c8a4:	6d 00 05 0b 	call 8000deae <__ssprint_r>
8000c8a8:	df 02 f1 80 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c8ac:	d9 af 10 20 	lea %a15,[%sp]144
8000c8b0:	58 08       	ld.w %d15,[%sp]32
8000c8b2:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c8b6:	68 1f       	st.w [%a15]4,%d15
8000c8b8:	58 19       	ld.w %d15,[%sp]100
8000c8ba:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c8be:	42 2f       	add %d15,%d2
8000c8c0:	78 19       	st.w [%sp]100,%d15
8000c8c2:	58 18       	ld.w %d15,[%sp]96
8000c8c4:	e8 03       	st.a [%a15]0,%a3
8000c8c6:	c2 1f       	add %d15,1
8000c8c8:	78 18       	st.w [%sp]96,%d15
8000c8ca:	8b 8f 80 f2 	ge %d15,%d15,8
8000c8ce:	d9 ff 08 00 	lea %a15,[%a15]8
8000c8d2:	6e 0b       	jz %d15,8000c8e8 <_svfprintf_r+0xff4>
8000c8d4:	60 c4       	mov.a %a4,%d12
8000c8d6:	60 b5       	mov.a %a5,%d11
8000c8d8:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c8dc:	6d 00 e9 0a 	call 8000deae <__ssprint_r>
8000c8e0:	df 02 d5 80 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c8e4:	d9 af 10 20 	lea %a15,[%sp]144
8000c8e8:	d2 06       	mov %e6,0
8000c8ea:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000c8ee:	19 a5 30 00 	ld.w %d5,[%sp]48
8000c8f2:	6d 00 03 0e 	call 8000e4f8 <__nedf2>
8000c8f6:	58 05       	ld.w %d15,[%sp]20
8000c8f8:	c2 ff       	add %d15,-1
8000c8fa:	76 2c       	jz %d2,8000c912 <_svfprintf_r+0x101e>
8000c8fc:	19 a2 24 10 	ld.w %d2,[%sp]100
8000c900:	60 de       	mov.a %a14,%d13
8000c902:	68 1f       	st.w [%a15]4,%d15
8000c904:	42 2f       	add %d15,%d2
8000c906:	78 19       	st.w [%sp]100,%d15
8000c908:	58 18       	ld.w %d15,[%sp]96
8000c90a:	b0 1e       	add.a %a14,1
8000c90c:	e8 0e       	st.a [%a15]0,%a14
8000c90e:	c2 1f       	add %d15,1
8000c910:	3c 31       	j 8000c972 <_svfprintf_r+0x107e>
8000c912:	7b 00 00 88 	movh %d8,32768
8000c916:	1b c8 f3 80 	addi %d8,%d8,3900
8000c91a:	3b 00 01 90 	mov %d9,16
8000c91e:	bf 1f 3f 00 	jlt %d15,1,8000c99c <_svfprintf_r+0x10a8>
8000c922:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c926:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c92a:	8b 1f 81 42 	ge %d4,%d15,17
8000c92e:	68 08       	st.w [%a15]0,%d8
8000c930:	df 04 1c 00 	jeq %d4,0,8000c968 <_svfprintf_r+0x1074>
8000c934:	c2 13       	add %d3,1
8000c936:	1b 05 01 40 	addi %d4,%d5,16
8000c93a:	68 19       	st.w [%a15]4,%d9
8000c93c:	59 a3 20 10 	st.w [%sp]96,%d3
8000c940:	59 a4 24 10 	st.w [%sp]100,%d4
8000c944:	8b 83 80 32 	ge %d3,%d3,8
8000c948:	d9 ff 08 00 	lea %a15,[%a15]8
8000c94c:	76 3b       	jz %d3,8000c962 <_svfprintf_r+0x106e>
8000c94e:	60 c4       	mov.a %a4,%d12
8000c950:	60 b5       	mov.a %a5,%d11
8000c952:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c956:	6d 00 ac 0a 	call 8000deae <__ssprint_r>
8000c95a:	df 02 98 80 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c95e:	d9 af 10 20 	lea %a15,[%sp]144
8000c962:	1b 0f ff ff 	addi %d15,%d15,-16
8000c966:	3c de       	j 8000c922 <_svfprintf_r+0x102e>
8000c968:	12 54       	add %d4,%d15,%d5
8000c96a:	68 1f       	st.w [%a15]4,%d15
8000c96c:	59 a4 24 10 	st.w [%sp]100,%d4
8000c970:	9a 13       	add %d15,%d3,1
8000c972:	78 18       	st.w [%sp]96,%d15
8000c974:	8b 8f 80 f2 	ge %d15,%d15,8
8000c978:	d9 ff 08 00 	lea %a15,[%a15]8
8000c97c:	6e 10       	jz %d15,8000c99c <_svfprintf_r+0x10a8>
8000c97e:	60 c4       	mov.a %a4,%d12
8000c980:	60 b5       	mov.a %a5,%d11
8000c982:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c986:	6d 00 94 0a 	call 8000deae <__ssprint_r>
8000c98a:	df 02 80 80 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c98e:	d9 af 10 20 	lea %a15,[%sp]144
8000c992:	3c 05       	j 8000c99c <_svfprintf_r+0x10a8>
8000c994:	df 08 f5 ff 	jne %d8,0,8000c97e <_svfprintf_r+0x108a>
8000c998:	d9 ef 08 00 	lea %a15,[%a14]8
8000c99c:	58 0e       	ld.w %d15,[%sp]56
8000c99e:	d9 a3 0d 10 	lea %a3,[%sp]77
8000c9a2:	68 1f       	st.w [%a15]4,%d15
8000c9a4:	19 a2 38 00 	ld.w %d2,[%sp]56
8000c9a8:	58 19       	ld.w %d15,[%sp]100
8000c9aa:	e8 03       	st.a [%a15]0,%a3
8000c9ac:	42 2f       	add %d15,%d2
8000c9ae:	78 19       	st.w [%sp]100,%d15
8000c9b0:	58 18       	ld.w %d15,[%sp]96
8000c9b2:	c2 1f       	add %d15,1
8000c9b4:	78 18       	st.w [%sp]96,%d15
8000c9b6:	8b 8f 80 f2 	ge %d15,%d15,8
8000c9ba:	df 0f 8d fd 	jne %d15,0,8000c4d4 <_svfprintf_r+0xbe0>
8000c9be:	d9 ff 08 00 	lea %a15,[%a15]8
8000c9c2:	80 df       	mov.d %d15,%a13
8000c9c4:	ae 2d       	jnz.t %d15,2,8000c9de <_svfprintf_r+0x10ea>
8000c9c6:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000c9ca:	0b 2a a0 f1 	max %d15,%d10,%d2
8000c9ce:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c9d2:	42 f2       	add %d2,%d15
8000c9d4:	58 19       	ld.w %d15,[%sp]100
8000c9d6:	59 a2 28 00 	st.w [%sp]40,%d2
8000c9da:	6e 49       	jz %d15,8000ca6c <_svfprintf_r+0x1178>
8000c9dc:	3c 40       	j 8000ca5c <_svfprintf_r+0x1168>
8000c9de:	58 07       	ld.w %d15,[%sp]28
8000c9e0:	3b 00 01 80 	mov %d8,16
8000c9e4:	a2 af       	sub %d15,%d10
8000c9e6:	bf 1f f0 7f 	jlt %d15,1,8000c9c6 <_svfprintf_r+0x10d2>
8000c9ea:	91 00 00 28 	movh.a %a2,32768
8000c9ee:	d9 22 cc d0 	lea %a2,[%a2]3916 <80000f4c <blanks.4035>>
8000c9f2:	19 a5 24 10 	ld.w %d5,[%sp]100 <80000f4c <blanks.4035>>
8000c9f6:	19 a3 20 10 	ld.w %d3,[%sp]96 <80000f4c <blanks.4035>>
8000c9fa:	8b 1f 81 42 	ge %d4,%d15,17
8000c9fe:	e8 02       	st.a [%a15]0,%a2
8000ca00:	df 04 1c 00 	jeq %d4,0,8000ca38 <_svfprintf_r+0x1144>
8000ca04:	c2 13       	add %d3,1
8000ca06:	1b 05 01 40 	addi %d4,%d5,16
8000ca0a:	68 18       	st.w [%a15]4,%d8
8000ca0c:	59 a3 20 10 	st.w [%sp]96,%d3
8000ca10:	59 a4 24 10 	st.w [%sp]100,%d4
8000ca14:	8b 83 80 32 	ge %d3,%d3,8
8000ca18:	d9 ff 08 00 	lea %a15,[%a15]8
8000ca1c:	76 3b       	jz %d3,8000ca32 <_svfprintf_r+0x113e>
8000ca1e:	60 c4       	mov.a %a4,%d12
8000ca20:	60 b5       	mov.a %a5,%d11
8000ca22:	d9 a6 1c 10 	lea %a6,[%sp]92
8000ca26:	6d 00 44 0a 	call 8000deae <__ssprint_r>
8000ca2a:	df 02 30 80 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000ca2e:	d9 af 10 20 	lea %a15,[%sp]144
8000ca32:	1b 0f ff ff 	addi %d15,%d15,-16
8000ca36:	3c da       	j 8000c9ea <_svfprintf_r+0x10f6>
8000ca38:	12 54       	add %d4,%d15,%d5
8000ca3a:	68 1f       	st.w [%a15]4,%d15
8000ca3c:	9a 13       	add %d15,%d3,1
8000ca3e:	78 18       	st.w [%sp]96,%d15
8000ca40:	59 a4 24 10 	st.w [%sp]100,%d4
8000ca44:	8b 8f 40 f2 	lt %d15,%d15,8
8000ca48:	ee bf       	jnz %d15,8000c9c6 <_svfprintf_r+0x10d2>
8000ca4a:	60 c4       	mov.a %a4,%d12
8000ca4c:	60 b5       	mov.a %a5,%d11
8000ca4e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000ca52:	6d 00 2e 0a 	call 8000deae <__ssprint_r>
8000ca56:	df 02 b8 7f 	jeq %d2,0,8000c9c6 <_svfprintf_r+0x10d2>
8000ca5a:	3c 18       	j 8000ca8a <_svfprintf_r+0x1196>
8000ca5c:	60 c4       	mov.a %a4,%d12
8000ca5e:	60 b5       	mov.a %a5,%d11
8000ca60:	d9 a6 1c 10 	lea %a6,[%sp]92
8000ca64:	6d 00 25 0a 	call 8000deae <__ssprint_r>
8000ca68:	df 02 11 80 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000ca6c:	82 0f       	mov %d15,0
8000ca6e:	78 18       	st.w [%sp]96,%d15
8000ca70:	40 cf       	mov.aa %a15,%a12
8000ca72:	d9 ae 10 20 	lea %a14,[%sp]144
8000ca76:	1d ff 77 f7 	j 8000b964 <_svfprintf_r+0x70>
8000ca7a:	58 19       	ld.w %d15,[%sp]100
8000ca7c:	6e 07       	jz %d15,8000ca8a <_svfprintf_r+0x1196>
8000ca7e:	60 c4       	mov.a %a4,%d12
8000ca80:	60 b5       	mov.a %a5,%d11
8000ca82:	d9 a6 1c 10 	lea %a6,[%sp]92
8000ca86:	6d 00 14 0a 	call 8000deae <__ssprint_r>
8000ca8a:	60 b3       	mov.a %a3,%d11
8000ca8c:	19 a2 28 00 	ld.w %d2,[%sp]40
8000ca90:	8c 36       	ld.h %d15,[%a3]12
8000ca92:	16 40       	and %d15,64
8000ca94:	aa f2       	cmov %d2,%d15,-1
8000ca96:	00 90       	ret 

8000ca98 <quorem>:
8000ca98:	19 58 10 00 	ld.w %d8,[%a5]16
8000ca9c:	4c 44       	ld.w %d15,[%a4]16
8000ca9e:	82 02       	mov %d2,0
8000caa0:	3f 8f 88 00 	jlt %d15,%d8,8000cbb0 <quorem+0x118>
8000caa4:	c2 f8       	add %d8,-1
8000caa6:	80 4f       	mov.d %d15,%a4
8000caa8:	8f 28 00 20 	sh %d2,%d8,2
8000caac:	60 2f       	mov.a %a15,%d2
8000caae:	1b 4f 01 90 	addi %d9,%d15,20
8000cab2:	d9 5c 14 00 	lea %a12,[%a5]20
8000cab6:	01 fc 10 d0 	add.a %a13,%a12,%a15
8000caba:	01 f9 00 f6 	addsc.a %a15,%a15,%d9,0
8000cabe:	54 dc       	ld.w %d12,[%a13]
8000cac0:	4c f0       	ld.w %d15,[%a15]0
8000cac2:	c2 1c       	add %d12,1
8000cac4:	4b cf 11 c2 	div.u %e12,%d15,%d12
8000cac8:	02 ca       	mov %d10,%d12
8000caca:	df 0c 3d 00 	jeq %d12,0,8000cb44 <quorem+0xac>
8000cace:	60 96       	mov.a %a6,%d9
8000cad0:	40 c2       	mov.aa %a2,%a12
8000cad2:	82 05       	mov %d5,0
8000cad4:	82 06       	mov %d6,0
8000cad6:	54 22       	ld.w %d2,[%a2]
8000cad8:	40 63       	mov.aa %a3,%a6
8000cada:	b7 02 10 38 	insert %d3,%d2,0,16,16
8000cade:	8f 02 1f 20 	sh %d2,%d2,-16
8000cae2:	03 a3 0a 35 	madd %d3,%d5,%d3,%d10
8000cae6:	b0 42       	add.a %a2,4
8000cae8:	8f 03 1f 40 	sh %d4,%d3,-16
8000caec:	03 a2 0a 24 	madd %d2,%d4,%d2,%d10
8000caf0:	44 34       	ld.w %d4,[%a3+]
8000caf2:	b7 03 10 38 	insert %d3,%d3,0,16,16
8000caf6:	b7 04 10 f8 	insert %d15,%d4,0,16,16
8000cafa:	8f 02 1f 50 	sh %d5,%d2,-16
8000cafe:	42 f6       	add %d6,%d15
8000cb00:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000cb04:	0b 36 80 30 	sub %d3,%d6,%d3
8000cb08:	8f 04 1f 40 	sh %d4,%d4,-16
8000cb0c:	8f 03 3f f0 	sha %d15,%d3,-16
8000cb10:	0b 24 80 20 	sub %d2,%d4,%d2
8000cb14:	42 f2       	add %d2,%d15
8000cb16:	37 23 10 38 	insert %d3,%d3,%d2,16,16
8000cb1a:	8f 02 3f 60 	sha %d6,%d2,-16
8000cb1e:	80 2f       	mov.d %d15,%a2
8000cb20:	80 d2       	mov.d %d2,%a13
8000cb22:	74 63       	st.w [%a6],%d3
8000cb24:	40 36       	mov.aa %a6,%a3
8000cb26:	7f f2 d8 ff 	jge.u %d2,%d15,8000cad6 <quorem+0x3e>
8000cb2a:	4c f0       	ld.w %d15,[%a15]0
8000cb2c:	ee 0c       	jnz %d15,8000cb44 <quorem+0xac>
8000cb2e:	b0 cf       	add.a %a15,-4
8000cb30:	80 f2       	mov.d %d2,%a15
8000cb32:	3f 29 05 80 	jlt.u %d9,%d2,8000cb3c <quorem+0xa4>
8000cb36:	59 48 10 00 	st.w [%a4]16,%d8
8000cb3a:	3c 05       	j 8000cb44 <quorem+0xac>
8000cb3c:	4c f0       	ld.w %d15,[%a15]0
8000cb3e:	ee fc       	jnz %d15,8000cb36 <quorem+0x9e>
8000cb40:	c2 f8       	add %d8,-1
8000cb42:	3c f6       	j 8000cb2e <quorem+0x96>
8000cb44:	40 4e       	mov.aa %a14,%a4
8000cb46:	6d 00 b9 08 	call 8000dcb8 <__mcmp>
8000cb4a:	bf 02 32 00 	jlt %d2,0,8000cbae <quorem+0x116>
8000cb4e:	60 92       	mov.a %a2,%d9
8000cb50:	1b 1c 00 a0 	addi %d10,%d12,1
8000cb54:	82 04       	mov %d4,0
8000cb56:	40 2f       	mov.aa %a15,%a2
8000cb58:	44 f3       	ld.w %d3,[%a15+]
8000cb5a:	54 c5       	ld.w %d5,[%a12]
8000cb5c:	b7 03 10 28 	insert %d2,%d3,0,16,16
8000cb60:	8f 05 1f f0 	sh %d15,%d5,-16
8000cb64:	42 42       	add %d2,%d4
8000cb66:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000cb6a:	8f 03 1f 30 	sh %d3,%d3,-16
8000cb6e:	a2 42       	sub %d2,%d4
8000cb70:	8f 02 3f 40 	sha %d4,%d2,-16
8000cb74:	a2 f3       	sub %d3,%d15
8000cb76:	42 43       	add %d3,%d4
8000cb78:	8f 03 3f 40 	sha %d4,%d3,-16
8000cb7c:	b0 4c       	add.a %a12,4
8000cb7e:	37 32 10 38 	insert %d3,%d2,%d3,16,16
8000cb82:	80 df       	mov.d %d15,%a13
8000cb84:	80 c2       	mov.d %d2,%a12
8000cb86:	74 23       	st.w [%a2],%d3
8000cb88:	40 f2       	mov.aa %a2,%a15
8000cb8a:	7f 2f e6 ff 	jge.u %d15,%d2,8000cb56 <quorem+0xbe>
8000cb8e:	60 92       	mov.a %a2,%d9
8000cb90:	01 28 02 f6 	addsc.a %a15,%a2,%d8,2
8000cb94:	4c f0       	ld.w %d15,[%a15]0
8000cb96:	ee 0c       	jnz %d15,8000cbae <quorem+0x116>
8000cb98:	b0 cf       	add.a %a15,-4
8000cb9a:	80 f2       	mov.d %d2,%a15
8000cb9c:	3f 29 05 80 	jlt.u %d9,%d2,8000cba6 <quorem+0x10e>
8000cba0:	59 e8 10 00 	st.w [%a14]16,%d8
8000cba4:	3c 05       	j 8000cbae <quorem+0x116>
8000cba6:	4c f0       	ld.w %d15,[%a15]0
8000cba8:	ee fc       	jnz %d15,8000cba0 <quorem+0x108>
8000cbaa:	c2 f8       	add %d8,-1
8000cbac:	3c f6       	j 8000cb98 <quorem+0x100>
8000cbae:	02 a2       	mov %d2,%d10
8000cbb0:	00 90       	ret 
	...

8000cbb4 <_dtoa_r>:
8000cbb4:	20 58       	sub.a %sp,88
8000cbb6:	b5 a5 08 10 	st.a [%sp]72,%a5
8000cbba:	99 45 00 10 	ld.a %a5,[%a4]64
8000cbbe:	59 a6 1c 00 	st.w [%sp]28,%d6
8000cbc2:	59 a7 28 00 	st.w [%sp]40,%d7
8000cbc6:	b5 a7 38 00 	st.a [%sp]56,%a7
8000cbca:	40 4d       	mov.aa %a13,%a4
8000cbcc:	0b 45 10 88 	mov %e8,%d5,%d4
8000cbd0:	40 6c       	mov.aa %a12,%a6
8000cbd2:	0b 45 10 c8 	mov %e12,%d5,%d4
8000cbd6:	bc 5e       	jz.a %a5,8000cbf2 <_dtoa_r+0x3e>
8000cbd8:	19 4f 04 10 	ld.w %d15,[%a4]68
8000cbdc:	82 12       	mov %d2,1
8000cbde:	0f f2 00 20 	sh %d2,%d2,%d15
8000cbe2:	6c 51       	st.w [%a5]4,%d15
8000cbe4:	59 52 08 00 	st.w [%a5]8,%d2
8000cbe8:	82 0f       	mov %d15,0
8000cbea:	6d 00 99 06 	call 8000d91c <_Bfree>
8000cbee:	59 df 00 10 	st.w [%a13]64,%d15
8000cbf2:	ce 96       	jgez %d9,8000cbfe <_dtoa_r+0x4a>
8000cbf4:	82 1f       	mov %d15,1
8000cbf6:	6c c0       	st.w [%a12]0,%d15
8000cbf8:	b7 09 81 df 	insert %d13,%d9,0,31,1
8000cbfc:	3c 03       	j 8000cc02 <_dtoa_r+0x4e>
8000cbfe:	82 0f       	mov %d15,0
8000cc00:	6c c0       	st.w [%a12]0,%d15
8000cc02:	7b 00 ff 27 	movh %d2,32752
8000cc06:	26 d2       	and %d2,%d13
8000cc08:	7b 00 ff 37 	movh %d3,32752
8000cc0c:	5f 32 22 80 	jne %d2,%d3,8000cc50 <_dtoa_r+0x9c>
8000cc10:	99 a3 08 10 	ld.a %a3,[%sp]72
8000cc14:	3b f0 70 22 	mov %d2,9999
8000cc18:	91 00 00 f8 	movh.a %a15,32768
8000cc1c:	74 32       	st.w [%a3],%d2
8000cc1e:	d9 ff e5 d0 	lea %a15,[%a15]3941 <80000f65 <blanks.4035+0x19>>
8000cc22:	f6 c8       	jnz %d12,8000cc32 <_dtoa_r+0x7e>
8000cc24:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000cc28:	ee 05       	jnz %d15,8000cc32 <_dtoa_r+0x7e>
8000cc2a:	91 00 00 f8 	movh.a %a15,32768
8000cc2e:	d9 ff dc d0 	lea %a15,[%a15]3932 <80000f5c <blanks.4035+0x10>>
8000cc32:	99 a3 38 00 	ld.a %a3,[%sp]56 <80000f5c <blanks.4035+0x10>>
8000cc36:	40 f2       	mov.aa %a2,%a15
8000cc38:	bd 03 26 06 	jz.a %a3,8000d884 <_dtoa_r+0xcd0>
8000cc3c:	80 ff       	mov.d %d15,%a15
8000cc3e:	79 f3 03 00 	ld.b %d3,[%a15]3 <80000003 <BootModeHeader0+0x3>>
8000cc42:	1b 8f 00 20 	addi %d2,%d15,8
8000cc46:	c2 3f       	add %d15,3
8000cc48:	2b 2f 50 f3 	seln %d15,%d3,%d15,%d2
8000cc4c:	6c 30       	st.w [%a3]0,%d15
8000cc4e:	00 90       	ret 
8000cc50:	0b cd 10 48 	mov %e4,%d13,%d12
8000cc54:	d2 06       	mov %e6,0
8000cc56:	0b cd 10 88 	mov %e8,%d13,%d12
8000cc5a:	6d 00 2f 0c 	call 8000e4b8 <__eqdf2>
8000cc5e:	df 02 13 80 	jne %d2,0,8000cc84 <_dtoa_r+0xd0>
8000cc62:	99 a3 08 10 	ld.a %a3,[%sp]72
8000cc66:	d8 0e       	ld.a %a15,[%sp]56
8000cc68:	82 1f       	mov %d15,1
8000cc6a:	91 00 00 28 	movh.a %a2,32768
8000cc6e:	6c 30       	st.w [%a3]0,%d15
8000cc70:	d9 22 e9 d0 	lea %a2,[%a2]3945 <80000f69 <blanks.4035+0x1d>>
8000cc74:	bd 0f 08 06 	jz.a %a15,8000d884 <_dtoa_r+0xcd0>
8000cc78:	7b 00 00 f8 	movh %d15,32768
8000cc7c:	1b af f6 f0 	addi %d15,%d15,3946
8000cc80:	68 0f       	st.w [%a15]0,%d15
8000cc82:	00 90       	ret 
8000cc84:	0b cd 10 48 	mov %e4,%d13,%d12
8000cc88:	40 d4       	mov.aa %a4,%a13
8000cc8a:	d9 a5 14 10 	lea %a5,[%sp]84
8000cc8e:	d9 a6 10 10 	lea %a6,[%sp]80
8000cc92:	6d 00 99 08 	call 8000ddc4 <__d2b>
8000cc96:	37 0d 6b ba 	extr.u %d11,%d13,20,11
8000cc9a:	40 2e       	mov.aa %a14,%a2
8000cc9c:	19 aa 10 10 	ld.w %d10,[%sp]80
8000cca0:	76 bd       	jz %d11,8000ccba <_dtoa_r+0x106>
8000cca2:	b7 09 0c fa 	insert %d15,%d9,0,20,12
8000cca6:	0b cd 10 48 	mov %e4,%d13,%d12
8000ccaa:	7b 00 ff 23 	movh %d2,16368
8000ccae:	0f 2f a0 50 	or %d5,%d15,%d2
8000ccb2:	1b 1b c0 bf 	addi %d11,%d11,-1023
8000ccb6:	82 0f       	mov %d15,0
8000ccb8:	3c 22       	j 8000ccfc <_dtoa_r+0x148>
8000ccba:	19 ab 14 10 	ld.w %d11,[%sp]84
8000ccbe:	3b e0 be 4f 	mov %d4,-1042
8000ccc2:	42 ab       	add %d11,%d10
8000ccc4:	a2 b4       	sub %d4,%d11
8000ccc6:	3b f0 be 2f 	mov %d2,-1041
8000ccca:	0f 4c 00 40 	sh %d4,%d12,%d4
8000ccce:	3f 2b 0f 00 	jlt %d11,%d2,8000ccec <_dtoa_r+0x138>
8000ccd2:	1b 2b 41 30 	addi %d3,%d11,1042
8000ccd6:	3b e0 c0 4f 	mov %d4,-1010
8000ccda:	a2 b4       	sub %d4,%d11
8000ccdc:	8b 03 00 21 	rsub %d2,%d3,0
8000cce0:	0f 2c 00 20 	sh %d2,%d12,%d2
8000cce4:	0f 4d 00 f0 	sh %d15,%d13,%d4
8000cce8:	0f f2 a0 40 	or %d4,%d2,%d15
8000ccec:	6d 00 ad 0c 	call 8000e646 <__floatunsidf>
8000ccf0:	0b 23 10 48 	mov %e4,%d3,%d2
8000ccf4:	9b 03 e1 5f 	addih %d5,%d3,65040
8000ccf8:	c2 fb       	add %d11,-1
8000ccfa:	82 1f       	mov %d15,1
8000ccfc:	b7 00 ab 69 	imask %e6,0,19,11
8000cd00:	78 13       	st.w [%sp]76,%d15
8000cd02:	6d ff ba ee 	call 8000aa76 <__subdf3>
8000cd06:	7b 30 fd 73 	movh %d7,16339
8000cd0a:	0b 23 10 48 	mov %e4,%d3,%d2
8000cd0e:	7b f0 36 66 	movh %d6,25455
8000cd12:	1b 77 7a 78 	addi %d7,%d7,-30809
8000cd16:	1b 16 36 64 	addi %d6,%d6,17249
8000cd1a:	6d ff ce ee 	call 8000aab6 <__muldf3>
8000cd1e:	7b 70 fc 73 	movh %d7,16327
8000cd22:	0b 23 10 48 	mov %e4,%d3,%d2
8000cd26:	7b 10 b6 68 	movh %d6,35681
8000cd2a:	1b 87 a2 78 	addi %d7,%d7,-30168
8000cd2e:	1b 36 8b 6c 	addi %d6,%d6,-14157
8000cd32:	6d ff 86 ee 	call 8000aa3e <__adddf3>
8000cd36:	02 b4       	mov %d4,%d11
8000cd38:	0b 23 10 88 	mov %e8,%d3,%d2
8000cd3c:	6d ff 1b f0 	call 8000ad72 <__floatsidf>
8000cd40:	7b 30 fd 73 	movh %d7,16339
8000cd44:	0b 23 10 48 	mov %e4,%d3,%d2
8000cd48:	7b f0 09 65 	movh %d6,20639
8000cd4c:	1b 37 41 74 	addi %d7,%d7,17427
8000cd50:	1b b6 9f 67 	addi %d6,%d6,31227
8000cd54:	6d ff b1 ee 	call 8000aab6 <__muldf3>
8000cd58:	0b 89 10 48 	mov %e4,%d9,%d8
8000cd5c:	0b 23 10 68 	mov %e6,%d3,%d2
8000cd60:	6d ff 6f ee 	call 8000aa3e <__adddf3>
8000cd64:	0b 23 10 48 	mov %e4,%d3,%d2
8000cd68:	0b 23 10 88 	mov %e8,%d3,%d2
8000cd6c:	6d 00 46 0c 	call 8000e5f8 <__fixdfsi>
8000cd70:	0b 89 10 48 	mov %e4,%d9,%d8
8000cd74:	d2 06       	mov %e6,0
8000cd76:	59 a2 08 00 	st.w [%sp]8,%d2
8000cd7a:	6d 00 1f 0c 	call 8000e5b8 <__ltdf2>
8000cd7e:	ff 02 12 00 	jge %d2,0,8000cda2 <_dtoa_r+0x1ee>
8000cd82:	19 a4 08 00 	ld.w %d4,[%sp]8
8000cd86:	6d ff f6 ef 	call 8000ad72 <__floatsidf>
8000cd8a:	0b 89 10 48 	mov %e4,%d9,%d8
8000cd8e:	0b 23 10 68 	mov %e6,%d3,%d2
8000cd92:	6d 00 b3 0b 	call 8000e4f8 <__nedf2>
8000cd96:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cd9a:	ab f3 1f 32 	cadd %d3,%d2,%d3,-1
8000cd9e:	59 a3 08 00 	st.w [%sp]8,%d3
8000cda2:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cda6:	82 13       	mov %d3,1
8000cda8:	8b 72 a1 f2 	ge.u %d15,%d2,23
8000cdac:	59 a3 3c 00 	st.w [%sp]60,%d3
8000cdb0:	ee 18       	jnz %d15,8000cde0 <_dtoa_r+0x22c>
8000cdb2:	91 00 00 f8 	movh.a %a15,32768
8000cdb6:	d9 ff 0c 01 	lea %a15,[%a15]4108 <8000100c <__mprec_tens>>
8000cdba:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000cdbe:	0b cd 10 68 	mov %e6,%d13,%d12
8000cdc2:	09 f4 40 09 	ld.d %e4,[%a15]
8000cdc6:	6d 00 b9 0b 	call 8000e538 <__gtdf2>
8000cdca:	8e 28       	jlez %d2,8000cdda <_dtoa_r+0x226>
8000cdcc:	58 02       	ld.w %d15,[%sp]8
8000cdce:	82 02       	mov %d2,0
8000cdd0:	c2 ff       	add %d15,-1
8000cdd2:	78 02       	st.w [%sp]8,%d15
8000cdd4:	59 a2 3c 00 	st.w [%sp]60,%d2
8000cdd8:	3c 04       	j 8000cde0 <_dtoa_r+0x22c>
8000cdda:	82 03       	mov %d3,0
8000cddc:	59 a3 3c 00 	st.w [%sp]60,%d3
8000cde0:	0b ba 80 b0 	sub %d11,%d10,%d11
8000cde4:	9a fb       	add %d15,%d11,-1
8000cde6:	82 02       	mov %d2,0
8000cde8:	78 06       	st.w [%sp]24,%d15
8000cdea:	59 a2 14 00 	st.w [%sp]20,%d2
8000cdee:	ce f6       	jgez %d15,8000cdfa <_dtoa_r+0x246>
8000cdf0:	32 5f       	rsub %d15
8000cdf2:	82 03       	mov %d3,0
8000cdf4:	78 05       	st.w [%sp]20,%d15
8000cdf6:	59 a3 18 00 	st.w [%sp]24,%d3
8000cdfa:	58 02       	ld.w %d15,[%sp]8
8000cdfc:	0e fa       	jltz %d15,8000ce10 <_dtoa_r+0x25c>
8000cdfe:	19 a2 18 00 	ld.w %d2,[%sp]24
8000ce02:	78 0d       	st.w [%sp]52,%d15
8000ce04:	42 f2       	add %d2,%d15
8000ce06:	82 0f       	mov %d15,0
8000ce08:	59 a2 18 00 	st.w [%sp]24,%d2
8000ce0c:	78 08       	st.w [%sp]32,%d15
8000ce0e:	3c 0d       	j 8000ce28 <_dtoa_r+0x274>
8000ce10:	19 a2 14 00 	ld.w %d2,[%sp]20
8000ce14:	19 a3 08 00 	ld.w %d3,[%sp]8
8000ce18:	82 0f       	mov %d15,0
8000ce1a:	a2 32       	sub %d2,%d3
8000ce1c:	32 53       	rsub %d3
8000ce1e:	59 a2 14 00 	st.w [%sp]20,%d2
8000ce22:	59 a3 20 00 	st.w [%sp]32,%d3
8000ce26:	78 0d       	st.w [%sp]52,%d15
8000ce28:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000ce2c:	82 18       	mov %d8,1
8000ce2e:	ff a2 46 80 	jge.u %d2,10,8000ceba <_dtoa_r+0x306>
8000ce32:	bf 62 06 00 	jlt %d2,6,8000ce3e <_dtoa_r+0x28a>
8000ce36:	c2 c2       	add %d2,-4
8000ce38:	59 a2 1c 00 	st.w [%sp]28,%d2
8000ce3c:	82 08       	mov %d8,0
8000ce3e:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000ce42:	c2 e3       	add %d3,-2
8000ce44:	ff 43 4b 80 	jge.u %d3,4,8000ceda <_dtoa_r+0x326>
8000ce48:	91 10 00 f8 	movh.a %a15,32769
8000ce4c:	d9 ff d8 9c 	lea %a15,[%a15]-12712 <8000ce58 <_dtoa_r+0x2a4>>
8000ce50:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
8000ce54:	dc 0f       	ji %a15
8000ce56:	00 00       	nop 
8000ce58:	1d 00 08 00 	j 8000ce68 <_dtoa_r+0x2b4>
8000ce5c:	1d 00 1c 00 	j 8000ce94 <_dtoa_r+0x2e0>
8000ce60:	1d 00 08 00 	j 8000ce70 <_dtoa_r+0x2bc>
8000ce64:	1d 00 1c 00 	j 8000ce9c <_dtoa_r+0x2e8>
8000ce68:	82 03       	mov %d3,0
8000ce6a:	59 a3 24 00 	st.w [%sp]36,%d3
8000ce6e:	3c 03       	j 8000ce74 <_dtoa_r+0x2c0>
8000ce70:	82 1f       	mov %d15,1
8000ce72:	78 09       	st.w [%sp]36,%d15
8000ce74:	19 a2 28 00 	ld.w %d2,[%sp]40
8000ce78:	59 a2 2c 00 	st.w [%sp]44,%d2
8000ce7c:	59 a2 10 00 	st.w [%sp]16,%d2
8000ce80:	02 23       	mov %d3,%d2
8000ce82:	ff 12 38 00 	jge %d2,1,8000cef2 <_dtoa_r+0x33e>
8000ce86:	82 13       	mov %d3,1
8000ce88:	82 1f       	mov %d15,1
8000ce8a:	59 a3 2c 00 	st.w [%sp]44,%d3
8000ce8e:	78 04       	st.w [%sp]16,%d15
8000ce90:	82 12       	mov %d2,1
8000ce92:	3c 21       	j 8000ced4 <_dtoa_r+0x320>
8000ce94:	82 03       	mov %d3,0
8000ce96:	59 a3 24 00 	st.w [%sp]36,%d3
8000ce9a:	3c 03       	j 8000cea0 <_dtoa_r+0x2ec>
8000ce9c:	82 1f       	mov %d15,1
8000ce9e:	78 09       	st.w [%sp]36,%d15
8000cea0:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cea4:	19 a2 28 00 	ld.w %d2,[%sp]40
8000cea8:	42 32       	add %d2,%d3
8000ceaa:	59 a2 2c 00 	st.w [%sp]44,%d2
8000ceae:	c2 12       	add %d2,1
8000ceb0:	59 a2 10 00 	st.w [%sp]16,%d2
8000ceb4:	8b 12 40 33 	max %d3,%d2,1
8000ceb8:	3c 1d       	j 8000cef2 <_dtoa_r+0x33e>
8000ceba:	82 0f       	mov %d15,0
8000cebc:	82 12       	mov %d2,1
8000cebe:	82 f3       	mov %d3,-1
8000cec0:	78 07       	st.w [%sp]28,%d15
8000cec2:	82 ff       	mov %d15,-1
8000cec4:	59 a2 24 00 	st.w [%sp]36,%d2
8000cec8:	59 a3 2c 00 	st.w [%sp]44,%d3
8000cecc:	78 04       	st.w [%sp]16,%d15
8000cece:	3b 20 01 30 	mov %d3,18
8000ced2:	82 02       	mov %d2,0
8000ced4:	59 a2 28 00 	st.w [%sp]40,%d2
8000ced8:	3c 0d       	j 8000cef2 <_dtoa_r+0x33e>
8000ceda:	82 ff       	mov %d15,-1
8000cedc:	82 13       	mov %d3,1
8000cede:	78 0b       	st.w [%sp]44,%d15
8000cee0:	82 f2       	mov %d2,-1
8000cee2:	82 0f       	mov %d15,0
8000cee4:	59 a3 24 00 	st.w [%sp]36,%d3
8000cee8:	59 a2 10 00 	st.w [%sp]16,%d2
8000ceec:	3b 20 01 30 	mov %d3,18
8000cef0:	78 0a       	st.w [%sp]40,%d15
8000cef2:	82 05       	mov %d5,0
8000cef4:	59 d5 04 10 	st.w [%a13]68,%d5
8000cef8:	82 45       	mov %d5,4
8000cefa:	1b 45 01 00 	addi %d0,%d5,20
8000cefe:	3f 03 09 80 	jlt.u %d3,%d0,8000cf10 <_dtoa_r+0x35c>
8000cf02:	19 d0 04 10 	ld.w %d0,[%a13]68
8000cf06:	06 15       	sh %d5,1
8000cf08:	c2 10       	add %d0,1
8000cf0a:	59 d0 04 10 	st.w [%a13]68,%d0
8000cf0e:	3c f6       	j 8000cefa <_dtoa_r+0x346>
8000cf10:	40 d4       	mov.aa %a4,%a13
8000cf12:	19 d4 04 10 	ld.w %d4,[%a13]68
8000cf16:	6d 00 d8 04 	call 8000d8c6 <_Balloc>
8000cf1a:	19 a2 10 00 	ld.w %d2,[%sp]16
8000cf1e:	b5 a2 0c 00 	st.a [%sp]12,%a2
8000cf22:	8b f2 60 32 	lt.u %d3,%d2,15
8000cf26:	b5 d2 00 10 	st.a [%a13]64,%a2
8000cf2a:	26 38       	and %d8,%d3
8000cf2c:	df 08 97 01 	jeq %d8,0,8000d25a <_dtoa_r+0x6a6>
8000cf30:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cf34:	89 ac 40 19 	st.d [%sp]64,%e12
8000cf38:	bf 13 3f 00 	jlt %d3,1,8000cfb6 <_dtoa_r+0x402>
8000cf3c:	91 00 00 f8 	movh.a %a15,32768
8000cf40:	8f f3 00 31 	and %d3,%d3,15
8000cf44:	d9 ff 0c 01 	lea %a15,[%a15]4108 <8000100c <__mprec_tens>>
8000cf48:	19 ae 08 00 	ld.w %d14,[%sp]8 <8000100c <__mprec_tens>>
8000cf4c:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000cf50:	86 ce       	sha %d14,-4
8000cf52:	09 f8 40 09 	ld.d %e8,[%a15]
8000cf56:	82 2a       	mov %d10,2
8000cf58:	6f 4e 11 00 	jz.t %d14,4,8000cf7a <_dtoa_r+0x3c6>
8000cf5c:	91 00 00 f8 	movh.a %a15,32768
8000cf60:	0b cd 10 48 	mov %e4,%d13,%d12
8000cf64:	d9 ff e4 f0 	lea %a15,[%a15]4068 <80000fe4 <__mprec_bigtens>>
8000cf68:	09 f6 60 09 	ld.d %e6,[%a15]32 <80000020 <_start>>
8000cf6c:	6d ff 77 ee 	call 8000ac5a <__divdf3>
8000cf70:	0b 23 10 c8 	mov %e12,%d3,%d2
8000cf74:	8f fe 00 e1 	and %d14,%d14,15
8000cf78:	82 3a       	mov %d10,3
8000cf7a:	7b 00 00 b8 	movh %d11,32768
8000cf7e:	82 0f       	mov %d15,0
8000cf80:	1b 4b fe b0 	addi %d11,%d11,4068
8000cf84:	df 0e 12 00 	jeq %d14,0,8000cfa8 <_dtoa_r+0x3f4>
8000cf88:	6f 0e 0d 00 	jz.t %d14,0,8000cfa2 <_dtoa_r+0x3ee>
8000cf8c:	60 b2       	mov.a %a2,%d11
8000cf8e:	d0 2f       	addsc.a %a15,%a2,%d15,3
8000cf90:	0b 89 10 48 	mov %e4,%d9,%d8
8000cf94:	09 f6 40 09 	ld.d %e6,[%a15]
8000cf98:	6d ff 8f ed 	call 8000aab6 <__muldf3>
8000cf9c:	0b 23 10 88 	mov %e8,%d3,%d2
8000cfa0:	c2 1a       	add %d10,1
8000cfa2:	86 fe       	sha %d14,-1
8000cfa4:	c2 1f       	add %d15,1
8000cfa6:	3c ef       	j 8000cf84 <_dtoa_r+0x3d0>
8000cfa8:	0b cd 10 48 	mov %e4,%d13,%d12
8000cfac:	0b 89 10 68 	mov %e6,%d9,%d8
8000cfb0:	6d ff 55 ee 	call 8000ac5a <__divdf3>
8000cfb4:	3c 2c       	j 8000d00c <_dtoa_r+0x458>
8000cfb6:	19 a8 08 00 	ld.w %d8,[%sp]8
8000cfba:	82 2a       	mov %d10,2
8000cfbc:	32 58       	rsub %d8
8000cfbe:	df 08 29 00 	jeq %d8,0,8000d010 <_dtoa_r+0x45c>
8000cfc2:	91 00 00 f8 	movh.a %a15,32768
8000cfc6:	8f f8 00 31 	and %d3,%d8,15
8000cfca:	d9 ff 0c 01 	lea %a15,[%a15]4108 <8000100c <__mprec_tens>>
8000cfce:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000cfd2:	09 a4 40 19 	ld.d %e4,[%sp]64
8000cfd6:	09 f6 40 09 	ld.d %e6,[%a15]
8000cfda:	7b 00 00 c8 	movh %d12,32768
8000cfde:	6d ff 6c ed 	call 8000aab6 <__muldf3>
8000cfe2:	82 09       	mov %d9,0
8000cfe4:	86 c8       	sha %d8,-4
8000cfe6:	1b 4c fe c0 	addi %d12,%d12,4068
8000cfea:	df 08 11 00 	jeq %d8,0,8000d00c <_dtoa_r+0x458>
8000cfee:	6f 08 0c 00 	jz.t %d8,0,8000d006 <_dtoa_r+0x452>
8000cff2:	60 c3       	mov.a %a3,%d12
8000cff4:	01 39 03 f6 	addsc.a %a15,%a3,%d9,3
8000cff8:	0b 23 10 48 	mov %e4,%d3,%d2
8000cffc:	09 f6 40 09 	ld.d %e6,[%a15]
8000d000:	c2 1a       	add %d10,1
8000d002:	6d ff 5a ed 	call 8000aab6 <__muldf3>
8000d006:	86 f8       	sha %d8,-1
8000d008:	c2 19       	add %d9,1
8000d00a:	3c f0       	j 8000cfea <_dtoa_r+0x436>
8000d00c:	0b 23 10 c8 	mov %e12,%d3,%d2
8000d010:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000d014:	df 02 23 00 	jeq %d2,0,8000d05a <_dtoa_r+0x4a6>
8000d018:	0b cd 10 48 	mov %e4,%d13,%d12
8000d01c:	b7 00 2a 6a 	imask %e6,0,20,10
8000d020:	6d 00 cc 0a 	call 8000e5b8 <__ltdf2>
8000d024:	ff 02 20 00 	jge %d2,0,8000d064 <_dtoa_r+0x4b0>
8000d028:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d02c:	df 03 21 00 	jeq %d3,0,8000d06e <_dtoa_r+0x4ba>
8000d030:	58 0b       	ld.w %d15,[%sp]44
8000d032:	bf 1f 12 01 	jlt %d15,1,8000d256 <_dtoa_r+0x6a2>
8000d036:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d03a:	0b cd 10 48 	mov %e4,%d13,%d12
8000d03e:	c2 f2       	add %d2,-1
8000d040:	82 06       	mov %d6,0
8000d042:	7b 40 02 74 	movh %d7,16420
8000d046:	59 a2 30 00 	st.w [%sp]48,%d2
8000d04a:	6d ff 36 ed 	call 8000aab6 <__muldf3>
8000d04e:	c2 1a       	add %d10,1
8000d050:	0b 23 10 c8 	mov %e12,%d3,%d2
8000d054:	99 ac 2c 00 	ld.a %a12,[%sp]44
8000d058:	3c 10       	j 8000d078 <_dtoa_r+0x4c4>
8000d05a:	19 a3 08 00 	ld.w %d3,[%sp]8
8000d05e:	59 a3 30 00 	st.w [%sp]48,%d3
8000d062:	3c 03       	j 8000d068 <_dtoa_r+0x4b4>
8000d064:	58 02       	ld.w %d15,[%sp]8
8000d066:	78 0c       	st.w [%sp]48,%d15
8000d068:	99 ac 10 00 	ld.a %a12,[%sp]16
8000d06c:	3c 06       	j 8000d078 <_dtoa_r+0x4c4>
8000d06e:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d072:	a0 0c       	mov.a %a12,0
8000d074:	59 a2 30 00 	st.w [%sp]48,%d2
8000d078:	02 a4       	mov %d4,%d10
8000d07a:	6d ff 7c ee 	call 8000ad72 <__floatsidf>
8000d07e:	0b cd 10 68 	mov %e6,%d13,%d12
8000d082:	0b 23 10 48 	mov %e4,%d3,%d2
8000d086:	6d ff 18 ed 	call 8000aab6 <__muldf3>
8000d08a:	0b 23 10 48 	mov %e4,%d3,%d2
8000d08e:	82 06       	mov %d6,0
8000d090:	7b c0 01 74 	movh %d7,16412
8000d094:	6d ff d5 ec 	call 8000aa3e <__adddf3>
8000d098:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d09c:	0b 23 10 e8 	mov %e14,%d3,%d2
8000d0a0:	60 b2       	mov.a %a2,%d11
8000d0a2:	11 02 cc ff 	addih.a %a15,%a2,64704
8000d0a6:	80 ff       	mov.d %d15,%a15
8000d0a8:	bd 0c 1e 80 	jnz.a %a12,8000d0e4 <_dtoa_r+0x530>
8000d0ac:	0b cd 10 48 	mov %e4,%d13,%d12
8000d0b0:	82 06       	mov %d6,0
8000d0b2:	7b 40 01 74 	movh %d7,16404
8000d0b6:	6d ff e0 ec 	call 8000aa76 <__subdf3>
8000d0ba:	80 f7       	mov.d %d7,%a15
8000d0bc:	0b 23 10 48 	mov %e4,%d3,%d2
8000d0c0:	02 e6       	mov %d6,%d14
8000d0c2:	0b 23 10 88 	mov %e8,%d3,%d2
8000d0c6:	6d 00 39 0a 	call 8000e538 <__gtdf2>
8000d0ca:	ff 12 8e 02 	jge %d2,1,8000d5e6 <_dtoa_r+0xa32>
8000d0ce:	0b 89 10 48 	mov %e4,%d9,%d8
8000d0d2:	02 e6       	mov %d6,%d14
8000d0d4:	9b 0b cc 77 	addih %d7,%d11,31936
8000d0d8:	6d 00 70 0a 	call 8000e5b8 <__ltdf2>
8000d0dc:	bf 02 7d 02 	jlt %d2,0,8000d5d6 <_dtoa_r+0xa22>
8000d0e0:	1d 00 bb 00 	j 8000d256 <_dtoa_r+0x6a2>
8000d0e4:	80 c5       	mov.d %d5,%a12
8000d0e6:	91 00 00 f8 	movh.a %a15,32768
8000d0ea:	19 a2 24 00 	ld.w %d2,[%sp]36
8000d0ee:	d9 ff 0c 01 	lea %a15,[%a15]4108 <8000100c <__mprec_tens>>
8000d0f2:	c2 f5       	add %d5,-1
8000d0f4:	01 f5 03 f6 	addsc.a %a15,%a15,%d5,3
8000d0f8:	df 02 57 00 	jeq %d2,0,8000d1a6 <_dtoa_r+0x5f2>
8000d0fc:	b7 00 a9 4a 	imask %e4,0,21,9
8000d100:	09 f6 40 09 	ld.d %e6,[%a15]
8000d104:	6d ff ab ed 	call 8000ac5a <__divdf3>
8000d108:	0b ef 10 68 	mov %e6,%d15,%d14
8000d10c:	0b 23 10 48 	mov %e4,%d3,%d2
8000d110:	6d ff b3 ec 	call 8000aa76 <__subdf3>
8000d114:	d8 03       	ld.a %a15,[%sp]12
8000d116:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d11a:	0b cd 10 48 	mov %e4,%d13,%d12
8000d11e:	80 fe       	mov.d %d14,%a15
8000d120:	6d 00 6c 0a 	call 8000e5f8 <__fixdfsi>
8000d124:	02 24       	mov %d4,%d2
8000d126:	02 2f       	mov %d15,%d2
8000d128:	6d ff 25 ee 	call 8000ad72 <__floatsidf>
8000d12c:	0b cd 10 48 	mov %e4,%d13,%d12
8000d130:	0b 23 10 68 	mov %e6,%d3,%d2
8000d134:	c2 1e       	add %d14,1
8000d136:	6d ff a0 ec 	call 8000aa76 <__subdf3>
8000d13a:	1b 0f 03 50 	addi %d5,%d15,48
8000d13e:	28 05       	st.b [%a15]0,%d5
8000d140:	0b ab 10 68 	mov %e6,%d11,%d10
8000d144:	0b 23 10 48 	mov %e4,%d3,%d2
8000d148:	0b 23 10 88 	mov %e8,%d3,%d2
8000d14c:	6d 00 36 0a 	call 8000e5b8 <__ltdf2>
8000d150:	bf 02 86 03 	jlt %d2,0,8000d85c <_dtoa_r+0xca8>
8000d154:	b7 00 2a 4a 	imask %e4,0,20,10
8000d158:	0b 89 10 68 	mov %e6,%d9,%d8
8000d15c:	6d ff 8d ec 	call 8000aa76 <__subdf3>
8000d160:	0b ab 10 68 	mov %e6,%d11,%d10
8000d164:	0b 23 10 48 	mov %e4,%d3,%d2
8000d168:	6d 00 28 0a 	call 8000e5b8 <__ltdf2>
8000d16c:	bf 02 ea 00 	jlt %d2,0,8000d340 <_dtoa_r+0x78c>
8000d170:	19 a3 0c 00 	ld.w %d3,[%sp]12
8000d174:	02 e5       	mov %d5,%d14
8000d176:	80 cf       	mov.d %d15,%a12
8000d178:	a2 35       	sub %d5,%d3
8000d17a:	7f f5 6e 00 	jge %d5,%d15,8000d256 <_dtoa_r+0x6a2>
8000d17e:	0b ab 10 48 	mov %e4,%d11,%d10
8000d182:	82 06       	mov %d6,0
8000d184:	7b 40 02 74 	movh %d7,16420
8000d188:	6d ff 97 ec 	call 8000aab6 <__muldf3>
8000d18c:	0b 89 10 48 	mov %e4,%d9,%d8
8000d190:	82 06       	mov %d6,0
8000d192:	7b 40 02 74 	movh %d7,16420
8000d196:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d19a:	6d ff 8e ec 	call 8000aab6 <__muldf3>
8000d19e:	60 ef       	mov.a %a15,%d14
8000d1a0:	0b 23 10 c8 	mov %e12,%d3,%d2
8000d1a4:	3c bb       	j 8000d11a <_dtoa_r+0x566>
8000d1a6:	0b ef 10 68 	mov %e6,%d15,%d14
8000d1aa:	09 f4 40 09 	ld.d %e4,[%a15]
8000d1ae:	6d ff 84 ec 	call 8000aab6 <__muldf3>
8000d1b2:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d1b6:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d1ba:	30 c3       	add.a %a3,%a12
8000d1bc:	99 ac 0c 00 	ld.a %a12,[%sp]12
8000d1c0:	80 3e       	mov.d %d14,%a3
8000d1c2:	0b cd 10 48 	mov %e4,%d13,%d12
8000d1c6:	d9 cf 01 00 	lea %a15,[%a12]1
8000d1ca:	6d 00 17 0a 	call 8000e5f8 <__fixdfsi>
8000d1ce:	02 24       	mov %d4,%d2
8000d1d0:	02 2f       	mov %d15,%d2
8000d1d2:	6d ff d0 ed 	call 8000ad72 <__floatsidf>
8000d1d6:	0b cd 10 48 	mov %e4,%d13,%d12
8000d1da:	0b 23 10 68 	mov %e6,%d3,%d2
8000d1de:	6d ff 4c ec 	call 8000aa76 <__subdf3>
8000d1e2:	1b 0f 03 50 	addi %d5,%d15,48
8000d1e6:	0b 23 10 88 	mov %e8,%d3,%d2
8000d1ea:	80 f2       	mov.d %d2,%a15
8000d1ec:	34 c5       	st.b [%a12],%d5
8000d1ee:	5f e2 29 80 	jne %d2,%d14,8000d240 <_dtoa_r+0x68c>
8000d1f2:	0b ab 10 48 	mov %e4,%d11,%d10
8000d1f6:	b7 00 a9 6a 	imask %e6,0,21,9
8000d1fa:	6d ff 22 ec 	call 8000aa3e <__adddf3>
8000d1fe:	0b 89 10 48 	mov %e4,%d9,%d8
8000d202:	0b 23 10 68 	mov %e6,%d3,%d2
8000d206:	6d 00 99 09 	call 8000e538 <__gtdf2>
8000d20a:	ff 12 9b 00 	jge %d2,1,8000d340 <_dtoa_r+0x78c>
8000d20e:	b7 00 a9 4a 	imask %e4,0,21,9
8000d212:	0b ab 10 68 	mov %e6,%d11,%d10
8000d216:	6d ff 30 ec 	call 8000aa76 <__subdf3>
8000d21a:	0b 89 10 48 	mov %e4,%d9,%d8
8000d21e:	0b 23 10 68 	mov %e6,%d3,%d2
8000d222:	6d 00 cb 09 	call 8000e5b8 <__ltdf2>
8000d226:	ff 02 18 00 	jge %d2,0,8000d256 <_dtoa_r+0x6a2>
8000d22a:	60 e2       	mov.a %a2,%d14
8000d22c:	60 ef       	mov.a %a15,%d14
8000d22e:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000d232:	b0 ff       	add.a %a15,-1
8000d234:	8b 0f 03 f2 	eq %d15,%d15,48
8000d238:	df 0f 12 03 	jeq %d15,0,8000d85c <_dtoa_r+0xca8>
8000d23c:	80 fe       	mov.d %d14,%a15
8000d23e:	3c f6       	j 8000d22a <_dtoa_r+0x676>
8000d240:	0b 89 10 48 	mov %e4,%d9,%d8
8000d244:	82 06       	mov %d6,0
8000d246:	7b 40 02 74 	movh %d7,16420
8000d24a:	6d ff 36 ec 	call 8000aab6 <__muldf3>
8000d24e:	40 fc       	mov.aa %a12,%a15
8000d250:	0b 23 10 c8 	mov %e12,%d3,%d2
8000d254:	3c b7       	j 8000d1c2 <_dtoa_r+0x60e>
8000d256:	09 ac 40 19 	ld.d %e12,[%sp]64
8000d25a:	19 a3 14 10 	ld.w %d3,[%sp]84
8000d25e:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d262:	8b 03 80 52 	ge %d5,%d3,0
8000d266:	8b f2 40 54 	and.lt %d5,%d2,15
8000d26a:	df 05 9e 00 	jeq %d5,0,8000d3a6 <_dtoa_r+0x7f2>
8000d26e:	91 00 00 f8 	movh.a %a15,32768
8000d272:	d9 ff 0c 01 	lea %a15,[%a15]4108 <8000100c <__mprec_tens>>
8000d276:	19 a3 10 00 	ld.w %d3,[%sp]16 <8000100c <__mprec_tens>>
8000d27a:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000d27e:	19 a2 28 00 	ld.w %d2,[%sp]40
8000d282:	fa 13       	lt %d15,%d3,1
8000d284:	87 f2 1f f0 	and.t %d15,%d2,31,%d15,0
8000d288:	09 f8 40 09 	ld.d %e8,[%a15]
8000d28c:	6e 16       	jz %d15,8000d2b8 <_dtoa_r+0x704>
8000d28e:	df 03 a4 81 	jne %d3,0,8000d5d6 <_dtoa_r+0xa22>
8000d292:	0b 89 10 48 	mov %e4,%d9,%d8
8000d296:	82 06       	mov %d6,0
8000d298:	7b 40 01 74 	movh %d7,16404
8000d29c:	6d ff 0d ec 	call 8000aab6 <__muldf3>
8000d2a0:	0b cd 10 68 	mov %e6,%d13,%d12
8000d2a4:	0b 23 10 48 	mov %e4,%d3,%d2
8000d2a8:	a0 0c       	mov.a %a12,0
8000d2aa:	6d 00 67 09 	call 8000e578 <__gedf2>
8000d2ae:	a0 0f       	mov.a %a15,0
8000d2b0:	ff 02 95 01 	jge %d2,0,8000d5da <_dtoa_r+0xa26>
8000d2b4:	1d 00 9d 01 	j 8000d5ee <_dtoa_r+0xa3a>
8000d2b8:	d8 03       	ld.a %a15,[%sp]12
8000d2ba:	0b cd 10 a8 	mov %e10,%d13,%d12
8000d2be:	0b 89 10 68 	mov %e6,%d9,%d8
8000d2c2:	0b ab 10 48 	mov %e4,%d11,%d10
8000d2c6:	80 fe       	mov.d %d14,%a15
8000d2c8:	6d ff c9 ec 	call 8000ac5a <__divdf3>
8000d2cc:	0b 23 10 48 	mov %e4,%d3,%d2
8000d2d0:	c2 1e       	add %d14,1
8000d2d2:	6d 00 93 09 	call 8000e5f8 <__fixdfsi>
8000d2d6:	02 24       	mov %d4,%d2
8000d2d8:	02 2f       	mov %d15,%d2
8000d2da:	6d ff 4c ed 	call 8000ad72 <__floatsidf>
8000d2de:	0b 89 10 68 	mov %e6,%d9,%d8
8000d2e2:	0b 23 10 48 	mov %e4,%d3,%d2
8000d2e6:	6d ff e8 eb 	call 8000aab6 <__muldf3>
8000d2ea:	0b ab 10 48 	mov %e4,%d11,%d10
8000d2ee:	0b 23 10 68 	mov %e6,%d3,%d2
8000d2f2:	6d ff c2 eb 	call 8000aa76 <__subdf3>
8000d2f6:	0b 23 10 48 	mov %e4,%d3,%d2
8000d2fa:	1b 0f 03 30 	addi %d3,%d15,48
8000d2fe:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d302:	28 03       	st.b [%a15]0,%d3
8000d304:	02 e3       	mov %d3,%d14
8000d306:	a2 23       	sub %d3,%d2
8000d308:	19 a2 10 00 	ld.w %d2,[%sp]16
8000d30c:	5f 23 3c 80 	jne %d3,%d2,8000d384 <_dtoa_r+0x7d0>
8000d310:	0b 45 10 68 	mov %e6,%d5,%d4
8000d314:	6d ff 95 eb 	call 8000aa3e <__adddf3>
8000d318:	0b 89 10 68 	mov %e6,%d9,%d8
8000d31c:	0b 23 10 48 	mov %e4,%d3,%d2
8000d320:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d324:	6d 00 0a 09 	call 8000e538 <__gtdf2>
8000d328:	4e 2e       	jgtz %d2,8000d344 <_dtoa_r+0x790>
8000d32a:	0b ab 10 48 	mov %e4,%d11,%d10
8000d32e:	0b 89 10 68 	mov %e6,%d9,%d8
8000d332:	6d 00 c3 08 	call 8000e4b8 <__eqdf2>
8000d336:	df 02 95 82 	jne %d2,0,8000d860 <_dtoa_r+0xcac>
8000d33a:	ae 05       	jnz.t %d15,0,8000d344 <_dtoa_r+0x790>
8000d33c:	1d 00 92 02 	j 8000d860 <_dtoa_r+0xcac>
8000d340:	58 0c       	ld.w %d15,[%sp]48
8000d342:	78 02       	st.w [%sp]8,%d15
8000d344:	58 03       	ld.w %d15,[%sp]12
8000d346:	a2 ef       	sub %d15,%d14
8000d348:	46 0f       	not %d15
8000d34a:	60 e2       	mov.a %a2,%d14
8000d34c:	60 ef       	mov.a %a15,%d14
8000d34e:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000d352:	b0 ff       	add.a %a15,-1
8000d354:	8b 93 03 32 	eq %d3,%d3,57
8000d358:	df 03 11 00 	jeq %d3,0,8000d37a <_dtoa_r+0x7c6>
8000d35c:	9f 0f 0d 80 	jned %d15,0,8000d376 <_dtoa_r+0x7c2>
8000d360:	19 a3 08 00 	ld.w %d3,[%sp]8
8000d364:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d368:	c2 13       	add %d3,1
8000d36a:	da 30       	mov %d15,48
8000d36c:	59 a3 08 00 	st.w [%sp]8,%d3
8000d370:	2c 30       	st.b [%a3]0,%d15
8000d372:	40 3f       	mov.aa %a15,%a3
8000d374:	3c 03       	j 8000d37a <_dtoa_r+0x7c6>
8000d376:	80 fe       	mov.d %d14,%a15
8000d378:	3c e9       	j 8000d34a <_dtoa_r+0x796>
8000d37a:	0c f0       	ld.bu %d15,[%a15]0
8000d37c:	c2 1f       	add %d15,1
8000d37e:	28 0f       	st.b [%a15]0,%d15
8000d380:	1d 00 70 02 	j 8000d860 <_dtoa_r+0xcac>
8000d384:	82 06       	mov %d6,0
8000d386:	7b 40 02 74 	movh %d7,16420
8000d38a:	6d ff 96 eb 	call 8000aab6 <__muldf3>
8000d38e:	d2 06       	mov %e6,0
8000d390:	0b 23 10 48 	mov %e4,%d3,%d2
8000d394:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d398:	60 ef       	mov.a %a15,%d14
8000d39a:	6d 00 8f 08 	call 8000e4b8 <__eqdf2>
8000d39e:	df 02 90 ff 	jne %d2,0,8000d2be <_dtoa_r+0x70a>
8000d3a2:	1d 00 5f 02 	j 8000d860 <_dtoa_r+0xcac>
8000d3a6:	19 a2 24 00 	ld.w %d2,[%sp]36
8000d3aa:	58 08       	ld.w %d15,[%sp]32
8000d3ac:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d3b0:	a0 0f       	mov.a %a15,0
8000d3b2:	df 02 3b 00 	jeq %d2,0,8000d428 <_dtoa_r+0x874>
8000d3b6:	58 07       	ld.w %d15,[%sp]28
8000d3b8:	ff 2f 10 00 	jge %d15,2,8000d3d8 <_dtoa_r+0x824>
8000d3bc:	58 13       	ld.w %d15,[%sp]76
8000d3be:	6e 05       	jz %d15,8000d3c8 <_dtoa_r+0x814>
8000d3c0:	1b 33 43 30 	addi %d3,%d3,1075
8000d3c4:	58 08       	ld.w %d15,[%sp]32
8000d3c6:	3c 22       	j 8000d40a <_dtoa_r+0x856>
8000d3c8:	19 a3 10 10 	ld.w %d3,[%sp]80
8000d3cc:	58 08       	ld.w %d15,[%sp]32
8000d3ce:	8b 63 03 31 	rsub %d3,%d3,54
8000d3d2:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d3d6:	3c 1a       	j 8000d40a <_dtoa_r+0x856>
8000d3d8:	58 04       	ld.w %d15,[%sp]16
8000d3da:	19 a2 20 00 	ld.w %d2,[%sp]32
8000d3de:	c2 ff       	add %d15,-1
8000d3e0:	3f f2 04 00 	jlt %d2,%d15,8000d3e8 <_dtoa_r+0x834>
8000d3e4:	5a f2       	sub %d15,%d2,%d15
8000d3e6:	3c 0b       	j 8000d3fc <_dtoa_r+0x848>
8000d3e8:	19 a3 20 00 	ld.w %d3,[%sp]32
8000d3ec:	78 08       	st.w [%sp]32,%d15
8000d3ee:	52 32       	sub %d2,%d15,%d3
8000d3f0:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d3f4:	82 0f       	mov %d15,0
8000d3f6:	42 23       	add %d3,%d2
8000d3f8:	59 a3 34 00 	st.w [%sp]52,%d3
8000d3fc:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d400:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d404:	ce 33       	jgez %d3,8000d40a <_dtoa_r+0x856>
8000d406:	a2 38       	sub %d8,%d3
8000d408:	82 03       	mov %d3,0
8000d40a:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d40e:	40 d4       	mov.aa %a4,%a13
8000d410:	42 32       	add %d2,%d3
8000d412:	59 a2 14 00 	st.w [%sp]20,%d2
8000d416:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d41a:	82 14       	mov %d4,1
8000d41c:	42 32       	add %d2,%d3
8000d41e:	59 a2 18 00 	st.w [%sp]24,%d2
8000d422:	6d 00 1b 03 	call 8000da58 <__i2b>
8000d426:	40 2f       	mov.aa %a15,%a2
8000d428:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d42c:	8b 18 80 32 	ge %d3,%d8,1
8000d430:	8b 12 80 34 	and.ge %d3,%d2,1
8000d434:	76 3e       	jz %d3,8000d450 <_dtoa_r+0x89c>
8000d436:	0b 82 80 31 	min %d3,%d2,%d8
8000d43a:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d43e:	a2 38       	sub %d8,%d3
8000d440:	a2 32       	sub %d2,%d3
8000d442:	59 a2 14 00 	st.w [%sp]20,%d2
8000d446:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d44a:	a2 32       	sub %d2,%d3
8000d44c:	59 a2 18 00 	st.w [%sp]24,%d2
8000d450:	19 a3 20 00 	ld.w %d3,[%sp]32
8000d454:	bf 13 27 00 	jlt %d3,1,8000d4a2 <_dtoa_r+0x8ee>
8000d458:	19 a2 24 00 	ld.w %d2,[%sp]36
8000d45c:	df 02 1c 00 	jeq %d2,0,8000d494 <_dtoa_r+0x8e0>
8000d460:	bf 1f 13 00 	jlt %d15,1,8000d486 <_dtoa_r+0x8d2>
8000d464:	40 f5       	mov.aa %a5,%a15
8000d466:	02 f4       	mov %d4,%d15
8000d468:	40 d4       	mov.aa %a4,%a13
8000d46a:	6d 00 8c 03 	call 8000db82 <__pow5mult>
8000d46e:	40 e6       	mov.aa %a6,%a14
8000d470:	40 d4       	mov.aa %a4,%a13
8000d472:	40 25       	mov.aa %a5,%a2
8000d474:	40 2f       	mov.aa %a15,%a2
8000d476:	6d 00 f9 02 	call 8000da68 <__multiply>
8000d47a:	40 e5       	mov.aa %a5,%a14
8000d47c:	40 2c       	mov.aa %a12,%a2
8000d47e:	40 d4       	mov.aa %a4,%a13
8000d480:	6d 00 4e 02 	call 8000d91c <_Bfree>
8000d484:	40 ce       	mov.aa %a14,%a12
8000d486:	19 a4 20 00 	ld.w %d4,[%sp]32
8000d48a:	40 d4       	mov.aa %a4,%a13
8000d48c:	a2 f4       	sub %d4,%d15
8000d48e:	40 e5       	mov.aa %a5,%a14
8000d490:	76 49       	jz %d4,8000d4a2 <_dtoa_r+0x8ee>
8000d492:	3c 05       	j 8000d49c <_dtoa_r+0x8e8>
8000d494:	19 a4 20 00 	ld.w %d4,[%sp]32
8000d498:	40 d4       	mov.aa %a4,%a13
8000d49a:	40 e5       	mov.aa %a5,%a14
8000d49c:	6d 00 73 03 	call 8000db82 <__pow5mult>
8000d4a0:	40 2e       	mov.aa %a14,%a2
8000d4a2:	40 d4       	mov.aa %a4,%a13
8000d4a4:	82 14       	mov %d4,1
8000d4a6:	6d 00 d9 02 	call 8000da58 <__i2b>
8000d4aa:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d4ae:	40 2c       	mov.aa %a12,%a2
8000d4b0:	8e 3c       	jlez %d3,8000d4c8 <_dtoa_r+0x914>
8000d4b2:	40 d4       	mov.aa %a4,%a13
8000d4b4:	40 25       	mov.aa %a5,%a2
8000d4b6:	02 34       	mov %d4,%d3
8000d4b8:	6d 00 65 03 	call 8000db82 <__pow5mult>
8000d4bc:	58 07       	ld.w %d15,[%sp]28
8000d4be:	40 2c       	mov.aa %a12,%a2
8000d4c0:	82 09       	mov %d9,0
8000d4c2:	ff 2f 1f 00 	jge %d15,2,8000d500 <_dtoa_r+0x94c>
8000d4c6:	3c 06       	j 8000d4d2 <_dtoa_r+0x91e>
8000d4c8:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d4cc:	82 09       	mov %d9,0
8000d4ce:	ff 22 15 00 	jge %d2,2,8000d4f8 <_dtoa_r+0x944>
8000d4d2:	82 09       	mov %d9,0
8000d4d4:	df 0c 12 80 	jne %d12,0,8000d4f8 <_dtoa_r+0x944>
8000d4d8:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000d4dc:	ee 0e       	jnz %d15,8000d4f8 <_dtoa_r+0x944>
8000d4de:	7b 00 ff f7 	movh %d15,32752
8000d4e2:	26 df       	and %d15,%d13
8000d4e4:	6e 0a       	jz %d15,8000d4f8 <_dtoa_r+0x944>
8000d4e6:	19 a3 14 00 	ld.w %d3,[%sp]20
8000d4ea:	58 06       	ld.w %d15,[%sp]24
8000d4ec:	c2 13       	add %d3,1
8000d4ee:	c2 1f       	add %d15,1
8000d4f0:	59 a3 14 00 	st.w [%sp]20,%d3
8000d4f4:	78 06       	st.w [%sp]24,%d15
8000d4f6:	82 19       	mov %d9,1
8000d4f8:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d4fc:	82 12       	mov %d2,1
8000d4fe:	76 39       	jz %d3,8000d510 <_dtoa_r+0x95c>
8000d500:	4c c4       	ld.w %d15,[%a12]16
8000d502:	90 c3       	addsc.a %a3,%a12,%d15,2
8000d504:	19 34 10 00 	ld.w %d4,[%a3]16
8000d508:	6d 00 54 02 	call 8000d9b0 <__hi0bits>
8000d50c:	8b 02 02 21 	rsub %d2,%d2,32
8000d510:	58 06       	ld.w %d15,[%sp]24
8000d512:	42 2f       	add %d15,%d2
8000d514:	16 1f       	and %d15,31
8000d516:	6e 0a       	jz %d15,8000d52a <_dtoa_r+0x976>
8000d518:	8b 0f 02 31 	rsub %d3,%d15,32
8000d51c:	8b cf 01 f1 	rsub %d15,%d15,28
8000d520:	ff 53 07 00 	jge %d3,5,8000d52e <_dtoa_r+0x97a>
8000d524:	df 43 10 00 	jeq %d3,4,8000d544 <_dtoa_r+0x990>
8000d528:	02 3f       	mov %d15,%d3
8000d52a:	1b cf 01 f0 	addi %d15,%d15,28
8000d52e:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d532:	19 a3 18 00 	ld.w %d3,[%sp]24
8000d536:	42 f2       	add %d2,%d15
8000d538:	42 f3       	add %d3,%d15
8000d53a:	59 a2 14 00 	st.w [%sp]20,%d2
8000d53e:	42 f8       	add %d8,%d15
8000d540:	59 a3 18 00 	st.w [%sp]24,%d3
8000d544:	58 05       	ld.w %d15,[%sp]20
8000d546:	8e f7       	jlez %d15,8000d554 <_dtoa_r+0x9a0>
8000d548:	40 e5       	mov.aa %a5,%a14
8000d54a:	40 d4       	mov.aa %a4,%a13
8000d54c:	02 f4       	mov %d4,%d15
8000d54e:	6d 00 58 03 	call 8000dbfe <__lshift>
8000d552:	40 2e       	mov.aa %a14,%a2
8000d554:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d558:	8e 27       	jlez %d2,8000d566 <_dtoa_r+0x9b2>
8000d55a:	40 c5       	mov.aa %a5,%a12
8000d55c:	40 d4       	mov.aa %a4,%a13
8000d55e:	02 24       	mov %d4,%d2
8000d560:	6d 00 4f 03 	call 8000dbfe <__lshift>
8000d564:	40 2c       	mov.aa %a12,%a2
8000d566:	19 a3 3c 00 	ld.w %d3,[%sp]60
8000d56a:	df 03 20 00 	jeq %d3,0,8000d5aa <_dtoa_r+0x9f6>
8000d56e:	40 e4       	mov.aa %a4,%a14
8000d570:	40 c5       	mov.aa %a5,%a12
8000d572:	6d 00 a3 03 	call 8000dcb8 <__mcmp>
8000d576:	ff 02 1a 00 	jge %d2,0,8000d5aa <_dtoa_r+0x9f6>
8000d57a:	58 02       	ld.w %d15,[%sp]8
8000d57c:	40 e5       	mov.aa %a5,%a14
8000d57e:	c2 ff       	add %d15,-1
8000d580:	40 d4       	mov.aa %a4,%a13
8000d582:	fb a0 00 40 	mov %e4,10
8000d586:	78 02       	st.w [%sp]8,%d15
8000d588:	6d 00 d3 01 	call 8000d92e <__multadd>
8000d58c:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000d590:	19 a3 24 00 	ld.w %d3,[%sp]36
8000d594:	59 a2 10 00 	st.w [%sp]16,%d2
8000d598:	40 2e       	mov.aa %a14,%a2
8000d59a:	76 38       	jz %d3,8000d5aa <_dtoa_r+0x9f6>
8000d59c:	40 f5       	mov.aa %a5,%a15
8000d59e:	40 d4       	mov.aa %a4,%a13
8000d5a0:	fb a0 00 40 	mov %e4,10
8000d5a4:	6d 00 c5 01 	call 8000d92e <__multadd>
8000d5a8:	40 2f       	mov.aa %a15,%a2
8000d5aa:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d5ae:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d5b2:	8b 32 80 f2 	ge %d15,%d2,3
8000d5b6:	8b 13 40 f4 	and.lt %d15,%d3,1
8000d5ba:	6e 2a       	jz %d15,8000d60e <_dtoa_r+0xa5a>
8000d5bc:	f6 3f       	jnz %d3,8000d5da <_dtoa_r+0xa26>
8000d5be:	40 c5       	mov.aa %a5,%a12
8000d5c0:	40 d4       	mov.aa %a4,%a13
8000d5c2:	d2 54       	mov %e4,5
8000d5c4:	6d 00 b5 01 	call 8000d92e <__multadd>
8000d5c8:	40 e4       	mov.aa %a4,%a14
8000d5ca:	40 25       	mov.aa %a5,%a2
8000d5cc:	40 2c       	mov.aa %a12,%a2
8000d5ce:	6d 00 75 03 	call 8000dcb8 <__mcmp>
8000d5d2:	4e 2e       	jgtz %d2,8000d5ee <_dtoa_r+0xa3a>
8000d5d4:	3c 03       	j 8000d5da <_dtoa_r+0xa26>
8000d5d6:	a0 0c       	mov.a %a12,0
8000d5d8:	a0 0f       	mov.a %a15,0
8000d5da:	58 0a       	ld.w %d15,[%sp]40
8000d5dc:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000d5e0:	46 0f       	not %d15
8000d5e2:	78 02       	st.w [%sp]8,%d15
8000d5e4:	3c 11       	j 8000d606 <_dtoa_r+0xa52>
8000d5e6:	58 0c       	ld.w %d15,[%sp]48
8000d5e8:	a0 0c       	mov.a %a12,0
8000d5ea:	78 02       	st.w [%sp]8,%d15
8000d5ec:	a0 0f       	mov.a %a15,0
8000d5ee:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d5f2:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d5f6:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000d5fa:	da 31       	mov %d15,49
8000d5fc:	c2 12       	add %d2,1
8000d5fe:	c2 1e       	add %d14,1
8000d600:	2c 30       	st.b [%a3]0,%d15
8000d602:	59 a2 08 00 	st.w [%sp]8,%d2
8000d606:	80 f8       	mov.d %d8,%a15
8000d608:	a0 0f       	mov.a %a15,0
8000d60a:	1d 00 14 01 	j 8000d832 <_dtoa_r+0xc7e>
8000d60e:	19 a3 24 00 	ld.w %d3,[%sp]36
8000d612:	f6 35       	jnz %d3,8000d61c <_dtoa_r+0xa68>
8000d614:	19 a8 0c 00 	ld.w %d8,[%sp]12
8000d618:	1d 00 c2 00 	j 8000d79c <_dtoa_r+0xbe8>
8000d61c:	8e 87       	jlez %d8,8000d62a <_dtoa_r+0xa76>
8000d61e:	40 f5       	mov.aa %a5,%a15
8000d620:	40 d4       	mov.aa %a4,%a13
8000d622:	02 84       	mov %d4,%d8
8000d624:	6d 00 ed 02 	call 8000dbfe <__lshift>
8000d628:	40 2f       	mov.aa %a15,%a2
8000d62a:	80 f8       	mov.d %d8,%a15
8000d62c:	df 09 16 00 	jeq %d9,0,8000d658 <_dtoa_r+0xaa4>
8000d630:	40 d4       	mov.aa %a4,%a13
8000d632:	48 14       	ld.w %d4,[%a15]4
8000d634:	6d 00 49 01 	call 8000d8c6 <_Balloc>
8000d638:	48 44       	ld.w %d4,[%a15]16
8000d63a:	d9 24 0c 00 	lea %a4,[%a2]12
8000d63e:	c2 24       	add %d4,2
8000d640:	d9 f5 0c 00 	lea %a5,[%a15]12
8000d644:	06 24       	sh %d4,2
8000d646:	80 2f       	mov.d %d15,%a2
8000d648:	6d 00 31 01 	call 8000d8aa <memcpy>
8000d64c:	60 f5       	mov.a %a5,%d15
8000d64e:	40 d4       	mov.aa %a4,%a13
8000d650:	82 14       	mov %d4,1
8000d652:	6d 00 d6 02 	call 8000dbfe <__lshift>
8000d656:	80 28       	mov.d %d8,%a2
8000d658:	19 a9 0c 00 	ld.w %d9,[%sp]12
8000d65c:	8f 1c 00 a1 	and %d10,%d12,1
8000d660:	40 e4       	mov.aa %a4,%a14
8000d662:	40 c5       	mov.aa %a5,%a12
8000d664:	6d ff 1a fa 	call 8000ca98 <quorem>
8000d668:	40 e4       	mov.aa %a4,%a14
8000d66a:	40 f5       	mov.aa %a5,%a15
8000d66c:	02 2e       	mov %d14,%d2
8000d66e:	1b 02 03 f0 	addi %d15,%d2,48
8000d672:	6d 00 23 03 	call 8000dcb8 <__mcmp>
8000d676:	60 86       	mov.a %a6,%d8
8000d678:	40 d4       	mov.aa %a4,%a13
8000d67a:	40 c5       	mov.aa %a5,%a12
8000d67c:	02 2b       	mov %d11,%d2
8000d67e:	6d 00 3e 03 	call 8000dcfa <__mdiff>
8000d682:	19 22 0c 00 	ld.w %d2,[%a2]12
8000d686:	80 2d       	mov.d %d13,%a2
8000d688:	82 1c       	mov %d12,1
8000d68a:	f6 26       	jnz %d2,8000d696 <_dtoa_r+0xae2>
8000d68c:	40 e4       	mov.aa %a4,%a14
8000d68e:	40 25       	mov.aa %a5,%a2
8000d690:	6d 00 14 03 	call 8000dcb8 <__mcmp>
8000d694:	02 2c       	mov %d12,%d2
8000d696:	60 d5       	mov.a %a5,%d13
8000d698:	40 d4       	mov.aa %a4,%a13
8000d69a:	6d 00 41 01 	call 8000d91c <_Bfree>
8000d69e:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000d6a2:	1b 19 00 d0 	addi %d13,%d9,1
8000d6a6:	a6 c3       	or %d3,%d12
8000d6a8:	f6 3f       	jnz %d3,8000d6c6 <_dtoa_r+0xb12>
8000d6aa:	f6 ae       	jnz %d10,8000d6c6 <_dtoa_r+0xb12>
8000d6ac:	8b 9f 03 32 	eq %d3,%d15,57
8000d6b0:	40 e2       	mov.aa %a2,%a14
8000d6b2:	df 03 3a 80 	jne %d3,0,8000d726 <_dtoa_r+0xb72>
8000d6b6:	1b 1e 03 20 	addi %d2,%d14,49
8000d6ba:	8b 1b 80 b2 	ge %d11,%d11,1
8000d6be:	2b f2 40 fb 	sel %d15,%d11,%d2,%d15
8000d6c2:	02 de       	mov %d14,%d13
8000d6c4:	3c 37       	j 8000d732 <_dtoa_r+0xb7e>
8000d6c6:	ce b5       	jgez %d11,8000d6d0 <_dtoa_r+0xb1c>
8000d6c8:	02 fa       	mov %d10,%d15
8000d6ca:	40 e2       	mov.aa %a2,%a14
8000d6cc:	4e ca       	jgtz %d12,8000d6e0 <_dtoa_r+0xb2c>
8000d6ce:	3c 1e       	j 8000d70a <_dtoa_r+0xb56>
8000d6d0:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d6d4:	a6 2b       	or %d11,%d2
8000d6d6:	df 0b 20 80 	jne %d11,0,8000d716 <_dtoa_r+0xb62>
8000d6da:	df 0a 1e 80 	jne %d10,0,8000d716 <_dtoa_r+0xb62>
8000d6de:	3c f5       	j 8000d6c8 <_dtoa_r+0xb14>
8000d6e0:	40 d4       	mov.aa %a4,%a13
8000d6e2:	40 e5       	mov.aa %a5,%a14
8000d6e4:	82 14       	mov %d4,1
8000d6e6:	6d 00 8c 02 	call 8000dbfe <__lshift>
8000d6ea:	40 c5       	mov.aa %a5,%a12
8000d6ec:	40 24       	mov.aa %a4,%a2
8000d6ee:	b5 a2 04 00 	st.a [%sp]4,%a2
8000d6f2:	6d 00 e3 02 	call 8000dcb8 <__mcmp>
8000d6f6:	99 a2 04 00 	ld.a %a2,[%sp]4
8000d6fa:	4e 23       	jgtz %d2,8000d700 <_dtoa_r+0xb4c>
8000d6fc:	f6 27       	jnz %d2,8000d70a <_dtoa_r+0xb56>
8000d6fe:	2e 06       	jz.t %d15,0,8000d70a <_dtoa_r+0xb56>
8000d700:	8b 9f 03 32 	eq %d3,%d15,57
8000d704:	df 03 11 80 	jne %d3,0,8000d726 <_dtoa_r+0xb72>
8000d708:	92 1a       	add %d10,%d15,1
8000d70a:	60 93       	mov.a %a3,%d9
8000d70c:	02 de       	mov %d14,%d13
8000d70e:	34 3a       	st.b [%a3],%d10
8000d710:	40 2e       	mov.aa %a14,%a2
8000d712:	1d 00 90 00 	j 8000d832 <_dtoa_r+0xc7e>
8000d716:	bf 1c 11 00 	jlt %d12,1,8000d738 <_dtoa_r+0xb84>
8000d71a:	8b 9f 23 32 	ne %d3,%d15,57
8000d71e:	40 e2       	mov.aa %a2,%a14
8000d720:	02 de       	mov %d14,%d13
8000d722:	c2 1f       	add %d15,1
8000d724:	f6 37       	jnz %d3,8000d732 <_dtoa_r+0xb7e>
8000d726:	60 93       	mov.a %a3,%d9
8000d728:	da 39       	mov %d15,57
8000d72a:	02 de       	mov %d14,%d13
8000d72c:	2c 30       	st.b [%a3]0,%d15
8000d72e:	40 2e       	mov.aa %a14,%a2
8000d730:	3c 5d       	j 8000d7ea <_dtoa_r+0xc36>
8000d732:	60 92       	mov.a %a2,%d9
8000d734:	2c 20       	st.b [%a2]0,%d15
8000d736:	3c 7e       	j 8000d832 <_dtoa_r+0xc7e>
8000d738:	60 93       	mov.a %a3,%d9
8000d73a:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d73e:	02 d5       	mov %d5,%d13
8000d740:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d744:	2c 30       	st.b [%a3]0,%d15
8000d746:	a2 25       	sub %d5,%d2
8000d748:	02 de       	mov %d14,%d13
8000d74a:	5f 35 41 00 	jeq %d5,%d3,8000d7cc <_dtoa_r+0xc18>
8000d74e:	40 e5       	mov.aa %a5,%a14
8000d750:	40 d4       	mov.aa %a4,%a13
8000d752:	fb a0 00 40 	mov %e4,10
8000d756:	6d 00 ec 00 	call 8000d92e <__multadd>
8000d75a:	80 ff       	mov.d %d15,%a15
8000d75c:	40 2e       	mov.aa %a14,%a2
8000d75e:	40 d4       	mov.aa %a4,%a13
8000d760:	40 f5       	mov.aa %a5,%a15
8000d762:	fb a0 00 40 	mov %e4,10
8000d766:	7e 86       	jne %d15,%d8,8000d772 <_dtoa_r+0xbbe>
8000d768:	6d 00 e3 00 	call 8000d92e <__multadd>
8000d76c:	40 2f       	mov.aa %a15,%a2
8000d76e:	80 28       	mov.d %d8,%a2
8000d770:	3c 0b       	j 8000d786 <_dtoa_r+0xbd2>
8000d772:	6d 00 de 00 	call 8000d92e <__multadd>
8000d776:	60 85       	mov.a %a5,%d8
8000d778:	40 d4       	mov.aa %a4,%a13
8000d77a:	fb a0 00 40 	mov %e4,10
8000d77e:	40 2f       	mov.aa %a15,%a2
8000d780:	6d 00 d7 00 	call 8000d92e <__multadd>
8000d784:	80 28       	mov.d %d8,%a2
8000d786:	02 d9       	mov %d9,%d13
8000d788:	1d ff 6c ff 	j 8000d660 <_dtoa_r+0xaac>
8000d78c:	40 e5       	mov.aa %a5,%a14
8000d78e:	40 d4       	mov.aa %a4,%a13
8000d790:	fb a0 00 40 	mov %e4,10
8000d794:	6d 00 cd 00 	call 8000d92e <__multadd>
8000d798:	02 98       	mov %d8,%d9
8000d79a:	40 2e       	mov.aa %a14,%a2
8000d79c:	40 e4       	mov.aa %a4,%a14
8000d79e:	40 c5       	mov.aa %a5,%a12
8000d7a0:	6d ff 7c f9 	call 8000ca98 <quorem>
8000d7a4:	1b 18 00 90 	addi %d9,%d8,1
8000d7a8:	1b 02 03 f0 	addi %d15,%d2,48
8000d7ac:	60 82       	mov.a %a2,%d8
8000d7ae:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d7b2:	02 95       	mov %d5,%d9
8000d7b4:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d7b8:	2c 20       	st.b [%a2]0,%d15
8000d7ba:	a2 25       	sub %d5,%d2
8000d7bc:	3f 35 e8 7f 	jlt %d5,%d3,8000d78c <_dtoa_r+0xbd8>
8000d7c0:	8b 13 40 33 	max %d3,%d3,1
8000d7c4:	02 2e       	mov %d14,%d2
8000d7c6:	80 f8       	mov.d %d8,%a15
8000d7c8:	42 3e       	add %d14,%d3
8000d7ca:	a0 0f       	mov.a %a15,0
8000d7cc:	40 e5       	mov.aa %a5,%a14
8000d7ce:	40 d4       	mov.aa %a4,%a13
8000d7d0:	82 14       	mov %d4,1
8000d7d2:	6d 00 16 02 	call 8000dbfe <__lshift>
8000d7d6:	40 c5       	mov.aa %a5,%a12
8000d7d8:	40 2e       	mov.aa %a14,%a2
8000d7da:	40 24       	mov.aa %a4,%a2
8000d7dc:	6d 00 6e 02 	call 8000dcb8 <__mcmp>
8000d7e0:	4e 25       	jgtz %d2,8000d7ea <_dtoa_r+0xc36>
8000d7e2:	df 02 1e 80 	jne %d2,0,8000d81e <_dtoa_r+0xc6a>
8000d7e6:	6f 0f 1c 00 	jz.t %d15,0,8000d81e <_dtoa_r+0xc6a>
8000d7ea:	58 03       	ld.w %d15,[%sp]12
8000d7ec:	a2 ef       	sub %d15,%d14
8000d7ee:	46 0f       	not %d15
8000d7f0:	60 e2       	mov.a %a2,%d14
8000d7f2:	60 e3       	mov.a %a3,%d14
8000d7f4:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000d7f8:	b0 f3       	add.a %a3,-1
8000d7fa:	8b 93 03 52 	eq %d5,%d3,57
8000d7fe:	76 5d       	jz %d5,8000d818 <_dtoa_r+0xc64>
8000d800:	9f 0f 0a 80 	jned %d15,0,8000d814 <_dtoa_r+0xc60>
8000d804:	58 02       	ld.w %d15,[%sp]8
8000d806:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d80a:	c2 1f       	add %d15,1
8000d80c:	78 02       	st.w [%sp]8,%d15
8000d80e:	da 31       	mov %d15,49
8000d810:	2c 30       	st.b [%a3]0,%d15
8000d812:	3c 10       	j 8000d832 <_dtoa_r+0xc7e>
8000d814:	80 3e       	mov.d %d14,%a3
8000d816:	3c ed       	j 8000d7f0 <_dtoa_r+0xc3c>
8000d818:	c2 13       	add %d3,1
8000d81a:	34 33       	st.b [%a3],%d3
8000d81c:	3c 0b       	j 8000d832 <_dtoa_r+0xc7e>
8000d81e:	60 e2       	mov.a %a2,%d14
8000d820:	60 e3       	mov.a %a3,%d14
8000d822:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000d826:	b0 f3       	add.a %a3,-1
8000d828:	8b 0f 03 f2 	eq %d15,%d15,48
8000d82c:	6e 03       	jz %d15,8000d832 <_dtoa_r+0xc7e>
8000d82e:	80 3e       	mov.d %d14,%a3
8000d830:	3c f7       	j 8000d81e <_dtoa_r+0xc6a>
8000d832:	40 d4       	mov.aa %a4,%a13
8000d834:	40 c5       	mov.aa %a5,%a12
8000d836:	6d 00 73 00 	call 8000d91c <_Bfree>
8000d83a:	df 08 13 00 	jeq %d8,0,8000d860 <_dtoa_r+0xcac>
8000d83e:	80 f2       	mov.d %d2,%a15
8000d840:	8b 02 20 f2 	ne %d15,%d2,0
8000d844:	0b 82 10 f2 	and.ne %d15,%d2,%d8
8000d848:	6e 05       	jz %d15,8000d852 <_dtoa_r+0xc9e>
8000d84a:	40 d4       	mov.aa %a4,%a13
8000d84c:	40 f5       	mov.aa %a5,%a15
8000d84e:	6d 00 67 00 	call 8000d91c <_Bfree>
8000d852:	60 85       	mov.a %a5,%d8
8000d854:	40 d4       	mov.aa %a4,%a13
8000d856:	6d 00 63 00 	call 8000d91c <_Bfree>
8000d85a:	3c 03       	j 8000d860 <_dtoa_r+0xcac>
8000d85c:	58 0c       	ld.w %d15,[%sp]48
8000d85e:	78 02       	st.w [%sp]8,%d15
8000d860:	40 d4       	mov.aa %a4,%a13
8000d862:	40 e5       	mov.aa %a5,%a14
8000d864:	6d 00 5c 00 	call 8000d91c <_Bfree>
8000d868:	60 e2       	mov.a %a2,%d14
8000d86a:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d86e:	99 a3 08 10 	ld.a %a3,[%sp]72
8000d872:	82 0f       	mov %d15,0
8000d874:	d8 0e       	ld.a %a15,[%sp]56
8000d876:	2c 20       	st.b [%a2]0,%d15
8000d878:	c2 12       	add %d2,1
8000d87a:	74 32       	st.w [%a3],%d2
8000d87c:	99 a2 0c 00 	ld.a %a2,[%sp]12
8000d880:	bc f2       	jz.a %a15,8000d884 <_dtoa_r+0xcd0>
8000d882:	68 0e       	st.w [%a15]0,%d14
8000d884:	00 90       	ret 
	...

8000d888 <_localeconv_r>:
8000d888:	91 00 00 28 	movh.a %a2,32768
8000d88c:	d9 22 f8 d0 	lea %a2,[%a2]3960 <80000f78 <lconv>>
8000d890:	00 90       	ret 

8000d892 <memchr>:
8000d892:	8f f4 0f 41 	and %d4,%d4,255
8000d896:	9f 05 04 80 	jned %d5,0,8000d89e <memchr+0xc>
8000d89a:	a0 02       	mov.a %a2,0
8000d89c:	00 90       	ret 
8000d89e:	0c 40       	ld.bu %d15,[%a4]0
8000d8a0:	3e 43       	jeq %d15,%d4,8000d8a6 <memchr+0x14>
8000d8a2:	b0 14       	add.a %a4,1
8000d8a4:	3c f9       	j 8000d896 <memchr+0x4>
8000d8a6:	40 42       	mov.aa %a2,%a4
8000d8a8:	00 90       	ret 

8000d8aa <memcpy>:
8000d8aa:	40 42       	mov.aa %a2,%a4
8000d8ac:	a0 0f       	mov.a %a15,0
8000d8ae:	01 f2 10 40 	add.a %a4,%a2,%a15
8000d8b2:	01 f5 10 30 	add.a %a3,%a5,%a15
8000d8b6:	9f 04 03 80 	jned %d4,0,8000d8bc <memcpy+0x12>
8000d8ba:	00 90       	ret 
8000d8bc:	79 3f 00 00 	ld.b %d15,[%a3]0
8000d8c0:	b0 1f       	add.a %a15,1
8000d8c2:	2c 40       	st.b [%a4]0,%d15
8000d8c4:	3c f5       	j 8000d8ae <memcpy+0x4>

8000d8c6 <_Balloc>:
8000d8c6:	19 42 0c 10 	ld.w %d2,[%a4]76
8000d8ca:	40 4f       	mov.aa %a15,%a4
8000d8cc:	02 4f       	mov %d15,%d4
8000d8ce:	76 29       	jz %d2,8000d8e0 <_Balloc+0x1a>
8000d8d0:	99 f3 0c 10 	ld.a %a3,[%a15]76
8000d8d4:	90 33       	addsc.a %a3,%a3,%d15,2
8000d8d6:	d4 32       	ld.a %a2,[%a3]
8000d8d8:	bc 2f       	jz.a %a2,8000d8f6 <_Balloc+0x30>
8000d8da:	4c 20       	ld.w %d15,[%a2]0
8000d8dc:	6c 30       	st.w [%a3]0,%d15
8000d8de:	3c 1b       	j 8000d914 <_Balloc+0x4e>
8000d8e0:	82 44       	mov %d4,4
8000d8e2:	3b 10 02 50 	mov %d5,33
8000d8e6:	6d 00 5c 03 	call 8000df9e <_calloc_r>
8000d8ea:	b5 f2 0c 10 	st.a [%a15]76,%a2
8000d8ee:	bd 02 f1 ff 	jnz.a %a2,8000d8d0 <_Balloc+0xa>
8000d8f2:	a0 02       	mov.a %a2,0
8000d8f4:	00 90       	ret 
8000d8f6:	82 18       	mov %d8,1
8000d8f8:	0f f8 00 80 	sh %d8,%d8,%d15
8000d8fc:	1b 58 00 50 	addi %d5,%d8,5
8000d900:	40 f4       	mov.aa %a4,%a15
8000d902:	82 14       	mov %d4,1
8000d904:	06 25       	sh %d5,2
8000d906:	6d 00 4c 03 	call 8000df9e <_calloc_r>
8000d90a:	bd 02 f4 7f 	jz.a %a2,8000d8f2 <_Balloc+0x2c>
8000d90e:	6c 21       	st.w [%a2]4,%d15
8000d910:	59 28 08 00 	st.w [%a2]8,%d8
8000d914:	82 0f       	mov %d15,0
8000d916:	6c 24       	st.w [%a2]16,%d15
8000d918:	6c 23       	st.w [%a2]12,%d15
8000d91a:	00 90       	ret 

8000d91c <_Bfree>:
8000d91c:	bc 58       	jz.a %a5,8000d92c <_Bfree+0x10>
8000d91e:	99 4f 0c 10 	ld.a %a15,[%a4]76
8000d922:	4c 51       	ld.w %d15,[%a5]4
8000d924:	90 ff       	addsc.a %a15,%a15,%d15,2
8000d926:	4c f0       	ld.w %d15,[%a15]0
8000d928:	6c 50       	st.w [%a5]0,%d15
8000d92a:	e8 05       	st.a [%a15]0,%a5
8000d92c:	00 90       	ret 

8000d92e <__multadd>:
8000d92e:	19 59 10 00 	ld.w %d9,[%a5]16
8000d932:	40 4c       	mov.aa %a12,%a4
8000d934:	9a f9       	add %d15,%d9,-1
8000d936:	8b 19 80 22 	ge %d2,%d9,1
8000d93a:	40 5f       	mov.aa %a15,%a5
8000d93c:	02 58       	mov %d8,%d5
8000d93e:	d9 53 14 00 	lea %a3,[%a5]20
8000d942:	ab 0f 80 22 	sel %d2,%d2,%d15,0
8000d946:	40 32       	mov.aa %a2,%a3
8000d948:	44 25       	ld.w %d5,[%a2+]
8000d94a:	b7 05 10 38 	insert %d3,%d5,0,16,16
8000d94e:	8f 05 1f f0 	sh %d15,%d5,-16
8000d952:	03 43 0a 38 	madd %d3,%d8,%d3,%d4
8000d956:	8f 03 1f 60 	sh %d6,%d3,-16
8000d95a:	03 4f 0a f6 	madd %d15,%d6,%d15,%d4
8000d95e:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000d962:	8f 0f 1f 80 	sh %d8,%d15,-16
8000d966:	74 33       	st.w [%a3],%d3
8000d968:	40 23       	mov.aa %a3,%a2
8000d96a:	9f 02 ee ff 	jned %d2,0,8000d946 <__multadd+0x18>
8000d96e:	df 08 1f 00 	jeq %d8,0,8000d9ac <__multadd+0x7e>
8000d972:	4c f2       	ld.w %d15,[%a15]8
8000d974:	3f f9 16 00 	jlt %d9,%d15,8000d9a0 <__multadd+0x72>
8000d978:	48 14       	ld.w %d4,[%a15]4
8000d97a:	40 c4       	mov.aa %a4,%a12
8000d97c:	c2 14       	add %d4,1
8000d97e:	6d ff a4 ff 	call 8000d8c6 <_Balloc>
8000d982:	48 44       	ld.w %d4,[%a15]16
8000d984:	d9 f5 0c 00 	lea %a5,[%a15]12
8000d988:	c2 24       	add %d4,2
8000d98a:	d9 24 0c 00 	lea %a4,[%a2]12
8000d98e:	06 24       	sh %d4,2
8000d990:	40 2d       	mov.aa %a13,%a2
8000d992:	6d ff 8c ff 	call 8000d8aa <memcpy>
8000d996:	40 f5       	mov.aa %a5,%a15
8000d998:	40 c4       	mov.aa %a4,%a12
8000d99a:	6d ff c1 ff 	call 8000d91c <_Bfree>
8000d99e:	40 df       	mov.aa %a15,%a13
8000d9a0:	01 f9 02 26 	addsc.a %a2,%a15,%d9,2
8000d9a4:	c2 19       	add %d9,1
8000d9a6:	59 28 14 00 	st.w [%a2]20,%d8
8000d9aa:	68 49       	st.w [%a15]16,%d9
8000d9ac:	40 f2       	mov.aa %a2,%a15
8000d9ae:	00 90       	ret 

8000d9b0 <__hi0bits>:
8000d9b0:	b7 04 10 f0 	insert %d15,%d4,0,0,16
8000d9b4:	82 02       	mov %d2,0
8000d9b6:	ee 05       	jnz %d15,8000d9c0 <__hi0bits+0x10>
8000d9b8:	8f 04 01 40 	sh %d4,%d4,16
8000d9bc:	3b 00 01 20 	mov %d2,16
8000d9c0:	b7 04 18 f0 	insert %d15,%d4,0,0,24
8000d9c4:	ee 05       	jnz %d15,8000d9ce <__hi0bits+0x1e>
8000d9c6:	1b 82 00 20 	addi %d2,%d2,8
8000d9ca:	8f 84 00 40 	sh %d4,%d4,8
8000d9ce:	b7 04 1c f0 	insert %d15,%d4,0,0,28
8000d9d2:	ee 03       	jnz %d15,8000d9d8 <__hi0bits+0x28>
8000d9d4:	c2 42       	add %d2,4
8000d9d6:	06 44       	sh %d4,4
8000d9d8:	b7 04 1e f0 	insert %d15,%d4,0,0,30
8000d9dc:	ee 03       	jnz %d15,8000d9e2 <__hi0bits+0x32>
8000d9de:	c2 22       	add %d2,2
8000d9e0:	06 24       	sh %d4,2
8000d9e2:	0e 47       	jltz %d4,8000d9f0 <__hi0bits+0x40>
8000d9e4:	7b 00 00 f4 	movh %d15,16384
8000d9e8:	26 f4       	and %d4,%d15
8000d9ea:	c2 12       	add %d2,1
8000d9ec:	ab 02 82 24 	sel %d2,%d4,%d2,32
8000d9f0:	00 90       	ret 

8000d9f2 <__lo0bits>:
8000d9f2:	54 43       	ld.w %d3,[%a4]
8000d9f4:	8f 73 00 f1 	and %d15,%d3,7
8000d9f8:	6e 0e       	jz %d15,8000da14 <__lo0bits+0x22>
8000d9fa:	82 02       	mov %d2,0
8000d9fc:	6f 03 2d 80 	jnz.t %d3,0,8000da56 <__lo0bits+0x64>
8000da00:	6f 13 06 00 	jz.t %d3,1,8000da0c <__lo0bits+0x1a>
8000da04:	06 f3       	sh %d3,-1
8000da06:	74 43       	st.w [%a4],%d3
8000da08:	82 12       	mov %d2,1
8000da0a:	00 90       	ret 
8000da0c:	06 e3       	sh %d3,-2
8000da0e:	74 43       	st.w [%a4],%d3
8000da10:	82 22       	mov %d2,2
8000da12:	00 90       	ret 
8000da14:	b7 03 10 f8 	insert %d15,%d3,0,16,16
8000da18:	82 04       	mov %d4,0
8000da1a:	ee 05       	jnz %d15,8000da24 <__lo0bits+0x32>
8000da1c:	8f 03 1f 30 	sh %d3,%d3,-16
8000da20:	3b 00 01 40 	mov %d4,16
8000da24:	02 3f       	mov %d15,%d3
8000da26:	16 ff       	and %d15,255
8000da28:	ee 04       	jnz %d15,8000da30 <__lo0bits+0x3e>
8000da2a:	1b 84 00 40 	addi %d4,%d4,8
8000da2e:	06 83       	sh %d3,-8
8000da30:	8f f3 00 f1 	and %d15,%d3,15
8000da34:	ee 03       	jnz %d15,8000da3a <__lo0bits+0x48>
8000da36:	c2 44       	add %d4,4
8000da38:	06 c3       	sh %d3,-4
8000da3a:	8f 33 00 f1 	and %d15,%d3,3
8000da3e:	ee 03       	jnz %d15,8000da44 <__lo0bits+0x52>
8000da40:	c2 24       	add %d4,2
8000da42:	06 e3       	sh %d3,-2
8000da44:	6f 03 07 80 	jnz.t %d3,0,8000da52 <__lo0bits+0x60>
8000da48:	06 f3       	sh %d3,-1
8000da4a:	3b 00 02 20 	mov %d2,32
8000da4e:	76 34       	jz %d3,8000da56 <__lo0bits+0x64>
8000da50:	c2 14       	add %d4,1
8000da52:	74 43       	st.w [%a4],%d3
8000da54:	02 42       	mov %d2,%d4
8000da56:	00 90       	ret 

8000da58 <__i2b>:
8000da58:	02 4f       	mov %d15,%d4
8000da5a:	82 14       	mov %d4,1
8000da5c:	6d ff 35 ff 	call 8000d8c6 <_Balloc>
8000da60:	6c 25       	st.w [%a2]20,%d15
8000da62:	82 1f       	mov %d15,1
8000da64:	6c 24       	st.w [%a2]16,%d15
8000da66:	00 90       	ret 

8000da68 <__multiply>:
8000da68:	19 52 10 00 	ld.w %d2,[%a5]16
8000da6c:	4c 64       	ld.w %d15,[%a6]16
8000da6e:	40 5f       	mov.aa %a15,%a5
8000da70:	40 6c       	mov.aa %a12,%a6
8000da72:	7f f2 04 00 	jge %d2,%d15,8000da7a <__multiply+0x12>
8000da76:	40 6f       	mov.aa %a15,%a6
8000da78:	40 5c       	mov.aa %a12,%a5
8000da7a:	48 4a       	ld.w %d10,[%a15]16
8000da7c:	19 c9 10 00 	ld.w %d9,[%a12]16
8000da80:	4c f2       	ld.w %d15,[%a15]8
8000da82:	0b 9a 00 80 	add %d8,%d10,%d9
8000da86:	48 12       	ld.w %d2,[%a15]4
8000da88:	0b 8f 20 41 	lt %d4,%d15,%d8
8000da8c:	42 24       	add %d4,%d2
8000da8e:	6d ff 1c ff 	call 8000d8c6 <_Balloc>
8000da92:	d9 23 14 00 	lea %a3,[%a2]20
8000da96:	01 38 02 d6 	addsc.a %a13,%a3,%d8,2
8000da9a:	40 34       	mov.aa %a4,%a3
8000da9c:	82 0f       	mov %d15,0
8000da9e:	80 43       	mov.d %d3,%a4
8000daa0:	80 d2       	mov.d %d2,%a13
8000daa2:	7f 23 04 80 	jge.u %d3,%d2,8000daaa <__multiply+0x42>
8000daa6:	64 4f       	st.w [%a4+],%d15
8000daa8:	3c fb       	j 8000da9e <__multiply+0x36>
8000daaa:	d9 ff 14 00 	lea %a15,[%a15]20
8000daae:	d9 cc 14 00 	lea %a12,[%a12]20
8000dab2:	80 f3       	mov.d %d3,%a15
8000dab4:	80 cf       	mov.d %d15,%a12
8000dab6:	13 4a 20 43 	madd %d4,%d3,%d10,4
8000daba:	13 49 20 0f 	madd %d0,%d15,%d9,4
8000dabe:	80 c2       	mov.d %d2,%a12
8000dac0:	7f 02 54 80 	jge.u %d2,%d0,8000db68 <__multiply+0x100>
8000dac4:	b9 c2 00 00 	ld.hu %d2,[%a12]0
8000dac8:	40 34       	mov.aa %a4,%a3
8000daca:	40 f6       	mov.aa %a6,%a15
8000dacc:	82 03       	mov %d3,0
8000dace:	df 02 21 00 	jeq %d2,0,8000db10 <__multiply+0xa8>
8000dad2:	40 45       	mov.aa %a5,%a4
8000dad4:	44 67       	ld.w %d7,[%a6+]
8000dad6:	44 56       	ld.w %d6,[%a5+]
8000dad8:	b7 07 10 18 	insert %d1,%d7,0,16,16
8000dadc:	b7 06 10 58 	insert %d5,%d6,0,16,16
8000dae0:	8f 07 1f 70 	sh %d7,%d7,-16
8000dae4:	03 21 0a 55 	madd %d5,%d5,%d1,%d2
8000dae8:	8f 06 1f 60 	sh %d6,%d6,-16
8000daec:	03 27 0a 66 	madd %d6,%d6,%d7,%d2
8000daf0:	42 35       	add %d5,%d3
8000daf2:	8f 05 1f 30 	sh %d3,%d5,-16
8000daf6:	1a 36       	add %d15,%d6,%d3
8000daf8:	37 f5 10 58 	insert %d5,%d5,%d15,16,16
8000dafc:	8f 0f 1f 30 	sh %d3,%d15,-16
8000db00:	80 6f       	mov.d %d15,%a6
8000db02:	74 45       	st.w [%a4],%d5
8000db04:	7f 4f 04 80 	jge.u %d15,%d4,8000db0c <__multiply+0xa4>
8000db08:	40 54       	mov.aa %a4,%a5
8000db0a:	3c e4       	j 8000dad2 <__multiply+0x6a>
8000db0c:	59 43 04 00 	st.w [%a4]4,%d3
8000db10:	b9 c2 02 00 	ld.hu %d2,[%a12]2
8000db14:	df 02 27 00 	jeq %d2,0,8000db62 <__multiply+0xfa>
8000db18:	54 33       	ld.w %d3,[%a3]
8000db1a:	40 34       	mov.aa %a4,%a3
8000db1c:	40 f5       	mov.aa %a5,%a15
8000db1e:	82 07       	mov %d7,0
8000db20:	40 56       	mov.aa %a6,%a5
8000db22:	44 66       	ld.w %d6,[%a6+]
8000db24:	40 47       	mov.aa %a7,%a4
8000db26:	44 75       	ld.w %d5,[%a7+]
8000db28:	b7 06 10 68 	insert %d6,%d6,0,16,16
8000db2c:	8f 05 1f 50 	sh %d5,%d5,-16
8000db30:	03 26 0a f5 	madd %d15,%d5,%d6,%d2
8000db34:	42 7f       	add %d15,%d7
8000db36:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000db3a:	8f 0f 1f f0 	sh %d15,%d15,-16
8000db3e:	74 43       	st.w [%a4],%d3
8000db40:	b9 55 02 00 	ld.hu %d5,[%a5]2
8000db44:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000db48:	40 65       	mov.aa %a5,%a6
8000db4a:	03 25 0a 33 	madd %d3,%d3,%d5,%d2
8000db4e:	42 f3       	add %d3,%d15
8000db50:	80 6f       	mov.d %d15,%a6
8000db52:	8f 03 1f 70 	sh %d7,%d3,-16
8000db56:	7f 4f 04 80 	jge.u %d15,%d4,8000db5e <__multiply+0xf6>
8000db5a:	40 74       	mov.aa %a4,%a7
8000db5c:	3c e2       	j 8000db20 <__multiply+0xb8>
8000db5e:	59 43 04 00 	st.w [%a4]4,%d3
8000db62:	b0 4c       	add.a %a12,4
8000db64:	b0 43       	add.a %a3,4
8000db66:	3c ac       	j 8000dabe <__multiply+0x56>
8000db68:	8b 08 40 f3 	max %d15,%d8,0
8000db6c:	9f 0f 05 80 	jned %d15,0,8000db76 <__multiply+0x10e>
8000db70:	59 28 10 00 	st.w [%a2]16,%d8
8000db74:	00 90       	ret 
8000db76:	09 d2 3c f5 	ld.w %d2,[+%a13]-4
8000db7a:	df 02 fb ff 	jne %d2,0,8000db70 <__multiply+0x108>
8000db7e:	c2 f8       	add %d8,-1
8000db80:	3c f6       	j 8000db6c <__multiply+0x104>

8000db82 <__pow5mult>:
8000db82:	8f 34 00 21 	and %d2,%d4,3
8000db86:	40 4c       	mov.aa %a12,%a4
8000db88:	40 5d       	mov.aa %a13,%a5
8000db8a:	02 4f       	mov %d15,%d4
8000db8c:	76 2d       	jz %d2,8000dba6 <__pow5mult+0x24>
8000db8e:	91 00 00 f8 	movh.a %a15,32768
8000db92:	d9 ff f0 e0 	lea %a15,[%a15]4016 <80000fb0 <p05.2553>>
8000db96:	01 f2 02 f6 	addsc.a %a15,%a15,%d2,2
8000db9a:	82 05       	mov %d5,0
8000db9c:	19 f4 fc ff 	ld.w %d4,[%a15]-4
8000dba0:	6d ff c7 fe 	call 8000d92e <__multadd>
8000dba4:	40 2d       	mov.aa %a13,%a2
8000dba6:	86 ef       	sha %d15,-2
8000dba8:	6e 29       	jz %d15,8000dbfa <__pow5mult+0x78>
8000dbaa:	99 cf 08 10 	ld.a %a15,[%a12]72
8000dbae:	7c fb       	jnz.a %a15,8000dbc4 <__pow5mult+0x42>
8000dbb0:	40 c4       	mov.aa %a4,%a12
8000dbb2:	3b 10 27 40 	mov %d4,625
8000dbb6:	6d ff 51 ff 	call 8000da58 <__i2b>
8000dbba:	82 02       	mov %d2,0
8000dbbc:	b5 c2 08 10 	st.a [%a12]72,%a2
8000dbc0:	40 2f       	mov.aa %a15,%a2
8000dbc2:	74 22       	st.w [%a2],%d2
8000dbc4:	82 08       	mov %d8,0
8000dbc6:	2e 0c       	jz.t %d15,0,8000dbde <__pow5mult+0x5c>
8000dbc8:	40 d5       	mov.aa %a5,%a13
8000dbca:	40 c4       	mov.aa %a4,%a12
8000dbcc:	40 f6       	mov.aa %a6,%a15
8000dbce:	6d ff 4d ff 	call 8000da68 <__multiply>
8000dbd2:	40 d5       	mov.aa %a5,%a13
8000dbd4:	40 2e       	mov.aa %a14,%a2
8000dbd6:	40 c4       	mov.aa %a4,%a12
8000dbd8:	6d ff a2 fe 	call 8000d91c <_Bfree>
8000dbdc:	40 ed       	mov.aa %a13,%a14
8000dbde:	86 ff       	sha %d15,-1
8000dbe0:	6e 0d       	jz %d15,8000dbfa <__pow5mult+0x78>
8000dbe2:	c8 02       	ld.a %a2,[%a15]0
8000dbe4:	bc 23       	jz.a %a2,8000dbea <__pow5mult+0x68>
8000dbe6:	40 2f       	mov.aa %a15,%a2
8000dbe8:	3c ef       	j 8000dbc6 <__pow5mult+0x44>
8000dbea:	40 c4       	mov.aa %a4,%a12
8000dbec:	40 f5       	mov.aa %a5,%a15
8000dbee:	40 f6       	mov.aa %a6,%a15
8000dbf0:	6d ff 3c ff 	call 8000da68 <__multiply>
8000dbf4:	e8 02       	st.a [%a15]0,%a2
8000dbf6:	74 28       	st.w [%a2],%d8
8000dbf8:	3c f7       	j 8000dbe6 <__pow5mult+0x64>
8000dbfa:	40 d2       	mov.aa %a2,%a13
8000dbfc:	00 90       	ret 

8000dbfe <__lshift>:
8000dbfe:	19 5b 10 00 	ld.w %d11,[%a5]16
8000dc02:	8f b4 3f 80 	sha %d8,%d4,-5
8000dc06:	02 4a       	mov %d10,%d4
8000dc08:	42 8b       	add %d11,%d8
8000dc0a:	19 54 04 00 	ld.w %d4,[%a5]4
8000dc0e:	4c 52       	ld.w %d15,[%a5]8
8000dc10:	40 4e       	mov.aa %a14,%a4
8000dc12:	40 5c       	mov.aa %a12,%a5
8000dc14:	1b 1b 00 90 	addi %d9,%d11,1
8000dc18:	7f 9f 05 00 	jge %d15,%d9,8000dc22 <__lshift+0x24>
8000dc1c:	c2 14       	add %d4,1
8000dc1e:	06 1f       	sh %d15,1
8000dc20:	3c fc       	j 8000dc18 <__lshift+0x1a>
8000dc22:	40 e4       	mov.aa %a4,%a14
8000dc24:	6d ff 51 fe 	call 8000d8c6 <_Balloc>
8000dc28:	8b 08 40 f3 	max %d15,%d8,0
8000dc2c:	40 2d       	mov.aa %a13,%a2
8000dc2e:	d9 2f 14 00 	lea %a15,[%a2]20
8000dc32:	d2 02       	mov %e2,0
8000dc34:	01 f2 02 26 	addsc.a %a2,%a15,%d2,2
8000dc38:	9f 0f 03 80 	jned %d15,0,8000dc3e <__lshift+0x40>
8000dc3c:	3c 04       	j 8000dc44 <__lshift+0x46>
8000dc3e:	74 23       	st.w [%a2],%d3
8000dc40:	c2 12       	add %d2,1
8000dc42:	3c f9       	j 8000dc34 <__lshift+0x36>
8000dc44:	8b 08 40 83 	max %d8,%d8,0
8000dc48:	01 f8 02 36 	addsc.a %a3,%a15,%d8,2
8000dc4c:	d9 cf 14 00 	lea %a15,[%a12]20
8000dc50:	19 c2 10 00 	ld.w %d2,[%a12]16
8000dc54:	80 f3       	mov.d %d3,%a15
8000dc56:	8f fa 01 41 	and %d4,%d10,31
8000dc5a:	13 42 20 23 	madd %d2,%d3,%d2,4
8000dc5e:	8b 04 02 51 	rsub %d5,%d4,32
8000dc62:	82 0f       	mov %d15,0
8000dc64:	df 04 1a 00 	jeq %d4,0,8000dc98 <__lshift+0x9a>
8000dc68:	40 f5       	mov.aa %a5,%a15
8000dc6a:	44 53       	ld.w %d3,[%a5+]
8000dc6c:	d9 32 04 00 	lea %a2,[%a3]4
8000dc70:	0f 43 00 30 	sh %d3,%d3,%d4
8000dc74:	a6 3f       	or %d15,%d3
8000dc76:	6c 30       	st.w [%a3]0,%d15
8000dc78:	4c f0       	ld.w %d15,[%a15]0
8000dc7a:	8b 05 00 31 	rsub %d3,%d5,0
8000dc7e:	0f 3f 00 30 	sh %d3,%d15,%d3
8000dc82:	02 3f       	mov %d15,%d3
8000dc84:	80 53       	mov.d %d3,%a5
8000dc86:	40 5f       	mov.aa %a15,%a5
8000dc88:	7f 23 04 80 	jge.u %d3,%d2,8000dc90 <__lshift+0x92>
8000dc8c:	40 23       	mov.aa %a3,%a2
8000dc8e:	3c ed       	j 8000dc68 <__lshift+0x6a>
8000dc90:	c2 2b       	add %d11,2
8000dc92:	6c 31       	st.w [%a3]4,%d15
8000dc94:	2a b9       	cmov %d9,%d15,%d11
8000dc96:	3c 08       	j 8000dca6 <__lshift+0xa8>
8000dc98:	4c f0       	ld.w %d15,[%a15]0
8000dc9a:	b0 4f       	add.a %a15,4
8000dc9c:	80 f3       	mov.d %d3,%a15
8000dc9e:	6c 30       	st.w [%a3]0,%d15
8000dca0:	b0 43       	add.a %a3,4
8000dca2:	3f 23 fb ff 	jlt.u %d3,%d2,8000dc98 <__lshift+0x9a>
8000dca6:	c2 f9       	add %d9,-1
8000dca8:	59 d9 10 00 	st.w [%a13]16,%d9
8000dcac:	40 e4       	mov.aa %a4,%a14
8000dcae:	40 c5       	mov.aa %a5,%a12
8000dcb0:	6d ff 36 fe 	call 8000d91c <_Bfree>
8000dcb4:	40 d2       	mov.aa %a2,%a13
8000dcb6:	00 90       	ret 

8000dcb8 <__mcmp>:
8000dcb8:	4c 54       	ld.w %d15,[%a5]16
8000dcba:	19 42 10 00 	ld.w %d2,[%a4]16
8000dcbe:	a2 f2       	sub %d2,%d15
8000dcc0:	df 02 1c 80 	jne %d2,0,8000dcf8 <__mcmp+0x40>
8000dcc4:	80 42       	mov.d %d2,%a4
8000dcc6:	06 2f       	sh %d15,2
8000dcc8:	60 f2       	mov.a %a2,%d15
8000dcca:	1b 42 01 30 	addi %d3,%d2,20
8000dcce:	d9 55 14 00 	lea %a5,[%a5]20
8000dcd2:	01 23 00 f6 	addsc.a %a15,%a2,%d3,0
8000dcd6:	30 25       	add.a %a5,%a2
8000dcd8:	09 f2 3c f5 	ld.w %d2,[+%a15]-4
8000dcdc:	09 5f 3c f5 	ld.w %d15,[+%a5]-4
8000dce0:	5f f2 08 00 	jeq %d2,%d15,8000dcf0 <__mcmp+0x38>
8000dce4:	0b f2 30 21 	lt.u %d2,%d2,%d15
8000dce8:	82 f3       	mov %d3,-1
8000dcea:	ab 13 80 22 	sel %d2,%d2,%d3,1
8000dcee:	00 90       	ret 
8000dcf0:	80 ff       	mov.d %d15,%a15
8000dcf2:	3f f3 f3 ff 	jlt.u %d3,%d15,8000dcd8 <__mcmp+0x20>
8000dcf6:	82 02       	mov %d2,0
8000dcf8:	00 90       	ret 

8000dcfa <__mdiff>:
8000dcfa:	40 4d       	mov.aa %a13,%a4
8000dcfc:	40 5f       	mov.aa %a15,%a5
8000dcfe:	40 54       	mov.aa %a4,%a5
8000dd00:	40 65       	mov.aa %a5,%a6
8000dd02:	40 6c       	mov.aa %a12,%a6
8000dd04:	6d ff da ff 	call 8000dcb8 <__mcmp>
8000dd08:	02 2f       	mov %d15,%d2
8000dd0a:	f6 2a       	jnz %d2,8000dd1e <__mdiff+0x24>
8000dd0c:	40 d4       	mov.aa %a4,%a13
8000dd0e:	82 04       	mov %d4,0
8000dd10:	6d ff db fd 	call 8000d8c6 <_Balloc>
8000dd14:	82 12       	mov %d2,1
8000dd16:	59 22 10 00 	st.w [%a2]16,%d2
8000dd1a:	6c 25       	st.w [%a2]20,%d15
8000dd1c:	00 90       	ret 
8000dd1e:	82 08       	mov %d8,0
8000dd20:	ce 25       	jgez %d2,8000dd2a <__mdiff+0x30>
8000dd22:	40 f2       	mov.aa %a2,%a15
8000dd24:	82 18       	mov %d8,1
8000dd26:	40 cf       	mov.aa %a15,%a12
8000dd28:	40 2c       	mov.aa %a12,%a2
8000dd2a:	40 d4       	mov.aa %a4,%a13
8000dd2c:	48 14       	ld.w %d4,[%a15]4
8000dd2e:	6d ff cc fd 	call 8000d8c6 <_Balloc>
8000dd32:	48 42       	ld.w %d2,[%a15]16
8000dd34:	d9 ff 14 00 	lea %a15,[%a15]20
8000dd38:	80 ff       	mov.d %d15,%a15
8000dd3a:	d9 c4 14 00 	lea %a4,[%a12]20
8000dd3e:	13 42 20 7f 	madd %d7,%d15,%d2,4
8000dd42:	19 c0 10 00 	ld.w %d0,[%a12]16
8000dd46:	80 4f       	mov.d %d15,%a4
8000dd48:	59 28 0c 00 	st.w [%a2]12,%d8
8000dd4c:	13 40 20 0f 	madd %d0,%d15,%d0,4
8000dd50:	d9 25 14 00 	lea %a5,[%a2]20
8000dd54:	82 03       	mov %d3,0
8000dd56:	44 f6       	ld.w %d6,[%a15+]
8000dd58:	44 45       	ld.w %d5,[%a4+]
8000dd5a:	b7 06 10 48 	insert %d4,%d6,0,16,16
8000dd5e:	b7 05 10 18 	insert %d1,%d5,0,16,16
8000dd62:	42 34       	add %d4,%d3
8000dd64:	a2 14       	sub %d4,%d1
8000dd66:	8f 06 1f 60 	sh %d6,%d6,-16
8000dd6a:	8f 05 1f 50 	sh %d5,%d5,-16
8000dd6e:	8f 04 3f 30 	sha %d3,%d4,-16
8000dd72:	0b 56 80 50 	sub %d5,%d6,%d5
8000dd76:	1a 35       	add %d15,%d5,%d3
8000dd78:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000dd7c:	8f 0f 3f 30 	sha %d3,%d15,-16
8000dd80:	80 4f       	mov.d %d15,%a4
8000dd82:	d9 53 04 00 	lea %a3,[%a5]4
8000dd86:	74 54       	st.w [%a5],%d4
8000dd88:	40 35       	mov.aa %a5,%a3
8000dd8a:	3f 0f e6 ff 	jlt.u %d15,%d0,8000dd56 <__mdiff+0x5c>
8000dd8e:	80 ff       	mov.d %d15,%a15
8000dd90:	7f 7f 12 80 	jge.u %d15,%d7,8000ddb4 <__mdiff+0xba>
8000dd94:	44 f5       	ld.w %d5,[%a15+]
8000dd96:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000dd9a:	8f 05 1f 50 	sh %d5,%d5,-16
8000dd9e:	42 34       	add %d4,%d3
8000dda0:	8f 04 3f f0 	sha %d15,%d4,-16
8000dda4:	42 5f       	add %d15,%d5
8000dda6:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000ddaa:	8f 0f 3f 30 	sha %d3,%d15,-16
8000ddae:	74 34       	st.w [%a3],%d4
8000ddb0:	b0 43       	add.a %a3,4
8000ddb2:	3c ee       	j 8000dd8e <__mdiff+0x94>
8000ddb4:	09 3f 3c f5 	ld.w %d15,[+%a3]-4
8000ddb8:	ee 03       	jnz %d15,8000ddbe <__mdiff+0xc4>
8000ddba:	c2 f2       	add %d2,-1
8000ddbc:	3c fc       	j 8000ddb4 <__mdiff+0xba>
8000ddbe:	59 22 10 00 	st.w [%a2]16,%d2
8000ddc2:	00 90       	ret 

8000ddc4 <__d2b>:
8000ddc4:	20 08       	sub.a %sp,8
8000ddc6:	02 48       	mov %d8,%d4
8000ddc8:	82 14       	mov %d4,1
8000ddca:	02 59       	mov %d9,%d5
8000ddcc:	40 5d       	mov.aa %a13,%a5
8000ddce:	40 6c       	mov.aa %a12,%a6
8000ddd0:	6d ff 7b fd 	call 8000d8c6 <_Balloc>
8000ddd4:	b7 09 0c 2a 	insert %d2,%d9,0,20,12
8000ddd8:	37 09 6b 9a 	extr.u %d9,%d9,20,11
8000dddc:	40 2f       	mov.aa %a15,%a2
8000ddde:	76 93       	jz %d9,8000dde4 <__d2b+0x20>
8000dde0:	b7 f2 01 2a 	insert %d2,%d2,15,20,1
8000dde4:	59 a2 04 00 	st.w [%sp]4,%d2
8000dde8:	df 08 20 00 	jeq %d8,0,8000de28 <__d2b+0x64>
8000ddec:	d9 a4 08 00 	lea %a4,[%sp]8
8000ddf0:	89 48 38 f5 	st.w [+%a4]-8,%d8
8000ddf4:	40 a4       	mov.aa %a4,%sp
8000ddf6:	6d ff fe fd 	call 8000d9f2 <__lo0bits>
8000ddfa:	58 00       	ld.w %d15,[%sp]0
8000ddfc:	76 2f       	jz %d2,8000de1a <__d2b+0x56>
8000ddfe:	19 a4 04 00 	ld.w %d4,[%sp]4
8000de02:	8b 02 02 31 	rsub %d3,%d2,32
8000de06:	0f 34 00 30 	sh %d3,%d4,%d3
8000de0a:	a6 3f       	or %d15,%d3
8000de0c:	68 5f       	st.w [%a15]20,%d15
8000de0e:	8b 02 00 f1 	rsub %d15,%d2,0
8000de12:	0f f4 00 f0 	sh %d15,%d4,%d15
8000de16:	78 01       	st.w [%sp]4,%d15
8000de18:	3c 02       	j 8000de1c <__d2b+0x58>
8000de1a:	68 5f       	st.w [%a15]20,%d15
8000de1c:	58 01       	ld.w %d15,[%sp]4
8000de1e:	82 28       	mov %d8,2
8000de20:	ea 18       	cmovn %d8,%d15,1
8000de22:	68 6f       	st.w [%a15]24,%d15
8000de24:	68 48       	st.w [%a15]16,%d8
8000de26:	3c 0c       	j 8000de3e <__d2b+0x7a>
8000de28:	d9 a4 04 00 	lea %a4,[%sp]4
8000de2c:	6d ff e3 fd 	call 8000d9f2 <__lo0bits>
8000de30:	58 01       	ld.w %d15,[%sp]4
8000de32:	1b 02 02 20 	addi %d2,%d2,32
8000de36:	68 5f       	st.w [%a15]20,%d15
8000de38:	82 1f       	mov %d15,1
8000de3a:	68 4f       	st.w [%a15]16,%d15
8000de3c:	82 18       	mov %d8,1
8000de3e:	76 98       	jz %d9,8000de4e <__d2b+0x8a>
8000de40:	1b d9 bc 9f 	addi %d9,%d9,-1075
8000de44:	42 29       	add %d9,%d2
8000de46:	74 d9       	st.w [%a13],%d9
8000de48:	8b 52 03 21 	rsub %d2,%d2,53
8000de4c:	3c 0d       	j 8000de66 <__d2b+0xa2>
8000de4e:	01 f8 02 26 	addsc.a %a2,%a15,%d8,2
8000de52:	1b e2 bc 2f 	addi %d2,%d2,-1074
8000de56:	74 d2       	st.w [%a13],%d2
8000de58:	19 24 10 00 	ld.w %d4,[%a2]16
8000de5c:	6d ff aa fd 	call 8000d9b0 <__hi0bits>
8000de60:	06 58       	sh %d8,5
8000de62:	0b 28 80 20 	sub %d2,%d8,%d2
8000de66:	74 c2       	st.w [%a12],%d2
8000de68:	40 f2       	mov.aa %a2,%a15
8000de6a:	00 90       	ret 

8000de6c <__fpclassifyd>:
8000de6c:	0f 45 a0 f0 	or %d15,%d5,%d4
8000de70:	82 22       	mov %d2,2
8000de72:	6e 1d       	jz %d15,8000deac <__fpclassifyd+0x40>
8000de74:	7b 00 00 38 	movh %d3,32768
8000de78:	3a 53       	eq %d15,%d3,%d5
8000de7a:	8b 04 00 f4 	and.eq %d15,%d4,0
8000de7e:	8b 04 00 62 	eq %d6,%d4,0
8000de82:	ee 15       	jnz %d15,8000deac <__fpclassifyd+0x40>
8000de84:	b7 05 81 5f 	insert %d5,%d5,0,31,1
8000de88:	7b 00 fe f7 	movh %d15,32736
8000de8c:	9b 05 ff 3f 	addih %d3,%d5,65520
8000de90:	82 42       	mov %d2,4
8000de92:	3f f3 0d 80 	jlt.u %d3,%d15,8000deac <__fpclassifyd+0x40>
8000de96:	7b 00 01 f0 	movh %d15,16
8000de9a:	82 32       	mov %d2,3
8000de9c:	3f f5 08 80 	jlt.u %d5,%d15,8000deac <__fpclassifyd+0x40>
8000dea0:	7b 00 ff 27 	movh %d2,32752
8000dea4:	0b 25 00 51 	eq %d5,%d5,%d2
8000dea8:	0f 56 80 20 	and %d2,%d6,%d5
8000deac:	00 90       	ret 

8000deae <__ssprint_r>:
8000deae:	4c 62       	ld.w %d15,[%a6]8
8000deb0:	20 08       	sub.a %sp,8
8000deb2:	40 4e       	mov.aa %a14,%a4
8000deb4:	40 5f       	mov.aa %a15,%a5
8000deb6:	40 6c       	mov.aa %a12,%a6
8000deb8:	54 6c       	ld.w %d12,[%a6]
8000deba:	6e 30       	jz %d15,8000df1a <__ssprint_r+0x6c>
8000debc:	a0 02       	mov.a %a2,0
8000debe:	b5 a2 04 00 	st.a [%sp]4,%a2
8000dec2:	82 09       	mov %d9,0
8000dec4:	3b 00 48 e0 	mov %d14,1152
8000dec8:	3b f0 b7 df 	mov %d13,-1153
8000decc:	3c 0a       	j 8000dee0 <__ssprint_r+0x32>
8000dece:	60 c2       	mov.a %a2,%d12
8000ded0:	d4 22       	ld.a %a2,[%a2]
8000ded2:	b5 a2 04 00 	st.a [%sp]4,%a2
8000ded6:	60 c2       	mov.a %a2,%d12
8000ded8:	1b 8c 00 c0 	addi %d12,%d12,8
8000dedc:	19 29 04 00 	ld.w %d9,[%a2]4
8000dee0:	df 09 f7 7f 	jeq %d9,0,8000dece <__ssprint_r+0x20>
8000dee4:	48 28       	ld.w %d8,[%a15]8
8000dee6:	3f 89 5a 80 	jlt.u %d9,%d8,8000df9a <__ssprint_r+0xec>
8000deea:	88 62       	ld.h %d2,[%a15]12
8000deec:	0f e2 80 f0 	and %d15,%d2,%d14
8000def0:	ee 19       	jnz %d15,8000df22 <__ssprint_r+0x74>
8000def2:	3f 89 54 80 	jlt.u %d9,%d8,8000df9a <__ssprint_r+0xec>
8000def6:	c8 04       	ld.a %a4,[%a15]0
8000def8:	99 a5 04 00 	ld.a %a5,[%sp]4 <0 <NULL>>
8000defc:	02 84       	mov %d4,%d8
8000defe:	6d 00 81 00 	call 8000e000 <memmove>
8000df02:	4c f2       	ld.w %d15,[%a15]8
8000df04:	a2 8f       	sub %d15,%d8
8000df06:	68 2f       	st.w [%a15]8,%d15
8000df08:	4c f0       	ld.w %d15,[%a15]0
8000df0a:	42 f8       	add %d8,%d15
8000df0c:	4c c2       	ld.w %d15,[%a12]8
8000df0e:	68 08       	st.w [%a15]0,%d8
8000df10:	52 99       	sub %d9,%d15,%d9
8000df12:	59 c9 08 00 	st.w [%a12]8,%d9
8000df16:	df 09 dc ff 	jne %d9,0,8000dece <__ssprint_r+0x20>
8000df1a:	82 0f       	mov %d15,0
8000df1c:	6c c1       	st.w [%a12]4,%d15
8000df1e:	82 02       	mov %d2,0
8000df20:	00 90       	ret 
8000df22:	c8 45       	ld.a %a5,[%a15]16
8000df24:	48 5a       	ld.w %d10,[%a15]20
8000df26:	4c f0       	ld.w %d15,[%a15]0
8000df28:	80 53       	mov.d %d3,%a5
8000df2a:	53 3a 20 a0 	mul %d10,%d10,3
8000df2e:	a2 3f       	sub %d15,%d3
8000df30:	82 23       	mov %d3,2
8000df32:	4b 3a 01 a2 	div %e10,%d10,%d3
8000df36:	92 13       	add %d3,%d15,1
8000df38:	42 93       	add %d3,%d9
8000df3a:	0b 3a b0 a1 	max.u %d10,%d10,%d3
8000df3e:	40 e4       	mov.aa %a4,%a14
8000df40:	02 a4       	mov %d4,%d10
8000df42:	6f a2 12 00 	jz.t %d2,10,8000df66 <__ssprint_r+0xb8>
8000df46:	6d ff 0b e9 	call 8000b15c <_malloc_r>
8000df4a:	40 2d       	mov.aa %a13,%a2
8000df4c:	bd 02 15 00 	jz.a %a2,8000df76 <__ssprint_r+0xc8>
8000df50:	c8 45       	ld.a %a5,[%a15]16
8000df52:	40 24       	mov.aa %a4,%a2
8000df54:	02 f4       	mov %d4,%d15
8000df56:	6d ff aa fc 	call 8000d8aa <memcpy>
8000df5a:	88 62       	ld.h %d2,[%a15]12
8000df5c:	26 d2       	and %d2,%d13
8000df5e:	8f 02 48 21 	or %d2,%d2,128
8000df62:	a8 62       	st.h [%a15]12,%d2
8000df64:	3c 13       	j 8000df8a <__ssprint_r+0xdc>
8000df66:	6d 00 7d 00 	call 8000e060 <_realloc_r>
8000df6a:	40 2d       	mov.aa %a13,%a2
8000df6c:	7c 2f       	jnz.a %a2,8000df8a <__ssprint_r+0xdc>
8000df6e:	c8 45       	ld.a %a5,[%a15]16
8000df70:	40 e4       	mov.aa %a4,%a14
8000df72:	6d ff ea eb 	call 8000b746 <_free_r>
8000df76:	da 0c       	mov %d15,12
8000df78:	6c e0       	st.w [%a14]0,%d15
8000df7a:	8c f6       	ld.h %d15,[%a15]12
8000df7c:	82 f2       	mov %d2,-1
8000df7e:	96 40       	or %d15,64
8000df80:	a8 6f       	st.h [%a15]12,%d15
8000df82:	82 0f       	mov %d15,0
8000df84:	6c c2       	st.w [%a12]8,%d15
8000df86:	6c c1       	st.w [%a12]4,%d15
8000df88:	00 90       	ret 
8000df8a:	e8 4d       	st.a [%a15]16,%a13
8000df8c:	10 dd       	addsc.a %a13,%a13,%d15,0
8000df8e:	68 5a       	st.w [%a15]20,%d10
8000df90:	a2 fa       	sub %d10,%d15
8000df92:	e8 0d       	st.a [%a15]0,%a13
8000df94:	02 98       	mov %d8,%d9
8000df96:	68 2a       	st.w [%a15]8,%d10
8000df98:	3c ad       	j 8000def2 <__ssprint_r+0x44>
8000df9a:	02 98       	mov %d8,%d9
8000df9c:	3c ad       	j 8000def6 <__ssprint_r+0x48>

8000df9e <_calloc_r>:
8000df9e:	e2 54       	mul %d4,%d5
8000dfa0:	6d ff de e8 	call 8000b15c <_malloc_r>
8000dfa4:	40 2f       	mov.aa %a15,%a2
8000dfa6:	a0 02       	mov.a %a2,0
8000dfa8:	bd 0f 2b 00 	jz.a %a15,8000dffe <_calloc_r+0x60>
8000dfac:	19 f5 fc ff 	ld.w %d5,[%a15]-4
8000dfb0:	8f 35 c0 51 	andn %d5,%d5,3
8000dfb4:	c2 c5       	add %d5,-4
8000dfb6:	8b 55 a2 f2 	ge.u %d15,%d5,37
8000dfba:	ee 1d       	jnz %d15,8000dff4 <_calloc_r+0x56>
8000dfbc:	8b 45 61 f2 	lt.u %d15,%d5,20
8000dfc0:	40 f2       	mov.aa %a2,%a15
8000dfc2:	ee 14       	jnz %d15,8000dfea <_calloc_r+0x4c>
8000dfc4:	82 0f       	mov %d15,0
8000dfc6:	68 0f       	st.w [%a15]0,%d15
8000dfc8:	68 1f       	st.w [%a15]4,%d15
8000dfca:	8b c5 a1 22 	ge.u %d2,%d5,28
8000dfce:	d9 f2 08 00 	lea %a2,[%a15]8
8000dfd2:	76 2c       	jz %d2,8000dfea <_calloc_r+0x4c>
8000dfd4:	68 2f       	st.w [%a15]8,%d15
8000dfd6:	68 3f       	st.w [%a15]12,%d15
8000dfd8:	8b 45 02 52 	eq %d5,%d5,36
8000dfdc:	d9 f2 10 00 	lea %a2,[%a15]16
8000dfe0:	76 55       	jz %d5,8000dfea <_calloc_r+0x4c>
8000dfe2:	68 4f       	st.w [%a15]16,%d15
8000dfe4:	d9 f2 18 00 	lea %a2,[%a15]24
8000dfe8:	68 5f       	st.w [%a15]20,%d15
8000dfea:	82 0f       	mov %d15,0
8000dfec:	6c 20       	st.w [%a2]0,%d15
8000dfee:	6c 21       	st.w [%a2]4,%d15
8000dff0:	6c 22       	st.w [%a2]8,%d15
8000dff2:	3c 05       	j 8000dffc <_calloc_r+0x5e>
8000dff4:	40 f4       	mov.aa %a4,%a15
8000dff6:	82 04       	mov %d4,0
8000dff8:	6d 00 2c 00 	call 8000e050 <memset>
8000dffc:	40 f2       	mov.aa %a2,%a15
8000dffe:	00 90       	ret 

8000e000 <memmove>:
8000e000:	80 46       	mov.d %d6,%a4
8000e002:	80 52       	mov.d %d2,%a5
8000e004:	7f 62 16 80 	jge.u %d2,%d6,8000e030 <memmove+0x30>
8000e008:	0b 42 00 50 	add %d5,%d2,%d4
8000e00c:	7f 56 12 80 	jge.u %d6,%d5,8000e030 <memmove+0x30>
8000e010:	60 4f       	mov.a %a15,%d4
8000e012:	02 42       	mov %d2,%d4
8000e014:	c2 f2       	add %d2,-1
8000e016:	fd f0 03 00 	loop %a15,8000e01c <memmove+0x1c>
8000e01a:	3c 19       	j 8000e04c <memmove+0x4c>
8000e01c:	5a 42       	sub %d15,%d2,%d4
8000e01e:	60 f2       	mov.a %a2,%d15
8000e020:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
8000e024:	1a 62       	add %d15,%d2,%d6
8000e026:	79 23 00 00 	ld.b %d3,[%a2]0
8000e02a:	60 f2       	mov.a %a2,%d15
8000e02c:	34 23       	st.b [%a2],%d3
8000e02e:	3c f3       	j 8000e014 <memmove+0x14>
8000e030:	60 4f       	mov.a %a15,%d4
8000e032:	a0 02       	mov.a %a2,0
8000e034:	01 26 00 46 	addsc.a %a4,%a2,%d6,0
8000e038:	01 22 00 36 	addsc.a %a3,%a2,%d2,0
8000e03c:	fd f0 03 00 	loop %a15,8000e042 <memmove+0x42>
8000e040:	3c 06       	j 8000e04c <memmove+0x4c>
8000e042:	79 33 00 00 	ld.b %d3,[%a3]0
8000e046:	b0 12       	add.a %a2,1
8000e048:	34 43       	st.b [%a4],%d3
8000e04a:	3c f5       	j 8000e034 <memmove+0x34>
8000e04c:	60 62       	mov.a %a2,%d6
8000e04e:	00 90       	ret 

8000e050 <memset>:
8000e050:	40 42       	mov.aa %a2,%a4
8000e052:	40 4f       	mov.aa %a15,%a4
8000e054:	9f 05 03 80 	jned %d5,0,8000e05a <memset+0xa>
8000e058:	00 90       	ret 
8000e05a:	28 04       	st.b [%a15]0,%d4
8000e05c:	b0 1f       	add.a %a15,1
8000e05e:	3c fb       	j 8000e054 <memset+0x4>

8000e060 <_realloc_r>:
8000e060:	40 4d       	mov.aa %a13,%a4
8000e062:	40 5f       	mov.aa %a15,%a5
8000e064:	02 49       	mov %d9,%d4
8000e066:	7c 53       	jnz.a %a5,8000e06c <_realloc_r+0xc>
8000e068:	1d ff 7a e8 	j 8000b15c <_malloc_r>
8000e06c:	6d ff c5 ea 	call 8000b5f6 <__malloc_lock>
8000e070:	1b b9 00 20 	addi %d2,%d9,11
8000e074:	8b 72 61 f2 	lt.u %d15,%d2,23
8000e078:	8f 72 c0 21 	andn %d2,%d2,7
8000e07c:	ab 02 a1 ff 	seln %d15,%d15,%d2,16
8000e080:	19 f3 fc ff 	ld.w %d3,[%a15]-4
8000e084:	0b 9f 30 21 	lt.u %d2,%d15,%d9
8000e088:	8b 0f 20 25 	or.lt %d2,%d15,0
8000e08c:	d9 fe f8 ff 	lea %a14,[%a15]-8
8000e090:	8f 33 c0 81 	andn %d8,%d3,3
8000e094:	76 25       	jz %d2,8000e09e <_realloc_r+0x3e>
8000e096:	da 0c       	mov %d15,12
8000e098:	6c d0       	st.w [%a13]0,%d15
8000e09a:	1d 00 56 01 	j 8000e346 <_realloc_r+0x2e6>
8000e09e:	7f f8 ac 01 	jge %d8,%d15,8000e3f6 <_realloc_r+0x396>
8000e0a2:	7b 00 00 c7 	movh %d12,28672
8000e0a6:	60 c3       	mov.a %a3,%d12
8000e0a8:	01 e8 00 26 	addsc.a %a2,%a14,%d8,0
8000e0ac:	d9 34 20 40 	lea %a4,[%a3]288
8000e0b0:	99 43 08 00 	ld.a %a3,[%a4]8
8000e0b4:	80 4c       	mov.d %d12,%a4
8000e0b6:	19 2b 04 00 	ld.w %d11,[%a2]4
8000e0ba:	7d 32 0a 00 	jeq.a %a2,%a3,8000e0ce <_realloc_r+0x6e>
8000e0be:	8f 1b c0 21 	andn %d2,%d11,1
8000e0c2:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
8000e0c6:	19 42 04 00 	ld.w %d2,[%a4]4
8000e0ca:	6f 02 2b 80 	jnz.t %d2,0,8000e120 <_realloc_r+0xc0>
8000e0ce:	8f 3b c0 b1 	andn %d11,%d11,3
8000e0d2:	0b 8b 00 20 	add %d2,%d11,%d8
8000e0d6:	7d 32 1b 80 	jne.a %a2,%a3,8000e10c <_realloc_r+0xac>
8000e0da:	1b 0f 01 40 	addi %d4,%d15,16
8000e0de:	3f 42 23 00 	jlt %d2,%d4,8000e124 <_realloc_r+0xc4>
8000e0e2:	10 ee       	addsc.a %a14,%a14,%d15,0
8000e0e4:	60 c2       	mov.a %a2,%d12
8000e0e6:	a2 f2       	sub %d2,%d15
8000e0e8:	b5 2e 08 00 	st.a [%a2]8,%a14
8000e0ec:	8f 12 40 21 	or %d2,%d2,1
8000e0f0:	59 e2 04 00 	st.w [%a14]4,%d2
8000e0f4:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000e0f8:	40 d4       	mov.aa %a4,%a13
8000e0fa:	8f 12 00 21 	and %d2,%d2,1
8000e0fe:	a6 2f       	or %d15,%d2
8000e100:	59 ff fc ff 	st.w [%a15]-4,%d15
8000e104:	6d ff 7a ea 	call 8000b5f8 <__malloc_unlock>
8000e108:	40 f2       	mov.aa %a2,%a15
8000e10a:	00 90       	ret 
8000e10c:	3f f2 0c 00 	jlt %d2,%d15,8000e124 <_realloc_r+0xc4>
8000e110:	cc 23       	ld.a %a15,[%a2]12
8000e112:	99 22 08 00 	ld.a %a2,[%a2]8
8000e116:	02 28       	mov %d8,%d2
8000e118:	ec 23       	st.a [%a2]12,%a15
8000e11a:	e8 22       	st.a [%a15]8,%a2
8000e11c:	1d 00 6d 01 	j 8000e3f6 <_realloc_r+0x396>
8000e120:	82 0b       	mov %d11,0
8000e122:	a0 02       	mov.a %a2,0
8000e124:	6f 03 08 81 	jnz.t %d3,0,8000e334 <_realloc_r+0x2d4>
8000e128:	99 fc f8 ff 	ld.a %a12,[%a15]-8
8000e12c:	01 ce 20 c0 	sub.a %a12,%a14,%a12
8000e130:	19 ca 04 00 	ld.w %d10,[%a12]4
8000e134:	8f 3a c0 a1 	andn %d10,%d10,3
8000e138:	42 8a       	add %d10,%d8
8000e13a:	bd 02 b3 00 	jz.a %a2,8000e2a0 <_realloc_r+0x240>
8000e13e:	42 ab       	add %d11,%d10
8000e140:	7d 32 5f 80 	jne.a %a2,%a3,8000e1fe <_realloc_r+0x19e>
8000e144:	1b 0f 01 20 	addi %d2,%d15,16
8000e148:	3f 2b ac 00 	jlt %d11,%d2,8000e2a0 <_realloc_r+0x240>
8000e14c:	40 ce       	mov.aa %a14,%a12
8000e14e:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000e152:	09 e3 88 05 	ld.a %a3,[+%a14]8
8000e156:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e15a:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e15e:	b5 32 0c 00 	st.a [%a3]12,%a2
8000e162:	b5 23 08 00 	st.a [%a2]8,%a3
8000e166:	df 02 36 80 	jne %d2,0,8000e1d2 <_realloc_r+0x172>
8000e16a:	8b 44 61 22 	lt.u %d2,%d4,20
8000e16e:	40 e3       	mov.aa %a3,%a14
8000e170:	df 02 28 80 	jne %d2,0,8000e1c0 <_realloc_r+0x160>
8000e174:	48 02       	ld.w %d2,[%a15]0
8000e176:	59 c2 08 00 	st.w [%a12]8,%d2
8000e17a:	48 13       	ld.w %d3,[%a15]4
8000e17c:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e180:	59 c3 0c 00 	st.w [%a12]12,%d3
8000e184:	f6 26       	jnz %d2,8000e190 <_realloc_r+0x130>
8000e186:	d9 c3 10 00 	lea %a3,[%a12]16
8000e18a:	d9 ff 08 00 	lea %a15,[%a15]8
8000e18e:	3c 19       	j 8000e1c0 <_realloc_r+0x160>
8000e190:	48 22       	ld.w %d2,[%a15]8
8000e192:	8b 44 02 82 	eq %d8,%d4,36
8000e196:	59 c2 10 00 	st.w [%a12]16,%d2
8000e19a:	48 33       	ld.w %d3,[%a15]12
8000e19c:	59 c3 14 00 	st.w [%a12]20,%d3
8000e1a0:	f6 86       	jnz %d8,8000e1ac <_realloc_r+0x14c>
8000e1a2:	d9 c3 18 00 	lea %a3,[%a12]24
8000e1a6:	d9 ff 10 00 	lea %a15,[%a15]16
8000e1aa:	3c 0b       	j 8000e1c0 <_realloc_r+0x160>
8000e1ac:	48 42       	ld.w %d2,[%a15]16
8000e1ae:	d9 c3 20 00 	lea %a3,[%a12]32
8000e1b2:	59 c2 18 00 	st.w [%a12]24,%d2
8000e1b6:	48 53       	ld.w %d3,[%a15]20
8000e1b8:	d9 ff 18 00 	lea %a15,[%a15]24
8000e1bc:	59 c3 1c 00 	st.w [%a12]28,%d3
8000e1c0:	48 02       	ld.w %d2,[%a15]0
8000e1c2:	74 32       	st.w [%a3],%d2
8000e1c4:	48 13       	ld.w %d3,[%a15]4
8000e1c6:	59 33 04 00 	st.w [%a3]4,%d3
8000e1ca:	48 22       	ld.w %d2,[%a15]8
8000e1cc:	59 32 08 00 	st.w [%a3]8,%d2
8000e1d0:	3c 05       	j 8000e1da <_realloc_r+0x17a>
8000e1d2:	40 e4       	mov.aa %a4,%a14
8000e1d4:	40 f5       	mov.aa %a5,%a15
8000e1d6:	6d ff 15 ff 	call 8000e000 <memmove>
8000e1da:	10 cf       	addsc.a %a15,%a12,%d15,0
8000e1dc:	60 c2       	mov.a %a2,%d12
8000e1de:	a2 fb       	sub %d11,%d15
8000e1e0:	ec 22       	st.a [%a2]8,%a15
8000e1e2:	8f 1b 40 b1 	or %d11,%d11,1
8000e1e6:	68 1b       	st.w [%a15]4,%d11
8000e1e8:	19 c2 04 00 	ld.w %d2,[%a12]4
8000e1ec:	40 d4       	mov.aa %a4,%a13
8000e1ee:	8f 12 00 21 	and %d2,%d2,1
8000e1f2:	a6 2f       	or %d15,%d2
8000e1f4:	6c c1       	st.w [%a12]4,%d15
8000e1f6:	6d ff 01 ea 	call 8000b5f8 <__malloc_unlock>
8000e1fa:	40 e2       	mov.aa %a2,%a14
8000e1fc:	00 90       	ret 
8000e1fe:	3f fb 51 00 	jlt %d11,%d15,8000e2a0 <_realloc_r+0x240>
8000e202:	99 23 0c 00 	ld.a %a3,[%a2]12
8000e206:	99 22 08 00 	ld.a %a2,[%a2]8
8000e20a:	40 c4       	mov.aa %a4,%a12
8000e20c:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e210:	b5 23 0c 00 	st.a [%a2]12,%a3
8000e214:	b5 32 08 00 	st.a [%a3]8,%a2
8000e218:	09 43 88 05 	ld.a %a3,[+%a4]8
8000e21c:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000e220:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e224:	b5 32 0c 00 	st.a [%a3]12,%a2
8000e228:	b5 23 08 00 	st.a [%a2]8,%a3
8000e22c:	df 02 35 80 	jne %d2,0,8000e296 <_realloc_r+0x236>
8000e230:	8b 44 61 22 	lt.u %d2,%d4,20
8000e234:	df 02 28 80 	jne %d2,0,8000e284 <_realloc_r+0x224>
8000e238:	48 02       	ld.w %d2,[%a15]0
8000e23a:	59 c2 08 00 	st.w [%a12]8,%d2
8000e23e:	48 13       	ld.w %d3,[%a15]4
8000e240:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e244:	59 c3 0c 00 	st.w [%a12]12,%d3
8000e248:	f6 26       	jnz %d2,8000e254 <_realloc_r+0x1f4>
8000e24a:	d9 c4 10 00 	lea %a4,[%a12]16
8000e24e:	d9 ff 08 00 	lea %a15,[%a15]8
8000e252:	3c 19       	j 8000e284 <_realloc_r+0x224>
8000e254:	48 22       	ld.w %d2,[%a15]8
8000e256:	8b 44 02 82 	eq %d8,%d4,36
8000e25a:	59 c2 10 00 	st.w [%a12]16,%d2
8000e25e:	48 33       	ld.w %d3,[%a15]12
8000e260:	59 c3 14 00 	st.w [%a12]20,%d3
8000e264:	f6 86       	jnz %d8,8000e270 <_realloc_r+0x210>
8000e266:	d9 c4 18 00 	lea %a4,[%a12]24
8000e26a:	d9 ff 10 00 	lea %a15,[%a15]16
8000e26e:	3c 0b       	j 8000e284 <_realloc_r+0x224>
8000e270:	48 42       	ld.w %d2,[%a15]16
8000e272:	d9 c4 20 00 	lea %a4,[%a12]32
8000e276:	59 c2 18 00 	st.w [%a12]24,%d2
8000e27a:	48 53       	ld.w %d3,[%a15]20
8000e27c:	d9 ff 18 00 	lea %a15,[%a15]24
8000e280:	59 c3 1c 00 	st.w [%a12]28,%d3
8000e284:	48 02       	ld.w %d2,[%a15]0
8000e286:	74 42       	st.w [%a4],%d2
8000e288:	48 13       	ld.w %d3,[%a15]4
8000e28a:	59 43 04 00 	st.w [%a4]4,%d3
8000e28e:	48 22       	ld.w %d2,[%a15]8
8000e290:	59 42 08 00 	st.w [%a4]8,%d2
8000e294:	3c 04       	j 8000e29c <_realloc_r+0x23c>
8000e296:	40 f5       	mov.aa %a5,%a15
8000e298:	6d ff b4 fe 	call 8000e000 <memmove>
8000e29c:	02 b8       	mov %d8,%d11
8000e29e:	3c 45       	j 8000e328 <_realloc_r+0x2c8>
8000e2a0:	3f fa 4a 00 	jlt %d10,%d15,8000e334 <_realloc_r+0x2d4>
8000e2a4:	40 c4       	mov.aa %a4,%a12
8000e2a6:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000e2aa:	09 43 88 05 	ld.a %a3,[+%a4]8
8000e2ae:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e2b2:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e2b6:	b5 32 0c 00 	st.a [%a3]12,%a2
8000e2ba:	b5 23 08 00 	st.a [%a2]8,%a3
8000e2be:	df 02 37 80 	jne %d2,0,8000e32c <_realloc_r+0x2cc>
8000e2c2:	8b 44 61 22 	lt.u %d2,%d4,20
8000e2c6:	df 02 28 80 	jne %d2,0,8000e316 <_realloc_r+0x2b6>
8000e2ca:	48 03       	ld.w %d3,[%a15]0
8000e2cc:	59 c3 08 00 	st.w [%a12]8,%d3
8000e2d0:	48 12       	ld.w %d2,[%a15]4
8000e2d2:	59 c2 0c 00 	st.w [%a12]12,%d2
8000e2d6:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e2da:	f6 26       	jnz %d2,8000e2e6 <_realloc_r+0x286>
8000e2dc:	d9 c4 10 00 	lea %a4,[%a12]16
8000e2e0:	d9 ff 08 00 	lea %a15,[%a15]8
8000e2e4:	3c 19       	j 8000e316 <_realloc_r+0x2b6>
8000e2e6:	48 23       	ld.w %d3,[%a15]8
8000e2e8:	8b 44 02 82 	eq %d8,%d4,36
8000e2ec:	59 c3 10 00 	st.w [%a12]16,%d3
8000e2f0:	48 32       	ld.w %d2,[%a15]12
8000e2f2:	59 c2 14 00 	st.w [%a12]20,%d2
8000e2f6:	f6 86       	jnz %d8,8000e302 <_realloc_r+0x2a2>
8000e2f8:	d9 c4 18 00 	lea %a4,[%a12]24
8000e2fc:	d9 ff 10 00 	lea %a15,[%a15]16
8000e300:	3c 0b       	j 8000e316 <_realloc_r+0x2b6>
8000e302:	48 43       	ld.w %d3,[%a15]16
8000e304:	d9 c4 20 00 	lea %a4,[%a12]32
8000e308:	59 c3 18 00 	st.w [%a12]24,%d3
8000e30c:	48 52       	ld.w %d2,[%a15]20
8000e30e:	d9 ff 18 00 	lea %a15,[%a15]24
8000e312:	59 c2 1c 00 	st.w [%a12]28,%d2
8000e316:	48 03       	ld.w %d3,[%a15]0
8000e318:	74 43       	st.w [%a4],%d3
8000e31a:	48 12       	ld.w %d2,[%a15]4
8000e31c:	59 42 04 00 	st.w [%a4]4,%d2
8000e320:	48 23       	ld.w %d3,[%a15]8
8000e322:	59 43 08 00 	st.w [%a4]8,%d3
8000e326:	02 a8       	mov %d8,%d10
8000e328:	40 ce       	mov.aa %a14,%a12
8000e32a:	3c 66       	j 8000e3f6 <_realloc_r+0x396>
8000e32c:	40 f5       	mov.aa %a5,%a15
8000e32e:	6d ff 69 fe 	call 8000e000 <memmove>
8000e332:	3c fa       	j 8000e326 <_realloc_r+0x2c6>
8000e334:	40 d4       	mov.aa %a4,%a13
8000e336:	02 94       	mov %d4,%d9
8000e338:	6d ff 12 e7 	call 8000b15c <_malloc_r>
8000e33c:	40 2c       	mov.aa %a12,%a2
8000e33e:	7c 26       	jnz.a %a2,8000e34a <_realloc_r+0x2ea>
8000e340:	40 d4       	mov.aa %a4,%a13
8000e342:	6d ff 5b e9 	call 8000b5f8 <__malloc_unlock>
8000e346:	a0 02       	mov.a %a2,0
8000e348:	00 90       	ret 
8000e34a:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000e34e:	d9 23 f8 ff 	lea %a3,[%a2]-8
8000e352:	8f 12 c0 21 	andn %d2,%d2,1
8000e356:	01 e2 00 26 	addsc.a %a2,%a14,%d2,0
8000e35a:	80 32       	mov.d %d2,%a3
8000e35c:	80 23       	mov.d %d3,%a2
8000e35e:	5f 32 08 80 	jne %d2,%d3,8000e36e <_realloc_r+0x30e>
8000e362:	19 c2 fc ff 	ld.w %d2,[%a12]-4
8000e366:	8f 32 c0 21 	andn %d2,%d2,3
8000e36a:	42 28       	add %d8,%d2
8000e36c:	3c 45       	j 8000e3f6 <_realloc_r+0x396>
8000e36e:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e372:	8b 54 a2 f2 	ge.u %d15,%d4,37
8000e376:	ee 33       	jnz %d15,8000e3dc <_realloc_r+0x37c>
8000e378:	8b 44 61 f2 	lt.u %d15,%d4,20
8000e37c:	40 c3       	mov.aa %a3,%a12
8000e37e:	40 f2       	mov.aa %a2,%a15
8000e380:	ee 23       	jnz %d15,8000e3c6 <_realloc_r+0x366>
8000e382:	4c f0       	ld.w %d15,[%a15]0
8000e384:	d9 c3 08 00 	lea %a3,[%a12]8
8000e388:	6c c0       	st.w [%a12]0,%d15
8000e38a:	48 12       	ld.w %d2,[%a15]4
8000e38c:	8b c4 a1 f2 	ge.u %d15,%d4,28
8000e390:	59 c2 04 00 	st.w [%a12]4,%d2
8000e394:	d9 f2 08 00 	lea %a2,[%a15]8
8000e398:	6e 17       	jz %d15,8000e3c6 <_realloc_r+0x366>
8000e39a:	48 23       	ld.w %d3,[%a15]8
8000e39c:	8b 44 02 82 	eq %d8,%d4,36
8000e3a0:	59 c3 08 00 	st.w [%a12]8,%d3
8000e3a4:	4c f3       	ld.w %d15,[%a15]12
8000e3a6:	d9 c3 10 00 	lea %a3,[%a12]16
8000e3aa:	6c c3       	st.w [%a12]12,%d15
8000e3ac:	d9 f2 10 00 	lea %a2,[%a15]16
8000e3b0:	76 8b       	jz %d8,8000e3c6 <_realloc_r+0x366>
8000e3b2:	48 42       	ld.w %d2,[%a15]16
8000e3b4:	d9 c3 18 00 	lea %a3,[%a12]24
8000e3b8:	59 c2 10 00 	st.w [%a12]16,%d2
8000e3bc:	48 53       	ld.w %d3,[%a15]20
8000e3be:	d9 f2 18 00 	lea %a2,[%a15]24
8000e3c2:	59 c3 14 00 	st.w [%a12]20,%d3
8000e3c6:	4c 20       	ld.w %d15,[%a2]0
8000e3c8:	6c 30       	st.w [%a3]0,%d15
8000e3ca:	19 22 04 00 	ld.w %d2,[%a2]4
8000e3ce:	59 32 04 00 	st.w [%a3]4,%d2
8000e3d2:	19 23 08 00 	ld.w %d3,[%a2]8
8000e3d6:	59 33 08 00 	st.w [%a3]8,%d3
8000e3da:	3c 05       	j 8000e3e4 <_realloc_r+0x384>
8000e3dc:	40 c4       	mov.aa %a4,%a12
8000e3de:	40 f5       	mov.aa %a5,%a15
8000e3e0:	6d ff 10 fe 	call 8000e000 <memmove>
8000e3e4:	40 d4       	mov.aa %a4,%a13
8000e3e6:	40 f5       	mov.aa %a5,%a15
8000e3e8:	6d ff af e9 	call 8000b746 <_free_r>
8000e3ec:	40 d4       	mov.aa %a4,%a13
8000e3ee:	6d ff 05 e9 	call 8000b5f8 <__malloc_unlock>
8000e3f2:	40 c2       	mov.aa %a2,%a12
8000e3f4:	00 90       	ret 
8000e3f6:	0b f8 80 20 	sub %d2,%d8,%d15
8000e3fa:	8b 02 61 42 	lt.u %d4,%d2,16
8000e3fe:	19 e3 04 00 	ld.w %d3,[%a14]4
8000e402:	df 04 16 80 	jne %d4,0,8000e42e <_realloc_r+0x3ce>
8000e406:	8f 13 00 31 	and %d3,%d3,1
8000e40a:	10 e5       	addsc.a %a5,%a14,%d15,0
8000e40c:	a6 3f       	or %d15,%d3
8000e40e:	6c e1       	st.w [%a14]4,%d15
8000e410:	01 52 00 f6 	addsc.a %a15,%a5,%d2,0
8000e414:	8f 12 40 f1 	or %d15,%d2,1
8000e418:	b7 10 21 20 	imask %e2,1,0,1
8000e41c:	6c 51       	st.w [%a5]4,%d15
8000e41e:	49 f2 44 08 	ldmst [%a15]4,%e2
8000e422:	40 d4       	mov.aa %a4,%a13
8000e424:	d9 55 08 00 	lea %a5,[%a5]8
8000e428:	6d ff 8f e9 	call 8000b746 <_free_r>
8000e42c:	3c 0c       	j 8000e444 <_realloc_r+0x3e4>
8000e42e:	8f 13 00 31 	and %d3,%d3,1
8000e432:	a6 83       	or %d3,%d8
8000e434:	59 e3 04 00 	st.w [%a14]4,%d3
8000e438:	01 e8 00 f6 	addsc.a %a15,%a14,%d8,0
8000e43c:	b7 10 21 20 	imask %e2,1,0,1
8000e440:	49 f2 44 08 	ldmst [%a15]4,%e2
8000e444:	40 d4       	mov.aa %a4,%a13
8000e446:	6d ff d9 e8 	call 8000b5f8 <__malloc_unlock>
8000e44a:	d9 e2 08 00 	lea %a2,[%a14]8
8000e44e:	00 90       	ret 

8000e450 <_exit>:
8000e450:	76 43       	jz %d4,8000e456 <_exit+0x6>
8000e452:	60 4e       	mov.a %a14,%d4
8000e454:	3c 04       	j 8000e45c <_exit+0xc>
8000e456:	bb d0 00 f9 	mov.u %d15,36877
8000e45a:	60 fe       	mov.a %a14,%d15
8000e45c:	00 a0       	debug 
8000e45e:	3c 00       	j 8000e45e <_exit+0xe>

8000e460 <sbrk>:
8000e460:	91 00 00 f7 	movh.a %a15,28672
8000e464:	19 ff 90 50 	ld.w %d15,[%a15]2384 <70000950 <heap_top.2289>>
8000e468:	7b 00 00 27 	movh %d2,28672
8000e46c:	42 f4       	add %d4,%d15
8000e46e:	1b 02 f3 20 	addi %d2,%d2,3888
8000e472:	7f 42 09 80 	jge.u %d2,%d4,8000e484 <sbrk+0x24>
8000e476:	6d 00 13 00 	call 8000e49c <__errno>
8000e47a:	da 0c       	mov %d15,12
8000e47c:	6c 20       	st.w [%a2]0,%d15
8000e47e:	a0 02       	mov.a %a2,0
8000e480:	b0 f2       	add.a %a2,-1
8000e482:	00 90       	ret 
8000e484:	7b 00 00 27 	movh %d2,28672
8000e488:	1b 02 f3 20 	addi %d2,%d2,3888
8000e48c:	7f 24 04 80 	jge.u %d4,%d2,8000e494 <sbrk+0x34>
8000e490:	6d 00 0b 00 	call 8000e4a6 <abort>
8000e494:	59 f4 90 50 	st.w [%a15]2384,%d4
8000e498:	60 f2       	mov.a %a2,%d15
8000e49a:	00 90       	ret 

8000e49c <__errno>:
8000e49c:	91 00 00 27 	movh.a %a2,28672
8000e4a0:	d9 22 e8 c0 	lea %a2,[%a2]3880 <70000f28 <_my_errno>>
8000e4a4:	00 90       	ret 

8000e4a6 <abort>:
8000e4a6:	00 a0       	debug 
8000e4a8:	7b e0 ea fd 	movh %d15,57006
8000e4ac:	1b ff ee fb 	addi %d15,%d15,-16657
8000e4b0:	60 fe       	mov.a %a14,%d15
8000e4b2:	1d ff cf ff 	j 8000e450 <_exit>
8000e4b6:	3c 00       	j 8000e4b6 <abort+0x10>

8000e4b8 <__eqdf2>:
8000e4b8:	20 38       	sub.a %sp,56
8000e4ba:	40 a4       	mov.aa %a4,%sp
8000e4bc:	d9 a5 10 00 	lea %a5,[%sp]16
8000e4c0:	89 a4 40 09 	st.d [%sp],%e4
8000e4c4:	89 a6 48 09 	st.d [%sp]8,%e6
8000e4c8:	6d ff 84 e5 	call 8000afd0 <__unpack_d>
8000e4cc:	d9 a4 08 00 	lea %a4,[%sp]8
8000e4d0:	d9 a5 24 00 	lea %a5,[%sp]36
8000e4d4:	6d ff 7e e5 	call 8000afd0 <__unpack_d>
8000e4d8:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e4dc:	82 12       	mov %d2,1
8000e4de:	bf 2f 0c 80 	jlt.u %d15,2,8000e4f6 <__eqdf2+0x3e>
8000e4e2:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e4e6:	bf 2f 08 80 	jlt.u %d15,2,8000e4f6 <__eqdf2+0x3e>
8000e4ea:	d9 a4 10 00 	lea %a4,[%sp]16
8000e4ee:	d9 a5 24 00 	lea %a5,[%sp]36
8000e4f2:	6d 00 26 01 	call 8000e73e <__fpcmp_parts_d>
8000e4f6:	00 90       	ret 

8000e4f8 <__nedf2>:
8000e4f8:	20 38       	sub.a %sp,56
8000e4fa:	40 a4       	mov.aa %a4,%sp
8000e4fc:	d9 a5 10 00 	lea %a5,[%sp]16
8000e500:	89 a4 40 09 	st.d [%sp],%e4
8000e504:	89 a6 48 09 	st.d [%sp]8,%e6
8000e508:	6d ff 64 e5 	call 8000afd0 <__unpack_d>
8000e50c:	d9 a4 08 00 	lea %a4,[%sp]8
8000e510:	d9 a5 24 00 	lea %a5,[%sp]36
8000e514:	6d ff 5e e5 	call 8000afd0 <__unpack_d>
8000e518:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e51c:	82 12       	mov %d2,1
8000e51e:	bf 2f 0c 80 	jlt.u %d15,2,8000e536 <__nedf2+0x3e>
8000e522:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e526:	bf 2f 08 80 	jlt.u %d15,2,8000e536 <__nedf2+0x3e>
8000e52a:	d9 a4 10 00 	lea %a4,[%sp]16
8000e52e:	d9 a5 24 00 	lea %a5,[%sp]36
8000e532:	6d 00 06 01 	call 8000e73e <__fpcmp_parts_d>
8000e536:	00 90       	ret 

8000e538 <__gtdf2>:
8000e538:	20 38       	sub.a %sp,56
8000e53a:	40 a4       	mov.aa %a4,%sp
8000e53c:	d9 a5 10 00 	lea %a5,[%sp]16
8000e540:	89 a4 40 09 	st.d [%sp],%e4
8000e544:	89 a6 48 09 	st.d [%sp]8,%e6
8000e548:	6d ff 44 e5 	call 8000afd0 <__unpack_d>
8000e54c:	d9 a4 08 00 	lea %a4,[%sp]8
8000e550:	d9 a5 24 00 	lea %a5,[%sp]36
8000e554:	6d ff 3e e5 	call 8000afd0 <__unpack_d>
8000e558:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e55c:	82 f2       	mov %d2,-1
8000e55e:	bf 2f 0c 80 	jlt.u %d15,2,8000e576 <__gtdf2+0x3e>
8000e562:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e566:	bf 2f 08 80 	jlt.u %d15,2,8000e576 <__gtdf2+0x3e>
8000e56a:	d9 a4 10 00 	lea %a4,[%sp]16
8000e56e:	d9 a5 24 00 	lea %a5,[%sp]36
8000e572:	6d 00 e6 00 	call 8000e73e <__fpcmp_parts_d>
8000e576:	00 90       	ret 

8000e578 <__gedf2>:
8000e578:	20 38       	sub.a %sp,56
8000e57a:	40 a4       	mov.aa %a4,%sp
8000e57c:	d9 a5 10 00 	lea %a5,[%sp]16
8000e580:	89 a4 40 09 	st.d [%sp],%e4
8000e584:	89 a6 48 09 	st.d [%sp]8,%e6
8000e588:	6d ff 24 e5 	call 8000afd0 <__unpack_d>
8000e58c:	d9 a4 08 00 	lea %a4,[%sp]8
8000e590:	d9 a5 24 00 	lea %a5,[%sp]36
8000e594:	6d ff 1e e5 	call 8000afd0 <__unpack_d>
8000e598:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e59c:	82 f2       	mov %d2,-1
8000e59e:	bf 2f 0c 80 	jlt.u %d15,2,8000e5b6 <__gedf2+0x3e>
8000e5a2:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e5a6:	bf 2f 08 80 	jlt.u %d15,2,8000e5b6 <__gedf2+0x3e>
8000e5aa:	d9 a4 10 00 	lea %a4,[%sp]16
8000e5ae:	d9 a5 24 00 	lea %a5,[%sp]36
8000e5b2:	6d 00 c6 00 	call 8000e73e <__fpcmp_parts_d>
8000e5b6:	00 90       	ret 

8000e5b8 <__ltdf2>:
8000e5b8:	20 38       	sub.a %sp,56
8000e5ba:	40 a4       	mov.aa %a4,%sp
8000e5bc:	d9 a5 10 00 	lea %a5,[%sp]16
8000e5c0:	89 a4 40 09 	st.d [%sp],%e4
8000e5c4:	89 a6 48 09 	st.d [%sp]8,%e6
8000e5c8:	6d ff 04 e5 	call 8000afd0 <__unpack_d>
8000e5cc:	d9 a4 08 00 	lea %a4,[%sp]8
8000e5d0:	d9 a5 24 00 	lea %a5,[%sp]36
8000e5d4:	6d ff fe e4 	call 8000afd0 <__unpack_d>
8000e5d8:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e5dc:	82 12       	mov %d2,1
8000e5de:	bf 2f 0c 80 	jlt.u %d15,2,8000e5f6 <__ltdf2+0x3e>
8000e5e2:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e5e6:	bf 2f 08 80 	jlt.u %d15,2,8000e5f6 <__ltdf2+0x3e>
8000e5ea:	d9 a4 10 00 	lea %a4,[%sp]16
8000e5ee:	d9 a5 24 00 	lea %a5,[%sp]36
8000e5f2:	6d 00 a6 00 	call 8000e73e <__fpcmp_parts_d>
8000e5f6:	00 90       	ret 

8000e5f8 <__fixdfsi>:
8000e5f8:	20 20       	sub.a %sp,32
8000e5fa:	d9 a4 20 00 	lea %a4,[%sp]32
8000e5fe:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000e602:	d9 a5 0c 00 	lea %a5,[%sp]12
8000e606:	6d ff e5 e4 	call 8000afd0 <__unpack_d>
8000e60a:	0c ac       	ld.bu %d15,[%sp]12
8000e60c:	82 02       	mov %d2,0
8000e60e:	bf 3f 1b 80 	jlt.u %d15,3,8000e644 <__fixdfsi+0x4c>
8000e612:	5e 48       	jne %d15,4,8000e622 <__fixdfsi+0x2a>
8000e614:	7b 00 00 28 	movh %d2,32768
8000e618:	58 04       	ld.w %d15,[%sp]16
8000e61a:	1b f2 ff 3f 	addi %d3,%d2,-1
8000e61e:	6a 32       	cmovn %d2,%d15,%d3
8000e620:	00 90       	ret 
8000e622:	19 a6 14 00 	ld.w %d6,[%sp]20
8000e626:	82 02       	mov %d2,0
8000e628:	0e 6e       	jltz %d6,8000e644 <__fixdfsi+0x4c>
8000e62a:	8b f6 81 f2 	ge %d15,%d6,31
8000e62e:	ee f3       	jnz %d15,8000e614 <__fixdfsi+0x1c>
8000e630:	09 a4 58 09 	ld.d %e4,[%sp]24
8000e634:	8b c6 03 61 	rsub %d6,%d6,60
8000e638:	6d ff 09 e1 	call 8000a84a <__lshrdi3>
8000e63c:	58 04       	ld.w %d15,[%sp]16
8000e63e:	8b 02 00 41 	rsub %d4,%d2,0
8000e642:	2a 42       	cmov %d2,%d15,%d4
8000e644:	00 90       	ret 

8000e646 <__floatunsidf>:
8000e646:	20 18       	sub.a %sp,24
8000e648:	82 0f       	mov %d15,0
8000e64a:	78 02       	st.w [%sp]8,%d15
8000e64c:	f6 44       	jnz %d4,8000e654 <__floatunsidf+0xe>
8000e64e:	82 2f       	mov %d15,2
8000e650:	2c a4       	st.b [%sp]4,%d15
8000e652:	3c 0f       	j 8000e670 <__floatunsidf+0x2a>
8000e654:	82 3f       	mov %d15,3
8000e656:	2c a4       	st.b [%sp]4,%d15
8000e658:	0f 04 b0 f1 	clz %d15,%d4
8000e65c:	1b df 01 60 	addi %d6,%d15,29
8000e660:	82 05       	mov %d5,0
8000e662:	6d ff d9 e3 	call 8000ae14 <__ashldi3>
8000e666:	8b ff 01 f1 	rsub %d15,%d15,31
8000e66a:	89 a2 50 09 	st.d [%sp]16,%e2
8000e66e:	78 03       	st.w [%sp]12,%d15
8000e670:	d9 a4 04 00 	lea %a4,[%sp]4
8000e674:	1d ff 25 e4 	j 8000aebe <__pack_d>

8000e678 <__udivdi3>:
8000e678:	0f 67 a0 20 	or %d2,%d7,%d6
8000e67c:	0b 45 10 a8 	mov %e10,%d5,%d4
8000e680:	02 6f       	mov %d15,%d6
8000e682:	02 7c       	mov %d12,%d7
8000e684:	d2 f8       	mov %e8,-1
8000e686:	df 02 46 00 	jeq %d2,0,8000e712 <__udivdi3+0x9a>
8000e68a:	8f 07 40 21 	or %d2,%d7,0
8000e68e:	f6 2d       	jnz %d2,8000e6a8 <__udivdi3+0x30>
8000e690:	4b 6b 11 82 	div.u %e8,%d11,%d6
8000e694:	d2 04       	mov %e4,0
8000e696:	02 a4       	mov %d4,%d10
8000e698:	42 95       	add %d5,%d9
8000e69a:	6d 00 a5 00 	call 8000e7e4 <__udiv6432>
8000e69e:	82 04       	mov %d4,0
8000e6a0:	02 85       	mov %d5,%d8
8000e6a2:	13 12 40 84 	madd.u %e8,%e4,%d2,1
8000e6a6:	3c 36       	j 8000e712 <__udivdi3+0x9a>
8000e6a8:	0b 7b 00 21 	eq %d2,%d11,%d7
8000e6ac:	0b 64 30 22 	and.lt.u %d2,%d4,%d6
8000e6b0:	0b 7b a0 22 	or.lt.u %d2,%d11,%d7
8000e6b4:	d2 08       	mov %e8,0
8000e6b6:	df 02 2e 80 	jne %d2,0,8000e712 <__udivdi3+0x9a>
8000e6ba:	77 4b 80 5f 	dextr %d5,%d11,%d4,31
8000e6be:	0f 07 b0 d1 	clz %d13,%d7
8000e6c2:	60 5f       	mov.a %a15,%d5
8000e6c4:	0b 67 10 48 	mov %e4,%d7,%d6
8000e6c8:	02 d6       	mov %d6,%d13
8000e6ca:	6d ff a5 e3 	call 8000ae14 <__ashldi3>
8000e6ce:	8f fb 1f e0 	sh %d14,%d11,-1
8000e6d2:	80 f4       	mov.d %d4,%a15
8000e6d4:	02 36       	mov %d6,%d3
8000e6d6:	02 e5       	mov %d5,%d14
8000e6d8:	6d 00 86 00 	call 8000e7e4 <__udiv6432>
8000e6dc:	8b fd 01 d1 	rsub %d13,%d13,31
8000e6e0:	8b 0d 00 31 	rsub %d3,%d13,0
8000e6e4:	0f 32 00 30 	sh %d3,%d2,%d3
8000e6e8:	02 32       	mov %d2,%d3
8000e6ea:	8b f2 9f 80 	addx %d8,%d2,-1
8000e6ee:	23 f8 68 aa 	msub.u %e10,%e10,%d8,%d15
8000e6f2:	82 03       	mov %d3,0
8000e6f4:	8b f3 bf 90 	addc %d9,%d3,-1
8000e6f8:	23 c8 0a bb 	msub %d11,%d11,%d8,%d12
8000e6fc:	23 f9 0a bb 	msub %d11,%d11,%d9,%d15
8000e700:	0b cb 00 41 	eq %d4,%d11,%d12
8000e704:	0b fa 30 42 	and.lt.u %d4,%d10,%d15
8000e708:	0b cb a0 42 	or.lt.u %d4,%d11,%d12
8000e70c:	f6 43       	jnz %d4,8000e712 <__udivdi3+0x9a>
8000e70e:	0b 23 10 88 	mov %e8,%d3,%d2
8000e712:	0b 89 10 28 	mov %e2,%d9,%d8
8000e716:	00 90       	ret 

8000e718 <__umoddi3>:
8000e718:	0f 67 a0 90 	or %d9,%d7,%d6
8000e71c:	02 6f       	mov %d15,%d6
8000e71e:	d2 00       	mov %e0,0
8000e720:	76 9c       	jz %d9,8000e738 <__umoddi3+0x20>
8000e722:	02 7a       	mov %d10,%d7
8000e724:	0b 45 10 88 	mov %e8,%d5,%d4
8000e728:	6d ff a8 ff 	call 8000e678 <__udivdi3>
8000e72c:	23 f2 68 08 	msub.u %e0,%e8,%d2,%d15
8000e730:	23 a2 0a 11 	msub %d1,%d1,%d2,%d10
8000e734:	23 f3 0a 11 	msub %d1,%d1,%d3,%d15
8000e738:	0b 01 10 28 	mov %e2,%d1,%d0
8000e73c:	00 90       	ret 

8000e73e <__fpcmp_parts_d>:
8000e73e:	14 43       	ld.bu %d3,[%a4]
8000e740:	82 12       	mov %d2,1
8000e742:	bf 23 50 80 	jlt.u %d3,2,8000e7e2 <__fpcmp_parts_d+0xa4>
8000e746:	0c 50       	ld.bu %d15,[%a5]0
8000e748:	bf 2f 4d 80 	jlt.u %d15,2,8000e7e2 <__fpcmp_parts_d+0xa4>
8000e74c:	8b 43 00 42 	eq %d4,%d3,4
8000e750:	8b 4f 00 22 	eq %d2,%d15,4
8000e754:	0f 24 80 50 	and %d5,%d4,%d2
8000e758:	76 56       	jz %d5,8000e764 <__fpcmp_parts_d+0x26>
8000e75a:	19 52 04 00 	ld.w %d2,[%a5]4
8000e75e:	4c 41       	ld.w %d15,[%a4]4
8000e760:	a2 f2       	sub %d2,%d15
8000e762:	00 90       	ret 
8000e764:	76 47       	jz %d4,8000e772 <__fpcmp_parts_d+0x34>
8000e766:	19 42 04 00 	ld.w %d2,[%a4]4
8000e76a:	82 1f       	mov %d15,1
8000e76c:	ab ff bf 22 	seln %d2,%d2,%d15,-1
8000e770:	00 90       	ret 
8000e772:	76 27       	jz %d2,8000e780 <__fpcmp_parts_d+0x42>
8000e774:	19 52 04 00 	ld.w %d2,[%a5]4
8000e778:	82 ff       	mov %d15,-1
8000e77a:	ab 1f a0 22 	seln %d2,%d2,%d15,1
8000e77e:	00 90       	ret 
8000e780:	df 23 06 80 	jne %d3,2,8000e78c <__fpcmp_parts_d+0x4e>
8000e784:	82 02       	mov %d2,0
8000e786:	df 2f f7 ff 	jne %d15,2,8000e774 <__fpcmp_parts_d+0x36>
8000e78a:	00 90       	ret 
8000e78c:	df 2f ed 7f 	jeq %d15,2,8000e766 <__fpcmp_parts_d+0x28>
8000e790:	19 45 04 00 	ld.w %d5,[%a4]4
8000e794:	4c 51       	ld.w %d15,[%a5]4
8000e796:	5f f5 19 80 	jne %d5,%d15,8000e7c8 <__fpcmp_parts_d+0x8a>
8000e79a:	19 42 08 00 	ld.w %d2,[%a4]8
8000e79e:	4c 52       	ld.w %d15,[%a5]8
8000e7a0:	3f 2f 14 00 	jlt %d15,%d2,8000e7c8 <__fpcmp_parts_d+0x8a>
8000e7a4:	3f f2 1c 00 	jlt %d2,%d15,8000e7dc <__fpcmp_parts_d+0x9e>
8000e7a8:	19 43 10 00 	ld.w %d3,[%a4]16
8000e7ac:	19 54 10 00 	ld.w %d4,[%a5]16
8000e7b0:	19 47 0c 00 	ld.w %d7,[%a4]12
8000e7b4:	19 56 0c 00 	ld.w %d6,[%a5]12
8000e7b8:	0b 43 00 21 	eq %d2,%d3,%d4
8000e7bc:	0b 76 50 22 	and.ge.u %d2,%d6,%d7
8000e7c0:	0b 43 a0 22 	or.lt.u %d2,%d3,%d4
8000e7c4:	3a 43       	eq %d15,%d3,%d4
8000e7c6:	f6 25       	jnz %d2,8000e7d0 <__fpcmp_parts_d+0x92>
8000e7c8:	82 12       	mov %d2,1
8000e7ca:	ab f2 bf 25 	seln %d2,%d5,%d2,-1
8000e7ce:	00 90       	ret 
8000e7d0:	0b 67 50 f2 	and.ge.u %d15,%d7,%d6
8000e7d4:	0b 34 a0 f2 	or.lt.u %d15,%d4,%d3
8000e7d8:	82 02       	mov %d2,0
8000e7da:	ee 04       	jnz %d15,8000e7e2 <__fpcmp_parts_d+0xa4>
8000e7dc:	82 f2       	mov %d2,-1
8000e7de:	ab 12 a0 25 	seln %d2,%d5,%d2,1
8000e7e2:	00 90       	ret 

8000e7e4 <__udiv6432>:
8000e7e4:	02 53       	mov %d3,%d5
8000e7e6:	82 f2       	mov %d2,-1
8000e7e8:	7f 65 4b 80 	jge.u %d5,%d6,8000e87e <__udiv6432+0x9a>
8000e7ec:	0f 06 b0 21 	clz %d2,%d6
8000e7f0:	0f 26 00 60 	sh %d6,%d6,%d2
8000e7f4:	17 45 80 52 	dextr %d5,%d5,%d4,%d2
8000e7f8:	2b 35 40 32 	sel %d3,%d2,%d5,%d3
8000e7fc:	8f 06 1f 70 	sh %d7,%d6,-16
8000e800:	4b 73 11 02 	div.u %e0,%d3,%d7
8000e804:	b7 06 10 88 	insert %d8,%d6,0,16,16
8000e808:	0f 24 00 20 	sh %d2,%d4,%d2
8000e80c:	02 05       	mov %d5,%d0
8000e80e:	23 07 0a 13 	msub %d1,%d3,%d7,%d0
8000e812:	e2 80       	mul %d0,%d8
8000e814:	8f 02 1f b0 	sh %d11,%d2,-16
8000e818:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000e81c:	82 0c       	mov %d12,0
8000e81e:	7b 10 00 90 	movh %d9,1
8000e822:	7f 95 09 80 	jge.u %d5,%d9,8000e834 <__udiv6432+0x50>
8000e826:	8f 01 01 f0 	sh %d15,%d1,16
8000e82a:	0b 0c 00 a0 	add %d10,%d12,%d0
8000e82e:	42 bf       	add %d15,%d11
8000e830:	7f af 07 80 	jge.u %d15,%d10,8000e83e <__udiv6432+0x5a>
8000e834:	42 71       	add %d1,%d7
8000e836:	c2 f5       	add %d5,-1
8000e838:	a2 8c       	sub %d12,%d8
8000e83a:	3f 91 f4 ff 	jlt.u %d1,%d9,8000e822 <__udiv6432+0x3e>
8000e83e:	8f 03 01 30 	sh %d3,%d3,16
8000e842:	42 3b       	add %d11,%d3
8000e844:	23 65 0a 6b 	msub %d6,%d11,%d5,%d6
8000e848:	82 0a       	mov %d10,0
8000e84a:	4b 76 11 02 	div.u %e0,%d6,%d7
8000e84e:	7b 10 00 10 	movh %d1,1
8000e852:	02 03       	mov %d3,%d0
8000e854:	23 07 0a 66 	msub %d6,%d6,%d7,%d0
8000e858:	e2 80       	mul %d0,%d8
8000e85a:	7f 13 09 80 	jge.u %d3,%d1,8000e86c <__udiv6432+0x88>
8000e85e:	8f 06 01 f0 	sh %d15,%d6,16
8000e862:	0b 0a 00 90 	add %d9,%d10,%d0
8000e866:	42 2f       	add %d15,%d2
8000e868:	7f 9f 07 80 	jge.u %d15,%d9,8000e876 <__udiv6432+0x92>
8000e86c:	42 76       	add %d6,%d7
8000e86e:	c2 f3       	add %d3,-1
8000e870:	a2 8a       	sub %d10,%d8
8000e872:	3f 16 f4 ff 	jlt.u %d6,%d1,8000e85a <__udiv6432+0x76>
8000e876:	8f 05 01 50 	sh %d5,%d5,16
8000e87a:	0b 53 00 20 	add %d2,%d3,%d5
8000e87e:	00 90       	ret 
