
erika3app.elf:     file format elf32-tricore
erika3app.elf
architecture: TriCore:V1_6_1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000020

Program Header:
    LOAD off    0x00004020 vaddr 0x80000020 paddr 0x80000020 align 2**14
         filesz 0x0000e0f0 memsz 0x0000e0f0 flags r-x
    LOAD off    0x00014000 vaddr 0x70000000 paddr 0x8000e110 align 2**14
         filesz 0x00000900 memsz 0x00000900 flags rw-
    LOAD off    0x00016600 vaddr 0x5001a600 paddr 0x8000ea10 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x5001b700 paddr 0x8000ea10 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00016600 vaddr 0x6001a600 paddr 0x8000ea10 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x6001b700 paddr 0x8000ea10 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00014900 vaddr 0x70000900 paddr 0x8000ea10 align 2**14
         filesz 0x00000000 memsz 0x00000320 flags rw-
    LOAD off    0x00018600 vaddr 0x70018600 paddr 0x8000ea10 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00015700 vaddr 0x70019700 paddr 0x8000ea10 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00017c00 vaddr 0x5001bc00 paddr 0x8000ea40 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00017c00 vaddr 0x6001bc00 paddr 0x8000ea40 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00015c00 vaddr 0x70019c00 paddr 0x8000ea40 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .startup      00000006  80000020  80000020  00004020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00001038  80000028  80000028  00004028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00000320  70000900  8000ea10  00014900  2**3
                  ALLOC
  3 .data         00000900  70000000  8000e110  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .traptab      00000100  80001100  80001100  00005100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .ctors        00000008  80001200  80001200  00005200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .dtors        00000008  80001208  80001208  00005208  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .inttab_cpu0  00002000  80002000  80002000  00006000  2**13
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text         0000a110  80004000  80004000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .CPU2.ustack  00001000  5001a600  8000ea10  00016600  2**3
                  ALLOC, CPU2
 10 .CPU2.istack  00000400  5001b700  8000ea10  00017700  2**3
                  ALLOC, CPU2
 11 .CPU2.csa     00002000  5001bc00  8000ea40  00017c00  2**6
                  ALLOC, CPU2
 12 .CPU1.ustack  00001000  6001a600  8000ea10  00016600  2**3
                  ALLOC, CPU1
 13 .CPU1.istack  00000400  6001b700  8000ea10  00017700  2**3
                  ALLOC, CPU1
 14 .CPU1.csa     00002000  6001bc00  8000ea40  00017c00  2**6
                  ALLOC, CPU1
 15 .CPU0.ustack  00001000  70018600  8000ea10  00018600  2**3
                  ALLOC, CPU0
 16 .CPU0.istack  00000400  70019700  8000ea10  00015700  2**3
                  ALLOC, CPU0
 17 .CPU0.csa     00002000  70019c00  8000ea40  00015c00  2**6
                  ALLOC, CPU0
 18 .comment      00000053  00000000  00000000  00014900  2**0
                  CONTENTS, READONLY
 19 .debug_aranges 00000cf0  00000000  00000000  00014958  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_info   000c00a7  00000000  00000000  00015648  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_abbrev 0000bc0d  00000000  00000000  000d56ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0000e149  00000000  00000000  000e12fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_frame  00002168  00000000  00000000  000ef448  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    00001f94  00000000  00000000  000f15b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_loc    00013c06  00000000  00000000  000f3544  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_ranges 00001398  00000000  00000000  0010714a  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .version_info 0004dce5  00000000  00000000  001084e2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
80000020 l    d  .startup	00000000 .startup
80000028 l    d  .rodata	00000000 .rodata
70000900 l    d  .bss	00000000 .bss
70000000 l    d  .data	00000000 .data
80001100 l    d  .traptab	00000000 .traptab
80001200 l    d  .ctors	00000000 .ctors
80001208 l    d  .dtors	00000000 .dtors
80002000 l    d  .inttab_cpu0	00000000 .inttab_cpu0
80004000 l    d  .text	00000000 .text
5001a600 l    d  .CPU2.ustack	00000000 .CPU2.ustack
5001b700 l    d  .CPU2.istack	00000000 .CPU2.istack
5001bc00 l    d  .CPU2.csa	00000000 .CPU2.csa
6001a600 l    d  .CPU1.ustack	00000000 .CPU1.ustack
6001b700 l    d  .CPU1.istack	00000000 .CPU1.istack
6001bc00 l    d  .CPU1.csa	00000000 .CPU1.csa
70018600 l    d  .CPU0.ustack	00000000 .CPU0.ustack
70019700 l    d  .CPU0.istack	00000000 .CPU0.istack
70019c00 l    d  .CPU0.csa	00000000 .CPU0.csa
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .version_info	00000000 .version_info
00000000 l    df *ABS*	00000000 ee_tc_cstart.c
00000000 l    df *ABS*	00000000 asw.c
70000000 l     O .data	00000004 c.15755
00000000 l    df *ABS*	00000000 bsw.c
00000000 l    df *ABS*	00000000 ee_applcfg.c
800000e4 l     O .rodata	00000014 osEE_tdb_ptr_array
800000d8 l     O .rodata	00000004 osEE_res_db_ptr_array
800000f8 l     O .rodata	000000a0 osEE_tdb_array
70000030 l     O .data	00000020 osEE_sn_array
800000dc l     O .rodata	00000008 osEE_res_db_array
70000bbc l     O .bss	0000000c osEE_res_cb_array
80000198 l     O .rodata	00000008 osEE_sdb_array
70000bc8 l     O .bss	00000004 osEE_scb_array
70000050 l     O .data	00000064 osEE_tcb_array
00000000 l    df *ABS*	00000000 IfxVadc.c
800001a0 l     O .rodata	00000006 CSWTCH.25
00000000 l    df *ABS*	00000000 IfxVadc_cfg.c
00000000 l    df *ABS*	00000000 IfxAsclin_PinMap.c
00000000 l    df *ABS*	00000000 IfxAsclin_cfg.c
00000000 l    df *ABS*	00000000 IfxPort_cfg.c
00000000 l    df *ABS*	00000000 IfxScuCcu.c
700000b8 l     O .data	00000004 IfxScuCcu_xtalFrequency
80006050 l     F .text	00000034 IfxScuCcu_wait
80000a74 l     O .rodata	00000024 IfxScuCcu_aDefaultPllConfigSteps
00000000 l    df *ABS*	00000000 IfxScu_PinMap.c
00000000 l    df *ABS*	00000000 IfxVadc_Adc.c
80000d10 l     O .rodata	00000040 IfxVadc_Adc_masterIndex
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 vfprintf.c
80000da8 l     O .rodata	00000010 blanks.4035
80000d98 l     O .rodata	00000010 zeroes.4036
00000000 l    df *ABS*	00000000 dtoa.c
8000c0f4 l     F .text	0000011a quorem
00000000 l    df *ABS*	00000000 impure.c
700004d4 l     O .data	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
80000ddc l     O .rodata	00000038 lconv
00000000 l    df *ABS*	00000000 mprec.c
80000e14 l     O .rodata	0000000c p05.2553
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_sbrk.c
700008f8 l     O .data	00000004 heap_top.2289
00000000 l    df *ABS*	00000000 ee_tc_trapvec.c
00000000 l    df *ABS*	00000000 ee_tc_intvec.c
8000915e l     F .text	0000000e osEE_tc_isr2_wrapper
00000000 l    df *ABS*	00000000 Lcd_Driver.c
8000406a l     F .text	00000060 lcd_write4bits
800040ca l     F .text	00000020 lcd_command
00000000 l    df *ABS*	00000000 IfxAsclin.c
00000000 l    df *ABS*	00000000 IfxAsclin_Asc.c
00000000 l    df *ABS*	00000000 IfxPort.c
00000000 l    df *ABS*	00000000 IfxScuEru.c
00000000 l    df *ABS*	00000000 IfxScuWdt.c
00000000 l    df *ABS*	00000000 Ifx_CircularBuffer.c
00000000 l    df *ABS*	00000000 Ifx_Fifo.c
00000000 l    df *ABS*	00000000 ee_tc_system.c
80008c8e l     F .text	00000054 osEE_tc_stm_us_ticks
70000bd0 l     O .bss	00000004 osEE_tc_stm_freq_khz
00000000 l    df *ABS*	00000000 ee_oo_api_osek.c
8000916c l     F .text	0000001e osEE_shutdown_os
00000000 l    df *ABS*	00000000 ee_oo_sched_entry_points.c
80009a30 l     F .text	00000022 osEE_release_all_m
00000000 l    df *ABS*	00000000 ee_oo_scheduler.c
00000000 l    df *ABS*	00000000 ee_oo_kernel.c
00000000 l    df *ABS*	00000000 ee_oo_sched_partitioned.c
00000000 l    df *ABS*	00000000 ee_std_change_context.c
00000000 l    df *ABS*	00000000 ee_tc_hal.c
00000000 l    df *ABS*	00000000 ee_tc_ctx.c
80009f26 l     F .text	00000022 osEE_tc_change_context_from_task_end
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
8000a0fe l     F .text	0000019c _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_exit.c
00000000 l    df *ABS*	00000000 libos.c
00000000 l    df *ABS*	00000000 libos_abort.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udivdi3.c
00000000 l    df *ABS*	00000000 umoddi3.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udiv6432.c
00000000 l    df *ABS*	00000000 Bsp.c
00000000 l    df *ABS*	00000000 CompilerGnuc.c
00000000 l    df *ABS*	00000000 IfxCpu.c
00000000 l    df *ABS*	00000000 IfxCpu_Irq.c
00000000 l    df *ABS*	00000000 IfxCpu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc.c
00000000 l    df *ABS*	00000000 IfxStdIf_DPipe.c
00000000 l    df *ABS*	00000000 IfxStm.c
00000000 l    df *ABS*	00000000 IfxStm_cfg.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 IfxScu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc_cfg.c
800003a8 g     O .rodata	00000010 IfxAsclin1_TX_P33_12_OUT
800031c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_142
80002d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_105
70000010 g     O .data	00000020 osEE_ccb_var
70000c20 g     O .text	00000001 __HEAP
80003980 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_204
80005844 g     F .text	00000062 IfxAsclin_Asc_write
800050e2 g     F .text	0000000a IfxAsclin_Asc_getWriteEvent
8000716c g     F .text	00000032 IfxScuWdt_clearSafetyEndinit
80002c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_100
800073a0 g     F .text	00000036 IfxScuWdt_setCpuEndinit
80000e20 g     O .rodata	00000028 __mprec_tinytens
80000ab8 g     O .rodata	00000010 IfxScu_WDT1LCK_P20_7_OUT
80004398 g     F .text	000000e8 mdelay
8000a6a2 g     F .text	0000001a .hidden __ashldi3
80007102 g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogReload
800021e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_15
800094dc g     F .text	0000005a TerminateTask
8000515e g     F .text	00000006 IfxAsclin_Asc_resetSendCount
800001a8 g     O .rodata	000000a0 IfxVadc_cfg_srcAddresses
70000bb8 g     O .bss	00000004 osEE_kcb_var
80000358 g     O .rodata	00000010 IfxAsclin2_TX_P14_2_OUT
80002f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_123
8000814a g     F .text	00000020 Ifx_CircularBuffer_addDataIncr
80004c0e g     F .text	00000014 IfxVadc_setScan
8000dd7a g     F .text	00000040 .hidden __eqdf2
80005774 g     F .text	00000088 IfxAsclin_Asc_initModuleConfig
80007096 g     F .text	00000038 IfxScuWdt_changeCpuWatchdogReload
80004880 g     F .text	00000010 IfxVadc_getQueueStatus
00000000 g       *ABS*	00000000 __HEAP_SIZE
80008400 g     F .text	00000176 Ifx_Fifo_read
80004c68 g     F .text	0000001c IfxAsclin_disableModule
800006f8 g     O .rodata	00000010 IfxAsclin3_RXC_P20_3_IN
80009b06 g     F .text	00000022 osEE_idle_hook_wrapper
6001a600 g       .CPU1.ustack	00000000 __USTACK1_AREA_END
80003e40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_242
80002300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_24
80003580 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_172
80008822 g     F .text	0000046c osEE_tc_core0_start
800024c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_38
800082c6 g     F .text	00000004 Ifx_Fifo_destroy
70019b00 g     O .CPU0.istack	00000000 __ISTACK0
800075da g     F .text	00000108 IfxVadc_Adc_getChannelConfig
80004830 g     F .text	00000018 IfxVadc_getAdcAnalogFrequency
70000000 g       *ABS*	00000000 __DSPR0_START
80002be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_95
80002740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_58
80009f86 g     F .text	00000024 osEE_hal_save_ctx_and_ready2stacked
80002c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_97
8000690c g     F .text	00000012 IfxScuCcu_initErayPllConfig
80009e4e g     F .text	00000028 osEE_change_context_from_running
800050d4 g     F .text	0000000e IfxAsclin_Asc_getWriteCount
80000718 g     O .rodata	00000010 IfxAsclin3_RXA_P15_7_IN
8000702c g     F .text	00000032 IfxScuEru_setInterruptGatingPattern
80005220 g     F .text	00000014 IfxAsclin_Asc_clearTx
800058c2 g     F .text	000000c6 IfxAsclin_Asc_stdIfDPipeInit
80002560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_43
8000ae86 g     F .text	00000002 __malloc_unlock
800050be g     F .text	0000000a IfxAsclin_Asc_getReadEvent
80004276 g     F .text	00000042 TimerISR
800085ac g     F .text	000000f0 Ifx_Fifo_canWriteCount
80007f12 g     F .text	000000e8 IfxVadc_Adc_initModule
800032e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_151
80002ec0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_118
80002c60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_99
8000474a g     F .text	0000003c IfxVadc_disablePostCalibration
80002680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_52
8000492e g     F .text	00000028 IfxVadc_getSrcAddress
8000497a g     F .text	00000024 IfxVadc_initialiseAdcConverterClock
80004d92 g     F .text	00000024 IfxAsclin_getOvsFrequency
800098f6 g     F .text	00000096 SetEvent
800076e2 g     F .text	00000038 IfxVadc_Adc_getChannelConversionTime
80003e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_244
80002380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_28
80006fee g     F .text	00000012 IfxScuEru_setEventFlag
80003920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_201
80009a52 g     F .text	0000000a osEE_scheduler_task_wrapper_restore
80000cc0 g     O .rodata	00000010 IfxScu_EVRWUPA_P14_1_IN
800004c8 g     O .rodata	00000010 IfxAsclin3_SLSO_P12_1_OUT
70019600 g     O .CPU0.ustack	00000000 __USTACK0
80003720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_185
8000d8c2 g     F .text	00000050 memmove
70018600 g       .CPU0.ustack	00000000 __USTACK0_AREA_END
8000d188 g     F .text	00000056 _Balloc
80000ca0 g     O .rodata	00000010 IfxScu_EXTCLK0_P23_1_OUT
80003b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_216
800007b8 g     O .rodata	00000010 IfxAsclin1_RXE_P11_10_IN
80000598 g     O .rodata	00000010 IfxAsclin3_SCLK_P15_8_OUT
80006226 g     F .text	0000004a IfxScuCcu_getModuleFrequency
80003aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_213
800028e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_71
80006398 g     F .text	000003be IfxScuCcu_init
8000ddfa g     F .text	00000040 .hidden __gtdf2
8000dd5e  w    F .text	0000000a __errno
800037e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_191
80003380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_156
800091bc g     F .text	00000042 SuspendAllInterrupts
80002140 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_10
80005164 g     F .text	00000008 IfxAsclin_Asc_canReadCount
80003180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_140
80002ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_103
00001000 g       *ABS*	00000000 __USTACK0_SIZE
80000798 g     O .rodata	00000010 IfxAsclin1_RXG_P02_3_IN
80009ff4 g     F .text	00000066 osEE_hal_terminate_ctx
80000248 g     O .rodata	00000010 IfxAsclin3_TX_P32_3_OUT
80009b98 g     F .text	00000048 osEE_sn_priority_insert
80003480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_164
80003ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_215
80009804 g     F .text	00000078 GetTaskState
80008108 g     F .text	00000020 Ifx_CircularBuffer_get32
80009c4a g     F .text	00000022 osEE_task_event_set_mask
800002d8 g     O .rodata	00000010 IfxAsclin3_TX_P11_1_OUT
80000708 g     O .rodata	00000010 IfxAsclin3_RXB_P11_0_IN
800073d6 g     F .text	0000009e IfxScuWdt_initCpuWatchdog
80005b28 g     F .text	00000092 IfxPort_setGroupModeOutput
80002080 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_4
00000400 g       *ABS*	00000000 __ISTACK1_SIZE
80005f76 g     F .text	00000072 IfxScuCcu_getPllFrequency
80002a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_82
70000c10 g     O .bss	00000004 errno
8000a616 g     F .text	0000001e .hidden __make_dp
80002e40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_114
0001a600 g       *ABS*	00000000 __USTACK1_OFFSET
800022a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_21
80001160 g       .traptab	00000000 osEE_tc_trap_context
80007558 g     F .text	00000040 IfxScuWdt_enableWatchdogWithDebugger
80002ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_117
800006a8 g     O .rodata	00000010 IfxAsclin3_RXG_P21_3_IN
80000848 g     O .rodata	00000010 IfxAsclin2_RTS_P33_4_OUT
80000508 g     O .rodata	00000010 IfxAsclin2_SLSO_P02_3_OUT
800027e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_63
8000a736 g     F .text	00000016 .hidden __make_fp
80003560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_171
800044d0 g     F .text	0000007e initVADCChannels
800023c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_30
80000278 g     O .rodata	00000010 IfxAsclin3_TX_P22_0_OUT
800020c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_6
80003780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_188
80000ba0 g     O .rodata	00000014 IfxScu_REQ15_P14_1_IN
80000c18 g     O .rodata	00000014 IfxScu_REQ0_P15_4_IN
80002260 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_19
8000705e g     F .text	00000038 IfxScuWdt_changeCpuWatchdogPassword
800099be g     F .text	00000058 ClearEvent
800062ea g     F .text	00000042 IfxScuCcu_getCpuFrequency
80003d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_232
800028a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_69
80009a5c g     F .text	000000aa osEE_scheduler_task_wrapper_run
80003f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_251
800035c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_174
800005e8 g     O .rodata	00000010 IfxAsclin3_SCLK_P00_0_OUT
80003700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_184
80000918 g     O .rodata	00000080 IfxPort_cfg_indexMap
800053c6 g     F .text	000003ae IfxAsclin_Asc_initModule
80009dea g     F .text	00000026 osEE_scheduler_task_preemption_point
8000d16c g     F .text	0000001c memcpy
800021c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_14
80004208 g     F .text	00000024 FuncTask1
8000aef0 g     F .text	000011a4 _svfprintf_r
8000a5ce g     F .text	00000048 .hidden __floatsidf
8000771a g     F .text	0000023e IfxVadc_Adc_getGroupConfig
80006ec0 g     F .text	00000026 IfxScuEru_enablePatternDetectionTrigger
80009be0 g     F .text	0000000e osEE_scheduler_rq_insert
80002940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_74
8000de7a g     F .text	00000040 .hidden __ltdf2
80004924 g     F .text	0000000a IfxVadc_getScanStatus
80001210 g       .dtors	00000000 __DTOR_END__
8000691e g     F .text	00000076 IfxScuCcu_setCpuFrequency
80007000 g     F .text	0000002c IfxScuEru_setFlagPatternDetection
80009e96 g     F .text	00000026 osEE_idle_task_terminate
80000c04 g     O .rodata	00000014 IfxScu_REQ10_P14_3_IN
80003c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_228
80000838 g     O .rodata	00000010 IfxAsclin3_RTS_P00_9_OUT
80000668 g     O .rodata	00000010 IfxAsclin1_SCLK_P20_10_OUT
8000d72e g     F .text	00000042 __fpclassifyd
800023a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_29
800070ce g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogPassword
80003a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_211
80002340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_26
80007268 g     F .text	0000005c IfxScuWdt_enableCpuWatchdog
80002540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_42
80009d24 g     F .text	0000003c osEE_scheduler_task_unblocked
80002960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_75
80003820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_193
800033c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_158
8000a9d0 g     F .text	0000000c malloc
80002cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_102
80006d30 g     F .text	00000028 IfxScuEru_clearInputChannelConfiguration
00000000 g       *ABS*	00000000 NULL
800006c8 g     O .rodata	00000010 IfxAsclin3_RXF_P21_6_IN
8000906c g     F .text	0000001e osEE_tc_stm_set_sr0_next_match
80001140 g       .traptab	00000000 osEE_tc_trap_instruction
80000e70 g     O .rodata	000000c8 __mprec_tens
70000008 g     O .data	00000004 g_vadcChannelIDs
80005208 g     F .text	00000008 IfxAsclin_Asc_canWriteCount
800095aa g     F .text	000000b2 GetResource
80000368 g     O .rodata	00000010 IfxAsclin2_TX_P10_5_OUT
80000458 g     O .rodata	00000010 IfxAsclin0_TX_P15_2_OUT
8000c0de g     F .text	00000016 vsnprintf
80003ac0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_214
800029a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_77
80000898 g     O .rodata	00000010 IfxAsclin3_CTSA_P00_12_IN
800038a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_197
70000c08 g     O .bss	00000004 __malloc_top_pad
80004570 g     F .text	00000026 readADCValue
80006994 g     F .text	0000008e IfxScuCcu_setGtmFrequency
80005cb4 g     F .text	00000064 IfxPort_setPinModeLvdsHigh
80009faa g     F .text	0000002c osEE_hal_ready2stacked
80002660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_51
80000b78 g     O .rodata	00000014 IfxScu_REQ1_P15_8_IN
80008276 g     F .text	00000050 Ifx_CircularBuffer_write32
8000d14a g     F .text	0000000a _localeconv_r
80003460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_163
80004d58 g     F .text	00000022 IfxAsclin_getIndex
8000d31a g     F .text	00000010 __i2b
80009536 g     F .text	00000074 Schedule
80004db6 g     F .text	00000016 IfxAsclin_getShiftFrequency
80007958 g     F .text	000001ec IfxVadc_Adc_initChannel
80003f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_250
80000268 g     O .rodata	00000010 IfxAsclin3_TX_P22_1_OUT
80006bf6 g     F .text	00000112 IfxScuCcu_switchToBackupClock
80003100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_136
80000688 g     O .rodata	00000010 IfxAsclin0_SCLK_P15_2_OUT
800072c4 g     F .text	00000072 IfxScuWdt_enableSafetyWatchdog
80002060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_3
80003e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_240
8000ae88 g     F .text	0000001e _sbrk_r
80000418 g     O .rodata	00000010 IfxAsclin1_TX_P11_12_OUT
80000c38 g     O .rodata	0000000c IfxScu_HWCFG5_P10_6_IN
80000428 g     O .rodata	00000010 IfxAsclin1_TX_P02_2_OUT
80003040 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_130
80002b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_89
800025c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_46
70000920 g     O .bss	0000000c g_vadcGroup
80006e74 g     F .text	00000026 IfxScuEru_enableAutoClear
80000678 g     O .rodata	00000010 IfxAsclin1_SCLK_P15_0_OUT
800027a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_61
80002800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_64
8000a85e g     F .text	000000ac .hidden __unpack_d
00002700 g     O *ABS*	00000000 __TRICORE_DERIVATE_NAME__
80005d5a g     F .text	0000003c IfxPort_setPinPadDriver
80003ec0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_246
80002480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_36
800003d8 g     O .rodata	00000010 IfxAsclin1_TX_P15_4_OUT
70000c04 g     O .bss	00000004 __malloc_max_sbrked_mem
80002a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_81
800011a0 g       .traptab	00000000 osEE_tc_trap_assertion
80002ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_93
80008000 g       *ABS*	00000000 __A1_MEM
8000a0cc g     F .text	00000032 .hidden __extendsfdf2
80002700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_56
80004cce g     F .text	00000016 IfxAsclin_getAddress
8000a29a g     F .text	00000038 .hidden __adddf3
800041c4 g     F .text	0000000e lcd_goto
80009368 g     F .text	0000001a GetActiveApplicationMode
80006270 g     F .text	0000007a IfxScuCcu_getSriFrequency
800030c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_134
800091fe g     F .text	00000026 ResumeAllInterrupts
800036c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_182
800038e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_199
80006b76 g     F .text	00000080 IfxScuCcu_setSriFrequency
8000dfa8 g     F .text	00000026 .hidden __umoddi3
80003740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_186
70019c00 g     O .CPU0.csa	00000000 __CSA0
80003840 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_194
800033e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_159
80003280 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_148
80002180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_12
80000868 g     O .rodata	00000010 IfxAsclin1_RTS_P23_1_OUT
80000dc8 g     O .rodata	00000004 _global_impure_ptr
80006d80 g     F .text	00000036 IfxScuEru_connectTrigger
70000900 g     O .bss	00000020 g_vadcChannel
8000632c g     F .text	00000036 IfxScuCcu_getFsi2Frequency
8000d922 g     F .text	000003f0 _realloc_r
80000648 g     O .rodata	00000010 IfxAsclin1_SCLK_P33_12_OUT
80004e08 g     F .text	00000012 IfxAsclin_read16
80005a5c g     F .text	0000003c IfxPort_enableEmergencyStop
80000298 g     O .rodata	00000010 IfxAsclin3_TX_P20_3_OUT
80003fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_254
8000df08 g     F .text	000000a0 .hidden __udivdi3
80000818 g     O .rodata	00000010 IfxAsclin0_RXB_P15_3_IN
800002a8 g     O .rodata	00000010 IfxAsclin3_TX_P20_0_OUT
70008000 g       *ABS*	00000000 __A0_MEM
80009b28 g     F .text	00000070 osEE_scheduler_core_rq_preempt_stk
80000468 g     O .rodata	00000010 IfxAsclin0_TX_P14_1_OUT
800040ea g     F .text	0000000a lcd_clear
80000e48 g     O .rodata	00000028 __mprec_bigtens
8000dd68 g     F .text	00000012 abort
8000a670 g     F .text	00000032 .hidden __floatunsidf
80002aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_85
8000d57a g     F .text	00000042 __mcmp
800038c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_198
80005234 g     F .text	0000001c IfxAsclin_Asc_read
80009382 g     F .text	00000084 ActivateTask
80000bb4 g     O .rodata	00000014 IfxScu_REQ14_P02_1_IN
80003300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_152
80006ddc g     F .text	00000026 IfxScuEru_disableFallingEdgeDetection
80002040 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_2
80002de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_111
800082ca g     F .text	0000003a Ifx_Fifo_init
80002420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_33
70000c18  w    O .bss	00000004 _my_errno
800004a8 g     O .rodata	00000010 IfxAsclin3_SLSO_P21_2_OUT
80005988 g     F .text	00000030 IfxPort_getAddress
80003760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_187
00019c00 g       *ABS*	00000000 __CSA0_OFFSET
800008c8 g     O .rodata	00000010 IfxAsclin1_CTSB_P32_4_IN
800097ac g     F .text	00000058 GetTaskID
8000676a g     F .text	000001a2 IfxScuCcu_initErayPll
80000348 g     O .rodata	00000010 IfxAsclin2_TX_P14_3_OUT
80003de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_239
800002e8 g     O .rodata	00000010 IfxAsclin3_TX_P11_0_OUT
80000a20 g     O .rodata	00000054 IfxScuCcu_defaultClockConfig
0001bc00 g       *ABS*	00000000 __CSA1_OFFSET
80006f32 g     F .text	0000000e IfxScuEru_getAllEventFlagsStatus
80000c5c g     O .rodata	0000000c IfxScu_HWCFG2EVR13_P14_2_IN
80009224 g     F .text	0000005c SuspendOSInterrupts
80003a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_210
8000719e g     F .text	0000005a IfxScuWdt_disableCpuWatchdog
8000a6bc g     F .text	0000007a .hidden __unpack_f
80008fb4 g     F .text	00000034 osEE_tc_stm_set_clockpersec
80003a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_208
8000454e g     F .text	00000022 initADC
800031e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_143
80002d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_106
80009e10 g     F .text	0000003e osEE_scheduler_task_set_running
b0008000 g     O *ABS*	00000000 _SMALL_DATA4_
8000908a g     F .text	0000008e osEE_tc_stm_set_sr1
800006e8 g     O .rodata	00000010 IfxAsclin3_RXD_P32_2_IN
80004638 g     F .text	0000000c asclin0TxISR
800005c8 g     O .rodata	00000010 IfxAsclin3_SCLK_P11_1_OUT
800071f8 g     F .text	00000070 IfxScuWdt_disableSafetyWatchdog
80002c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_96
80007554 g     F .text	00000004 IfxScuWdt_serviceSafetyWatchdog
80000748 g     O .rodata	00000010 IfxAsclin2_RXE_P33_8_IN
800005f8 g     O .rodata	00000010 IfxAsclin2_SCLK_P33_9_OUT
8000d272 g     F .text	00000042 __hi0bits
80002760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_59
800007e8 g     O .rodata	00000010 IfxAsclin1_RXB_P15_5_IN
80002e60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_115
800003b8 g     O .rodata	00000010 IfxAsclin1_TX_P20_10_OUT
800003c8 g     O .rodata	00000010 IfxAsclin1_TX_P15_5_OUT
8000deba g     F .text	0000004e .hidden __fixdfsi
80003160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_139
80009c8e g     F .text	00000068 osEE_scheduler_task_activated
80006084 g     F .text	00000078 IfxScuCcu_getBbbFrequency
0001bc00 g       *ABS*	00000000 __CSA2_OFFSET
0001e000 g       *ABS*	00000000 __DSPR2_SIZE
800002f8 g     O .rodata	00000010 IfxAsclin3_TX_P00_1_OUT
80000478 g     O .rodata	00000010 IfxAsclin0_TX_P14_0_OUT
80002f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_121
80006362 g     F .text	00000036 IfxScuCcu_getFsiFrequency
80000ac8 g     O .rodata	00000010 IfxScu_WDT0LCK_P20_8_OUT
80002100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_8
80002580 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_44
80003d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_234
800032a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_149
80007136 g     F .text	00000036 IfxScuWdt_clearCpuEndinit
80002e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_113
80003320 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_153
800025e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_47
800022e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_23
80000618 g     O .rodata	00000010 IfxAsclin2_SCLK_P14_2_OUT
80004efe g     F .text	00000182 IfxAsclin_setBitTiming
80000c80 g     O .rodata	00000010 IfxScu_EXTCLK1_P32_4_OUT
80000488 g     O .rodata	00000010 IfxAsclin3_SLSO_P33_1_OUT
800002b8 g     O .rodata	00000010 IfxAsclin3_TX_P15_7_OUT
800007c8 g     O .rodata	00000010 IfxAsclin1_RXD_P14_8_IN
80000c44 g     O .rodata	0000000c IfxScu_HWCFG4_P10_5_IN
80007598 g     F .text	00000026 IfxVadc_Adc_deInitGroup
8000a05a g     F .text	00000026 .hidden __lshrdi3
800006d8 g     O .rodata	00000010 IfxAsclin3_RXE_P00_1_IN
800039a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_205
80000808 g     O .rodata	00000010 IfxAsclin0_RXD_P34_2_IN
80000568 g     O .rodata	00000010 IfxAsclin3_SCLK_P21_7_OUT
80007b5a g     F .text	0000038a IfxVadc_Adc_initGroup
8000d444 g     F .text	0000007c __pow5mult
70000930 g     O .bss	0000000c g_ERUconfig
80003fe0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_255
80002860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_67
80002e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_112
80006e28 g     F .text	00000026 IfxScuEru_disableRisingEdgeDetection
80000528 g     O .rodata	00000010 IfxAsclin1_SLSO_P20_8_OUT
80009d60 g     F .text	0000008a osEE_scheduler_task_terminated
80000308 g     O .rodata	00000010 IfxAsclin3_TX_P00_0_OUT
80002460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_35
800036a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_181
8000a90a g     F .text	000000c6 .hidden __pack_f
80003ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_245
8000816a g     F .text	0000005e Ifx_CircularBuffer_read8
80000858 g     O .rodata	00000010 IfxAsclin2_RTS_P10_8_OUT
00002700 g       *ABS*	00000000 __TRICORE_DERIVATE_MEMORY_MAP__
80003b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_219
80002360 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_27
800037a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_189
80007386 g     F .text	0000001a IfxScuWdt_initConfig
80001200 g       .ctors	00000000 __CTOR_LIST__
80008f10 g     F .text	000000a4 osEE_tc_get_fsource
80004e1a g     F .text	00000012 IfxAsclin_read32
80000bdc g     O .rodata	00000014 IfxScu_REQ12_P11_10_IN
80007474 g     F .text	00000004 IfxScuWdt_serviceCpuWatchdog
80003ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_247
80000888 g     O .rodata	00000010 IfxAsclin0_RTS_P14_7_OUT
80002ac0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_86
80000758 g     O .rodata	00000010 IfxAsclin2_RXD_P10_6_IN
80008fe8 g     F .text	00000084 osEE_tc_stm_set_sr0
80000ad8 g     O .rodata	00000014 IfxScu_REQ9_P20_0_IN
80000628 g     O .rodata	00000010 IfxAsclin2_SCLK_P10_6_OUT
80002e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_116
80009fd6 g     F .text	0000001e osEE_tc_change_context_from_isr2_end
80002a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_83
8000d154 g     F .text	00000018 memchr
80003400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_160
8000cf9e g     F .text	000001ac _free_r
800057fc g     F .text	00000048 IfxAsclin_Asc_initiateTransmission
80002220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_17
800023e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_31
80009a16 g     F .text	00000018 GetISRID
80009f48 g     F .text	00000024 osEE_hal_save_ctx_and_restore_ctx
80001180 g       .traptab	00000000 osEE_tc_trap_bus
80005d98 g     F .text	000000f8 IfxScuCcu_calculateSysPllDividers
800008a8 g     O .rodata	00000010 IfxAsclin2_CTSB_P33_5_IN
700000c0 g     O .data	00000004 __malloc_sbrk_base
80000020 g     F .startup	00000006 _start
80003520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_169
80008304 g     F .text	00000022 Ifx_Fifo_create
80003f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_249
80007356 g     F .text	0000001c IfxScuWdt_getCpuWatchdogEndInit
00001000 g       *ABS*	00000000 __USTACK2_SIZE
800011e0 g       .traptab	00000000 osEE_tc_trap_nmi
800020a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_5
8000d4c0 g     F .text	000000ba __lshift
80003600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_176
80000608 g     O .rodata	00000010 IfxAsclin2_SCLK_P33_7_OUT
800075be g     F .text	0000001c IfxVadc_Adc_disableModule
00002000 g       *ABS*	00000000 __CSA_SIZE
8000d770 g     F .text	000000f0 __ssprint_r
80004848 g     F .text	0000001a IfxVadc_getAdcDigitalFrequency
5001bc00 g       .CPU2.csa	00000000 __CSA2
800034a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_165
80003c60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_227
7001bc00 g     O .CPU0.csa	00000000 __CSA0_END
800046cc g     F .text	00000038 IfxVadc_enableAccess
800027c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_62
8000d32a g     F .text	0000011a __multiply
00000001 g       *ABS*	00000000 _.
80006f40 g     F .text	00000012 IfxScuEru_getEventFlagStatus
800041d2 g     F .text	00000036 lcd_print
800004e8 g     O .rodata	00000010 IfxAsclin2_SLSO_P33_6_OUT
80000338 g     O .rodata	00000010 IfxAsclin2_TX_P32_5_OUT
80004b94 g     F .text	00000024 IfxVadc_selectPowerSupplyVoltage
80006e02 g     F .text	00000026 IfxScuEru_disablePatternDetectionTrigger
70000bd8 g     O .bss	00000028 __malloc_current_mallinfo
8000d686 g     F .text	000000a8 __d2b
80003c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_226
800037c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_190
80003360 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_155
800026c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_54
80002fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_125
80002b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_91
80000b14 g     O .rodata	00000014 IfxScu_REQ6_P02_0_IN
80008128 g     F .text	00000022 Ifx_CircularBuffer_get16
80000408 g     O .rodata	00000010 IfxAsclin1_TX_P14_10_OUT
80003680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_180
80005f32 g     F .text	00000044 IfxScuCcu_getPllErayVcoFrequency
80001200 g       .ctors	00000000 __EH_FRAME_END__
80006db6 g     F .text	00000026 IfxScuEru_disableAutoClear
80006a22 g     F .text	00000050 IfxScuCcu_setPll2ErayFrequency
6001bb00 g       .CPU1.istack	00000000 __ISTACK1
80003800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_192
800033a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_157
8000618c g     F .text	00000022 IfxScuCcu_getBaud2Frequency
80003240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_146
80002da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_109
800005a8 g     O .rodata	00000010 IfxAsclin3_SCLK_P15_6_OUT
8000dfce g     F .text	000000a6 .hidden __fpcmp_parts_d
80004cb2 g     F .text	0000001c IfxAsclin_enableModule
0001a600 g       *ABS*	00000000 __USTACK2_OFFSET
80009bee g     F .text	00000026 osEE_scheduler_core_pop_running
800021a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_13
80003f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_252
80009ebc g     F .text	0000006a osEE_cpu_startos
80003b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_218
70000004 g     O .data	00000002 rpm
80006ee6 g     F .text	00000026 IfxScuEru_enableRisingEdgeDetection
80000788 g     O .rodata	00000010 IfxAsclin2_RXA_P14_3_IN
80003e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_241
800029c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_78
800059b8 g     F .text	00000022 IfxPort_getIndex
800030a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_133
8000998c g     F .text	00000032 GetEvent
800053aa g     F .text	0000001c IfxAsclin_Asc_disableModule
8000a080 g     F .text	0000004c .hidden __floatundisf
6001b600 g       .CPU1.ustack	00000000 __USTACK1
80004e2c g     F .text	00000012 IfxAsclin_read8
80009cf6 g     F .text	0000002e osEE_scheduler_task_insert
80003be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_223
80002620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_49
8000a4b6 g     F .text	00000118 .hidden __divdf3
80000ce0 g     O .rodata	00000010 IfxScu_EMGSTOPA_P33_8_IN
80000c90 g     O .rodata	00000010 IfxScu_EXTCLK1_P11_12_OUT
800058a6 g     F .text	0000001c IfxAsclin_Asc_blockingWrite
80007ffa g     F .text	0000003a IfxVadc_Adc_initModuleConfig
700000c8 g     O .data	00000408 __malloc_av_
80002f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_120
80009748 g     F .text	00000064 ShutdownOS
80003060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_131
8000c094 g     F .text	0000004a _vsnprintf_r
800035e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_175
70018600 g     O .CPU0.ustack	00000000 __USTACK0_END
80003900 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_200
80002120 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_9
8000a312 g     F .text	000001a4 .hidden __muldf3
80002500 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_40
80000698 g     O .rodata	00000010 IfxAsclin0_SCLK_P14_0_OUT
80002520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_41
80000cd0 g     O .rodata	00000010 IfxScu_EMGSTOPB_P21_2_IN
8000ae84 g     F .text	00000002 __malloc_lock
8000dd22 g     F .text	0000003c sbrk
80005e90 g     F .text	0000000e IfxScuCcu_getOsc0Frequency
80004694 g     F .text	00000038 IfxVadc_disableAccess
80000000 g       .startup	00000000 BootModeHeader0
800011c0 g       .traptab	00000000 osEE_tc_trap_system
80000c50 g     O .rodata	0000000c IfxScu_HWCFG3_BMI_P14_3_IN
80004df4 g     F .text	00000014 IfxAsclin_getSrcPointerTx
80004890 g     F .text	00000094 IfxVadc_getResultBasedOnRequestSource
8000d860 g     F .text	00000062 _calloc_r
00002000 g       *ABS*	00000000 __CSA0_SIZE
800061ae g     F .text	00000078 IfxScuCcu_getSpbFrequency
80002820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_65
80000778 g     O .rodata	00000010 IfxAsclin2_RXB_P02_1_IN
80004786 g     F .text	000000aa IfxVadc_enableGroupSync
80006f9a g     F .text	00000012 IfxScuEru_getPatternDetectionResult
800024a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_37
80005250 g     F .text	0000009e IfxAsclin_Asc_isrTransmit
80000328 g     O .rodata	00000010 IfxAsclin2_TX_P33_8_OUT
80003d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_233
80003960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_203
8000d912 g     F .text	00000010 memset
800034e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_167
80002640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_50
800040f4 g     F .text	000000d0 lcd_init
80004644 g     F .text	00000050 main
80007336 g     F .text	00000020 IfxScuWdt_getCpuWatchdogPassword
80004000 g     F .text	0000006a delay_ms
80006f0c g     F .text	00000026 IfxScuEru_enableTriggerPulse
80002200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_16
70000c00 g     O .bss	00000004 __malloc_max_total_mem
80003540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_170
80004c84 g     F .text	0000002e IfxAsclin_enableAscErrorFlags
8000e074 g     F .text	0000009c .hidden __udiv6432
00000400 g       *ABS*	00000000 __ISTACK_SIZE
8000616c g     F .text	00000020 IfxScuCcu_getBaud1Frequency
800025a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_45
80008076 g     F .text	00000092 IfxVadc_Adc_initExternalMultiplexerMode
80000b8c g     O .rodata	00000014 IfxScu_REQ16_P15_1_IN
7000093c g     O .bss	0000027c g_AsclinAsc
80002b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_88
80000c2c g     O .rodata	0000000c IfxScu_HWCFG6_P14_4_IN
80009c14 g     F .text	00000018 osEE_task_activated
5001bb00 g       .CPU2.istack	00000000 __ISTACK2
800000bc g     O .rodata	00000014 osEE_kdb_var
00018600 g       *ABS*	00000000 __USTACK0_OFFSET
80007372 g     F .text	00000014 IfxScuWdt_getSafetyWatchdogPassword
8000a634 g     F .text	0000003c .hidden __truncdfsf2
80003b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_220
80003020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_129
8000c210 g     F .text	00000cd2 _dtoa_r
0001b700 g       *ABS*	00000000 __ISTACK1_OFFSET
8000a9ea g     F .text	0000049a _malloc_r
80000498 g     O .rodata	00000010 IfxAsclin3_SLSO_P21_6_OUT
80005d18 g     F .text	00000042 IfxPort_setPinModeLvdsMedium
80000768 g     O .rodata	00000010 IfxAsclin2_RXC_P02_10_IN
800039e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_207
80005384 g     F .text	00000026 IfxAsclin_Asc_blockingRead
80003d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_235
800024e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_39
80002020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_1
80000558 g     O .rodata	00000010 IfxAsclin3_SCLK_P32_3_OUT
800050b8 g     F .text	00000006 IfxAsclin_Asc_getReadCount
80002a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_80
80008000 g       *ABS*	00000000 __A8_MEM
80000548 g     O .rodata	00000010 IfxAsclin3_SCLK_P33_2_OUT
b0008000 g       *ABS*	00000000 __A9_MEM
80005094 g     F .text	00000012 IfxAsclin_write32
80003ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_231
80003340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_154
80002c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_98
8000432a g     F .text	0000006e printfSerial
80000d50 g     O .rodata	00000014 .hidden __thenan_df
8000cee4 g     F .text	000000ba _malloc_trim_r
80001208 g       .ctors	00000000 __CTOR_END__
80008000 g     O *ABS*	00000000 _SMALL_DATA2_
80000378 g     O .rodata	00000010 IfxAsclin2_TX_P02_9_OUT
80004a98 g     F .text	000000aa IfxVadc_getChannelConversionTime
50000000 g       *ABS*	00000000 __DSPR2_START
800028c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_70
80004704 g     F .text	00000046 IfxVadc_configExternalMultiplexerMode
8000422c g     F .text	0000004a FuncTaskLCD
8000965c g     F .text	000000ec ReleaseResource
80008034 g     F .text	00000042 IfxVadc_Adc_initExternalMultiplexerModeConfig
80004d7a g     F .text	00000018 IfxAsclin_getPdFrequency
80004866 g     F .text	0000001a IfxVadc_getBackgroundScanStatus
80003da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_237
80001208 g       .dtors	00000000 __DTOR_LIST__
60000000 g       *ABS*	00000000 __DSPR1_START
80003c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_224
800026a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_53
00001000 g       *ABS*	00000000 __USTACK1_SIZE
80002b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_90
80004b42 g     F .text	00000052 IfxVadc_resetKernel
80000878 g     O .rodata	00000010 IfxAsclin1_RTS_P20_6_OUT
80000c74 g     O .rodata	0000000c IfxScu_HWCFG0DCLDO_P14_6_IN
8000ddba g     F .text	00000040 .hidden __nedf2
80004eac g     F .text	00000052 IfxAsclin_setBaudrateBitFields
80003a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_209
80003880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_196
80005fe8 g     F .text	00000044 IfxScuCcu_getPllVcoFrequency
80006ac2 g     F .text	000000b4 IfxScuCcu_setSpbFrequency
80003220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_145
80002d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_108
80006f76 g     F .text	00000024 IfxScuEru_getOutputChannelConfiguration
80000aa8 g     O .rodata	00000010 IfxScu_WDT2LCK_P20_6_OUT
80000998 g     O .rodata	00000080 IfxPort_cfg_esrMasks
80002a80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_84
800006b8 g     O .rodata	00000010 IfxAsclin3_RXG_P21_2_IN
8000aea6 g     F .text	00000036 sprintf
80003500 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_168
80005210 g     F .text	00000010 IfxAsclin_Asc_clearRx
800008e8 g     O .rodata	00000010 IfxAsclin0_CTSA_P14_9_IN
80002400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_32
80003000 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_128
80000d00 g     O .rodata	00000010 IfxScu_DCDCSYNC_P32_2_OUT
80005a32 g     F .text	0000002a IfxPort_setESR
800004b8 g     O .rodata	00000010 IfxAsclin3_SLSO_P14_3_OUT
80003620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_177
800003f8 g     O .rodata	00000010 IfxAsclin1_TX_P15_0_OUT
80003120 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_137
80002900 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_72
800008d8 g     O .rodata	00000010 IfxAsclin1_CTSA_P20_7_IN
80002600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_48
80000b50 g     O .rodata	00000014 IfxScu_REQ3_P10_3_IN
800003e8 g     O .rodata	00000010 IfxAsclin1_TX_P15_1_OUT
700004d0 g     O .data	00000004 _impure_ptr
80003660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_179
800059da g     F .text	00000028 IfxPort_resetESR
800050ec g     F .text	00000072 IfxAsclin_Asc_isrError
80004956 g     F .text	00000024 IfxVadc_initialiseAdcArbiterClock
80004de0 g     F .text	00000014 IfxAsclin_getSrcPointerRx
800036e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_183
80000448 g     O .rodata	00000010 IfxAsclin0_TX_P15_3_OUT
80003cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_230
80004dcc g     F .text	00000014 IfxAsclin_getSrcPointerEr
00002000 g       *ABS*	00000000 __CSA1_SIZE
800022c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_22
80000398 g     O .rodata	00000010 IfxAsclin1_TX_P33_13_OUT
800007d8 g     O .rodata	00000010 IfxAsclin1_RXC_P20_9_IN
8000918a g     F .text	00000016 DisableAllInterrupts
80008218 g     F .text	0000005e Ifx_CircularBuffer_write8
800052ee g     F .text	00000096 IfxAsclin_Asc_isrReceive
80005a98 g     F .text	00000090 IfxPort_setGroupModeInput
80008326 g     F .text	000000da Ifx_Fifo_canReadCount
00001000 g       *ABS*	00000000 __USTACK_SIZE
80009406 g     F .text	000000d6 ChainTask
80006fba g     F .text	00000034 IfxScuEru_selectExternalInput
80006e9a g     F .text	00000026 IfxScuEru_enableFallingEdgeDetection
80002ca0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_101
800008b8 g     O .rodata	00000010 IfxAsclin2_CTSA_P10_7_IN
5001a600 g       .CPU2.ustack	00000000 __USTACK2_AREA_END
80000738 g     O .rodata	00000010 IfxAsclin2_RXF_P32_6_IN
80002fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_126
800005b8 g     O .rodata	00000010 IfxAsclin3_SCLK_P11_4_OUT
80006756 g     F .text	00000014 IfxScuCcu_initConfig
80003b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_217
80003ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_221
80000288 g     O .rodata	00000010 IfxAsclin3_TX_P21_7_OUT
800049c8 g     F .text	00000066 IfxVadc_initializeFAdcI
800004f8 g     O .rodata	00000010 IfxAsclin2_SLSO_P10_5_OUT
80000aec g     O .rodata	00000014 IfxScu_REQ8_P33_7_IN
80000258 g     O .rodata	00000010 IfxAsclin3_TX_P32_2_OUT
80001100 g       .traptab	00000000 osEE_tc_trap_mmu
800081c8 g     F .text	00000050 Ifx_CircularBuffer_read32
80002ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_87
8000516c g     F .text	0000009c IfxAsclin_Asc_flushTx
80009136 g     F .text	00000028 osEE_tc_delay
800005d8 g     O .rodata	00000010 IfxAsclin3_SCLK_P00_2_OUT
80000f38 g     O .rodata	00000000 __clear_table
80005ece g     F .text	00000064 IfxScuCcu_getPllErayFrequency
800007a8 g     O .rodata	00000010 IfxAsclin1_RXF_P33_13_IN
80009c2c g     F .text	0000001e osEE_task_end
80000588 g     O .rodata	00000010 IfxAsclin3_SCLK_P20_0_OUT
80002dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_110
80002f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_124
80003bc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_222
80002240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_18
80002440 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_34
800007f8 g     O .rodata	00000010 IfxAsclin1_RXA_P15_1_IN
80001200 g       .ctors	00000000 __EH_FRAME_BEGIN__
800004d8 g     O .rodata	00000010 IfxAsclin3_SLSO_P00_3_OUT
80002840 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_66
80003140 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_138
80003e60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_243
8000602c g     F .text	00000024 IfxScuCcu_getSourceFrequency
80000438 g     O .rodata	00000010 IfxAsclin0_TX_P34_1_OUT
80000cf0 g     O .rodata	00000010 IfxScu_DCDCSYNC_P33_13_OUT
80000bc8 g     O .rodata	00000014 IfxScu_REQ13_P15_5_IN
80009e76 g     F .text	00000020 osEE_change_context_from_task_end
8000987c g     F .text	0000007a WaitEvent
80005a02 g     F .text	00000030 IfxPort_disableEmergencyStop
80003fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_253
80003c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_225
800002c8 g     O .rodata	00000010 IfxAsclin3_TX_P15_6_OUT
80002880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_68
80007ee4 g     F .text	0000002e IfxVadc_Adc_initGroupConfig
00000400 g       *ABS*	00000000 __ISTACK0_SIZE
80002980 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_76
5001b600 g       .CPU2.ustack	00000000 __USTACK2
80003940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_202
80009118 g     F .text	0000001e osEE_tc_stm_set_sr1_next_match
0001e000 g       *ABS*	00000000 __DSPR1_SIZE
80003260 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_147
80000020 g       .startup	00000000 BootModeIndex
800032c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_150
80003d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_236
700000c4 g     O .data	00000004 __malloc_trim_threshold
800031a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_141
80002d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_104
80004862 g     F .text	00000004 IfxVadc_getAdcModuleFrequency
8000869c g     F .text	00000186 Ifx_Fifo_write
8000d5bc g     F .text	000000ca __mdiff
800020e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_7
80002920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_73
80009c6c g     F .text	00000022 osEE_activate_isr2
80007b44 g     F .text	00000016 IfxVadc_Adc_initChannelConfig
80004ce4 g     F .text	00000074 IfxAsclin_getFaFrequency
80006a72 g     F .text	00000050 IfxScuCcu_setPll2Frequency
80003dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_238
80020000 g       .startup	00000000 BootModeHeader1
80008ce2 g     F .text	0000022e osEE_tc_set_pll_fsource
8000499e g     F .text	0000002a IfxVadc_initializeFAdcD
800042b8 g     F .text	00000072 UART_init
80005bba g     F .text	000000a4 IfxPort_setGroupPadDriver
800026e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_55
0001c000 g       *ABS*	00000000 __DSPR0_SIZE
80002fe0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_127
80002b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_92
80000cb0 g     O .rodata	00000010 IfxScu_EVRWUPB_P15_1_IN
80000828 g     O .rodata	00000010 IfxAsclin0_RXA_P14_1_IN
800050a6 g     F .text	00000012 IfxAsclin_write8
80006fac g     F .text	0000000e IfxScuEru_getWholePatternDetectionResult
80002320 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_25
800039c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_206
800029e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_79
80000fa0 g     O .rodata	00000000 __copy_table
00019700 g       *ABS*	00000000 __ISTACK0_OFFSET
80005080 g     F .text	00000014 IfxAsclin_write16
80008576 g     F .text	00000036 Ifx_Fifo_clear
80000b64 g     O .rodata	00000014 IfxScu_REQ2_P10_2_IN
00000400 g       *ABS*	00000000 __ISTACK2_SIZE
80002ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_119
8000dd12 g     F .text	00000010 _exit
80002280 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_20
80001120 g       .traptab	00000000 osEE_tc_trap_protection
80001100 g     F .traptab	00000000 __TRAPTAB
80000bf0 g     O .rodata	00000014 IfxScu_REQ11_P20_9_IN
00002000 g       *ABS*	00000000 __CSA2_SIZE
80006d58 g     F .text	00000028 IfxScuEru_clearOutputChannelConfiguration
800035a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_173
80006e4e g     F .text	00000026 IfxScuEru_disableTriggerPulse
800074aa g     F .text	000000aa IfxScuWdt_initSafetyWatchdog
800050c8 g     F .text	00000006 IfxAsclin_Asc_getSendCount
8000aedc g     F .text	00000014 strlen
80003860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_195
0001b700 g       *ABS*	00000000 __ISTACK2_OFFSET
80004e8a g     F .text	00000022 IfxAsclin_setClockSource
8000de3a g     F .text	00000040 .hidden __gedf2
80000a18 g     O .rodata	00000008 IfxScuCcu_defaultErayPllConfig
80004596 g     F .text	000000a2 initPeripheralsAndERU
80000728 g     O .rodata	00000010 IfxAsclin2_RXG_P02_0_IN
80002bc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_94
80002720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_57
80003420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_161
80000388 g     O .rodata	00000010 IfxAsclin2_TX_P02_0_OUT
80002f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_122
80000b28 g     O .rodata	00000014 IfxScu_REQ5_P10_8_IN
80004bb8 g     F .text	00000056 IfxVadc_setArbiterPriority
70000c20 g     O .text	00000001 __HEAP_END
80000518 g     O .rodata	00000010 IfxAsclin1_SLSO_P33_10_OUT
6001bc00 g       .CPU1.csa	00000000 __CSA1
800060fc g     F .text	00000070 IfxScuCcu_getMaxFrequency
800091a0 g     F .text	0000001c EnableAllInterrupts
80000538 g     O .rodata	00000010 IfxAsclin1_SLSO_P14_3_OUT
80004c22 g     F .text	00000044 IfxVadc_startupCalibration
7000092c g     O .bss	00000004 g_vadc
80005c5e g     F .text	00000056 IfxPort_setPinMode
80003640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_178
80002780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_60
80000b00 g     O .rodata	00000014 IfxScu_REQ7_P00_4_IN
80009f6c g     F .text	0000001a osEE_hal_restore_ctx
8000449e g     F .text	00000032 initVADCGroup
80000578 g     O .rodata	00000010 IfxAsclin3_SCLK_P21_5_OUT
8000a2d2 g     F .text	00000040 .hidden __subdf3
70008000 g     O *ABS*	00000000 _SMALL_DATA_
800050ce g     F .text	00000006 IfxAsclin_Asc_getTxTimeStamp
80004a2e g     F .text	0000006a IfxVadc_isPostCalibration
80004480 g     F .text	0000001e initVADCModule
80003f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_248
80006d1a g     F .text	00000016 IfxScuEru_clearEventFlag
80007478 g     F .text	00000032 IfxScuWdt_setSafetyEndinit
8000d2b4 g     F .text	00000066 __lo0bits
800034c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_166
80002000 g     F .inttab_cpu0	00002000 __INTTAB0
80000318 g     O .rodata	00000010 IfxAsclin2_TX_P33_9_OUT
80003080 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_132
80005e9e g     F .text	00000030 IfxScuCcu_getOscFrequency
80009280 g     F .text	0000003c ResumeOSInterrupts
800030e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_135
80004e3e g     F .text	0000004c IfxAsclin_resetModule
80006f52 g     F .text	00000024 IfxScuEru_getInputChannelConfiguration
80000638 g     O .rodata	00000010 IfxAsclin2_SCLK_P02_4_OUT
80006d08 g     F .text	00000012 IfxScuEru_clearAllEventFlags
80003200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_144
80002d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_107
80002160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_11
800000d0 g     O .rodata	00000008 osEE_cdb_var
8000a74c g     F .text	00000112 .hidden __pack_d
800008f8 g     O .rodata	00000020 IfxAsclin_cfg_indexMap
800092bc g     F .text	000000ac StartOS
80003ca0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_229
80000c68 g     O .rodata	0000000c IfxScu_HWCFG1EVR33_P14_5_IN
80000b3c g     O .rodata	00000014 IfxScu_REQ4_P10_7_IN
80003440 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_162
8000a9dc g     F .text	0000000e free
80000a98 g     O .rodata	00000010 IfxScu_WDTSLCK_P20_9_OUT
8000d1f0 g     F .text	00000082 __multadd
8000d1de g     F .text	00000012 _Bfree
80000658 g     O .rodata	00000010 IfxAsclin1_SCLK_P33_11_OUT
80008000 g     O *ABS*	00000000 _SMALL_DATA3_
80003a80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_212



Disassembly of section .startup:

80000020 <_start>:
#endif

void _start(void)
{
  /* asm instruction to jump to the core startup */
  osEE_tc_jump_abs(osEE_tc_core0_start);
80000020:	9d 80 11 44 	ja 80008822 <osEE_tc_core0_start>
80000024:	00 90       	ret 

Disassembly of section .traptab:

80001100 <__TRAPTAB>:
80001100:	00 a0       	debug 
80001102:	1d ff ff ff 	j 80001100 <__TRAPTAB>
	...

80001120 <osEE_tc_trap_protection>:
80001120:	00 a0       	debug 
80001122:	1d ff ff ff 	j 80001120 <osEE_tc_trap_protection>
	...

80001140 <osEE_tc_trap_instruction>:
80001140:	00 a0       	debug 
80001142:	1d ff ff ff 	j 80001140 <osEE_tc_trap_instruction>
	...

80001160 <osEE_tc_trap_context>:
80001160:	00 a0       	debug 
80001162:	1d ff ff ff 	j 80001160 <osEE_tc_trap_context>
	...

80001180 <osEE_tc_trap_bus>:
80001180:	00 a0       	debug 
80001182:	1d ff ff ff 	j 80001180 <osEE_tc_trap_bus>
	...

800011a0 <osEE_tc_trap_assertion>:
800011a0:	00 a0       	debug 
800011a2:	1d ff ff ff 	j 800011a0 <osEE_tc_trap_assertion>
	...

800011c0 <osEE_tc_trap_system>:
800011c0:	00 a0       	debug 
800011c2:	1d ff ff ff 	j 800011c0 <osEE_tc_trap_system>
	...

800011e0 <osEE_tc_trap_nmi>:
800011e0:	00 a0       	debug 
800011e2:	1d ff ff ff 	j 800011e0 <osEE_tc_trap_nmi>
	...

Disassembly of section .ctors:

80001200 <__CTOR_LIST__>:
	...

Disassembly of section .dtors:

80001208 <__DTOR_LIST__>:
	...

Disassembly of section .inttab_cpu0:

80002000 <__INTTAB0>:
	...

80002020 <osEE_tc_isr_dummy_entry_1>:
80002020:	3c 00       	j 80002020 <osEE_tc_isr_dummy_entry_1>
	...

80002040 <osEE_tc_isr2_entry_2>:
80002040:	0d 00 00 02 	svlcx 
80002044:	82 14       	mov %d4,1
80002046:	1d 00 8c 38 	j 8000915e <osEE_tc_isr2_wrapper>
	...

80002060 <osEE_tc_isr_dummy_entry_3>:
80002060:	3c 00       	j 80002060 <osEE_tc_isr_dummy_entry_3>
	...

80002080 <osEE_tc_isr_dummy_entry_4>:
80002080:	3c 00       	j 80002080 <osEE_tc_isr_dummy_entry_4>
	...

800020a0 <osEE_tc_isr_dummy_entry_5>:
800020a0:	3c 00       	j 800020a0 <osEE_tc_isr_dummy_entry_5>
	...

800020c0 <osEE_tc_isr_dummy_entry_6>:
800020c0:	3c 00       	j 800020c0 <osEE_tc_isr_dummy_entry_6>
	...

800020e0 <osEE_tc_isr_dummy_entry_7>:
800020e0:	3c 00       	j 800020e0 <osEE_tc_isr_dummy_entry_7>
	...

80002100 <osEE_tc_isr_dummy_entry_8>:
80002100:	3c 00       	j 80002100 <osEE_tc_isr_dummy_entry_8>
	...

80002120 <osEE_tc_isr_dummy_entry_9>:
80002120:	3c 00       	j 80002120 <osEE_tc_isr_dummy_entry_9>
	...

80002140 <osEE_tc_isr_dummy_entry_10>:
80002140:	3c 00       	j 80002140 <osEE_tc_isr_dummy_entry_10>
	...

80002160 <osEE_tc_isr_dummy_entry_11>:
80002160:	3c 00       	j 80002160 <osEE_tc_isr_dummy_entry_11>
	...

80002180 <osEE_tc_isr_dummy_entry_12>:
80002180:	3c 00       	j 80002180 <osEE_tc_isr_dummy_entry_12>
	...

800021a0 <osEE_tc_isr_dummy_entry_13>:
800021a0:	3c 00       	j 800021a0 <osEE_tc_isr_dummy_entry_13>
	...

800021c0 <osEE_tc_isr_dummy_entry_14>:
800021c0:	3c 00       	j 800021c0 <osEE_tc_isr_dummy_entry_14>
	...

800021e0 <osEE_tc_isr_dummy_entry_15>:
800021e0:	3c 00       	j 800021e0 <osEE_tc_isr_dummy_entry_15>
	...

80002200 <osEE_tc_isr_dummy_entry_16>:
80002200:	3c 00       	j 80002200 <osEE_tc_isr_dummy_entry_16>
	...

80002220 <osEE_tc_isr_dummy_entry_17>:
80002220:	3c 00       	j 80002220 <osEE_tc_isr_dummy_entry_17>
	...

80002240 <osEE_tc_isr_dummy_entry_18>:
80002240:	3c 00       	j 80002240 <osEE_tc_isr_dummy_entry_18>
	...

80002260 <osEE_tc_isr2_entry_19>:
80002260:	0d 00 00 02 	svlcx 
80002264:	82 04       	mov %d4,0
80002266:	1d 00 7c 37 	j 8000915e <osEE_tc_isr2_wrapper>
	...

80002280 <osEE_tc_isr_dummy_entry_20>:
80002280:	3c 00       	j 80002280 <osEE_tc_isr_dummy_entry_20>
	...

800022a0 <osEE_tc_isr_dummy_entry_21>:
800022a0:	3c 00       	j 800022a0 <osEE_tc_isr_dummy_entry_21>
	...

800022c0 <osEE_tc_isr_dummy_entry_22>:
800022c0:	3c 00       	j 800022c0 <osEE_tc_isr_dummy_entry_22>
	...

800022e0 <osEE_tc_isr_dummy_entry_23>:
800022e0:	3c 00       	j 800022e0 <osEE_tc_isr_dummy_entry_23>
	...

80002300 <osEE_tc_isr_dummy_entry_24>:
80002300:	3c 00       	j 80002300 <osEE_tc_isr_dummy_entry_24>
	...

80002320 <osEE_tc_isr_dummy_entry_25>:
80002320:	3c 00       	j 80002320 <osEE_tc_isr_dummy_entry_25>
	...

80002340 <osEE_tc_isr_dummy_entry_26>:
80002340:	3c 00       	j 80002340 <osEE_tc_isr_dummy_entry_26>
	...

80002360 <osEE_tc_isr_dummy_entry_27>:
80002360:	3c 00       	j 80002360 <osEE_tc_isr_dummy_entry_27>
	...

80002380 <osEE_tc_isr_dummy_entry_28>:
80002380:	3c 00       	j 80002380 <osEE_tc_isr_dummy_entry_28>
	...

800023a0 <osEE_tc_isr_dummy_entry_29>:
800023a0:	3c 00       	j 800023a0 <osEE_tc_isr_dummy_entry_29>
	...

800023c0 <osEE_tc_isr_dummy_entry_30>:
800023c0:	3c 00       	j 800023c0 <osEE_tc_isr_dummy_entry_30>
	...

800023e0 <osEE_tc_isr_dummy_entry_31>:
800023e0:	3c 00       	j 800023e0 <osEE_tc_isr_dummy_entry_31>
	...

80002400 <osEE_tc_isr_dummy_entry_32>:
80002400:	3c 00       	j 80002400 <osEE_tc_isr_dummy_entry_32>
	...

80002420 <osEE_tc_isr_dummy_entry_33>:
80002420:	3c 00       	j 80002420 <osEE_tc_isr_dummy_entry_33>
	...

80002440 <osEE_tc_isr_dummy_entry_34>:
80002440:	3c 00       	j 80002440 <osEE_tc_isr_dummy_entry_34>
	...

80002460 <osEE_tc_isr_dummy_entry_35>:
80002460:	3c 00       	j 80002460 <osEE_tc_isr_dummy_entry_35>
	...

80002480 <osEE_tc_isr_dummy_entry_36>:
80002480:	3c 00       	j 80002480 <osEE_tc_isr_dummy_entry_36>
	...

800024a0 <osEE_tc_isr_dummy_entry_37>:
800024a0:	3c 00       	j 800024a0 <osEE_tc_isr_dummy_entry_37>
	...

800024c0 <osEE_tc_isr_dummy_entry_38>:
800024c0:	3c 00       	j 800024c0 <osEE_tc_isr_dummy_entry_38>
	...

800024e0 <osEE_tc_isr_dummy_entry_39>:
800024e0:	3c 00       	j 800024e0 <osEE_tc_isr_dummy_entry_39>
	...

80002500 <osEE_tc_isr_dummy_entry_40>:
80002500:	3c 00       	j 80002500 <osEE_tc_isr_dummy_entry_40>
	...

80002520 <osEE_tc_isr_dummy_entry_41>:
80002520:	3c 00       	j 80002520 <osEE_tc_isr_dummy_entry_41>
	...

80002540 <osEE_tc_isr_dummy_entry_42>:
80002540:	3c 00       	j 80002540 <osEE_tc_isr_dummy_entry_42>
	...

80002560 <osEE_tc_isr_dummy_entry_43>:
80002560:	3c 00       	j 80002560 <osEE_tc_isr_dummy_entry_43>
	...

80002580 <osEE_tc_isr_dummy_entry_44>:
80002580:	3c 00       	j 80002580 <osEE_tc_isr_dummy_entry_44>
	...

800025a0 <osEE_tc_isr_dummy_entry_45>:
800025a0:	3c 00       	j 800025a0 <osEE_tc_isr_dummy_entry_45>
	...

800025c0 <osEE_tc_isr_dummy_entry_46>:
800025c0:	3c 00       	j 800025c0 <osEE_tc_isr_dummy_entry_46>
	...

800025e0 <osEE_tc_isr_dummy_entry_47>:
800025e0:	3c 00       	j 800025e0 <osEE_tc_isr_dummy_entry_47>
	...

80002600 <osEE_tc_isr_dummy_entry_48>:
80002600:	3c 00       	j 80002600 <osEE_tc_isr_dummy_entry_48>
	...

80002620 <osEE_tc_isr_dummy_entry_49>:
80002620:	3c 00       	j 80002620 <osEE_tc_isr_dummy_entry_49>
	...

80002640 <osEE_tc_isr_dummy_entry_50>:
80002640:	3c 00       	j 80002640 <osEE_tc_isr_dummy_entry_50>
	...

80002660 <osEE_tc_isr_dummy_entry_51>:
80002660:	3c 00       	j 80002660 <osEE_tc_isr_dummy_entry_51>
	...

80002680 <osEE_tc_isr_dummy_entry_52>:
80002680:	3c 00       	j 80002680 <osEE_tc_isr_dummy_entry_52>
	...

800026a0 <osEE_tc_isr_dummy_entry_53>:
800026a0:	3c 00       	j 800026a0 <osEE_tc_isr_dummy_entry_53>
	...

800026c0 <osEE_tc_isr_dummy_entry_54>:
800026c0:	3c 00       	j 800026c0 <osEE_tc_isr_dummy_entry_54>
	...

800026e0 <osEE_tc_isr_dummy_entry_55>:
800026e0:	3c 00       	j 800026e0 <osEE_tc_isr_dummy_entry_55>
	...

80002700 <osEE_tc_isr_dummy_entry_56>:
80002700:	3c 00       	j 80002700 <osEE_tc_isr_dummy_entry_56>
	...

80002720 <osEE_tc_isr_dummy_entry_57>:
80002720:	3c 00       	j 80002720 <osEE_tc_isr_dummy_entry_57>
	...

80002740 <osEE_tc_isr_dummy_entry_58>:
80002740:	3c 00       	j 80002740 <osEE_tc_isr_dummy_entry_58>
	...

80002760 <osEE_tc_isr_dummy_entry_59>:
80002760:	3c 00       	j 80002760 <osEE_tc_isr_dummy_entry_59>
	...

80002780 <osEE_tc_isr_dummy_entry_60>:
80002780:	3c 00       	j 80002780 <osEE_tc_isr_dummy_entry_60>
	...

800027a0 <osEE_tc_isr_dummy_entry_61>:
800027a0:	3c 00       	j 800027a0 <osEE_tc_isr_dummy_entry_61>
	...

800027c0 <osEE_tc_isr_dummy_entry_62>:
800027c0:	3c 00       	j 800027c0 <osEE_tc_isr_dummy_entry_62>
	...

800027e0 <osEE_tc_isr_dummy_entry_63>:
800027e0:	3c 00       	j 800027e0 <osEE_tc_isr_dummy_entry_63>
	...

80002800 <osEE_tc_isr_dummy_entry_64>:
80002800:	3c 00       	j 80002800 <osEE_tc_isr_dummy_entry_64>
	...

80002820 <osEE_tc_isr_dummy_entry_65>:
80002820:	3c 00       	j 80002820 <osEE_tc_isr_dummy_entry_65>
	...

80002840 <osEE_tc_isr_dummy_entry_66>:
80002840:	3c 00       	j 80002840 <osEE_tc_isr_dummy_entry_66>
	...

80002860 <osEE_tc_isr_dummy_entry_67>:
80002860:	3c 00       	j 80002860 <osEE_tc_isr_dummy_entry_67>
	...

80002880 <osEE_tc_isr_dummy_entry_68>:
80002880:	3c 00       	j 80002880 <osEE_tc_isr_dummy_entry_68>
	...

800028a0 <osEE_tc_isr_dummy_entry_69>:
800028a0:	3c 00       	j 800028a0 <osEE_tc_isr_dummy_entry_69>
	...

800028c0 <osEE_tc_isr_dummy_entry_70>:
800028c0:	3c 00       	j 800028c0 <osEE_tc_isr_dummy_entry_70>
	...

800028e0 <osEE_tc_isr_dummy_entry_71>:
800028e0:	3c 00       	j 800028e0 <osEE_tc_isr_dummy_entry_71>
	...

80002900 <osEE_tc_isr_dummy_entry_72>:
80002900:	3c 00       	j 80002900 <osEE_tc_isr_dummy_entry_72>
	...

80002920 <osEE_tc_isr_dummy_entry_73>:
80002920:	3c 00       	j 80002920 <osEE_tc_isr_dummy_entry_73>
	...

80002940 <osEE_tc_isr_dummy_entry_74>:
80002940:	3c 00       	j 80002940 <osEE_tc_isr_dummy_entry_74>
	...

80002960 <osEE_tc_isr_dummy_entry_75>:
80002960:	3c 00       	j 80002960 <osEE_tc_isr_dummy_entry_75>
	...

80002980 <osEE_tc_isr_dummy_entry_76>:
80002980:	3c 00       	j 80002980 <osEE_tc_isr_dummy_entry_76>
	...

800029a0 <osEE_tc_isr_dummy_entry_77>:
800029a0:	3c 00       	j 800029a0 <osEE_tc_isr_dummy_entry_77>
	...

800029c0 <osEE_tc_isr_dummy_entry_78>:
800029c0:	3c 00       	j 800029c0 <osEE_tc_isr_dummy_entry_78>
	...

800029e0 <osEE_tc_isr_dummy_entry_79>:
800029e0:	3c 00       	j 800029e0 <osEE_tc_isr_dummy_entry_79>
	...

80002a00 <osEE_tc_isr_dummy_entry_80>:
80002a00:	3c 00       	j 80002a00 <osEE_tc_isr_dummy_entry_80>
	...

80002a20 <osEE_tc_isr_dummy_entry_81>:
80002a20:	3c 00       	j 80002a20 <osEE_tc_isr_dummy_entry_81>
	...

80002a40 <osEE_tc_isr_dummy_entry_82>:
80002a40:	3c 00       	j 80002a40 <osEE_tc_isr_dummy_entry_82>
	...

80002a60 <osEE_tc_isr_dummy_entry_83>:
80002a60:	3c 00       	j 80002a60 <osEE_tc_isr_dummy_entry_83>
	...

80002a80 <osEE_tc_isr_dummy_entry_84>:
80002a80:	3c 00       	j 80002a80 <osEE_tc_isr_dummy_entry_84>
	...

80002aa0 <osEE_tc_isr_dummy_entry_85>:
80002aa0:	3c 00       	j 80002aa0 <osEE_tc_isr_dummy_entry_85>
	...

80002ac0 <osEE_tc_isr_dummy_entry_86>:
80002ac0:	3c 00       	j 80002ac0 <osEE_tc_isr_dummy_entry_86>
	...

80002ae0 <osEE_tc_isr_dummy_entry_87>:
80002ae0:	3c 00       	j 80002ae0 <osEE_tc_isr_dummy_entry_87>
	...

80002b00 <osEE_tc_isr_dummy_entry_88>:
80002b00:	3c 00       	j 80002b00 <osEE_tc_isr_dummy_entry_88>
	...

80002b20 <osEE_tc_isr_dummy_entry_89>:
80002b20:	3c 00       	j 80002b20 <osEE_tc_isr_dummy_entry_89>
	...

80002b40 <osEE_tc_isr_dummy_entry_90>:
80002b40:	3c 00       	j 80002b40 <osEE_tc_isr_dummy_entry_90>
	...

80002b60 <osEE_tc_isr_dummy_entry_91>:
80002b60:	3c 00       	j 80002b60 <osEE_tc_isr_dummy_entry_91>
	...

80002b80 <osEE_tc_isr_dummy_entry_92>:
80002b80:	3c 00       	j 80002b80 <osEE_tc_isr_dummy_entry_92>
	...

80002ba0 <osEE_tc_isr_dummy_entry_93>:
80002ba0:	3c 00       	j 80002ba0 <osEE_tc_isr_dummy_entry_93>
	...

80002bc0 <osEE_tc_isr_dummy_entry_94>:
80002bc0:	3c 00       	j 80002bc0 <osEE_tc_isr_dummy_entry_94>
	...

80002be0 <osEE_tc_isr_dummy_entry_95>:
80002be0:	3c 00       	j 80002be0 <osEE_tc_isr_dummy_entry_95>
	...

80002c00 <osEE_tc_isr_dummy_entry_96>:
80002c00:	3c 00       	j 80002c00 <osEE_tc_isr_dummy_entry_96>
	...

80002c20 <osEE_tc_isr_dummy_entry_97>:
80002c20:	3c 00       	j 80002c20 <osEE_tc_isr_dummy_entry_97>
	...

80002c40 <osEE_tc_isr_dummy_entry_98>:
80002c40:	3c 00       	j 80002c40 <osEE_tc_isr_dummy_entry_98>
	...

80002c60 <osEE_tc_isr_dummy_entry_99>:
80002c60:	3c 00       	j 80002c60 <osEE_tc_isr_dummy_entry_99>
	...

80002c80 <osEE_tc_isr_dummy_entry_100>:
80002c80:	3c 00       	j 80002c80 <osEE_tc_isr_dummy_entry_100>
	...

80002ca0 <osEE_tc_isr_dummy_entry_101>:
80002ca0:	3c 00       	j 80002ca0 <osEE_tc_isr_dummy_entry_101>
	...

80002cc0 <osEE_tc_isr_dummy_entry_102>:
80002cc0:	3c 00       	j 80002cc0 <osEE_tc_isr_dummy_entry_102>
	...

80002ce0 <osEE_tc_isr_dummy_entry_103>:
80002ce0:	3c 00       	j 80002ce0 <osEE_tc_isr_dummy_entry_103>
	...

80002d00 <osEE_tc_isr_dummy_entry_104>:
80002d00:	3c 00       	j 80002d00 <osEE_tc_isr_dummy_entry_104>
	...

80002d20 <osEE_tc_isr_dummy_entry_105>:
80002d20:	3c 00       	j 80002d20 <osEE_tc_isr_dummy_entry_105>
	...

80002d40 <osEE_tc_isr_dummy_entry_106>:
80002d40:	3c 00       	j 80002d40 <osEE_tc_isr_dummy_entry_106>
	...

80002d60 <osEE_tc_isr_dummy_entry_107>:
80002d60:	3c 00       	j 80002d60 <osEE_tc_isr_dummy_entry_107>
	...

80002d80 <osEE_tc_isr_dummy_entry_108>:
80002d80:	3c 00       	j 80002d80 <osEE_tc_isr_dummy_entry_108>
	...

80002da0 <osEE_tc_isr_dummy_entry_109>:
80002da0:	3c 00       	j 80002da0 <osEE_tc_isr_dummy_entry_109>
	...

80002dc0 <osEE_tc_isr_dummy_entry_110>:
80002dc0:	3c 00       	j 80002dc0 <osEE_tc_isr_dummy_entry_110>
	...

80002de0 <osEE_tc_isr_dummy_entry_111>:
80002de0:	3c 00       	j 80002de0 <osEE_tc_isr_dummy_entry_111>
	...

80002e00 <osEE_tc_isr_dummy_entry_112>:
80002e00:	3c 00       	j 80002e00 <osEE_tc_isr_dummy_entry_112>
	...

80002e20 <osEE_tc_isr_dummy_entry_113>:
80002e20:	3c 00       	j 80002e20 <osEE_tc_isr_dummy_entry_113>
	...

80002e40 <osEE_tc_isr_dummy_entry_114>:
80002e40:	3c 00       	j 80002e40 <osEE_tc_isr_dummy_entry_114>
	...

80002e60 <osEE_tc_isr_dummy_entry_115>:
80002e60:	3c 00       	j 80002e60 <osEE_tc_isr_dummy_entry_115>
	...

80002e80 <osEE_tc_isr_dummy_entry_116>:
80002e80:	3c 00       	j 80002e80 <osEE_tc_isr_dummy_entry_116>
	...

80002ea0 <osEE_tc_isr_dummy_entry_117>:
80002ea0:	3c 00       	j 80002ea0 <osEE_tc_isr_dummy_entry_117>
	...

80002ec0 <osEE_tc_isr_dummy_entry_118>:
80002ec0:	3c 00       	j 80002ec0 <osEE_tc_isr_dummy_entry_118>
	...

80002ee0 <osEE_tc_isr_dummy_entry_119>:
80002ee0:	3c 00       	j 80002ee0 <osEE_tc_isr_dummy_entry_119>
	...

80002f00 <osEE_tc_isr_dummy_entry_120>:
80002f00:	3c 00       	j 80002f00 <osEE_tc_isr_dummy_entry_120>
	...

80002f20 <osEE_tc_isr_dummy_entry_121>:
80002f20:	3c 00       	j 80002f20 <osEE_tc_isr_dummy_entry_121>
	...

80002f40 <osEE_tc_isr_dummy_entry_122>:
80002f40:	3c 00       	j 80002f40 <osEE_tc_isr_dummy_entry_122>
	...

80002f60 <osEE_tc_isr_dummy_entry_123>:
80002f60:	3c 00       	j 80002f60 <osEE_tc_isr_dummy_entry_123>
	...

80002f80 <osEE_tc_isr_dummy_entry_124>:
80002f80:	3c 00       	j 80002f80 <osEE_tc_isr_dummy_entry_124>
	...

80002fa0 <osEE_tc_isr_dummy_entry_125>:
80002fa0:	3c 00       	j 80002fa0 <osEE_tc_isr_dummy_entry_125>
	...

80002fc0 <osEE_tc_isr_dummy_entry_126>:
80002fc0:	3c 00       	j 80002fc0 <osEE_tc_isr_dummy_entry_126>
	...

80002fe0 <osEE_tc_isr_dummy_entry_127>:
80002fe0:	3c 00       	j 80002fe0 <osEE_tc_isr_dummy_entry_127>
	...

80003000 <osEE_tc_isr_dummy_entry_128>:
80003000:	3c 00       	j 80003000 <osEE_tc_isr_dummy_entry_128>
	...

80003020 <osEE_tc_isr_dummy_entry_129>:
80003020:	3c 00       	j 80003020 <osEE_tc_isr_dummy_entry_129>
	...

80003040 <osEE_tc_isr_dummy_entry_130>:
80003040:	3c 00       	j 80003040 <osEE_tc_isr_dummy_entry_130>
	...

80003060 <osEE_tc_isr_dummy_entry_131>:
80003060:	3c 00       	j 80003060 <osEE_tc_isr_dummy_entry_131>
	...

80003080 <osEE_tc_isr_dummy_entry_132>:
80003080:	3c 00       	j 80003080 <osEE_tc_isr_dummy_entry_132>
	...

800030a0 <osEE_tc_isr_dummy_entry_133>:
800030a0:	3c 00       	j 800030a0 <osEE_tc_isr_dummy_entry_133>
	...

800030c0 <osEE_tc_isr_dummy_entry_134>:
800030c0:	3c 00       	j 800030c0 <osEE_tc_isr_dummy_entry_134>
	...

800030e0 <osEE_tc_isr_dummy_entry_135>:
800030e0:	3c 00       	j 800030e0 <osEE_tc_isr_dummy_entry_135>
	...

80003100 <osEE_tc_isr_dummy_entry_136>:
80003100:	3c 00       	j 80003100 <osEE_tc_isr_dummy_entry_136>
	...

80003120 <osEE_tc_isr_dummy_entry_137>:
80003120:	3c 00       	j 80003120 <osEE_tc_isr_dummy_entry_137>
	...

80003140 <osEE_tc_isr_dummy_entry_138>:
80003140:	3c 00       	j 80003140 <osEE_tc_isr_dummy_entry_138>
	...

80003160 <osEE_tc_isr_dummy_entry_139>:
80003160:	3c 00       	j 80003160 <osEE_tc_isr_dummy_entry_139>
	...

80003180 <osEE_tc_isr_dummy_entry_140>:
80003180:	3c 00       	j 80003180 <osEE_tc_isr_dummy_entry_140>
	...

800031a0 <osEE_tc_isr_dummy_entry_141>:
800031a0:	3c 00       	j 800031a0 <osEE_tc_isr_dummy_entry_141>
	...

800031c0 <osEE_tc_isr_dummy_entry_142>:
800031c0:	3c 00       	j 800031c0 <osEE_tc_isr_dummy_entry_142>
	...

800031e0 <osEE_tc_isr_dummy_entry_143>:
800031e0:	3c 00       	j 800031e0 <osEE_tc_isr_dummy_entry_143>
	...

80003200 <osEE_tc_isr_dummy_entry_144>:
80003200:	3c 00       	j 80003200 <osEE_tc_isr_dummy_entry_144>
	...

80003220 <osEE_tc_isr_dummy_entry_145>:
80003220:	3c 00       	j 80003220 <osEE_tc_isr_dummy_entry_145>
	...

80003240 <osEE_tc_isr_dummy_entry_146>:
80003240:	3c 00       	j 80003240 <osEE_tc_isr_dummy_entry_146>
	...

80003260 <osEE_tc_isr_dummy_entry_147>:
80003260:	3c 00       	j 80003260 <osEE_tc_isr_dummy_entry_147>
	...

80003280 <osEE_tc_isr_dummy_entry_148>:
80003280:	3c 00       	j 80003280 <osEE_tc_isr_dummy_entry_148>
	...

800032a0 <osEE_tc_isr_dummy_entry_149>:
800032a0:	3c 00       	j 800032a0 <osEE_tc_isr_dummy_entry_149>
	...

800032c0 <osEE_tc_isr_dummy_entry_150>:
800032c0:	3c 00       	j 800032c0 <osEE_tc_isr_dummy_entry_150>
	...

800032e0 <osEE_tc_isr_dummy_entry_151>:
800032e0:	3c 00       	j 800032e0 <osEE_tc_isr_dummy_entry_151>
	...

80003300 <osEE_tc_isr_dummy_entry_152>:
80003300:	3c 00       	j 80003300 <osEE_tc_isr_dummy_entry_152>
	...

80003320 <osEE_tc_isr_dummy_entry_153>:
80003320:	3c 00       	j 80003320 <osEE_tc_isr_dummy_entry_153>
	...

80003340 <osEE_tc_isr_dummy_entry_154>:
80003340:	3c 00       	j 80003340 <osEE_tc_isr_dummy_entry_154>
	...

80003360 <osEE_tc_isr_dummy_entry_155>:
80003360:	3c 00       	j 80003360 <osEE_tc_isr_dummy_entry_155>
	...

80003380 <osEE_tc_isr_dummy_entry_156>:
80003380:	3c 00       	j 80003380 <osEE_tc_isr_dummy_entry_156>
	...

800033a0 <osEE_tc_isr_dummy_entry_157>:
800033a0:	3c 00       	j 800033a0 <osEE_tc_isr_dummy_entry_157>
	...

800033c0 <osEE_tc_isr_dummy_entry_158>:
800033c0:	3c 00       	j 800033c0 <osEE_tc_isr_dummy_entry_158>
	...

800033e0 <osEE_tc_isr_dummy_entry_159>:
800033e0:	3c 00       	j 800033e0 <osEE_tc_isr_dummy_entry_159>
	...

80003400 <osEE_tc_isr_dummy_entry_160>:
80003400:	3c 00       	j 80003400 <osEE_tc_isr_dummy_entry_160>
	...

80003420 <osEE_tc_isr_dummy_entry_161>:
80003420:	3c 00       	j 80003420 <osEE_tc_isr_dummy_entry_161>
	...

80003440 <osEE_tc_isr_dummy_entry_162>:
80003440:	3c 00       	j 80003440 <osEE_tc_isr_dummy_entry_162>
	...

80003460 <osEE_tc_isr_dummy_entry_163>:
80003460:	3c 00       	j 80003460 <osEE_tc_isr_dummy_entry_163>
	...

80003480 <osEE_tc_isr_dummy_entry_164>:
80003480:	3c 00       	j 80003480 <osEE_tc_isr_dummy_entry_164>
	...

800034a0 <osEE_tc_isr_dummy_entry_165>:
800034a0:	3c 00       	j 800034a0 <osEE_tc_isr_dummy_entry_165>
	...

800034c0 <osEE_tc_isr_dummy_entry_166>:
800034c0:	3c 00       	j 800034c0 <osEE_tc_isr_dummy_entry_166>
	...

800034e0 <osEE_tc_isr_dummy_entry_167>:
800034e0:	3c 00       	j 800034e0 <osEE_tc_isr_dummy_entry_167>
	...

80003500 <osEE_tc_isr_dummy_entry_168>:
80003500:	3c 00       	j 80003500 <osEE_tc_isr_dummy_entry_168>
	...

80003520 <osEE_tc_isr_dummy_entry_169>:
80003520:	3c 00       	j 80003520 <osEE_tc_isr_dummy_entry_169>
	...

80003540 <osEE_tc_isr_dummy_entry_170>:
80003540:	3c 00       	j 80003540 <osEE_tc_isr_dummy_entry_170>
	...

80003560 <osEE_tc_isr_dummy_entry_171>:
80003560:	3c 00       	j 80003560 <osEE_tc_isr_dummy_entry_171>
	...

80003580 <osEE_tc_isr_dummy_entry_172>:
80003580:	3c 00       	j 80003580 <osEE_tc_isr_dummy_entry_172>
	...

800035a0 <osEE_tc_isr_dummy_entry_173>:
800035a0:	3c 00       	j 800035a0 <osEE_tc_isr_dummy_entry_173>
	...

800035c0 <osEE_tc_isr_dummy_entry_174>:
800035c0:	3c 00       	j 800035c0 <osEE_tc_isr_dummy_entry_174>
	...

800035e0 <osEE_tc_isr_dummy_entry_175>:
800035e0:	3c 00       	j 800035e0 <osEE_tc_isr_dummy_entry_175>
	...

80003600 <osEE_tc_isr_dummy_entry_176>:
80003600:	3c 00       	j 80003600 <osEE_tc_isr_dummy_entry_176>
	...

80003620 <osEE_tc_isr_dummy_entry_177>:
80003620:	3c 00       	j 80003620 <osEE_tc_isr_dummy_entry_177>
	...

80003640 <osEE_tc_isr_dummy_entry_178>:
80003640:	3c 00       	j 80003640 <osEE_tc_isr_dummy_entry_178>
	...

80003660 <osEE_tc_isr_dummy_entry_179>:
80003660:	3c 00       	j 80003660 <osEE_tc_isr_dummy_entry_179>
	...

80003680 <osEE_tc_isr_dummy_entry_180>:
80003680:	3c 00       	j 80003680 <osEE_tc_isr_dummy_entry_180>
	...

800036a0 <osEE_tc_isr_dummy_entry_181>:
800036a0:	3c 00       	j 800036a0 <osEE_tc_isr_dummy_entry_181>
	...

800036c0 <osEE_tc_isr_dummy_entry_182>:
800036c0:	3c 00       	j 800036c0 <osEE_tc_isr_dummy_entry_182>
	...

800036e0 <osEE_tc_isr_dummy_entry_183>:
800036e0:	3c 00       	j 800036e0 <osEE_tc_isr_dummy_entry_183>
	...

80003700 <osEE_tc_isr_dummy_entry_184>:
80003700:	3c 00       	j 80003700 <osEE_tc_isr_dummy_entry_184>
	...

80003720 <osEE_tc_isr_dummy_entry_185>:
80003720:	3c 00       	j 80003720 <osEE_tc_isr_dummy_entry_185>
	...

80003740 <osEE_tc_isr_dummy_entry_186>:
80003740:	3c 00       	j 80003740 <osEE_tc_isr_dummy_entry_186>
	...

80003760 <osEE_tc_isr_dummy_entry_187>:
80003760:	3c 00       	j 80003760 <osEE_tc_isr_dummy_entry_187>
	...

80003780 <osEE_tc_isr_dummy_entry_188>:
80003780:	3c 00       	j 80003780 <osEE_tc_isr_dummy_entry_188>
	...

800037a0 <osEE_tc_isr_dummy_entry_189>:
800037a0:	3c 00       	j 800037a0 <osEE_tc_isr_dummy_entry_189>
	...

800037c0 <osEE_tc_isr_dummy_entry_190>:
800037c0:	3c 00       	j 800037c0 <osEE_tc_isr_dummy_entry_190>
	...

800037e0 <osEE_tc_isr_dummy_entry_191>:
800037e0:	3c 00       	j 800037e0 <osEE_tc_isr_dummy_entry_191>
	...

80003800 <osEE_tc_isr_dummy_entry_192>:
80003800:	3c 00       	j 80003800 <osEE_tc_isr_dummy_entry_192>
	...

80003820 <osEE_tc_isr_dummy_entry_193>:
80003820:	3c 00       	j 80003820 <osEE_tc_isr_dummy_entry_193>
	...

80003840 <osEE_tc_isr_dummy_entry_194>:
80003840:	3c 00       	j 80003840 <osEE_tc_isr_dummy_entry_194>
	...

80003860 <osEE_tc_isr_dummy_entry_195>:
80003860:	3c 00       	j 80003860 <osEE_tc_isr_dummy_entry_195>
	...

80003880 <osEE_tc_isr_dummy_entry_196>:
80003880:	3c 00       	j 80003880 <osEE_tc_isr_dummy_entry_196>
	...

800038a0 <osEE_tc_isr_dummy_entry_197>:
800038a0:	3c 00       	j 800038a0 <osEE_tc_isr_dummy_entry_197>
	...

800038c0 <osEE_tc_isr_dummy_entry_198>:
800038c0:	3c 00       	j 800038c0 <osEE_tc_isr_dummy_entry_198>
	...

800038e0 <osEE_tc_isr_dummy_entry_199>:
800038e0:	3c 00       	j 800038e0 <osEE_tc_isr_dummy_entry_199>
	...

80003900 <osEE_tc_isr_dummy_entry_200>:
80003900:	3c 00       	j 80003900 <osEE_tc_isr_dummy_entry_200>
	...

80003920 <osEE_tc_isr_dummy_entry_201>:
80003920:	3c 00       	j 80003920 <osEE_tc_isr_dummy_entry_201>
	...

80003940 <osEE_tc_isr_dummy_entry_202>:
80003940:	3c 00       	j 80003940 <osEE_tc_isr_dummy_entry_202>
	...

80003960 <osEE_tc_isr_dummy_entry_203>:
80003960:	3c 00       	j 80003960 <osEE_tc_isr_dummy_entry_203>
	...

80003980 <osEE_tc_isr_dummy_entry_204>:
80003980:	3c 00       	j 80003980 <osEE_tc_isr_dummy_entry_204>
	...

800039a0 <osEE_tc_isr_dummy_entry_205>:
800039a0:	3c 00       	j 800039a0 <osEE_tc_isr_dummy_entry_205>
	...

800039c0 <osEE_tc_isr_dummy_entry_206>:
800039c0:	3c 00       	j 800039c0 <osEE_tc_isr_dummy_entry_206>
	...

800039e0 <osEE_tc_isr_dummy_entry_207>:
800039e0:	3c 00       	j 800039e0 <osEE_tc_isr_dummy_entry_207>
	...

80003a00 <osEE_tc_isr_dummy_entry_208>:
80003a00:	3c 00       	j 80003a00 <osEE_tc_isr_dummy_entry_208>
	...

80003a20 <osEE_tc_isr_dummy_entry_209>:
80003a20:	3c 00       	j 80003a20 <osEE_tc_isr_dummy_entry_209>
	...

80003a40 <osEE_tc_isr_dummy_entry_210>:
80003a40:	3c 00       	j 80003a40 <osEE_tc_isr_dummy_entry_210>
	...

80003a60 <osEE_tc_isr_dummy_entry_211>:
80003a60:	3c 00       	j 80003a60 <osEE_tc_isr_dummy_entry_211>
	...

80003a80 <osEE_tc_isr_dummy_entry_212>:
80003a80:	3c 00       	j 80003a80 <osEE_tc_isr_dummy_entry_212>
	...

80003aa0 <osEE_tc_isr_dummy_entry_213>:
80003aa0:	3c 00       	j 80003aa0 <osEE_tc_isr_dummy_entry_213>
	...

80003ac0 <osEE_tc_isr_dummy_entry_214>:
80003ac0:	3c 00       	j 80003ac0 <osEE_tc_isr_dummy_entry_214>
	...

80003ae0 <osEE_tc_isr_dummy_entry_215>:
80003ae0:	3c 00       	j 80003ae0 <osEE_tc_isr_dummy_entry_215>
	...

80003b00 <osEE_tc_isr_dummy_entry_216>:
80003b00:	3c 00       	j 80003b00 <osEE_tc_isr_dummy_entry_216>
	...

80003b20 <osEE_tc_isr_dummy_entry_217>:
80003b20:	3c 00       	j 80003b20 <osEE_tc_isr_dummy_entry_217>
	...

80003b40 <osEE_tc_isr_dummy_entry_218>:
80003b40:	3c 00       	j 80003b40 <osEE_tc_isr_dummy_entry_218>
	...

80003b60 <osEE_tc_isr_dummy_entry_219>:
80003b60:	3c 00       	j 80003b60 <osEE_tc_isr_dummy_entry_219>
	...

80003b80 <osEE_tc_isr_dummy_entry_220>:
80003b80:	3c 00       	j 80003b80 <osEE_tc_isr_dummy_entry_220>
	...

80003ba0 <osEE_tc_isr_dummy_entry_221>:
80003ba0:	3c 00       	j 80003ba0 <osEE_tc_isr_dummy_entry_221>
	...

80003bc0 <osEE_tc_isr_dummy_entry_222>:
80003bc0:	3c 00       	j 80003bc0 <osEE_tc_isr_dummy_entry_222>
	...

80003be0 <osEE_tc_isr_dummy_entry_223>:
80003be0:	3c 00       	j 80003be0 <osEE_tc_isr_dummy_entry_223>
	...

80003c00 <osEE_tc_isr_dummy_entry_224>:
80003c00:	3c 00       	j 80003c00 <osEE_tc_isr_dummy_entry_224>
	...

80003c20 <osEE_tc_isr_dummy_entry_225>:
80003c20:	3c 00       	j 80003c20 <osEE_tc_isr_dummy_entry_225>
	...

80003c40 <osEE_tc_isr_dummy_entry_226>:
80003c40:	3c 00       	j 80003c40 <osEE_tc_isr_dummy_entry_226>
	...

80003c60 <osEE_tc_isr_dummy_entry_227>:
80003c60:	3c 00       	j 80003c60 <osEE_tc_isr_dummy_entry_227>
	...

80003c80 <osEE_tc_isr_dummy_entry_228>:
80003c80:	3c 00       	j 80003c80 <osEE_tc_isr_dummy_entry_228>
	...

80003ca0 <osEE_tc_isr_dummy_entry_229>:
80003ca0:	3c 00       	j 80003ca0 <osEE_tc_isr_dummy_entry_229>
	...

80003cc0 <osEE_tc_isr_dummy_entry_230>:
80003cc0:	3c 00       	j 80003cc0 <osEE_tc_isr_dummy_entry_230>
	...

80003ce0 <osEE_tc_isr_dummy_entry_231>:
80003ce0:	3c 00       	j 80003ce0 <osEE_tc_isr_dummy_entry_231>
	...

80003d00 <osEE_tc_isr_dummy_entry_232>:
80003d00:	3c 00       	j 80003d00 <osEE_tc_isr_dummy_entry_232>
	...

80003d20 <osEE_tc_isr_dummy_entry_233>:
80003d20:	3c 00       	j 80003d20 <osEE_tc_isr_dummy_entry_233>
	...

80003d40 <osEE_tc_isr_dummy_entry_234>:
80003d40:	3c 00       	j 80003d40 <osEE_tc_isr_dummy_entry_234>
	...

80003d60 <osEE_tc_isr_dummy_entry_235>:
80003d60:	3c 00       	j 80003d60 <osEE_tc_isr_dummy_entry_235>
	...

80003d80 <osEE_tc_isr_dummy_entry_236>:
80003d80:	3c 00       	j 80003d80 <osEE_tc_isr_dummy_entry_236>
	...

80003da0 <osEE_tc_isr_dummy_entry_237>:
80003da0:	3c 00       	j 80003da0 <osEE_tc_isr_dummy_entry_237>
	...

80003dc0 <osEE_tc_isr_dummy_entry_238>:
80003dc0:	3c 00       	j 80003dc0 <osEE_tc_isr_dummy_entry_238>
	...

80003de0 <osEE_tc_isr_dummy_entry_239>:
80003de0:	3c 00       	j 80003de0 <osEE_tc_isr_dummy_entry_239>
	...

80003e00 <osEE_tc_isr_dummy_entry_240>:
80003e00:	3c 00       	j 80003e00 <osEE_tc_isr_dummy_entry_240>
	...

80003e20 <osEE_tc_isr_dummy_entry_241>:
80003e20:	3c 00       	j 80003e20 <osEE_tc_isr_dummy_entry_241>
	...

80003e40 <osEE_tc_isr_dummy_entry_242>:
80003e40:	3c 00       	j 80003e40 <osEE_tc_isr_dummy_entry_242>
	...

80003e60 <osEE_tc_isr_dummy_entry_243>:
80003e60:	3c 00       	j 80003e60 <osEE_tc_isr_dummy_entry_243>
	...

80003e80 <osEE_tc_isr_dummy_entry_244>:
80003e80:	3c 00       	j 80003e80 <osEE_tc_isr_dummy_entry_244>
	...

80003ea0 <osEE_tc_isr_dummy_entry_245>:
80003ea0:	3c 00       	j 80003ea0 <osEE_tc_isr_dummy_entry_245>
	...

80003ec0 <osEE_tc_isr_dummy_entry_246>:
80003ec0:	3c 00       	j 80003ec0 <osEE_tc_isr_dummy_entry_246>
	...

80003ee0 <osEE_tc_isr_dummy_entry_247>:
80003ee0:	3c 00       	j 80003ee0 <osEE_tc_isr_dummy_entry_247>
	...

80003f00 <osEE_tc_isr_dummy_entry_248>:
80003f00:	3c 00       	j 80003f00 <osEE_tc_isr_dummy_entry_248>
	...

80003f20 <osEE_tc_isr_dummy_entry_249>:
80003f20:	3c 00       	j 80003f20 <osEE_tc_isr_dummy_entry_249>
	...

80003f40 <osEE_tc_isr_dummy_entry_250>:
80003f40:	3c 00       	j 80003f40 <osEE_tc_isr_dummy_entry_250>
	...

80003f60 <osEE_tc_isr_dummy_entry_251>:
80003f60:	3c 00       	j 80003f60 <osEE_tc_isr_dummy_entry_251>
	...

80003f80 <osEE_tc_isr_dummy_entry_252>:
80003f80:	3c 00       	j 80003f80 <osEE_tc_isr_dummy_entry_252>
	...

80003fa0 <osEE_tc_isr_dummy_entry_253>:
80003fa0:	3c 00       	j 80003fa0 <osEE_tc_isr_dummy_entry_253>
	...

80003fc0 <osEE_tc_isr_dummy_entry_254>:
80003fc0:	3c 00       	j 80003fc0 <osEE_tc_isr_dummy_entry_254>
	...

80003fe0 <osEE_tc_isr_dummy_entry_255>:
80003fe0:	3c 00       	j 80003fe0 <osEE_tc_isr_dummy_entry_255>
	...

Disassembly of section .text:

80004000 <delay_ms>:
#include "Lcd_Driver.h"
#include "bsw.h"
   

void delay_ms(unsigned long delay)
{
80004000:	02 4a       	mov %d10,%d4
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
80004002:	6d 00 15 10 	call 8000602c <IfxScuCcu_getSourceFrequency>
80004006:	91 30 00 ff 	movh.a %a15,61443
8000400a:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000400e:	48 04       	ld.w %d4,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004010:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80004014:	37 04 64 44 	extr.u %d4,%d4,8,4
80004018:	53 1f 40 00 	mul.u %e0,%d15,1
8000401c:	4b 04 41 41 	itof %d4,%d4
    result |= ((uint64)stm->CAP.U) << 32;
80004020:	8f 0f 40 61 	or %d6,%d15,0
80004024:	4b 42 51 20 	div.f %d2,%d2,%d4
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
    uint64 ticks_per_ms = freq / 1000;
80004028:	3b 80 3e 40 	mov %d4,1000
#include "bsw.h"
   

void delay_ms(unsigned long delay)
{
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
8000402c:	4b 02 71 21 	ftouz %d2,%d2
    uint64 ticks_per_ms = freq / 1000;
80004030:	4b 42 11 22 	div.u %e2,%d2,%d4
80004034:	85 f3 2c 00 	ld.w %d3,f000002c <_SMALL_DATA4_+0x3fff802c>
    uint64 start = IfxStm_get(&MODULE_STM0);
    uint64 wait_ticks = delay * ticks_per_ms;
80004038:	73 a2 68 40 	mul.u %e4,%d2,%d10
8000403c:	0f 13 a0 70 	or %d7,%d3,%d1

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004040:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80004044:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80004048:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
8000404c:	8f 0f 40 81 	or %d8,%d15,0
80004050:	0f 32 a0 90 	or %d9,%d2,%d3

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
80004054:	0b 68 c0 20 	subx %d2,%d8,%d6
80004058:	0b 79 d0 30 	subc %d3,%d9,%d7
8000405c:	3a 53       	eq %d15,%d3,%d5
8000405e:	0b 42 30 f2 	and.lt.u %d15,%d2,%d4
80004062:	0b 53 a0 f2 	or.lt.u %d15,%d3,%d5
80004066:	ee ed       	jnz %d15,80004040 <delay_ms+0x40>
}
80004068:	00 90       	ret 

8000406a <lcd_write4bits>:
}


static void lcd_write4bits(uint8 data)
{
    IfxPort_setPinState(LCD_D4, (data & 0x01) ? IfxPort_State_high : IfxPort_State_low);
8000406a:	8f 14 00 21 	and %d2,%d4,1
8000406e:	7b 10 00 f0 	movh %d15,1
80004072:	ab 1f a0 f2 	seln %d15,%d2,%d15,1
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
80004076:	91 40 00 ff 	movh.a %a15,61444
8000407a:	06 4f       	sh %d15,4
8000407c:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80004080:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D5, (data & 0x02) ? IfxPort_State_high : IfxPort_State_low);
80004082:	8f 24 00 21 	and %d2,%d4,2
80004086:	7b 80 00 f0 	movh %d15,8
8000408a:	91 40 00 ff 	movh.a %a15,61444
8000408e:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004092:	ab 8f a0 f2 	seln %d15,%d2,%d15,8
80004096:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D6, (data & 0x04) ? IfxPort_State_high : IfxPort_State_low);
80004098:	8f 44 00 21 	and %d2,%d4,4
8000409c:	7b 00 01 f0 	movh %d15,16
800040a0:	ab 0f a1 f2 	seln %d15,%d2,%d15,16
800040a4:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D7, (data & 0x08) ? IfxPort_State_high : IfxPort_State_low);
800040a6:	8f 84 00 41 	and %d4,%d4,8
800040aa:	7b 00 02 f0 	movh %d15,32
800040ae:	ab 0f a2 44 	seln %d4,%d4,%d15,32
800040b2:	68 14       	st.w [%a15]4,%d4
800040b4:	da 80       	mov %d15,128
800040b6:	68 1f       	st.w [%a15]4,%d15


static void lcd_pulse_enable(void)
{
    IfxPort_setPinHigh(LCD_E);
    delay_ms(2);       
800040b8:	82 24       	mov %d4,2
800040ba:	6d ff a3 ff 	call 80004000 <delay_ms>
800040be:	7b 00 08 f0 	movh %d15,128
800040c2:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinLow(LCD_E);
    delay_ms(2);       
800040c4:	82 24       	mov %d4,2
800040c6:	1d ff 9d ff 	j 80004000 <delay_ms>

800040ca <lcd_command>:
800040ca:	91 40 00 ff 	movh.a %a15,61444
800040ce:	7b 00 04 20 	movh %d2,64
800040d2:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
    lcd_pulse_enable();
}


static void lcd_command(uint8 cmd)
{
800040d6:	02 4f       	mov %d15,%d4
800040d8:	68 12       	st.w [%a15]4,%d2
    IfxPort_setPinLow(LCD_RS);
    lcd_write4bits(cmd >> 4);
800040da:	06 c4       	sh %d4,-4
800040dc:	5c c7       	call 8000406a <lcd_write4bits>
    lcd_write4bits(cmd & 0x0F);
800040de:	8f ff 00 41 	and %d4,%d15,15
800040e2:	5c c4       	call 8000406a <lcd_write4bits>
    delay_ms(5);       
800040e4:	82 54       	mov %d4,5
800040e6:	1d ff 8d ff 	j 80004000 <delay_ms>

800040ea <lcd_clear>:
}


void lcd_clear(void)
{
    lcd_command(0x01);
800040ea:	82 14       	mov %d4,1
800040ec:	5c ef       	call 800040ca <lcd_command>
    delay_ms(5);       
800040ee:	82 54       	mov %d4,5
800040f0:	1d ff 88 ff 	j 80004000 <delay_ms>

800040f4 <lcd_init>:
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
800040f4:	91 40 00 4f 	movh.a %a4,61444
800040f8:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800040fc:	82 64       	mov %d4,6
800040fe:	3b 00 08 50 	mov %d5,128
80004102:	6d 00 ae 0d 	call 80005c5e <IfxPort_setPinMode>
80004106:	91 40 00 4f 	movh.a %a4,61444
8000410a:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
8000410e:	82 74       	mov %d4,7
80004110:	3b 00 08 50 	mov %d5,128
80004114:	6d 00 a5 0d 	call 80005c5e <IfxPort_setPinMode>
80004118:	91 40 00 4f 	movh.a %a4,61444
8000411c:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80004120:	82 44       	mov %d4,4
80004122:	3b 00 08 50 	mov %d5,128
80004126:	6d 00 9c 0d 	call 80005c5e <IfxPort_setPinMode>
8000412a:	91 40 00 4f 	movh.a %a4,61444
8000412e:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004132:	82 34       	mov %d4,3
80004134:	3b 00 08 50 	mov %d5,128
80004138:	6d 00 93 0d 	call 80005c5e <IfxPort_setPinMode>
8000413c:	91 40 00 4f 	movh.a %a4,61444
80004140:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004144:	82 44       	mov %d4,4
80004146:	3b 00 08 50 	mov %d5,128
8000414a:	6d 00 8a 0d 	call 80005c5e <IfxPort_setPinMode>
8000414e:	91 40 00 4f 	movh.a %a4,61444
80004152:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004156:	3b 00 08 50 	mov %d5,128
8000415a:	82 54       	mov %d4,5
8000415c:	6d 00 81 0d 	call 80005c5e <IfxPort_setPinMode>
    IfxPort_setPinModeOutput(LCD_D4, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D5, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D6, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D7, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);

    delay_ms(100);  
80004160:	3b 40 06 40 	mov %d4,100
80004164:	6d ff 4e ff 	call 80004000 <delay_ms>
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
80004168:	91 40 00 ff 	movh.a %a15,61444
8000416c:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004170:	7b 00 04 f0 	movh %d15,64
80004174:	68 1f       	st.w [%a15]4,%d15
80004176:	7b 00 08 f0 	movh %d15,128
8000417a:	68 1f       	st.w [%a15]4,%d15

    IfxPort_setPinLow(LCD_RS);
    IfxPort_setPinLow(LCD_E);

    lcd_write4bits(0x03); delay_ms(10);  
8000417c:	82 34       	mov %d4,3
8000417e:	6d ff 76 ff 	call 8000406a <lcd_write4bits>
80004182:	3b a0 00 40 	mov %d4,10
80004186:	6d ff 3d ff 	call 80004000 <delay_ms>
    lcd_write4bits(0x03); delay_ms(10);  
8000418a:	82 34       	mov %d4,3
8000418c:	6d ff 6f ff 	call 8000406a <lcd_write4bits>
80004190:	3b a0 00 40 	mov %d4,10
80004194:	6d ff 36 ff 	call 80004000 <delay_ms>
    lcd_write4bits(0x03); delay_ms(5);   
80004198:	82 34       	mov %d4,3
8000419a:	6d ff 68 ff 	call 8000406a <lcd_write4bits>
8000419e:	82 54       	mov %d4,5
800041a0:	6d ff 30 ff 	call 80004000 <delay_ms>
    lcd_write4bits(0x02); delay_ms(5);   
800041a4:	82 24       	mov %d4,2
800041a6:	6d ff 62 ff 	call 8000406a <lcd_write4bits>
800041aa:	82 54       	mov %d4,5
800041ac:	6d ff 2a ff 	call 80004000 <delay_ms>

    lcd_command(0x28);
800041b0:	3b 80 02 40 	mov %d4,40
800041b4:	5c 8b       	call 800040ca <lcd_command>
    lcd_command(0x0C);
800041b6:	3b c0 00 40 	mov %d4,12
800041ba:	5c 88       	call 800040ca <lcd_command>
    lcd_command(0x06);
800041bc:	82 64       	mov %d4,6
800041be:	5c 86       	call 800040ca <lcd_command>
    lcd_clear();
800041c0:	1d ff 95 ff 	j 800040ea <lcd_clear>

800041c4 <lcd_goto>:
}


void lcd_goto(uint8 row, uint8 col)
{
    uint8 address = (row == 0) ? 0x00 : 0x40;
800041c4:	ab 04 a4 44 	seln %d4,%d4,%d4,64
    address += col;
800041c8:	42 54       	add %d4,%d5
    lcd_command(0x80 | address);
800041ca:	b7 14 99 43 	insert %d4,%d4,1,7,25
800041ce:	1d ff 7e ff 	j 800040ca <lcd_command>

800041d2 <lcd_print>:
800041d2:	91 40 00 cf 	movh.a %a12,61444
}


void lcd_print(const char *str)
{
800041d6:	40 4f       	mov.aa %a15,%a4
800041d8:	d9 cc 00 8a 	lea %a12,[%a12]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800041dc:	3b 00 04 80 	mov %d8,64
    while (*str)
800041e0:	79 ff 00 00 	ld.b %d15,[%a15]0
800041e4:	6e 11       	jz %d15,80004206 <lcd_print+0x34>
        lcd_data(*str++);
800041e6:	16 ff       	and %d15,255


static void lcd_data(uint8 data)
{
    IfxPort_setPinHigh(LCD_RS);
    lcd_write4bits(data >> 4);
800041e8:	8f cf 1f 40 	sh %d4,%d15,-4
800041ec:	59 c8 04 00 	st.w [%a12]4 <f0040004 <_SMALL_DATA4_+0x40038004>>,%d8
800041f0:	6d ff 3d ff 	call 8000406a <lcd_write4bits>
    lcd_write4bits(data & 0x0F);
800041f4:	8f ff 00 41 	and %d4,%d15,15
800041f8:	6d ff 39 ff 	call 8000406a <lcd_write4bits>
    delay_ms(5);       
800041fc:	82 54       	mov %d4,5


void lcd_print(const char *str)
{
    while (*str)
        lcd_data(*str++);
800041fe:	b0 1f       	add.a %a15,1
static void lcd_data(uint8 data)
{
    IfxPort_setPinHigh(LCD_RS);
    lcd_write4bits(data >> 4);
    lcd_write4bits(data & 0x0F);
    delay_ms(5);       
80004200:	6d ff 00 ff 	call 80004000 <delay_ms>
80004204:	3c ee       	j 800041e0 <lcd_print+0xe>

void lcd_print(const char *str)
{
    while (*str)
        lcd_data(*str++);
}
80004206:	00 90       	ret 

80004208 <FuncTask1>:

uint16_t rpm = 1000; // LCD에 출력한 전역변수 선언

TASK(Task1)
{
    printfSerial("Task1 Begins...");
80004208:	91 00 00 48 	movh.a %a4,32768
8000420c:	d9 44 28 00 	lea %a4,[%a4]40 <80000028 <_start+0x8>>
80004210:	6d 00 8d 00 	call 8000432a <printfSerial>
    mdelay(3000);
80004214:	3b 80 bb 40 	mov %d4,3000
80004218:	6d 00 c0 00 	call 80004398 <mdelay>
    printfSerial("Task1 Finishes...");
8000421c:	91 00 00 48 	movh.a %a4,32768
80004220:	d9 44 38 00 	lea %a4,[%a4]56 <80000038 <_start+0x18>>
80004224:	6d 00 83 00 	call 8000432a <printfSerial>

    TerminateTask();
80004228:	1d 00 5a 29 	j 800094dc <TerminateTask>

8000422c <FuncTaskLCD>:
}

TASK(TaskLCD)
{   
    rpm += 100;
8000422c:	91 00 00 f7 	movh.a %a15,28672
80004230:	c9 ff 04 00 	ld.h %d15,[%a15]4 <70000004 <rpm>>

    TerminateTask();
}

TASK(TaskLCD)
{   
80004234:	20 28       	sub.a %sp,40
    rpm += 100;
80004236:	1b 4f 06 f0 	addi %d15,%d15,100
8000423a:	f9 ff 04 00 	st.h [%a15]4,%d15
    lcd_clear(); // LCD 출력 내용 초기화 함수
8000423e:	6d ff 56 ff 	call 800040ea <lcd_clear>

    char buf[32];  
    sprintf(buf, "RPM = %u", rpm); 
80004242:	b9 ff 04 00 	ld.hu %d15,[%a15]4
80004246:	91 00 00 58 	movh.a %a5,32768
8000424a:	d9 55 0a 10 	lea %a5,[%a5]74 <8000004a <_start+0x2a>>
8000424e:	d9 a4 08 00 	lea %a4,[%sp]8 <8000004a <_start+0x2a>>
80004252:	78 00       	st.w [%sp]0,%d15
80004254:	6d 00 29 36 	call 8000aea6 <sprintf>
    lcd_print(buf);  // 출력할 내용을 문자열로 만들어 LCD에게 전송
80004258:	d9 a4 08 00 	lea %a4,[%sp]8
8000425c:	6d ff bb ff 	call 800041d2 <lcd_print>

    lcd_goto(1,0); // LCD 커서 위치 이동 함수
80004260:	d2 14       	mov %e4,1
80004262:	6d ff b1 ff 	call 800041c4 <lcd_goto>
    lcd_print("Hello World!");
80004266:	91 00 00 48 	movh.a %a4,32768
8000426a:	d9 44 13 10 	lea %a4,[%a4]83 <80000053 <_start+0x33>>
8000426e:	6d ff b2 ff 	call 800041d2 <lcd_print>

    TerminateTask();
80004272:	1d 00 35 29 	j 800094dc <TerminateTask>

80004276 <TimerISR>:


ISR2(TimerISR)
{
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
80004276:	7b f0 00 40 	movh %d4,15




ISR2(TimerISR)
{
8000427a:	20 08       	sub.a %sp,8
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
8000427c:	1b 04 24 44 	addi %d4,%d4,16960
    if (c == 0)
80004280:	91 00 00 f7 	movh.a %a15,28672


ISR2(TimerISR)
{
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
80004284:	6d 00 f4 26 	call 8000906c <osEE_tc_stm_set_sr0_next_match>
    if (c == 0)
80004288:	19 ff 00 00 	ld.w %d15,[%a15]0 <70000000 <c.15755>>
8000428c:	ee 04       	jnz %d15,80004294 <TimerISR+0x1e>
        ActivateTask(Task1);
8000428e:	82 24       	mov %d4,2
80004290:	6d 00 79 28 	call 80009382 <ActivateTask>
    if (c % 2 == 0)
80004294:	19 ff 00 00 	ld.w %d15,[%a15]0 <70000000 <c.15755>>
80004298:	ae 04       	jnz.t %d15,0,800042a0 <TimerISR+0x2a>
        ActivateTask(TaskLCD);
8000429a:	82 34       	mov %d4,3
8000429c:	6d 00 73 28 	call 80009382 <ActivateTask>
    printfSerial("\n%4ld: ", c++);
800042a0:	19 ff 00 00 	ld.w %d15,[%a15]0 <70000000 <c.15755>>
800042a4:	91 00 00 48 	movh.a %a4,32768
800042a8:	78 00       	st.w [%sp]0,%d15
800042aa:	d9 44 20 10 	lea %a4,[%a4]96 <80000060 <_start+0x40>>
800042ae:	c2 1f       	add %d15,1
800042b0:	59 ff 00 00 	st.w [%a15]0 <70000000 <c.15755>>,%d15
800042b4:	1d 00 3b 00 	j 8000432a <printfSerial>

800042b8 <UART_init>:
                                        IfxVadc_ChannelId_6,  /* AN38: channel 6 of group 4                         */
                                        IfxVadc_ChannelId_7}; /* AN39: channel 7 of group 4                         */


void UART_init(void)
{
800042b8:	20 60       	sub.a %sp,96

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
800042ba:	d9 a4 24 00 	lea %a4,[%sp]36
800042be:	c5 f5 80 40 	lea %a5,f0000900 <_SMALL_DATA4_+0x3fff8900>
    ascConfig.baudrate.prescaler    = 1;
800042c2:	82 1f       	mov %d15,1

void UART_init(void)
{

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
800042c4:	6d 00 58 0a 	call 80005774 <IfxAsclin_Asc_initModuleConfig>
    ascConfig.baudrate.prescaler    = 1;
800042c8:	f9 af 2c 00 	st.h [%sp]44,%d15
    ascConfig.baudrate.baudrate     = 115200;
800042cc:	7b 10 7e f4 	movh %d15,18401
800042d0:	78 0a       	st.w [%sp]40,%d15
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
800042d2:	82 3f       	mov %d15,3
800042d4:	e9 af 2e 00 	st.b [%sp]46,%d15

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;
800042d8:	da 13       	mov %d15,19
800042da:	f9 af 00 10 	st.h [%sp]64,%d15


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800042de:	4d c0 e1 ff 	mfcr %d15,$core_id
    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
800042e2:	7b 00 00 28 	movh %d2,32768
800042e6:	60 23       	mov.a %a3,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800042e8:	37 0f 63 f0 	extr.u %d15,%d15,0,3
800042ec:	d9 af 04 00 	lea %a15,[%sp]4
800042f0:	40 f4       	mov.aa %a4,%a15
800042f2:	d9 32 28 10 	lea %a2,[%a3]104
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
800042f6:	e9 af 06 10 	st.b [%sp]70,%d15
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
800042fa:	a0 33       	mov.a %a3,3
800042fc:	09 22 48 01 	ld.d %e2,[%a2+]8
80004300:	89 42 48 01 	st.d [%a4+]8,%e2
80004304:	fc 3c       	loop %a3,800042fc <UART_init+0x44>

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
80004306:	7b 00 00 f7 	movh %d15,28672
8000430a:	1b cf 93 f0 	addi %d15,%d15,2364
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
8000430e:	91 00 00 47 	movh.a %a4,28672

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
80004312:	78 14       	st.w [%sp]80,%d15
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004314:	d9 44 90 e0 	lea %a4,[%a4]2960 <70000b90 <g_AsclinAsc+0x254>>
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80004318:	3b 20 10 f0 	mov %d15,258
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
8000431c:	d9 a5 24 00 	lea %a5,[%sp]36
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80004320:	f9 af 0e 10 	st.h [%sp]78,%d15
        &IfxAsclin3_RXD_P32_2_IN, IfxPort_InputMode_pullUp,        /* Rx pin */
        NULL_PTR,                     IfxPort_OutputMode_pushPull,     /* RTS pin not used */
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
80004324:	f8 12       	st.a [%sp]72,%a15
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004326:	1d 00 50 08 	j 800053c6 <IfxAsclin_Asc_initModule>

8000432a <printfSerial>:
    //printf("Asclin Asc is initialised\n");
}


void printfSerial(const char *fmt,...)
{
8000432a:	20 e8       	sub.a %sp,232
8000432c:	40 4f       	mov.aa %a15,%a4
    EnableAllInterrupts();
8000432e:	6d 00 39 27 	call 800091a0 <EnableAllInterrupts>
    char buf[LEN_BUF];
    va_list args;
    va_start (args, fmt );
    vsnprintf(buf, LEN_BUF, fmt, args);
80004332:	40 f5       	mov.aa %a5,%a15
80004334:	d9 a4 28 10 	lea %a4,[%sp]104
80004338:	3b 00 08 40 	mov %d4,128
8000433c:	d9 a6 28 30 	lea %a6,[%sp]232
80004340:	6d 00 cf 3e 	call 8000c0de <vsnprintf>
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
80004344:	d9 a4 28 10 	lea %a4,[%sp]104
80004348:	6d 00 ca 35 	call 8000aedc <strlen>
8000434c:	91 00 00 f7 	movh.a %a15,28672
80004350:	d9 ff bc 40 	lea %a15,[%a15]2364 <7000093c <g_AsclinAsc>>
80004354:	f9 f2 3a 90 	st.h [%a15]634 <7000027a <__malloc_av_+0x1b2>>,%d2
    unsigned int i =0;
80004358:	82 0f       	mov %d15,0
    for(; i<strlen(buf);i++) {
8000435a:	d9 a4 28 10 	lea %a4,[%sp]104
8000435e:	6d 00 bf 35 	call 8000aedc <strlen>
80004362:	7f 2f 0c 80 	jge.u %d15,%d2,8000437a <printfSerial+0x50>
        txData[i] = buf[i];
80004366:	d9 a3 04 00 	lea %a3,[%sp]4
8000436a:	10 32       	addsc.a %a2,%a3,%d15,0
8000436c:	d9 a3 28 10 	lea %a3,[%sp]104
80004370:	10 3f       	addsc.a %a15,%a3,%d15,0
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
    unsigned int i =0;
    for(; i<strlen(buf);i++) {
80004372:	c2 1f       	add %d15,1
        txData[i] = buf[i];
80004374:	08 02       	ld.bu %d2,[%a15]0
80004376:	34 22       	st.b [%a2],%d2
80004378:	3c f1       	j 8000435a <printfSerial+0x30>
    }
    /* Transmit data */
    IfxAsclin_Asc_write(&g_AsclinAsc.drivers.asc, txData, &g_AsclinAsc.count, TIME_INFINITE);
8000437a:	91 00 00 47 	movh.a %a4,28672
8000437e:	91 00 00 67 	movh.a %a6,28672
80004382:	82 f4       	mov %d4,-1
80004384:	d9 44 90 e0 	lea %a4,[%a4]2960 <70000b90 <g_AsclinAsc+0x254>>
80004388:	d9 a5 04 00 	lea %a5,[%sp]4 <70000b90 <g_AsclinAsc+0x254>>
8000438c:	d9 66 b6 e0 	lea %a6,[%a6]2998 <70000bb6 <g_AsclinAsc+0x27a>>
80004390:	9b 04 00 58 	addih %d5,%d4,32768
80004394:	1d 00 58 0a 	j 80005844 <IfxAsclin_Asc_write>

80004398 <mdelay>:

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004398:	85 fa 10 00 	ld.w %d10,f0000010 <_SMALL_DATA4_+0x3fff8010>
}

void mdelay(unsigned long delay_ms)
{
8000439c:	02 4b       	mov %d11,%d4
    result |= ((uint64)stm->CAP.U) << 32;
8000439e:	85 fc 2c 00 	ld.w %d12,f000002c <_SMALL_DATA4_+0x3fff802c>
800043a2:	6d 00 45 0e 	call 8000602c <IfxScuCcu_getSourceFrequency>
800043a6:	91 30 00 ff 	movh.a %a15,61443
800043aa:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800043ae:	4c f0       	ld.w %d15,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800043b0:	53 1a 40 80 	mul.u %e8,%d10,1
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800043b4:	0b ac 10 48 	mov %e4,%d12,%d10
800043b8:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800043bc:	a6 95       	or %d5,%d9
800043be:	02 28       	mov %d8,%d2
800043c0:	6d 00 60 2e 	call 8000a080 <__floatundisf>
800043c4:	4b 0f 41 f1 	itof %d15,%d15
800043c8:	7b a0 47 a4 	movh %d10,17530
800043cc:	4b f8 51 f0 	div.f %d15,%d8,%d15
800043d0:	40 fc       	mov.aa %a12,%a15
800043d2:	40 fd       	mov.aa %a13,%a15
800043d4:	4b af 51 f0 	div.f %d15,%d15,%d10
800043d8:	4b f2 51 20 	div.f %d2,%d2,%d15
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800043dc:	02 ae       	mov %d14,%d10
    IfxAsclin_Asc_write(&g_AsclinAsc.drivers.asc, txData, &g_AsclinAsc.count, TIME_INFINITE);
}

void mdelay(unsigned long delay_ms)
{
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800043de:	4b 02 71 f1 	ftouz %d15,%d2
800043e2:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800043e6:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
800043ea:	6d 00 21 0e 	call 8000602c <IfxScuCcu_getSourceFrequency>
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
800043ee:	3b 40 01 40 	mov %d4,20
800043f2:	4b 4b 11 42 	div.u %e4,%d11,%d4
800043f6:	48 02       	ld.w %d2,[%a15]0
}

void mdelay(unsigned long delay_ms)
{
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
    unsigned long period_ms = 20, cnt = 0;
800043f8:	82 0b       	mov %d11,0
    while (cnt < (delay_ms / period_ms)) {
800043fa:	02 4d       	mov %d13,%d4
800043fc:	5f db 41 00 	jeq %d11,%d13,8000447e <mdelay+0xe6>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004400:	85 fc 10 00 	ld.w %d12,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80004404:	85 fe 2c 08 	ld.a %a14,f000002c <_SMALL_DATA4_+0x3fff802c>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004408:	53 1c 40 80 	mul.u %e8,%d12,1
8000440c:	6d 00 10 0e 	call 8000602c <IfxScuCcu_getSourceFrequency>
80004410:	54 c3       	ld.w %d3,[%a12]
    result |= ((uint64)stm->CAP.U) << 32;
80004412:	80 e5       	mov.d %d5,%a14
80004414:	37 03 64 34 	extr.u %d3,%d3,8,4
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
80004418:	02 c4       	mov %d4,%d12
8000441a:	a6 95       	or %d5,%d9
8000441c:	60 3f       	mov.a %a15,%d3
8000441e:	02 28       	mov %d8,%d2
80004420:	6d 00 30 2e 	call 8000a080 <__floatundisf>
80004424:	80 f4       	mov.d %d4,%a15
80004426:	4b 04 41 31 	itof %d3,%d4
8000442a:	4b 38 51 80 	div.f %d8,%d8,%d3
8000442e:	4b a8 51 80 	div.f %d8,%d8,%d10
80004432:	4b 82 51 20 	div.f %d2,%d2,%d8
80004436:	4b 02 71 21 	ftouz %d2,%d2
        if (current_ms - prev_ms >= period_ms) {
8000443a:	a2 f2       	sub %d2,%d15
8000443c:	8b 42 61 22 	lt.u %d2,%d2,20
80004440:	df 02 de ff 	jne %d2,0,800043fc <mdelay+0x64>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004444:	85 fc 10 00 	ld.w %d12,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80004448:	85 ff 2c 08 	ld.a %a15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000444c:	6d 00 f0 0d 	call 8000602c <IfxScuCcu_getSourceFrequency>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004450:	53 1c 40 80 	mul.u %e8,%d12,1
80004454:	4c d0       	ld.w %d15,[%a13]0
    result |= ((uint64)stm->CAP.U) << 32;
80004456:	80 f5       	mov.d %d5,%a15
80004458:	37 0f 64 f4 	extr.u %d15,%d15,8,4
            cnt++;
            prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
8000445c:	02 c4       	mov %d4,%d12
8000445e:	a6 95       	or %d5,%d9
80004460:	02 28       	mov %d8,%d2
80004462:	6d 00 0f 2e 	call 8000a080 <__floatundisf>
80004466:	4b 0f 41 f1 	itof %d15,%d15
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
        if (current_ms - prev_ms >= period_ms) {
            cnt++;
8000446a:	c2 1b       	add %d11,1
8000446c:	4b f8 51 f0 	div.f %d15,%d8,%d15
            prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
80004470:	4b ef 51 f0 	div.f %d15,%d15,%d14
80004474:	4b f2 51 20 	div.f %d2,%d2,%d15
80004478:	4b 02 71 f1 	ftouz %d15,%d2
8000447c:	3c c0       	j 800043fc <mdelay+0x64>
        }
    }
}
8000447e:	00 90       	ret 

80004480 <initVADCModule>:
    IfxVadc_Adc_startBackgroundScan(&g_vadc);
}

/* Function to initialize the VADC module with default parameters */
void initVADCModule(void)
{
80004480:	20 28       	sub.a %sp,40
    IfxVadc_Adc_Config adcConf;                                         /* Define a configuration structure         */
    IfxVadc_Adc_initModuleConfig(&adcConf, &MODULE_VADC);               /* Fill it with default values              */
80004482:	d9 a4 04 00 	lea %a4,[%sp]4
80004486:	91 20 00 5f 	movh.a %a5,61442
8000448a:	6d 00 b8 1d 	call 80007ffa <IfxVadc_Adc_initModuleConfig>
    IfxVadc_Adc_initModule(&g_vadc, &adcConf);                          /* Apply the configuration                  */
8000448e:	91 00 00 47 	movh.a %a4,28672
80004492:	d9 44 ac 40 	lea %a4,[%a4]2348 <7000092c <g_vadc>>
80004496:	d9 a5 04 00 	lea %a5,[%sp]4 <7000092c <g_vadc>>
8000449a:	1d 00 3c 1d 	j 80007f12 <IfxVadc_Adc_initModule>

8000449e <initVADCGroup>:
}

/* Function to initialize the VADC group */
void initVADCGroup(void)
{
8000449e:	20 38       	sub.a %sp,56
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */
800044a0:	91 00 00 57 	movh.a %a5,28672
800044a4:	40 a4       	mov.aa %a4,%sp
800044a6:	d9 55 ac 40 	lea %a5,[%a5]2348 <7000092c <g_vadc>>
800044aa:	6d 00 1d 1d 	call 80007ee4 <IfxVadc_Adc_initGroupConfig>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
800044ae:	82 4f       	mov %d15,4
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800044b0:	91 00 00 47 	movh.a %a4,28672
void initVADCGroup(void)
{
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
800044b4:	2c a4       	st.b [%sp]4,%d15
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */
800044b6:	2c a5       	st.b [%sp]5,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800044b8:	d9 44 a0 40 	lea %a4,[%a4]2336 <70000920 <g_vadcGroup>>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
800044bc:	82 1f       	mov %d15,1
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800044be:	40 a5       	mov.aa %a5,%sp

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
800044c0:	e9 af 35 00 	st.b [%sp]53,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;
800044c4:	e9 af 28 00 	st.b [%sp]40,%d15

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800044c8:	e9 af 2c 00 	st.b [%sp]44,%d15

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800044cc:	1d 00 47 1b 	j 80007b5a <IfxVadc_Adc_initGroup>

800044d0 <initVADCChannels>:
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800044d0:	91 00 00 e7 	movh.a %a14,28672

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800044d4:	7b 00 00 b7 	movh %d11,28672
800044d8:	7b 00 00 a7 	movh %d10,28672
}


IFX_INLINE void IfxVadc_Adc_setBackgroundScan(IfxVadc_Adc *vadc, IfxVadc_Adc_Group *group, uint32 channels, uint32 mask)
{
    IfxVadc_setBackgroundScan(vadc->vadc, group->groupId, channels, mask);
800044dc:	91 00 00 d7 	movh.a %a13,28672
    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
}

/* Function to initialize the VADC used channels */
void initVADCChannels(void)
{
800044e0:	20 60       	sub.a %sp,96
800044e2:	82 0f       	mov %d15,0
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800044e4:	d9 ee a0 40 	lea %a14,[%a14]2336 <70000920 <g_vadcGroup>>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800044e8:	1b 8b 00 b0 	addi %d11,%d11,8
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
800044ec:	82 19       	mov %d9,1
800044ee:	1b 0a 90 a0 	addi %d10,%d10,2304
800044f2:	d9 dd ac 40 	lea %a13,[%a13]2348
800044f6:	53 8f 21 80 	mul %d8,%d15,24
800044fa:	40 ac       	mov.aa %a12,%sp
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800044fc:	40 e5       	mov.aa %a5,%a14
800044fe:	60 82       	mov.a %a2,%d8

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004500:	d9 af 20 10 	lea %a15,[%sp]96
80004504:	30 2c       	add.a %a12,%a2
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
80004506:	40 c4       	mov.aa %a4,%a12
80004508:	6d 00 1e 1b 	call 80007b44 <IfxVadc_Adc_initChannelConfig>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
8000450c:	60 83       	mov.a %a3,%d8
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
8000450e:	40 c5       	mov.aa %a5,%a12
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004510:	30 3f       	add.a %a15,%a3
80004512:	60 b3       	mov.a %a3,%d11
80004514:	10 32       	addsc.a %a2,%a3,%d15,0
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
80004516:	e9 ff ef ef 	st.b [%a15]-81,%d15
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
8000451a:	14 22       	ld.bu %d2,[%a2]
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
8000451c:	60 a2       	mov.a %a2,%d10
8000451e:	d0 24       	addsc.a %a4,%a2,%d15,3
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004520:	e9 f2 ec ef 	st.b [%a15]-84,%d2
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
80004524:	e9 f9 e2 ef 	st.b [%a15]-94,%d9


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
80004528:	6d 00 18 1a 	call 80007958 <IfxVadc_Adc_initChannel>
8000452c:	d4 d2       	ld.a %a2,[%a13]
8000452e:	39 e2 08 00 	ld.bu %d2,[%a14]8 <70000008 <g_vadcChannelIDs>>
80004532:	c2 1f       	add %d15,1
80004534:	01 22 02 26 	addsc.a %a2,%a2,%d2,2

        /* Add the channel to background scan */
        unsigned chnEnableBit = (1 << adcChannelConf[chn].channelId);   /* Set the the corresponding input channel  */
80004538:	79 f2 ec ef 	ld.b %d2,[%a15]-84
}


IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask)
{
    channels                = (vadc->BRSSEL[groupId].U & ~mask) | channels;
8000453c:	19 23 00 60 	ld.w %d3,[%a2]384
80004540:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
    vadc->BRSSEL[groupId].U = channels;
80004544:	59 22 00 60 	st.w [%a2]384,%d2
void initVADCChannels(void)
{
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
80004548:	df 4f d7 ff 	jne %d15,4,800044f6 <initVADCChannels+0x26>
        unsigned mask = chnEnableBit;                                   /* of the respective group to be added in   */
        IfxVadc_Adc_setBackgroundScan(&g_vadc, &g_vadcGroup, chnEnableBit, mask); /* the background scan sequence.  */

    }

}
8000454c:	00 90       	ret 

8000454e <initADC>:
}


IFX_INLINE void IfxVadc_Adc_startBackgroundScan(IfxVadc_Adc *vadc)
{
    IfxVadc_startBackgroundScan(vadc->vadc);
8000454e:	91 00 00 f7 	movh.a %a15,28672
}

/* Function to initialize the VADC module */
void initADC(void)
{
    initVADCModule();                                                   /* Initialize the VADC module               */
80004552:	6d ff 97 ff 	call 80004480 <initVADCModule>
    initVADCGroup();                                                    /* Initialize the VADC group                */
80004556:	6d ff a4 ff 	call 8000449e <initVADCGroup>
    initVADCChannels();                                                 /* Initialize the used channels             */
8000455a:	6d ff bb ff 	call 800044d0 <initVADCChannels>
8000455e:	99 ff ac 40 	ld.a %a15,[%a15]2348 <7000092c <g_vadc>>
}


IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.LDEV = 1;     /* execute Load event to start the conversion */
80004562:	19 ff 04 80 	ld.w %d15,[%a15]516 <7000092c <g_vadc>>
80004566:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
8000456a:	59 ff 04 80 	st.w [%a15]516,%d15
8000456e:	00 90       	ret 

80004570 <readADCValue>:
}


IFX_INLINE Ifx_VADC_RES IfxVadc_Adc_getResult(IfxVadc_Adc_Channel *channel)
{
    return IfxVadc_getResult(channel->group->group, channel->resultreg);
80004570:	91 00 00 f7 	movh.a %a15,28672
80004574:	d9 ff 80 40 	lea %a15,[%a15]2304 <70000900 <g_vadcChannel>>
80004578:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
8000457c:	c8 12       	ld.a %a2,[%a15]4
8000457e:	0c f1       	ld.bu %d15,[%a15]1
80004580:	99 22 04 00 	ld.a %a2,[%a2]4

IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx)
{
    Ifx_VADC_RES tmpResult;

    tmpResult.U = group->RES[resultIdx].U;
80004584:	1b 0f 0a f0 	addi %d15,%d15,160
80004588:	90 2f       	addsc.a %a15,%a2,%d15,2
8000458a:	4c f0       	ld.w %d15,[%a15]0
8000458c:	37 0f 70 20 	extr.u %d2,%d15,0,16
{
    Ifx_VADC_RES conversionResult;
    do
    {
        conversionResult = IfxVadc_Adc_getResult(&g_vadcChannel[channel]);
    } while(!conversionResult.B.VF);
80004590:	ff 0f fd 7f 	jge %d15,0,8000458a <readADCValue+0x1a>

    return conversionResult.B.RESULT;
}
80004594:	00 90       	ret 

80004596 <initPeripheralsAndERU>:

void initPeripheralsAndERU(void)
{
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */
80004596:	91 40 00 4f 	movh.a %a4,61444
8000459a:	d9 44 00 0e 	lea %a4,[%a4]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
8000459e:	82 74       	mov %d4,7
800045a0:	3b 00 01 50 	mov %d5,16
800045a4:	6d 00 5d 0b 	call 80005c5e <IfxPort_setPinMode>


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
800045a8:	91 00 00 f8 	movh.a %a15,32768
800045ac:	d9 ff 94 c0 	lea %a15,[%a15]2836 <80000b14 <IfxScu_REQ6_P02_0_IN>>
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
800045b0:	c8 24       	ld.a %a4,[%a15]8
800045b2:	91 00 00 d7 	movh.a %a13,28672
800045b6:	08 c4       	ld.bu %d4,[%a15]12
800045b8:	3b 80 00 50 	mov %d5,8
800045bc:	b5 df b0 40 	st.a [%a13]2352 <70000930 <g_ERUconfig>>,%a15
800045c0:	6d 00 4f 0b 	call 80005c5e <IfxPort_setPinMode>
/******************************************************************************/

IFX_INLINE void IfxScuEru_initReqPin(IfxScu_Req_In *req, IfxPort_InputMode inputMode)
{
    IfxPort_setPinModeInput(req->pin.port, req->pin.pinIndex, inputMode);
    IfxScuEru_selectExternalInput((IfxScuEru_InputChannel)req->channelId, (IfxScuEru_ExternalInputSelection)req->select);
800045c4:	39 f5 10 00 	ld.bu %d5,[%a15]16 <80000010 <BootModeHeader0+0x10>>
800045c8:	08 44       	ld.bu %d4,[%a15]4
800045ca:	6d 00 f8 14 	call 80006fba <IfxScuEru_selectExternalInput>
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
800045ce:	99 df b0 40 	ld.a %a15,[%a13]2352 <70000930 <g_ERUconfig>>
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
800045d2:	d9 dc b0 40 	lea %a12,[%a13]2352 <70000930 <g_ERUconfig>>
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
800045d6:	82 0f       	mov %d15,0
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
800045d8:	08 44       	ld.bu %d4,[%a15]4
800045da:	e9 c4 04 00 	st.b [%a12]4 <70000004 <rpm>>,%d4

    /* Input channel configuration */
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */
800045de:	6d 00 5e 14 	call 80006e9a <IfxScuEru_enableFallingEdgeDetection>
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
800045e2:	39 c4 04 00 	ld.bu %d4,[%a12]4
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
800045e6:	2c c6       	st.b [%a12]6,%d15
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;
800045e8:	2c c5       	st.b [%a12]5,%d15

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
800045ea:	6d 00 91 14 	call 80006f0c <IfxScuEru_enableTriggerPulse>
    /* Determination of output channel for trigger event (Register INPx) */
    IfxScuEru_connectTrigger(g_ERUconfig.inputChannel, g_ERUconfig.triggerSelect);
800045ee:	39 c4 04 00 	ld.bu %d4,[%a12]4
800045f2:	39 c5 05 00 	ld.bu %d5,[%a12]5
800045f6:	6d 00 c5 13 	call 80006d80 <IfxScuEru_connectTrigger>

    /* Configure Output channels, OutputGating Unit OGU (Register IGPy) */
    IfxScuEru_setInterruptGatingPattern(g_ERUconfig.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);
800045fa:	39 c4 06 00 	ld.bu %d4,[%a12]6
800045fe:	82 15       	mov %d5,1
80004600:	6d 00 16 15 	call 8000702c <IfxScuEru_setInterruptGatingPattern>

    /* Service request configuration */
    /* Get source pointer depending on outputChannel (SRC_SCUERU0 for outputChannel0) */
    g_ERUconfig.src = &MODULE_SRC.SCU.SCU.ERU[(int) g_ERUconfig.outputChannel % 4];
80004604:	0c c6       	ld.bu %d15,[%a12]6
80004606:	16 03       	and %d15,3
80004608:	06 2f       	sh %d15,2
8000460a:	60 f2       	mov.a %a2,%d15
8000460c:	d9 2f d4 38 	lea %a15,[%a2]-29484
80004610:	11 4f 00 ff 	addih.a %a15,%a15,61444
80004614:	ec c2       	st.a [%a12]8,%a15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80004616:	4c f0       	ld.w %d15,[%a15]0
80004618:	b7 af 08 f0 	insert %d15,%d15,10,0,8
8000461c:	68 0f       	st.w [%a15]0,%d15
    src->B.TOS  = typOfService;
8000461e:	4c f0       	ld.w %d15,[%a15]0
80004620:	b7 0f 82 f5 	insert %d15,%d15,0,11,2
80004624:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80004626:	4c f0       	ld.w %d15,[%a15]0
80004628:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
8000462c:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
8000462e:	4c f0       	ld.w %d15,[%a15]0
80004630:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80004634:	68 0f       	st.w [%a15]0,%d15
80004636:	00 90       	ret 

80004638 <asclin0TxISR>:
    IfxSrc_enable(g_ERUconfig.src);
}

ISR(asclin0TxISR)
{
    IfxAsclin_Asc_isrTransmit(&g_AsclinAsc.drivers.asc);
80004638:	91 00 00 47 	movh.a %a4,28672
8000463c:	d9 44 90 e0 	lea %a4,[%a4]2960 <70000b90 <g_AsclinAsc+0x254>>
80004640:	1d 00 08 06 	j 80005250 <IfxAsclin_Asc_isrTransmit>

80004644 <main>:
}

int main(void)
{
    osEE_tc_stm_set_clockpersec();
80004644:	6d 00 b8 24 	call 80008fb4 <osEE_tc_stm_set_clockpersec>
    osEE_tc_stm_set_sr0(1000000U, 1U);
80004648:	7b f0 00 40 	movh %d4,15
8000464c:	82 15       	mov %d5,1
8000464e:	1b 04 24 44 	addi %d4,%d4,16960
80004652:	6d 00 cb 24 	call 80008fe8 <osEE_tc_stm_set_sr0>

    UART_init();
80004656:	6d ff 31 fe 	call 800042b8 <UART_init>
    initADC();
8000465a:	6d ff 7a ff 	call 8000454e <initADC>
    initPeripheralsAndERU();
8000465e:	6d ff 9c ff 	call 80004596 <initPeripheralsAndERU>
    
    /* custom driver init() added start*/
    lcd_init();
80004662:	6d ff 49 fd 	call 800040f4 <lcd_init>
    /* custom driver added end*/
    

    printfSerial("\n...............\n");
80004666:	91 00 00 48 	movh.a %a4,32768
8000466a:	d9 44 08 20 	lea %a4,[%a4]136 <80000088 <_start+0x68>>
8000466e:	6d ff 5e fe 	call 8000432a <printfSerial>
    printfSerial("...OS Starts...\n");
80004672:	91 00 00 48 	movh.a %a4,32768
80004676:	d9 44 1a 20 	lea %a4,[%a4]154 <8000009a <_start+0x7a>>
8000467a:	6d ff 58 fe 	call 8000432a <printfSerial>
    printfSerial("...............\n");
8000467e:	91 00 00 48 	movh.a %a4,32768
80004682:	d9 44 2b 20 	lea %a4,[%a4]171 <800000ab <_start+0x8b>>
80004686:	6d ff 52 fe 	call 8000432a <printfSerial>

    StartOS(OSDEFAULTAPPMODE);
8000468a:	82 04       	mov %d4,0
8000468c:	6d 00 18 26 	call 800092bc <StartOS>
    return 0;
}
80004690:	82 02       	mov %d2,0
80004692:	00 90       	ret 

80004694 <IfxVadc_disableAccess>:
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
80004694:	02 4f       	mov %d15,%d4
80004696:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80004698:	6d 00 6d 16 	call 80007372 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
8000469c:	02 24       	mov %d4,%d2
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
8000469e:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
800046a0:	6d 00 66 15 	call 8000716c <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
800046a4:	8b 0f a2 22 	ge.u %d2,%d15,32
800046a8:	f6 28       	jnz %d2,800046b8 <IfxVadc_disableAccess+0x24>
    {
        vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
800046aa:	19 f2 08 20 	ld.w %d2,[%a15]136
800046ae:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
800046b2:	59 ff 08 20 	st.w [%a15]136,%d15
800046b6:	3c 08       	j 800046c6 <IfxVadc_disableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
800046b8:	19 f2 0c 20 	ld.w %d2,[%a15]140
800046bc:	16 1f       	and %d15,31
800046be:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
800046c2:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
800046c6:	02 84       	mov %d4,%d8
800046c8:	1d 00 d8 16 	j 80007478 <IfxScuWdt_setSafetyEndinit>

800046cc <IfxVadc_enableAccess>:
    }
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
800046cc:	02 4f       	mov %d15,%d4
800046ce:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800046d0:	6d 00 51 16 	call 80007372 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
800046d4:	02 24       	mov %d4,%d2
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800046d6:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
800046d8:	6d 00 4a 15 	call 8000716c <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
800046dc:	8b 0f a2 22 	ge.u %d2,%d15,32
800046e0:	f6 28       	jnz %d2,800046f0 <IfxVadc_enableAccess+0x24>
    {
        vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
800046e2:	19 f2 08 20 	ld.w %d2,[%a15]136
800046e6:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
800046ea:	59 ff 08 20 	st.w [%a15]136,%d15
800046ee:	3c 08       	j 800046fe <IfxVadc_enableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
800046f0:	19 f2 0c 20 	ld.w %d2,[%a15]140
800046f4:	16 1f       	and %d15,31
800046f6:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
800046fa:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
800046fe:	02 84       	mov %d4,%d8
80004700:	1d 00 bc 16 	j 80007478 <IfxScuWdt_setSafetyEndinit>

80004704 <IfxVadc_configExternalMultiplexerMode>:

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
80004704:	82 0f       	mov %d15,0
80004706:	b7 1f 81 ff 	insert %d15,%d15,1,31,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
8000470a:	39 a3 04 00 	ld.bu %d3,[%sp]4
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
8000470e:	37 4f 02 fd 	insert %d15,%d15,%d4,26,2
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
80004712:	14 a2       	ld.bu %d2,[%sp]
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
80004714:	67 3f 1e f0 	ins.t %d15,%d15,30,%d3,0
    emuxctr.B.EMUXCH   = channels;
80004718:	37 5f 0a f8 	insert %d15,%d15,%d5,16,10
    emuxctr.B.EMUXSET  = startChannel;
8000471c:	37 6f 03 f0 	insert %d15,%d15,%d6,0,3
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004720:	3b f0 00 40 	mov %d4,15
    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
80004724:	67 7f 1c f0 	ins.t %d15,%d15,28,%d7,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
80004728:	40 5f       	mov.aa %a15,%a5
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
8000472a:	67 2f 1d f0 	ins.t %d15,%d15,29,%d2,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
8000472e:	40 4c       	mov.aa %a12,%a4
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004730:	6d ff ce ff 	call 800046cc <IfxVadc_enableAccess>
    vadcG->EMUXCTR.U   = emuxctr.U;
80004734:	59 ff 30 50 	st.w [%a15]368,%d15
    emuxctr.B.EMXWC    = 0;
80004738:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
    vadcG->EMUXCTR.U   = emuxctr.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
8000473c:	40 c4       	mov.aa %a4,%a12
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
    vadcG->EMUXCTR.U   = emuxctr.U;
    emuxctr.B.EMXWC    = 0;
    vadcG->EMUXCTR.U   = emuxctr.U;
8000473e:	59 ff 30 50 	st.w [%a15]368,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004742:	3b f0 00 40 	mov %d4,15
80004746:	1d ff a7 ff 	j 80004694 <IfxVadc_disableAccess>

8000474a <IfxVadc_disablePostCalibration>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable)
{
8000474a:	40 4f       	mov.aa %a15,%a4
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
8000474c:	ff 84 1c 80 	jge.u %d4,8,80004784 <IfxVadc_disablePostCalibration+0x3a>
80004750:	02 4f       	mov %d15,%d4
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004752:	3b f0 01 40 	mov %d4,31
80004756:	02 58       	mov %d8,%d5
80004758:	6d ff ba ff 	call 800046cc <IfxVadc_enableAccess>

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
8000475c:	1b 0f 01 40 	addi %d4,%d15,16

        if (disable == TRUE)
        {
            vadc->GLOBCFG.U |= mask;
80004760:	19 f2 00 20 	ld.w %d2,[%a15]128
{
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
80004764:	82 1f       	mov %d15,1
80004766:	0f 4f 00 f0 	sh %d15,%d15,%d4

        if (disable == TRUE)
8000476a:	df 18 04 80 	jne %d8,1,80004772 <IfxVadc_disablePostCalibration+0x28>
        {
            vadc->GLOBCFG.U |= mask;
8000476e:	a6 2f       	or %d15,%d2
80004770:	3c 03       	j 80004776 <IfxVadc_disablePostCalibration+0x2c>
        }
        else
        {
            vadc->GLOBCFG.U &= ~mask;
80004772:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004776:	59 ff 00 20 	st.w [%a15]128,%d15
        }

        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000477a:	40 f4       	mov.aa %a4,%a15
8000477c:	3b f0 01 40 	mov %d4,31
80004780:	1d ff 8a ff 	j 80004694 <IfxVadc_disableAccess>
80004784:	00 90       	ret 

80004786 <IfxVadc_enableGroupSync>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
80004786:	40 4f       	mov.aa %a15,%a4
80004788:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
8000478a:	6d 00 d6 15 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
8000478e:	02 24       	mov %d4,%d2
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004790:	02 29       	mov %d9,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80004792:	6d 00 d2 14 	call 80007136 <IfxScuWdt_clearCpuEndinit>
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004796:	40 f4       	mov.aa %a4,%a15
80004798:	3b f0 01 40 	mov %d4,31
    IfxScuWdt_clearCpuEndinit(passwd);

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
8000479c:	19 ff 00 20 	ld.w %d15,[%a15]128
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800047a0:	6d ff 96 ff 	call 800046cc <IfxVadc_enableAccess>

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
800047a4:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
        vadcGlobCfg.B.DCMSB = 1;
800047a8:	b7 1f 81 f3 	insert %d15,%d15,1,7,1

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800047ac:	40 f4       	mov.aa %a4,%a15
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
800047ae:	59 ff 00 20 	st.w [%a15]128,%d15
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800047b2:	3b f0 01 40 	mov %d4,31
800047b6:	6d ff 6f ff 	call 80004694 <IfxVadc_disableAccess>
    }

    if (ccu6Num == 0)
800047ba:	df 08 1a 80 	jne %d8,0,800047ee <IfxVadc_enableGroupSync+0x68>
    {
        // CCU60 Config
        CCU60_CLC.U = 0;
800047be:	a5 f8 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d8

        if (CCU60_CLC.U)
800047c2:	85 ff 80 82 	ld.w %d15,f0002a00 <_SMALL_DATA4_+0x3fffaa00>
        {}

        CCU60_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
800047c6:	82 4f       	mov %d15,4
800047c8:	a5 ff 94 92 	st.w f0002a54 <_SMALL_DATA4_+0x3fffaa54>,%d15
        CCU60_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
800047cc:	a5 ff 9c 92 	st.w f0002a5c <_SMALL_DATA4_+0x3fffaa5c>,%d15
        CCU60_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
800047d0:	85 ff 80 a2 	ld.w %d15,f0002a80 <_SMALL_DATA4_+0x3fffaa80>
800047d4:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
800047d8:	a5 ff 80 a2 	st.w f0002a80 <_SMALL_DATA4_+0x3fffaa80>,%d15
        CCU60_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
800047dc:	3b 00 20 f4 	mov %d15,16896
800047e0:	a5 ff b8 92 	st.w f0002a78 <_SMALL_DATA4_+0x3fffaa78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 0;                                                                  // CCU60_COUT63 routed to output signal CCU6061 TRIG1
800047e4:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
800047e8:	8f 8f c3 f1 	andn %d15,%d15,56
800047ec:	3c 1d       	j 80004826 <IfxVadc_enableGroupSync+0xa0>
    }
    else if (ccu6Num == 1)
800047ee:	df 18 1e 80 	jne %d8,1,8000482a <IfxVadc_enableGroupSync+0xa4>
    {
        // CCU60 + CCU61 Config
        CCU60_CLC.U = 0;
800047f2:	82 0f       	mov %d15,0
800047f4:	a5 ff 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d15
        CCU61_CLC.U = 0;
800047f8:	a5 ff 80 c2 	st.w f0002b00 <_SMALL_DATA4_+0x3fffab00>,%d15

        if (CCU61_CLC.U)
800047fc:	85 ff 80 c2 	ld.w %d15,f0002b00 <_SMALL_DATA4_+0x3fffab00>
        {}

        CCU61_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
80004800:	82 4f       	mov %d15,4
80004802:	a5 ff 94 d2 	st.w f0002b54 <_SMALL_DATA4_+0x3fffab54>,%d15
        CCU61_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
80004806:	a5 ff 9c d2 	st.w f0002b5c <_SMALL_DATA4_+0x3fffab5c>,%d15
        CCU61_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
8000480a:	85 ff 80 e2 	ld.w %d15,f0002b80 <_SMALL_DATA4_+0x3fffab80>
8000480e:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
80004812:	a5 ff 80 e2 	st.w f0002b80 <_SMALL_DATA4_+0x3fffab80>,%d15
        CCU61_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
80004816:	3b 00 20 f4 	mov %d15,16896
8000481a:	a5 ff b8 d2 	st.w f0002b78 <_SMALL_DATA4_+0x3fffab78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 1;                                                                  // CCU61_COUT63 routed to output signal CCU6061 TRIG1
8000481e:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
80004822:	b7 1f 83 f1 	insert %d15,%d15,1,3,3
80004826:	a5 ff 8c 82 	st.w f0002a0c <_SMALL_DATA4_+0x3fffaa0c>,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
8000482a:	02 94       	mov %d4,%d9
8000482c:	1d 00 ba 15 	j 800073a0 <IfxScuWdt_setCpuEndinit>

80004830 <IfxVadc_getAdcAnalogFrequency>:
}


float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
{
80004830:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
80004832:	6d 00 be 0c 	call 800061ae <IfxScuCcu_getSpbFrequency>
80004836:	19 ff 00 20 	ld.w %d15,[%a15]128
8000483a:	16 1f       	and %d15,31
8000483c:	c2 1f       	add %d15,1
8000483e:	4b 0f 41 f1 	itof %d15,%d15
}
80004842:	4b f2 51 20 	div.f %d2,%d2,%d15
80004846:	00 90       	ret 

80004848 <IfxVadc_getAdcDigitalFrequency>:


float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
{
80004848:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
8000484a:	6d 00 b2 0c 	call 800061ae <IfxScuCcu_getSpbFrequency>
8000484e:	19 ff 00 20 	ld.w %d15,[%a15]128
80004852:	37 0f 62 f4 	extr.u %d15,%d15,8,2
80004856:	c2 1f       	add %d15,1
80004858:	4b 0f 41 f1 	itof %d15,%d15
}
8000485c:	4b f2 51 20 	div.f %d2,%d2,%d15
80004860:	00 90       	ret 

80004862 <IfxVadc_getAdcModuleFrequency>:


float32 IfxVadc_getAdcModuleFrequency(void)
{
    return IfxScuCcu_getSpbFrequency();
80004862:	1d 00 a6 0c 	j 800061ae <IfxScuCcu_getSpbFrequency>

80004866 <IfxVadc_getBackgroundScanStatus>:
}


IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
80004866:	82 0f       	mov %d15,0
80004868:	a0 7f       	mov.a %a15,7
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
    {
        if (vadc->BRSPND[i].U)
8000486a:	1b 0f 07 20 	addi %d2,%d15,112
8000486e:	01 42 02 26 	addsc.a %a2,%a4,%d2,2
80004872:	54 22       	ld.w %d2,[%a2]
80004874:	f6 24       	jnz %d2,8000487c <IfxVadc_getBackgroundScanStatus+0x16>
80004876:	c2 1f       	add %d15,1
IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
80004878:	fc f9       	loop %a15,8000486a <IfxVadc_getBackgroundScanStatus+0x4>
8000487a:	00 90       	ret 
    {
        if (vadc->BRSPND[i].U)
        {
            return IfxVadc_Status_channelsStillPending;
8000487c:	82 62       	mov %d2,6
            continue;
        }
    }

    return status;
}
8000487e:	00 90       	ret 

80004880 <IfxVadc_getQueueStatus>:
IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    /* just fill level is checked */
    if (0x7 == group->QSR0.B.FILL)
80004880:	19 42 08 20 	ld.w %d2,[%a4]136
80004884:	8f f2 00 21 	and %d2,%d2,15
    {
        status = IfxVadc_Status_queueFull;
    }
    else
    {
        status = IfxVadc_Status_noError;
80004888:	8b 72 00 22 	eq %d2,%d2,7
    }

    return status;
}
8000488c:	06 22       	sh %d2,2
8000488e:	00 90       	ret 

80004890 <IfxVadc_getResultBasedOnRequestSource>:
Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType)
{
    sint32       sourceResultRegister = -1;
    Ifx_VADC_RES tmpResult;

    switch (sourceType)
80004890:	df 15 09 00 	jeq %d5,1,800048a2 <IfxVadc_getResultBasedOnRequestSource+0x12>
80004894:	76 54       	jz %d5,8000489c <IfxVadc_getResultBasedOnRequestSource+0xc>
80004896:	df 25 0b 00 	jeq %d5,2,800048ac <IfxVadc_getResultBasedOnRequestSource+0x1c>
8000489a:	3c 39       	j 8000490c <IfxVadc_getResultBasedOnRequestSource+0x7c>
    {
    case IfxVadc_RequestSource_queue:
        sourceResultRegister = group->QCTRL0.B.SRCRESREG;
8000489c:	19 5f 00 20 	ld.w %d15,[%a5]128
800048a0:	3c 03       	j 800048a6 <IfxVadc_getResultBasedOnRequestSource+0x16>
        break;

    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
800048a2:	19 5f 20 20 	ld.w %d15,[%a5]160
800048a6:	16 0f       	and %d15,15
    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
        break;
    }

    if (sourceResultRegister > 0)
800048a8:	ee 39       	jnz %d15,8000491a <IfxVadc_getResultBasedOnRequestSource+0x8a>
800048aa:	3c 31       	j 8000490c <IfxVadc_getResultBasedOnRequestSource+0x7c>
    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
        break;

    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
800048ac:	19 4f 00 80 	ld.w %d15,[%a4]512
800048b0:	16 0f       	and %d15,15
        break;
    }

    if (sourceResultRegister > 0)
800048b2:	ee 34       	jnz %d15,8000491a <IfxVadc_getResultBasedOnRequestSource+0x8a>

        return tmpResult;
    }
    else
    {
        if ((sourceType == IfxVadc_RequestSource_background) && (group->CHCTR[channel].B.RESTBS == 1))
800048b4:	1b 04 06 f0 	addi %d15,%d4,96
800048b8:	90 5f       	addsc.a %a15,%a5,%d15,2
800048ba:	4c f0       	ld.w %d15,[%a15]0
800048bc:	ef 4f 28 00 	jz.t %d15,20,8000490c <IfxVadc_getResultBasedOnRequestSource+0x7c>
        {
            tmpResult.B.VF     = vadc->GLOBRES.B.VF;
800048c0:	19 42 00 c0 	ld.w %d2,[%a4]768
800048c4:	82 0f       	mov %d15,0
800048c6:	67 2f 9f ff 	ins.t %d15,%d15,31,%d2,31
            tmpResult.B.FCR    = vadc->GLOBRES.B.FCR;
800048ca:	19 42 00 c0 	ld.w %d2,[%a4]768
800048ce:	67 2f 1e ff 	ins.t %d15,%d15,30,%d2,30
            tmpResult.B.CRS    = vadc->GLOBRES.B.CRS;
800048d2:	19 42 00 c0 	ld.w %d2,[%a4]768
800048d6:	37 02 62 2e 	extr.u %d2,%d2,28,2
800048da:	37 2f 02 fe 	insert %d15,%d15,%d2,28,2
            tmpResult.B.EMUX   = vadc->GLOBRES.B.EMUX;
800048de:	19 42 00 c0 	ld.w %d2,[%a4]768
800048e2:	37 02 e3 2c 	extr.u %d2,%d2,25,3
800048e6:	37 2f 83 fc 	insert %d15,%d15,%d2,25,3
            tmpResult.B.CHNR   = vadc->GLOBRES.B.CHNR;
800048ea:	19 42 00 c0 	ld.w %d2,[%a4]768
800048ee:	37 02 65 2a 	extr.u %d2,%d2,20,5
800048f2:	37 2f 05 fa 	insert %d15,%d15,%d2,20,5
            tmpResult.B.DRC    = vadc->GLOBRES.B.GNR; //The bitfields are the same but interpretation is different. TODO- define a generic result register type.
800048f6:	19 42 00 c0 	ld.w %d2,[%a4]768
800048fa:	37 02 64 28 	extr.u %d2,%d2,16,4
800048fe:	37 2f 04 f8 	insert %d15,%d15,%d2,16,4
            tmpResult.B.RESULT = vadc->GLOBRES.B.RESULT;
80004902:	19 42 00 c0 	ld.w %d2,[%a4]768
80004906:	37 2f 10 20 	insert %d2,%d15,%d2,0,16

            return tmpResult;
8000490a:	00 90       	ret 
        }
        else
        {
            tmpResult.U = group->RES[group->CHCTR[channel].B.RESREG].U;
8000490c:	1b 04 06 40 	addi %d4,%d4,96
80004910:	01 54 02 f6 	addsc.a %a15,%a5,%d4,2
80004914:	4c f0       	ld.w %d15,[%a15]0
80004916:	37 0f 64 f8 	extr.u %d15,%d15,16,4
8000491a:	1b 0f 0a f0 	addi %d15,%d15,160
8000491e:	90 55       	addsc.a %a5,%a5,%d15,2
80004920:	54 52       	ld.w %d2,[%a5]

            return tmpResult;
80004922:	00 90       	ret 

80004924 <IfxVadc_getScanStatus>:

IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    if (group->ASPND.U)
80004924:	19 42 2c 20 	ld.w %d2,[%a4]172
    }
    else
    {
        return status;
    }
}
80004928:	ab 62 a0 22 	seln %d2,%d2,%d2,6
8000492c:	00 90       	ret 

8000492e <IfxVadc_getSrcAddress>:

volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
{
    Ifx_SRC_SRCR *base;

    if (IfxVadc_SrcNr_shared0 <= index)
8000492e:	bf 45 0a 80 	jlt.u %d5,4,80004942 <IfxVadc_getSrcAddress+0x14>
    {
        index -= 4;
80004932:	9a c5       	add %d15,%d5,-4
80004934:	8f ff 0f 51 	and %d5,%d15,255

        if ((group & 0x1) != 0)
80004938:	8f 14 00 41 	and %d4,%d4,1
        {
            group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
8000493c:	da 08       	mov %d15,8
8000493e:	ab 9f a0 44 	seln %d4,%d4,%d15,9
    else
    {
        /* do nothing */
    }

    base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
80004942:	13 44 20 45 	madd %d4,%d5,%d4,4
80004946:	91 00 00 f8 	movh.a %a15,32768
8000494a:	d9 ff 28 60 	lea %a15,[%a15]424 <800001a8 <IfxVadc_cfg_srcAddresses>>
8000494e:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2

    return &(base[0]);
}
80004952:	c8 02       	ld.a %a2,[%a15]0
80004954:	00 90       	ret 

80004956 <IfxVadc_initialiseAdcArbiterClock>:


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80004956:	19 4f 00 20 	ld.w %d15,[%a4]128
    return &(base[0]);
}


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
8000495a:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
8000495c:	37 4f 02 f4 	insert %d15,%d15,%d4,8,2
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004960:	3b f0 01 40 	mov %d4,31
80004964:	6d ff b4 fe 	call 800046cc <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
80004968:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000496c:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
8000496e:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004972:	3b f0 01 40 	mov %d4,31
80004976:	1d ff 8f fe 	j 80004694 <IfxVadc_disableAccess>

8000497a <IfxVadc_initialiseAdcConverterClock>:


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
8000497a:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
}


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
8000497e:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
80004980:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004984:	3b f0 01 40 	mov %d4,31
80004988:	6d ff a2 fe 	call 800046cc <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
8000498c:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004990:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80004992:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004996:	3b f0 01 40 	mov %d4,31
8000499a:	1d ff 7d fe 	j 80004694 <IfxVadc_disableAccess>

8000499e <IfxVadc_initializeFAdcD>:
}


uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
{
8000499e:	02 4f       	mov %d15,%d4
800049a0:	40 4f       	mov.aa %a15,%a4
    uint32 divD;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
800049a2:	6d 00 06 0c 	call 800061ae <IfxScuCcu_getSpbFrequency>
800049a6:	4b 02 71 21 	ftouz %d2,%d2

    divD   = (fadc / fAdcD - 1);
800049aa:	4b f2 11 42 	div.u %e4,%d2,%d15
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800049ae:	82 3f       	mov %d15,3
800049b0:	c2 f4       	add %d4,-1
800049b2:	0b f4 90 41 	min.u %d4,%d4,%d15

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
800049b6:	1b 14 00 80 	addi %d8,%d4,1
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
800049ba:	40 f4       	mov.aa %a4,%a15

    divD   = (fadc / fAdcD - 1);

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
800049bc:	4b 82 11 82 	div.u %e8,%d2,%d8
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
800049c0:	6d ff cb ff 	call 80004956 <IfxVadc_initialiseAdcArbiterClock>
    return result;
}
800049c4:	02 82       	mov %d2,%d8
800049c6:	00 90       	ret 

800049c8 <IfxVadc_initializeFAdcI>:


uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
{
800049c8:	02 4f       	mov %d15,%d4
800049ca:	40 4f       	mov.aa %a15,%a4
    uint32 divA;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
800049cc:	6d 00 f1 0b 	call 800061ae <IfxScuCcu_getSpbFrequency>
800049d0:	4b 02 71 21 	ftouz %d2,%d2

    /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
    divA   = (fadc << 2) / fAdcI;
800049d4:	8f 22 00 40 	sh %d4,%d2,2
800049d8:	4b f4 11 42 	div.u %e4,%d4,%d15
800049dc:	3b f0 01 50 	mov %d5,31

    divA   = (divA + 2) >> 2; /* Round to nearest integer */
800049e0:	c2 24       	add %d4,2
800049e2:	06 e4       	sh %d4,-2
    divA   = __minu(divA - 1, 0x1Fu);
800049e4:	c2 f4       	add %d4,-1
800049e6:	0b 54 90 41 	min.u %d4,%d4,%d5
    result = fadc / (divA + 1);
800049ea:	1b 14 00 30 	addi %d3,%d4,1
800049ee:	4b 32 11 62 	div.u %e6,%d2,%d3
800049f2:	02 6f       	mov %d15,%d6

    if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
800049f4:	7b 10 13 60 	movh %d6,305
800049f8:	1b 16 d0 62 	addi %d6,%d6,11521
800049fc:	3f 6f 08 80 	jlt.u %d15,%d6,80004a0c <IfxVadc_initializeFAdcI+0x44>
80004a00:	0b 53 90 41 	min.u %d4,%d3,%d5
    {
        divA   = __minu(divA + 1, 0x1Fu);

        result = fadc / (divA + 1);
80004a04:	9a 14       	add %d15,%d4,1
80004a06:	4b f2 11 22 	div.u %e2,%d2,%d15
80004a0a:	02 2f       	mov %d15,%d2
    else
    {
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
80004a0c:	1b 0f ee 25 	addi %d2,%d15,24288
80004a10:	7b a0 12 30 	movh %d3,298
80004a14:	9b 82 ff 2f 	addih %d2,%d2,65528
80004a18:	1b 13 be 38 	addi %d3,%d3,-29727
80004a1c:	7f 32 06 80 	jge.u %d2,%d3,80004a28 <IfxVadc_initializeFAdcI+0x60>
    {
        result = 0;             /* Min / Max FAdcI frequency */
    }
    else
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
80004a20:	40 f4       	mov.aa %a4,%a15
80004a22:	6d ff ac ff 	call 8000497a <IfxVadc_initialiseAdcConverterClock>
80004a26:	3c 02       	j 80004a2a <IfxVadc_initializeFAdcI+0x62>
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
    {
        result = 0;             /* Min / Max FAdcI frequency */
80004a28:	82 0f       	mov %d15,0
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
    }

    return result;
}
80004a2a:	02 f2       	mov %d2,%d15
80004a2c:	00 90       	ret 

80004a2e <IfxVadc_isPostCalibration>:
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
        break;
    default: pcEnabled                = FALSE;
80004a2e:	82 02       	mov %d2,0

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
80004a30:	ff 84 33 80 	jge.u %d4,8,80004a96 <IfxVadc_isPostCalibration+0x68>
80004a34:	91 00 00 f8 	movh.a %a15,32768
80004a38:	d9 ff 88 94 	lea %a15,[%a15]19016 <80004a48 <IfxVadc_isPostCalibration+0x1a>>
80004a3c:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
        break;
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
80004a40:	19 42 00 20 	ld.w %d2,[%a4]128

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
80004a44:	dc 0f       	ji %a15
80004a46:	00 00       	nop 
80004a48:	1d 00 10 00 	j 80004a68 <IfxVadc_isPostCalibration+0x3a>
80004a4c:	1d 00 11 00 	j 80004a6e <IfxVadc_isPostCalibration+0x40>
80004a50:	1d 00 12 00 	j 80004a74 <IfxVadc_isPostCalibration+0x46>
80004a54:	1d 00 13 00 	j 80004a7a <IfxVadc_isPostCalibration+0x4c>
80004a58:	1d 00 14 00 	j 80004a80 <IfxVadc_isPostCalibration+0x52>
80004a5c:	1d 00 15 00 	j 80004a86 <IfxVadc_isPostCalibration+0x58>
80004a60:	1d 00 16 00 	j 80004a8c <IfxVadc_isPostCalibration+0x5e>
80004a64:	1d 00 17 00 	j 80004a92 <IfxVadc_isPostCalibration+0x64>
    {
    case IfxVadc_GroupId_0: pcEnabled = vadc->GLOBCFG.B.DPCAL0 == 0;
80004a68:	07 22 10 28 	nand.t %d2,%d2,16,%d2,16
        break;
80004a6c:	00 90       	ret 
    case IfxVadc_GroupId_1: pcEnabled = vadc->GLOBCFG.B.DPCAL1 == 0;
80004a6e:	07 22 91 28 	nand.t %d2,%d2,17,%d2,17
        break;
80004a72:	00 90       	ret 
    case IfxVadc_GroupId_2: pcEnabled = vadc->GLOBCFG.B.DPCAL2 == 0;
80004a74:	07 22 12 29 	nand.t %d2,%d2,18,%d2,18
        break;
80004a78:	00 90       	ret 
    case IfxVadc_GroupId_3: pcEnabled = vadc->GLOBCFG.B.DPCAL3 == 0;
80004a7a:	07 22 93 29 	nand.t %d2,%d2,19,%d2,19
        break;
80004a7e:	00 90       	ret 
    case IfxVadc_GroupId_4: pcEnabled = vadc->GLOBCFG.B.DPCAL4 == 0;
80004a80:	07 22 14 2a 	nand.t %d2,%d2,20,%d2,20
        break;
80004a84:	00 90       	ret 
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
80004a86:	07 22 95 2a 	nand.t %d2,%d2,21,%d2,21
        break;
80004a8a:	00 90       	ret 
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
80004a8c:	07 22 16 2b 	nand.t %d2,%d2,22,%d2,22
        break;
80004a90:	00 90       	ret 
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
80004a92:	07 22 97 2b 	nand.t %d2,%d2,23,%d2,23
    default: pcEnabled                = FALSE;
        break;
    }

    return pcEnabled;
}
80004a96:	00 90       	ret 

80004a98 <IfxVadc_getChannelConversionTime>:
    return status;
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
80004a98:	02 40       	mov %d0,%d4
80004a9a:	02 68       	mov %d8,%d6
80004a9c:	02 7a       	mov %d10,%d7
80004a9e:	14 a4       	ld.bu %d4,[%sp]
    IfxVadc_ChannelResolution resolution;
    uint32                    n;

    uint32                    inputClassNum;

    if (inputClass <= IfxVadc_InputClasses_group1)
80004aa0:	ff 25 08 80 	jge.u %d5,2,80004ab0 <IfxVadc_getChannelConversionTime+0x18>
    {
        inputClassNum = inputClass;
        stcs          = vadcG->ICLASS[inputClassNum].B.STCS;
80004aa4:	8f 80 00 f0 	sh %d15,%d0,8
80004aa8:	42 f5       	add %d5,%d15
80004aaa:	1b 85 12 50 	addi %d5,%d5,296
80004aae:	3c 03       	j 80004ab4 <IfxVadc_getChannelConversionTime+0x1c>
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
80004ab0:	1b 65 02 50 	addi %d5,%d5,38
80004ab4:	01 45 02 f6 	addsc.a %a15,%a4,%d5,2
80004ab8:	4c f0       	ld.w %d15,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
80004aba:	48 03       	ld.w %d3,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
80004abc:	16 1f       	and %d15,31
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
    }

    if (stcs > 16)
80004abe:	8b 1f 61 22 	lt.u %d2,%d15,17
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
80004ac2:	37 03 63 34 	extr.u %d3,%d3,8,3
    }

    if (stcs > 16)
80004ac6:	f6 24       	jnz %d2,80004ace <IfxVadc_getChannelConversionTime+0x36>
    {
        stcs = (stcs - 15) * 16; // Reference for the logic: Table 28-4 of TC29xB User Manual v1.3
80004ac8:	1b 1f ff ff 	addi %d15,%d15,-15
80004acc:	06 4f       	sh %d15,4
80004ace:	ff 63 35 80 	jge.u %d3,6,80004b38 <IfxVadc_getChannelConversionTime+0xa0>
80004ad2:	91 00 00 f8 	movh.a %a15,32768
80004ad6:	d9 ff 20 60 	lea %a15,[%a15]416 <800001a0 <CSWTCH.25>>
80004ada:	01 f3 00 f6 	addsc.a %a15,%a15,%d3,0
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
80004ade:	82 02       	mov %d2,0
80004ae0:	08 09       	ld.bu %d9,[%a15]0
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
80004ae2:	df 04 2f 80 	jne %d4,0,80004b40 <IfxVadc_getChannelConversionTime+0xa8>
    {
        if (resolution != IfxVadc_ChannelResolution_10bitFast)
80004ae6:	df 53 0d 00 	jeq %d3,5,80004b00 <IfxVadc_getChannelConversionTime+0x68>
        {
            /* Standard conversion */
            uint32 pc = IfxVadc_isPostCalibration(vadc, group) ? 2 : 0;
80004aea:	02 04       	mov %d4,%d0
80004aec:	6d ff a1 ff 	call 80004a2e <IfxVadc_isPostCalibration>
80004af0:	92 24       	add %d4,%d15,2
80004af2:	ab 22 a0 22 	seln %d2,%d2,%d2,2
80004af6:	42 94       	add %d4,%d9
            conversionTime = (float32)(2 + stcs + n + pc) / analogFrequency + 2.0 / moduleFrequency;
80004af8:	42 24       	add %d4,%d2
80004afa:	4b 04 41 41 	itof %d4,%d4
80004afe:	3c 04       	j 80004b06 <IfxVadc_getChannelConversionTime+0x6e>
        }
        else
        {
            /* Fast compare mode */
            conversionTime = (float32)(2 + stcs + 2) / analogFrequency + 2.0 / moduleFrequency;
80004b00:	c2 4f       	add %d15,4
80004b02:	4b 0f 41 41 	itof %d4,%d15
80004b06:	4b 84 51 40 	div.f %d4,%d4,%d8
80004b0a:	6d 00 e1 2a 	call 8000a0cc <__extendsfdf2>
80004b0e:	02 a4       	mov %d4,%d10
80004b10:	0b 23 10 88 	mov %e8,%d3,%d2
80004b14:	6d 00 dc 2a 	call 8000a0cc <__extendsfdf2>
80004b18:	b7 00 21 4f 	imask %e4,0,30,1
80004b1c:	0b 23 10 68 	mov %e6,%d3,%d2
80004b20:	6d 00 cb 2c 	call 8000a4b6 <__divdf3>
80004b24:	0b 89 10 48 	mov %e4,%d9,%d8
80004b28:	0b 23 10 68 	mov %e6,%d3,%d2
80004b2c:	6d 00 b7 2b 	call 8000a29a <__adddf3>
80004b30:	0b 23 10 48 	mov %e4,%d3,%d2
80004b34:	1d 00 80 2d 	j 8000a634 <__truncdfsf2>
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
80004b38:	82 09       	mov %d9,0
80004b3a:	df 04 d8 7f 	jeq %d4,0,80004aea <IfxVadc_getChannelConversionTime+0x52>
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
80004b3e:	82 02       	mov %d2,0
    {
        // do nothing
    }

    return conversionTime;
}
80004b40:	00 90       	ret 

80004b42 <IfxVadc_resetKernel>:
    return pcEnabled;
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
80004b42:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004b44:	6d 00 f9 13 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80004b48:	02 24       	mov %d4,%d2
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004b4a:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80004b4c:	6d 00 f5 12 	call 80007136 <IfxScuWdt_clearCpuEndinit>
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b50:	3b f0 01 40 	mov %d4,31
80004b54:	40 f4       	mov.aa %a4,%a15
80004b56:	6d ff bb fd 	call 800046cc <IfxVadc_enableAccess>
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004b5a:	48 c2       	ld.w %d2,[%a15]48
    vadc->KRST0.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004b5c:	02 f4       	mov %d4,%d15
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004b5e:	8f 12 40 21 	or %d2,%d2,1
80004b62:	68 c2       	st.w [%a15]48,%d2
    vadc->KRST0.B.RST = 1;
80004b64:	48 d2       	ld.w %d2,[%a15]52
80004b66:	8f 12 40 21 	or %d2,%d2,1
80004b6a:	68 d2       	st.w [%a15]52,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004b6c:	6d 00 1a 14 	call 800073a0 <IfxScuWdt_setCpuEndinit>

    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */
80004b70:	48 d2       	ld.w %d2,[%a15]52
80004b72:	6f 12 ff 7f 	jz.t %d2,1,80004b70 <IfxVadc_resetKernel+0x2e>

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004b76:	02 f4       	mov %d4,%d15
80004b78:	6d 00 df 12 	call 80007136 <IfxScuWdt_clearCpuEndinit>
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004b7c:	48 b2       	ld.w %d2,[%a15]44
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b7e:	3b f0 01 40 	mov %d4,31
    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004b82:	8f 12 40 21 	or %d2,%d2,1
80004b86:	68 b2       	st.w [%a15]44,%d2
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b88:	40 f4       	mov.aa %a4,%a15
80004b8a:	6d ff 85 fd 	call 80004694 <IfxVadc_disableAccess>
    IfxScuWdt_setCpuEndinit(passwd);
80004b8e:	02 f4       	mov %d4,%d15
80004b90:	1d 00 08 14 	j 800073a0 <IfxScuWdt_setCpuEndinit>

80004b94 <IfxVadc_selectPowerSupplyVoltage>:


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80004b94:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
80004b98:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
80004b9a:	67 4f 0e f0 	ins.t %d15,%d15,14,%d4,0
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b9e:	3b f0 01 40 	mov %d4,31
80004ba2:	6d ff 95 fd 	call 800046cc <IfxVadc_enableAccess>
void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
80004ba6:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004baa:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80004bac:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004bb0:	3b f0 01 40 	mov %d4,31
80004bb4:	1d ff 70 fd 	j 80004694 <IfxVadc_disableAccess>

80004bb8 <IfxVadc_setArbiterPriority>:
}


void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
{
80004bb8:	1b 87 01 f0 	addi %d15,%d7,24
    if (slotEnable != FALSE)
80004bbc:	df 04 23 00 	jeq %d4,0,80004c02 <IfxVadc_setArbiterPriority+0x4a>
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
80004bc0:	19 42 04 00 	ld.w %d2,[%a4]4
80004bc4:	0f f4 00 40 	sh %d4,%d4,%d15
80004bc8:	a6 24       	or %d4,%d2
80004bca:	59 44 04 00 	st.w [%a4]4,%d4
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
80004bce:	19 42 04 00 	ld.w %d2,[%a4]4
80004bd2:	06 27       	sh %d7,2
80004bd4:	82 3f       	mov %d15,3
80004bd6:	0f 7f 00 f0 	sh %d15,%d15,%d7
80004bda:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004bde:	6c 41       	st.w [%a4]4,%d15
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
80004be0:	4c 41       	ld.w %d15,[%a4]4
80004be2:	0f 75 00 50 	sh %d5,%d5,%d7
80004be6:	a6 f5       	or %d5,%d15
80004be8:	59 45 04 00 	st.w [%a4]4,%d5

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004bec:	4c 41       	ld.w %d15,[%a4]4
80004bee:	c2 37       	add %d7,3
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
80004bf0:	76 64       	jz %d6,80004bf8 <IfxVadc_setArbiterPriority+0x40>
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004bf2:	d7 1f 01 77 	insert %d7,%d15,1,%d7,1
80004bf6:	3c 03       	j 80004bfc <IfxVadc_setArbiterPriority+0x44>
        }
        else
        {
            vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
80004bf8:	d7 0f 01 77 	insert %d7,%d15,0,%d7,1
80004bfc:	59 47 04 00 	st.w [%a4]4,%d7
80004c00:	00 90       	ret 
        }
    }
    else
    {
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
80004c02:	19 44 04 00 	ld.w %d4,[%a4]4
80004c06:	d7 04 01 ff 	insert %d15,%d4,0,%d15,1
80004c0a:	6c 41       	st.w [%a4]4,%d15
80004c0c:	00 90       	ret 

80004c0e <IfxVadc_setScan>:

void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
{
    /* select channels which should take part in the scan sequence */
    /* the mask allows to specify the channels which should be enabled/disabled */
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
80004c0e:	19 4f 28 20 	ld.w %d15,[%a4]168
80004c12:	26 54       	and %d4,%d5
80004c14:	0f 5f e0 f0 	andn %d15,%d15,%d5
80004c18:	0f 4f a0 50 	or %d5,%d15,%d4
80004c1c:	59 45 28 20 	st.w [%a4]168,%d5
80004c20:	00 90       	ret 

80004c22 <IfxVadc_startupCalibration>:
{
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c22:	3b f0 01 40 	mov %d4,31
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004c26:	40 4f       	mov.aa %a15,%a4
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c28:	6d ff 52 fd 	call 800046cc <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
{
    vadc->GLOBCFG.B.SUCAL = 1;
80004c2c:	19 ff 00 20 	ld.w %d15,[%a15]128
    /* Set SUCAL bit */
    IfxVadc_initiateStartupCalibration(vadc);
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c30:	40 f4       	mov.aa %a4,%a15
80004c32:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80004c36:	3b f0 01 40 	mov %d4,31
80004c3a:	59 ff 00 20 	st.w [%a15]128,%d15
80004c3e:	6d ff 2b fd 	call 80004694 <IfxVadc_disableAccess>
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004c42:	82 02       	mov %d2,0

    /* Wait for hardware self-test and calibration to complete */
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;
80004c44:	82 0f       	mov %d15,0
80004c46:	a0 72       	mov.a %a2,7


IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
{
    uint8 status;
    status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
80004c48:	8f a2 00 30 	sh %d3,%d2,10
80004c4c:	01 f3 00 36 	addsc.a %a3,%a15,%d3,0
80004c50:	c2 12       	add %d2,1
80004c52:	19 33 40 20 	ld.w %d3,[%a3]1152
80004c56:	37 03 61 3e 	extr.u %d3,%d3,28,1

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
        {
            if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
            {
                calibrationRunning = TRUE;
80004c5a:	ab 1f a0 f3 	seln %d15,%d3,%d15,1
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80004c5e:	fc 25       	loop %a2,80004c48 <IfxVadc_startupCalibration+0x26>
            else
            {
                /* do nothing */
            }
        }
    } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
80004c60:	df 1f f1 7f 	jeq %d15,1,80004c42 <IfxVadc_startupCalibration+0x20>
}
80004c64:	00 90       	ret 
	...

80004c68 <IfxAsclin_disableModule>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
80004c68:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004c6a:	6d 00 66 13 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004c6e:	02 24       	mov %d4,%d2
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004c70:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004c72:	6d 00 62 12 	call 80007136 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
80004c76:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclin); /* disables the module*/
    IfxScuWdt_setCpuEndinit(psw);              /* sets the endinit protection back on*/
80004c78:	02 f4       	mov %d4,%d15
80004c7a:	8f 12 40 21 	or %d2,%d2,1
80004c7e:	68 02       	st.w [%a15]0,%d2
80004c80:	1d 00 90 13 	j 800073a0 <IfxScuWdt_setCpuEndinit>

80004c84 <IfxAsclin_enableAscErrorFlags>:
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80004c84:	7b 10 00 f0 	movh %d15,1
80004c88:	ab 0f 80 44 	sel %d4,%d4,%d15,0
80004c8c:	19 4f 00 10 	ld.w %d15,[%a4]64
80004c90:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80004c94:	a6 f4       	or %d4,%d15
80004c96:	59 44 00 10 	st.w [%a4]64,%d4
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
80004c9a:	7b 00 40 f0 	movh %d15,1024
80004c9e:	ab 0f 80 55 	sel %d5,%d5,%d15,0
80004ca2:	19 4f 00 10 	ld.w %d15,[%a4]64
80004ca6:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80004caa:	a6 f5       	or %d5,%d15
80004cac:	59 45 00 10 	st.w [%a4]64,%d5
80004cb0:	00 90       	ret 

80004cb2 <IfxAsclin_enableModule>:
    IfxAsclin_enableRxFifoOverflowFlag(asclin, rfoEnable);  /* enables Rx fifo Overflow error*/
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
80004cb2:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004cb4:	6d 00 41 13 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004cb8:	02 24       	mov %d4,%d2
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004cba:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004cbc:	6d 00 3d 12 	call 80007136 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 0;
80004cc0:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setEnableModuleRequest(asclin); /* enables the module*/
    IfxScuWdt_setCpuEndinit(psw);             /* sets the endinit protection back on*/
80004cc2:	02 f4       	mov %d4,%d15
80004cc4:	8f 12 c0 21 	andn %d2,%d2,1
80004cc8:	68 02       	st.w [%a15]0,%d2
80004cca:	1d 00 6b 13 	j 800073a0 <IfxScuWdt_setCpuEndinit>

80004cce <IfxAsclin_getAddress>:
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
    }
    else
    {
        module = NULL_PTR;
80004cce:	a0 02       	mov.a %a2,0

Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin)
{
    Ifx_ASCLIN *module;

    if (asclin < IFXASCLIN_NUM_MODULES)
80004cd0:	ff 44 09 00 	jge %d4,4,80004ce2 <IfxAsclin_getAddress+0x14>
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
80004cd4:	91 00 00 f8 	movh.a %a15,32768
80004cd8:	d9 ff b8 30 	lea %a15,[%a15]2296 <800008f8 <IfxAsclin_cfg_indexMap>>
80004cdc:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004ce0:	c8 02       	ld.a %a2,[%a15]0
    {
        module = NULL_PTR;
    }

    return module;
}
80004ce2:	00 90       	ret 

80004ce4 <IfxAsclin_getFaFrequency>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004ce4:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004ce8:	16 1f       	and %d15,31
float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin)
{
    float32               frequency;
    IfxAsclin_ClockSource clockSource = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin);    /* gets the current clock source*/

    switch (clockSource)
80004cea:	c2 ff       	add %d15,-1
80004cec:	8b 0f a1 22 	ge.u %d2,%d15,16
80004cf0:	df 02 32 80 	jne %d2,0,80004d54 <IfxAsclin_getFaFrequency+0x70>
80004cf4:	91 00 00 f8 	movh.a %a15,32768
80004cf8:	d9 ff c0 44 	lea %a15,[%a15]19712 <80004d00 <IfxAsclin_getFaFrequency+0x1c>>
80004cfc:	90 ff       	addsc.a %a15,%a15,%d15,2
80004cfe:	dc 0f       	ji %a15
80004d00:	1d 00 20 00 	j 80004d40 <IfxAsclin_getFaFrequency+0x5c>
80004d04:	1d 00 20 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x60>
80004d08:	1d 00 26 00 	j 80004d54 <IfxAsclin_getFaFrequency+0x70>
80004d0c:	1d 00 1e 00 	j 80004d48 <IfxAsclin_getFaFrequency+0x64>
80004d10:	1d 00 22 00 	j 80004d54 <IfxAsclin_getFaFrequency+0x70>
80004d14:	1d 00 20 00 	j 80004d54 <IfxAsclin_getFaFrequency+0x70>
80004d18:	1d 00 1e 00 	j 80004d54 <IfxAsclin_getFaFrequency+0x70>
80004d1c:	1d 00 18 00 	j 80004d4c <IfxAsclin_getFaFrequency+0x68>
80004d20:	1d 00 1a 00 	j 80004d54 <IfxAsclin_getFaFrequency+0x70>
80004d24:	1d 00 18 00 	j 80004d54 <IfxAsclin_getFaFrequency+0x70>
80004d28:	1d 00 16 00 	j 80004d54 <IfxAsclin_getFaFrequency+0x70>
80004d2c:	1d 00 14 00 	j 80004d54 <IfxAsclin_getFaFrequency+0x70>
80004d30:	1d 00 12 00 	j 80004d54 <IfxAsclin_getFaFrequency+0x70>
80004d34:	1d 00 10 00 	j 80004d54 <IfxAsclin_getFaFrequency+0x70>
80004d38:	1d 00 0e 00 	j 80004d54 <IfxAsclin_getFaFrequency+0x70>
80004d3c:	1d 00 0a 00 	j 80004d50 <IfxAsclin_getFaFrequency+0x6c>
    {
    case IfxAsclin_ClockSource_noClock: /* gets the respective frequency*/
        frequency = 0.0;
        break;
    case IfxAsclin_ClockSource_kernelClock:
        frequency = IfxScuCcu_getSpbFrequency();
80004d40:	1d 00 37 0a 	j 800061ae <IfxScuCcu_getSpbFrequency>
        break;
    case IfxAsclin_ClockSource_oscillatorClock:
        frequency = IfxScuCcu_getOsc0Frequency();
80004d44:	1d 00 a6 08 	j 80005e90 <IfxScuCcu_getOsc0Frequency>
        break;
    case IfxAsclin_ClockSource_flexRayClock:
        frequency = IfxScuCcu_getPllErayFrequency();
80004d48:	1d 00 c3 08 	j 80005ece <IfxScuCcu_getPllErayFrequency>
        break;
    case IfxAsclin_ClockSource_ascFastClock:
        frequency = IfxScuCcu_getBaud2Frequency();
80004d4c:	1d 00 20 0a 	j 8000618c <IfxScuCcu_getBaud2Frequency>
        break;
    case IfxAsclin_ClockSource_ascSlowClock:
        frequency = IfxScuCcu_getBaud1Frequency();
80004d50:	1d 00 0e 0a 	j 8000616c <IfxScuCcu_getBaud1Frequency>
        frequency = 0.0;
        break;
    }

    return frequency;
}
80004d54:	82 02       	mov %d2,0
80004d56:	00 90       	ret 

80004d58 <IfxAsclin_getIndex>:

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004d58:	91 00 00 38 	movh.a %a3,32768
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004d5c:	82 0f       	mov %d15,0
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004d5e:	d9 33 b8 30 	lea %a3,[%a3]2296 <800008f8 <IfxAsclin_cfg_indexMap>>
80004d62:	a0 3f       	mov.a %a15,3
80004d64:	d0 32       	addsc.a %a2,%a3,%d15,3
80004d66:	d4 25       	ld.a %a5,[%a2]
80004d68:	7d 45 05 80 	jne.a %a5,%a4,80004d72 <IfxAsclin_getIndex+0x1a>
        {
            result = (IfxAsclin_Index)IfxAsclin_cfg_indexMap[index].index;
80004d6c:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
80004d70:	00 90       	ret 
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004d72:	c2 1f       	add %d15,1
80004d74:	fc f8       	loop %a15,80004d64 <IfxAsclin_getIndex+0xc>
IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin)
{
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;
80004d76:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
80004d78:	00 90       	ret 

80004d7a <IfxAsclin_getPdFrequency>:
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
}


float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin)
{
80004d7a:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
80004d7c:	6d ff b4 ff 	call 80004ce4 <IfxAsclin_getFaFrequency>
80004d80:	4c f5       	ld.w %d15,[%a15]20
80004d82:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004d86:	c2 1f       	add %d15,1
80004d88:	4b 0f 41 f1 	itof %d15,%d15
}
80004d8c:	4b f2 51 20 	div.f %d2,%d2,%d15
80004d90:	00 90       	ret 

80004d92 <IfxAsclin_getOvsFrequency>:
    return result;
}


float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin)
{
80004d92:	40 4f       	mov.aa %a15,%a4
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
80004d94:	6d ff f3 ff 	call 80004d7a <IfxAsclin_getPdFrequency>
80004d98:	48 83       	ld.w %d3,[%a15]32
80004d9a:	4c f8       	ld.w %d15,[%a15]32
80004d9c:	37 03 6c 38 	extr.u %d3,%d3,16,12
80004da0:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004da4:	4b 03 41 31 	itof %d3,%d3
80004da8:	4b 0f 41 f1 	itof %d15,%d15
80004dac:	4b 32 41 20 	mul.f %d2,%d2,%d3
}
80004db0:	4b f2 51 20 	div.f %d2,%d2,%d15
80004db4:	00 90       	ret 

80004db6 <IfxAsclin_getShiftFrequency>:
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
}


float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin)
{
80004db6:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getOvsFrequency(asclin) / asclin->BITCON.B.OVERSAMPLING;
80004db8:	6d ff ed ff 	call 80004d92 <IfxAsclin_getOvsFrequency>
80004dbc:	4c f5       	ld.w %d15,[%a15]20
80004dbe:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80004dc2:	4b 0f 41 f1 	itof %d15,%d15
}
80004dc6:	4b f2 51 20 	div.f %d2,%d2,%d15
80004dca:	00 90       	ret 

80004dcc <IfxAsclin_getSrcPointerEr>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].ERR);
80004dcc:	6d ff c6 ff 	call 80004d58 <IfxAsclin_getIndex>
80004dd0:	53 c2 20 f0 	mul %d15,%d2,12
80004dd4:	60 ff       	mov.a %a15,%d15
80004dd6:	d9 f2 08 28 	lea %a2,[%a15]-32632
}
80004dda:	11 42 00 2f 	addih.a %a2,%a2,61444
80004dde:	00 90       	ret 

80004de0 <IfxAsclin_getSrcPointerRx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].RX);
80004de0:	6d ff bc ff 	call 80004d58 <IfxAsclin_getIndex>
80004de4:	53 c2 20 f0 	mul %d15,%d2,12
80004de8:	60 ff       	mov.a %a15,%d15
80004dea:	d9 f2 04 28 	lea %a2,[%a15]-32636
}
80004dee:	11 42 00 2f 	addih.a %a2,%a2,61444
80004df2:	00 90       	ret 

80004df4 <IfxAsclin_getSrcPointerTx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].TX);
80004df4:	6d ff b2 ff 	call 80004d58 <IfxAsclin_getIndex>
80004df8:	53 c2 20 f0 	mul %d15,%d2,12
80004dfc:	60 ff       	mov.a %a15,%d15
80004dfe:	d9 f2 00 28 	lea %a2,[%a15]-32640
}
80004e02:	11 42 00 2f 	addih.a %a2,%a2,61444
80004e06:	00 90       	ret 

80004e08 <IfxAsclin_read16>:


uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
80004e08:	9f 04 04 80 	jned %d4,0,80004e10 <IfxAsclin_read16+0x8>
        *data++ = (uint16)rxData->U;
        count--;
    }

    return count;
}
80004e0c:	82 02       	mov %d2,0
80004e0e:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint16)rxData->U;
80004e10:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e14:	ac 50       	st.h [%a5]0,%d15
80004e16:	b0 25       	add.a %a5,2
80004e18:	3c f8       	j 80004e08 <IfxAsclin_read16>

80004e1a <IfxAsclin_read32>:
    return count;
}


uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80004e1a:	9f 04 04 80 	jned %d4,0,80004e22 <IfxAsclin_read32+0x8>
        *data++ = rxData->U;
        count--;
    }

    return count;
}
80004e1e:	82 02       	mov %d2,0
80004e20:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = rxData->U;
80004e22:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e26:	6c 50       	st.w [%a5]0,%d15
80004e28:	b0 45       	add.a %a5,4
80004e2a:	3c f8       	j 80004e1a <IfxAsclin_read32>

80004e2c <IfxAsclin_read8>:
    return count;
}


uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80004e2c:	9f 04 04 80 	jned %d4,0,80004e34 <IfxAsclin_read8+0x8>
        *data++ = (uint8)rxData->U;
        count--;
    }

    return count;
}
80004e30:	82 02       	mov %d2,0
80004e32:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint8)rxData->U;
80004e34:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e38:	2c 50       	st.b [%a5]0,%d15
80004e3a:	b0 15       	add.a %a5,1
80004e3c:	3c f8       	j 80004e2c <IfxAsclin_read8>

80004e3e <IfxAsclin_resetModule>:
    return count;
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
80004e3e:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004e40:	6d 00 7b 12 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
80004e44:	02 24       	mov %d4,%d2
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004e46:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80004e48:	6d 00 77 11 	call 80007136 <IfxScuWdt_clearCpuEndinit>

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004e4c:	19 f2 34 30 	ld.w %d2,[%a15]244
    asclin->KRST1.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004e50:	02 f4       	mov %d4,%d15
void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004e52:	8f 12 40 21 	or %d2,%d2,1
80004e56:	59 f2 34 30 	st.w [%a15]244,%d2
    asclin->KRST1.B.RST = 1;
80004e5a:	19 f2 30 30 	ld.w %d2,[%a15]240
80004e5e:	8f 12 40 21 	or %d2,%d2,1
80004e62:	59 f2 30 30 	st.w [%a15]240,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004e66:	6d 00 9d 12 	call 800073a0 <IfxScuWdt_setCpuEndinit>

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
80004e6a:	19 f2 34 30 	ld.w %d2,[%a15]244
80004e6e:	6f 12 fe 7f 	jz.t %d2,1,80004e6a <IfxAsclin_resetModule+0x2c>
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004e72:	02 f4       	mov %d4,%d15
80004e74:	6d 00 61 11 	call 80007136 <IfxScuWdt_clearCpuEndinit>
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004e78:	19 f2 2c 30 	ld.w %d2,[%a15]236

    IfxScuWdt_setCpuEndinit(passwd);
80004e7c:	02 f4       	mov %d4,%d15

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004e7e:	8f 12 40 21 	or %d2,%d2,1
80004e82:	59 f2 2c 30 	st.w [%a15]236,%d2

    IfxScuWdt_setCpuEndinit(passwd);
80004e86:	1d 00 8d 12 	j 800073a0 <IfxScuWdt_setCpuEndinit>

80004e8a <IfxAsclin_setClockSource>:
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004e8a:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004e8e:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
80004e92:	59 4f 0c 10 	st.w [%a4]76,%d15

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
80004e96:	f6 46       	jnz %d4,80004ea2 <IfxAsclin_setClockSource+0x18>
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004e98:	19 4f 0c 10 	ld.w %d15,[%a4]76
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004e9c:	bf 0f fe 7f 	jlt %d15,0,80004e98 <IfxAsclin_setClockSource+0xe>
80004ea0:	00 90       	ret 
80004ea2:	19 4f 0c 10 	ld.w %d15,[%a4]76
        {}
    }
    else
    {
        while (IfxAsclin_getClockStatus(asclin) != 1U)
80004ea6:	ff 0f fe 7f 	jge %d15,0,80004ea2 <IfxAsclin_setClockSource+0x18>
80004eaa:	00 90       	ret 

80004eac <IfxAsclin_setBaudrateBitFields>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004eac:	19 4f 0c 10 	ld.w %d15,[%a4]76
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004eb0:	19 42 0c 10 	ld.w %d2,[%a4]76
80004eb4:	16 1f       	and %d15,31
80004eb6:	8f f2 c1 21 	andn %d2,%d2,31
80004eba:	59 42 0c 10 	st.w [%a4]76,%d2
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004ebe:	19 42 0c 10 	ld.w %d2,[%a4]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004ec2:	bf 02 fe 7f 	jlt %d2,0,80004ebe <IfxAsclin_setBaudrateBitFields+0x12>
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
80004ec6:	19 42 14 00 	ld.w %d2,[%a4]20
80004eca:	c2 f4       	add %d4,-1
80004ecc:	37 42 0c 40 	insert %d4,%d2,%d4,0,12
80004ed0:	59 44 14 00 	st.w [%a4]20,%d4
}


IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
{
    asclin->BRG.B.NUMERATOR = numerator;
80004ed4:	19 42 20 00 	ld.w %d2,[%a4]32
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);                             /* turns off the clock for settings */
    IfxAsclin_setPrescaler(asclin, prescaler);                                                   /* sets the prescaler*/
    IfxAsclin_setNumerator(asclin, numerator);                                                   /* sets the numerator*/
    IfxAsclin_setDenominator(asclin, denominator);                                               /* sets the denominator*/
    IfxAsclin_setOversampling(asclin, oversampling);                                             /* sets the oversampling*/
    IfxAsclin_setClockSource(asclin, clockSource);                                               /* sets the clock source back on*/
80004ed8:	02 f4       	mov %d4,%d15
80004eda:	37 52 0c 58 	insert %d5,%d2,%d5,16,12
80004ede:	59 45 20 00 	st.w [%a4]32,%d5
}


IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
{
    asclin->BRG.B.DENOMINATOR = denominator;
80004ee2:	19 42 20 00 	ld.w %d2,[%a4]32
80004ee6:	37 62 0c 60 	insert %d6,%d2,%d6,0,12
80004eea:	59 46 20 00 	st.w [%a4]32,%d6
}


IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)
{
    asclin->BITCON.B.OVERSAMPLING = ovsFactor;
80004eee:	19 42 14 00 	ld.w %d2,[%a4]20
80004ef2:	37 72 04 78 	insert %d7,%d2,%d7,16,4
80004ef6:	59 47 14 00 	st.w [%a4]20,%d7
80004efa:	1d ff c8 ff 	j 80004e8a <IfxAsclin_setClockSource>

80004efe <IfxAsclin_setBitTiming>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004efe:	19 42 0c 10 	ld.w %d2,[%a4]76
}


boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter)
{
80004f02:	20 08       	sub.a %sp,8
80004f04:	8f f2 01 21 	and %d2,%d2,31
80004f08:	02 5f       	mov %d15,%d5
80004f0a:	40 4f       	mov.aa %a15,%a4
80004f0c:	02 48       	mov %d8,%d4
80004f0e:	02 6a       	mov %d10,%d6
80004f10:	60 7d       	mov.a %a13,%d7
80004f12:	60 2c       	mov.a %a12,%d2
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004f14:	6d ff 33 ff 	call 80004d7a <IfxAsclin_getPdFrequency>
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004f18:	92 15       	add %d5,%d15,1
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004f1a:	02 29       	mov %d9,%d2
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80004f1c:	82 4f       	mov %d15,4
80004f1e:	0b f5 b0 f1 	max.u %d15,%d5,%d15
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004f22:	8f ff 0f 21 	and %d2,%d15,255
80004f26:	59 a2 04 00 	st.w [%sp]4,%d2
80004f2a:	82 16       	mov %d6,1
80004f2c:	0b 6a b0 61 	max.u %d6,%d10,%d6
80004f30:	16 ff       	and %d15,255
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
80004f32:	4b 0f 41 31 	itof %d3,%d15
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004f36:	8f f6 0f 61 	and %d6,%d6,255
    fOvs         = baudrate * oversampling;
80004f3a:	4b 38 41 f0 	mul.f %d15,%d8,%d3
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004f3e:	60 6e       	mov.a %a14,%d6
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004f40:	02 f4       	mov %d4,%d15
80004f42:	6d 00 c5 28 	call 8000a0cc <__extendsfdf2>
80004f46:	7b 00 f5 73 	movh %d7,16208
80004f4a:	0b 23 10 48 	mov %e4,%d3,%d2
80004f4e:	7b 20 2f 6d 	movh %d6,54002
80004f52:	1b d7 24 76 	addi %d7,%d7,25165
80004f56:	1b c6 9f 6a 	addi %d6,%d6,-22020
80004f5a:	6d 00 dc 29 	call 8000a312 <__muldf3>
80004f5e:	0b 23 10 48 	mov %e4,%d3,%d2
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
    nBest          = n;
80004f62:	82 1c       	mov %d12,1
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004f64:	6d 00 68 2b 	call 8000a634 <__truncdfsf2>

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80004f68:	4b f9 51 50 	div.f %d5,%d9,%d15
80004f6c:	91 00 00 20 	movh.a %a2,0

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
    relError       = __absf(fOvs - f);
80004f70:	82 01       	mov %d1,0

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80004f72:	4b 05 71 51 	ftouz %d5,%d5
    }

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
80004f76:	4b 05 61 31 	utof %d3,%d5
80004f7a:	4b 39 51 30 	div.f %d3,%d9,%d3
    relError       = __absf(fOvs - f);
80004f7e:	6b 03 31 3f 	sub.f %d3,%d15,%d3
80004f82:	4b 13 01 00 	cmp.f %d0,%d3,%d1
80004f86:	37 00 61 00 	extr.u %d0,%d0,0,1
80004f8a:	9b 03 00 48 	addih %d4,%d3,32768
80004f8e:	2b 34 40 30 	sel %d3,%d0,%d4,%d3
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004f92:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80004f96:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
80004f9a:	df 00 45 80 	jne %d0,0,80005024 <IfxAsclin_setBitTiming+0x126>
80004f9e:	8f 15 00 60 	sh %d6,%d5,1
            /* Increase the value of the oversampling to generate the required baudrate */
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
80004fa2:	02 51       	mov %d1,%d5
    nBest          = n;
    adder_facL_min = 0;
80004fa4:	82 0e       	mov %d14,0
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004fa6:	82 28       	mov %d8,2
80004fa8:	3b 00 00 71 	mov %d7,4096
80004fac:	7f 76 3b 80 	jge.u %d6,%d7,80005022 <IfxAsclin_setBitTiming+0x124>
    {
        if (n == 2)
        {
            adder_facL = 1;
            adder_facH = 1;
80004fb0:	a0 13       	mov.a %a3,1

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
        {
            adder_facL = 1;
80004fb2:	82 1b       	mov %d11,1
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
80004fb4:	df 28 09 00 	jeq %d8,2,80004fc6 <IfxAsclin_setBitTiming+0xc8>
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80004fb8:	73 8e 0a a0 	mul %d10,%d14,%d8
80004fbc:	4b ca 11 a2 	div.u %e10,%d10,%d12
            adder_facH = adder_facL + 1;
80004fc0:	60 a3       	mov.a %a3,%d10
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80004fc2:	02 ab       	mov %d11,%d10
            adder_facH = adder_facL + 1;
80004fc4:	b0 13       	add.a %a3,1
        }

        for (count = adder_facL; count <= adder_facH; count++)
80004fc6:	80 34       	mov.d %d4,%a3
80004fc8:	3f b4 25 80 	jlt.u %d4,%d11,80005012 <IfxAsclin_setBitTiming+0x114>
        {
            f           = (fpd * n) / (n * d + count);
80004fcc:	4b 08 61 01 	utof %d0,%d8
80004fd0:	0b 6b 00 40 	add %d4,%d11,%d6
80004fd4:	4b 04 61 d1 	utof %d13,%d4
80004fd8:	4b 09 41 00 	mul.f %d0,%d9,%d0
            newRelError = __absf(fOvs - f);
80004fdc:	80 2a       	mov.d %d10,%a2
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
        {
            f           = (fpd * n) / (n * d + count);
80004fde:	4b d0 51 00 	div.f %d0,%d0,%d13
            newRelError = __absf(fOvs - f);
80004fe2:	6b 00 31 0f 	sub.f %d0,%d15,%d0
80004fe6:	4b a0 01 d0 	cmp.f %d13,%d0,%d10
80004fea:	37 0d 61 d0 	extr.u %d13,%d13,0,1
80004fee:	9b 00 00 a8 	addih %d10,%d0,32768
80004ff2:	2b 0a 40 0d 	sel %d0,%d13,%d10,%d0

            if (relError > (newRelError))
80004ff6:	4b 03 01 d0 	cmp.f %d13,%d3,%d0
80004ffa:	37 0d 61 d1 	extr.u %d13,%d13,2,1
80004ffe:	2b be 50 ed 	seln %d14,%d13,%d14,%d11
80005002:	2b 03 50 3d 	seln %d3,%d13,%d3,%d0
80005006:	2b 8c 50 cd 	seln %d12,%d13,%d12,%d8
8000500a:	2b 41 50 1d 	seln %d1,%d13,%d1,%d4
        {
            adder_facL = (adder_facL_min * n) / nBest;
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
8000500e:	c2 1b       	add %d11,1
80005010:	3c db       	j 80004fc6 <IfxAsclin_setBitTiming+0xc8>
                dBest          = (n * d + count);
                adder_facL_min = count;
            }
        }

        if (relError <= limit)
80005012:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80005016:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
8000501a:	f6 04       	jnz %d0,80005022 <IfxAsclin_setBitTiming+0x124>
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
8000501c:	c2 18       	add %d8,1
8000501e:	42 56       	add %d6,%d5
80005020:	3c c6       	j 80004fac <IfxAsclin_setBitTiming+0xae>
80005022:	02 15       	mov %d5,%d1
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80005024:	19 f3 0c 10 	ld.w %d3,[%a15]76
80005028:	8f f3 c1 31 	andn %d3,%d3,31
8000502c:	59 f3 0c 10 	st.w [%a15]76,%d3
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80005030:	19 ff 0c 10 	ld.w %d15,[%a15]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80005034:	bf 0f fe 7f 	jlt %d15,0,80005030 <IfxAsclin_setBitTiming+0x132>
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80005038:	4c f8       	ld.w %d15,[%a15]32
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
8000503a:	19 a2 04 00 	ld.w %d2,[%sp]4
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
8000503e:	37 5f 0c 50 	insert %d5,%d15,%d5,0,12
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80005042:	c2 f2       	add %d2,-1
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80005044:	68 85       	st.w [%a15]32,%d5
    asclin->BRG.B.NUMERATOR   = nBest;
80005046:	4c f8       	ld.w %d15,[%a15]32

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80005048:	80 ea       	mov.d %d10,%a14
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
8000504a:	37 cf 0c c8 	insert %d12,%d15,%d12,16,12
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
8000504e:	80 c4       	mov.d %d4,%a12
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
80005050:	68 8c       	st.w [%a15]32,%d12

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80005052:	4c f5       	ld.w %d15,[%a15]20
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
80005054:	40 f4       	mov.aa %a4,%a15
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80005056:	37 2f 04 28 	insert %d2,%d15,%d2,16,4
8000505a:	68 52       	st.w [%a15]20,%d2

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
8000505c:	4c f5       	ld.w %d15,[%a15]20

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
8000505e:	80 d2       	mov.d %d2,%a13

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80005060:	37 af 04 6c 	insert %d6,%d15,%d10,24,4

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
80005064:	7b 00 00 f8 	movh %d15,32768

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80005068:	68 56       	st.w [%a15]20,%d6

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
8000506a:	ab 0f 80 72 	sel %d7,%d2,%d15,0
8000506e:	4c f5       	ld.w %d15,[%a15]20
80005070:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
80005074:	a6 7f       	or %d15,%d7
80005076:	68 5f       	st.w [%a15]20,%d15

    IfxAsclin_setClockSource(asclin, source);
80005078:	6d ff 09 ff 	call 80004e8a <IfxAsclin_setClockSource>

    return TRUE;
}
8000507c:	82 12       	mov %d2,1
8000507e:	00 90       	ret 

80005080 <IfxAsclin_write16>:
    }
}


uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
80005080:	9f 04 04 80 	jned %d4,0,80005088 <IfxAsclin_write16+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
80005084:	82 02       	mov %d2,0
80005086:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
80005088:	b9 5f 00 00 	ld.hu %d15,[%a5]0
8000508c:	b0 25       	add.a %a5,2
8000508e:	59 4f 04 10 	st.w [%a4]68,%d15
80005092:	3c f7       	j 80005080 <IfxAsclin_write16>

80005094 <IfxAsclin_write32>:
    return count;
}


uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80005094:	9f 04 04 80 	jned %d4,0,8000509c <IfxAsclin_write32+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
80005098:	82 02       	mov %d2,0
8000509a:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
8000509c:	4c 50       	ld.w %d15,[%a5]0
8000509e:	b0 45       	add.a %a5,4
800050a0:	59 4f 04 10 	st.w [%a4]68,%d15
800050a4:	3c f8       	j 80005094 <IfxAsclin_write32>

800050a6 <IfxAsclin_write8>:
    return count;
}

#include <stdio.h>
uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
800050a6:	9f 04 04 80 	jned %d4,0,800050ae <IfxAsclin_write8+0x8>
        count--;

    }

    return count;
}
800050aa:	82 02       	mov %d2,0
800050ac:	00 90       	ret 
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {

        txData->U = *data++;
800050ae:	0c 50       	ld.bu %d15,[%a5]0
800050b0:	b0 15       	add.a %a5,1
800050b2:	59 4f 04 10 	st.w [%a4]68,%d15
800050b6:	3c f8       	j 800050a6 <IfxAsclin_write8>

800050b8 <IfxAsclin_Asc_getReadCount>:
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
800050b8:	cc 42       	ld.a %a15,[%a4]8


sint32 IfxAsclin_Asc_getReadCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_readCount(asclin->rx);
}
800050ba:	88 22       	ld.h %d2,[%a15]4
800050bc:	00 90       	ret 

800050be <IfxAsclin_Asc_getReadEvent>:


IfxStdIf_DPipe_ReadEvent IfxAsclin_Asc_getReadEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->rx->eventWriter;
800050be:	99 42 08 00 	ld.a %a2,[%a4]8
}
800050c2:	d9 22 1d 00 	lea %a2,[%a2]29
800050c6:	00 90       	ret 

800050c8 <IfxAsclin_Asc_getSendCount>:


uint32 IfxAsclin_Asc_getSendCount(IfxAsclin_Asc *asclin)
{
    return asclin->sendCount;
800050c8:	19 42 10 00 	ld.w %d2,[%a4]16
}
800050cc:	00 90       	ret 

800050ce <IfxAsclin_Asc_getTxTimeStamp>:


Ifx_TickTime IfxAsclin_Asc_getTxTimeStamp(IfxAsclin_Asc *asclin)
{
    return asclin->txTimestamp;
800050ce:	09 42 54 09 	ld.d %e2,[%a4]20
}
800050d2:	00 90       	ret 

800050d4 <IfxAsclin_Asc_getWriteCount>:


sint32 IfxAsclin_Asc_getWriteCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_writeCount(asclin->tx);
800050d4:	cc 41       	ld.a %a15,[%a4]4
 *
 * \return Returns the free size in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_writeCount(Ifx_Fifo *fifo)
{
    return (Ifx_SizeT)(fifo->size - Ifx_Fifo_readCount(fifo));
800050d6:	88 c2       	ld.h %d2,[%a15]24
800050d8:	8c f2       	ld.h %d15,[%a15]4
800050da:	a2 f2       	sub %d2,%d15
}
800050dc:	37 02 50 20 	extr %d2,%d2,0,16
800050e0:	00 90       	ret 

800050e2 <IfxAsclin_Asc_getWriteEvent>:


IfxStdIf_DPipe_WriteEvent IfxAsclin_Asc_getWriteEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->tx->eventWriter;
800050e2:	99 42 04 00 	ld.a %a2,[%a4]4
}
800050e6:	d9 22 1d 00 	lea %a2,[%a2]29
800050ea:	00 90       	ret 

800050ec <IfxAsclin_Asc_isrError>:
}


void IfxAsclin_Asc_isrError(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin; /* getting the pointer to ASCLIN registers from module handler*/
800050ec:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.PE;
800050ee:	4c fd       	ld.w %d15,[%a15]52

    /* store all the flags in the variable */
    if (IfxAsclin_getParityErrorFlagStatus(asclinSFR))
800050f0:	ef 0f 0a 00 	jz.t %d15,16,80005104 <IfxAsclin_Asc_isrError+0x18>
}


IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.PEC = 1;
800050f4:	4c ff       	ld.w %d15,[%a15]60
800050f6:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
800050fa:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearParityErrorFlag(asclinSFR);
        asclin->errorFlags.flags.parityError = 1;
800050fc:	0c 4e       	ld.bu %d15,[%a4]14
800050fe:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
80005102:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.FE;
80005104:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getFrameErrorFlagStatus(asclinSFR))
80005106:	ef 2f 0a 00 	jz.t %d15,18,8000511a <IfxAsclin_Asc_isrError+0x2e>
}


IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.FEC = 1;
8000510a:	4c ff       	ld.w %d15,[%a15]60
8000510c:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80005110:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearFrameErrorFlag(asclinSFR);
        asclin->errorFlags.flags.frameError = 1;
80005112:	0c 4e       	ld.bu %d15,[%a4]14
80005114:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
80005118:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFO;
8000511a:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoOverflowFlagStatus(asclinSFR))
8000511c:	ef af 0a 00 	jz.t %d15,26,80005130 <IfxAsclin_Asc_isrError+0x44>
}


IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFOC = 1;
80005120:	4c ff       	ld.w %d15,[%a15]60
80005122:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80005126:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoOverflow = 1;
80005128:	0c 4e       	ld.bu %d15,[%a4]14
8000512a:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
8000512e:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFU;
80005130:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoUnderflowFlagStatus(asclinSFR))
80005132:	ef bf 0a 00 	jz.t %d15,27,80005146 <IfxAsclin_Asc_isrError+0x5a>
}


IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFUC = 1;
80005136:	4c ff       	ld.w %d15,[%a15]60
80005138:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
8000513c:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoUnderflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoUnderflow = 1;
8000513e:	0c 4e       	ld.bu %d15,[%a4]14
80005140:	b7 1f 81 f1 	insert %d15,%d15,1,3,1
80005144:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.TFO;
80005146:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getTxFifoOverflowFlagStatus(asclinSFR))
80005148:	ef ef 0a 00 	jz.t %d15,30,8000515c <IfxAsclin_Asc_isrError+0x70>
}


IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.TFOC = 1;
8000514c:	4c ff       	ld.w %d15,[%a15]60
8000514e:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80005152:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearTxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.txFifoOverflow = 1;
80005154:	0c 4e       	ld.bu %d15,[%a4]14
80005156:	b7 1f 01 f2 	insert %d15,%d15,1,4,1
8000515a:	2c 4e       	st.b [%a4]14,%d15
8000515c:	00 90       	ret 

8000515e <IfxAsclin_Asc_resetSendCount>:
}


void IfxAsclin_Asc_resetSendCount(IfxAsclin_Asc *asclin)
{
    asclin->sendCount = 0;
8000515e:	82 0f       	mov %d15,0
80005160:	6c 44       	st.w [%a4]16,%d15
80005162:	00 90       	ret 

80005164 <IfxAsclin_Asc_canReadCount>:
}


boolean IfxAsclin_Asc_canReadCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canReadCount(asclin->rx, count, timeout);
80005164:	99 44 08 00 	ld.a %a4,[%a4]8
80005168:	1d 00 df 18 	j 80008326 <Ifx_Fifo_canReadCount>

8000516c <IfxAsclin_Asc_flushTx>:

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000516c:	82 f2       	mov %d2,-1
8000516e:	06 f2       	sh %d2,-1
80005170:	ba f4       	eq %d15,%d4,-1
80005172:	0b 52 00 f2 	and.eq %d15,%d2,%d5
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
}


boolean IfxAsclin_Asc_flushTx(IfxAsclin_Asc *asclin, Ifx_TickTime timeout)
{
80005176:	40 4f       	mov.aa %a15,%a4
80005178:	02 46       	mov %d6,%d4
    {
        deadLine = TIME_INFINITE;
8000517a:	82 f9       	mov %d9,-1
8000517c:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000517e:	ee 16       	jnz %d15,800051aa <IfxAsclin_Asc_flushTx+0x3e>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80005180:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80005184:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80005188:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
8000518c:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000518e:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005192:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80005196:	02 39       	mov %d9,%d3
80005198:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000519c:	76 23       	jz %d2,800051a2 <IfxAsclin_Asc_flushTx+0x36>
    {
        __enable();
8000519e:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
800051a2:	0b 69 40 90 	addx %d9,%d9,%d6
800051a6:	0b 58 50 80 	addc %d8,%d8,%d5
 *
 * \return TRUE if the buffer is emptied.
 */
IFX_INLINE boolean Ifx_Fifo_flush(Ifx_Fifo *fifo, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(fifo, fifo->size, timeout);
800051aa:	c8 14       	ld.a %a4,[%a15]4
800051ac:	02 57       	mov %d7,%d5
800051ae:	c9 44 18 00 	ld.h %d4,[%a4]24
800051b2:	6d 00 fd 19 	call 800085ac <Ifx_Fifo_canWriteCount>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800051b6:	82 f4       	mov %d4,-1
800051b8:	06 f4       	sh %d4,-1
    boolean      result;

    /* Flush the software FIFO */
    result = Ifx_Fifo_flush(asclin->tx, timeout);

    if (result)
800051ba:	f6 23       	jnz %d2,800051c0 <IfxAsclin_Asc_flushTx+0x54>
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
    {
        deadLine = TIME_INFINITE;
800051bc:	82 02       	mov %d2,0
800051be:	00 90       	ret 
    {
        /* Flush the hardware FIFO (wait until all bytes have been transmitted) */
        do
        {
            result = IfxAsclin_getTxFifoFillLevel(asclin->asclin) == 0;
800051c0:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
800051c2:	4c 23       	ld.w %d15,[%a2]12
800051c4:	37 0f 65 f8 	extr.u %d15,%d15,16,5
        } while (!result && !IfxStm_isDeadLine(deadline));
800051c8:	6e 1e       	jz %d15,80005204 <IfxAsclin_Asc_flushTx+0x98>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800051ca:	ba f9       	eq %d15,%d9,-1
800051cc:	0b 84 00 f2 	and.eq %d15,%d4,%d8
800051d0:	ee f9       	jnz %d15,800051c2 <IfxAsclin_Asc_flushTx+0x56>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800051d2:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800051d6:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800051da:	0d 00 40 03 	disable 
800051de:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800051e0:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800051e4:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800051e8:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800051ec:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800051f0:	76 23       	jz %d2,800051f6 <IfxAsclin_Asc_flushTx+0x8a>
    {
        __enable();
800051f2:	0d 00 00 03 	enable 
800051f6:	0b 8f 00 21 	eq %d2,%d15,%d8
800051fa:	0b 93 30 22 	and.lt.u %d2,%d3,%d9
800051fe:	0b 8f 90 22 	or.lt %d2,%d15,%d8
80005202:	3c dc       	j 800051ba <IfxAsclin_Asc_flushTx+0x4e>
80005204:	82 12       	mov %d2,1
    }

    return result;
}
80005206:	00 90       	ret 

80005208 <IfxAsclin_Asc_canWriteCount>:
}


boolean IfxAsclin_Asc_canWriteCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(asclin->tx, count, timeout);
80005208:	99 44 04 00 	ld.a %a4,[%a4]4
8000520c:	1d 00 d0 19 	j 800085ac <Ifx_Fifo_canWriteCount>

80005210 <IfxAsclin_Asc_clearRx>:
}


void IfxAsclin_Asc_clearRx(IfxAsclin_Asc *asclin)
{
    IfxAsclin_flushRxFifo(asclin->asclin);
80005210:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
80005212:	4c f4       	ld.w %d15,[%a15]16
80005214:	96 01       	or %d15,1
80005216:	68 4f       	st.w [%a15]16,%d15
    Ifx_Fifo_clear(asclin->rx);
80005218:	99 44 08 00 	ld.a %a4,[%a4]8
8000521c:	1d 00 ad 19 	j 80008576 <Ifx_Fifo_clear>

80005220 <IfxAsclin_Asc_clearTx>:
}


void IfxAsclin_Asc_clearTx(IfxAsclin_Asc *asclin)
{
80005220:	40 4f       	mov.aa %a15,%a4
    Ifx_Fifo_clear(asclin->tx);
80005222:	99 44 04 00 	ld.a %a4,[%a4]4
80005226:	6d 00 a8 19 	call 80008576 <Ifx_Fifo_clear>
    IfxAsclin_flushTxFifo(asclin->asclin);
8000522a:	c8 0f       	ld.a %a15,[%a15]0
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
8000522c:	4c f3       	ld.w %d15,[%a15]12
8000522e:	96 01       	or %d15,1
80005230:	68 3f       	st.w [%a15]12,%d15
80005232:	00 90       	ret 

80005234 <IfxAsclin_Asc_read>:
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
80005234:	99 44 08 00 	ld.a %a4,[%a4]8
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
80005238:	0b 45 10 68 	mov %e6,%d5,%d4
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
8000523c:	94 64       	ld.h %d4,[%a6]
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
8000523e:	40 6f       	mov.aa %a15,%a6
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
80005240:	6d 00 e0 18 	call 80008400 <Ifx_Fifo_read>

    *count -= left;
80005244:	8c f0       	ld.h %d15,[%a15]0
80005246:	a2 2f       	sub %d15,%d2
80005248:	a8 0f       	st.h [%a15]0,%d15

    return left == 0;
}
8000524a:	8b 02 00 22 	eq %d2,%d2,0
8000524e:	00 90       	ret 

80005250 <IfxAsclin_Asc_isrTransmit>:
    }
}

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
80005250:	20 18       	sub.a %sp,24
80005252:	40 4f       	mov.aa %a15,%a4
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80005254:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
80005258:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000525c:	0d 00 40 03 	disable 
80005260:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80005262:	85 f5 10 00 	ld.w %d5,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005266:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000526a:	02 52       	mov %d2,%d5
8000526c:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80005270:	76 43       	jz %d4,80005276 <IfxAsclin_Asc_isrTransmit+0x26>
    {
        __enable();
80005272:	0d 00 00 03 	enable 
    asclin->txTimestamp = IfxStm_now();
80005276:	89 f2 54 09 	st.d [%a15]20,%e2
    asclin->sendCount++;

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
8000527a:	c8 14       	ld.a %a4,[%a15]4

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
    asclin->txTimestamp = IfxStm_now();
    asclin->sendCount++;
8000527c:	4c f4       	ld.w %d15,[%a15]16
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
8000527e:	c9 44 04 00 	ld.h %d4,[%a4]4
80005282:	c2 1f       	add %d15,1
80005284:	68 4f       	st.w [%a15]16,%d15

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005286:	df 04 32 00 	jeq %d4,0,800052ea <IfxAsclin_Asc_isrTransmit+0x9a>
    {

        switch (asclin->dataBufferMode)
8000528a:	0c ff       	ld.bu %d15,[%a15]15
8000528c:	6e 03       	jz %d15,80005292 <IfxAsclin_Asc_isrTransmit+0x42>
8000528e:	9e 1d       	jeq %d15,1,800052c8 <IfxAsclin_Asc_isrTransmit+0x78>
80005290:	00 90       	ret 
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
80005292:	c8 02       	ld.a %a2,[%a15]0
        case Ifx_DataBufferMode_normal:
        {

            uint8          ascData[16];
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;
80005294:	2c a7       	st.b [%sp]7,%d15

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/
80005296:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
8000529a:	4c 23       	ld.w %d15,[%a2]12
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
8000529c:	d2 06       	mov %e6,0
8000529e:	37 0f 65 f8 	extr.u %d15,%d15,16,5
800052a2:	d9 a5 08 00 	lea %a5,[%sp]8
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
800052a6:	2c a7       	st.b [%sp]7,%d15

            i_count          = (16 - hw_tx_fill_level);
800052a8:	0c a7       	ld.bu %d15,[%sp]7
800052aa:	8b 0f 01 f1 	rsub %d15,%d15,16
800052ae:	37 0f 70 f0 	extr.u %d15,%d15,0,16
800052b2:	0b 4f 90 f1 	min.u %d15,%d15,%d4
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
800052b6:	37 0f 50 40 	extr %d4,%d15,0,16
800052ba:	6d 00 a3 18 	call 80008400 <Ifx_Fifo_read>
            IfxAsclin_write8(asclin->asclin, &ascData[0], i_count);
800052be:	c8 04       	ld.a %a4,[%a15]0
800052c0:	d9 a5 08 00 	lea %a5,[%sp]8
800052c4:	02 f4       	mov %d4,%d15
800052c6:	3c 10       	j 800052e6 <IfxAsclin_Asc_isrTransmit+0x96>
        {

            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
800052c8:	d2 06       	mov %e6,0
800052ca:	d9 a5 08 00 	lea %a5,[%sp]8
800052ce:	3b c0 00 40 	mov %d4,12
800052d2:	6d 00 97 18 	call 80008400 <Ifx_Fifo_read>

            ascData = packedData.data;
800052d6:	39 af 10 00 	ld.bu %d15,[%sp]16
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
800052da:	c8 04       	ld.a %a4,[%a15]0
            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);

            ascData = packedData.data;
800052dc:	d9 a5 18 00 	lea %a5,[%sp]24
800052e0:	89 5f 2f f4 	st.b [+%a5]-17,%d15
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
800052e4:	82 14       	mov %d4,1
        }
        break;
800052e6:	1d ff e0 fe 	j 800050a6 <IfxAsclin_write8>
    }
    else
    {

        /* Transmit buffer is empty */
        asclin->txInProgress = FALSE;
800052ea:	28 c4       	st.b [%a15]12,%d4
800052ec:	00 90       	ret 

800052ee <IfxAsclin_Asc_isrReceive>:

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
800052ee:	0c 4f       	ld.bu %d15,[%a4]15
    }
}


void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
800052f0:	20 20       	sub.a %sp,32
800052f2:	40 4f       	mov.aa %a15,%a4
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
800052f4:	6e 34       	jz %d15,8000535c <IfxAsclin_Asc_isrReceive+0x6e>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
800052f6:	82 18       	mov %d8,1

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
800052f8:	df 1f 45 80 	jne %d15,1,80005382 <IfxAsclin_Asc_isrReceive+0x94>
    }
    case Ifx_DataBufferMode_timeStampSingle:
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
800052fc:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->RXFIFOCON.B.FILL;
800052fe:	4c 24       	ld.w %d15,[%a2]16
80005300:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005304:	6e 2b       	jz %d15,8000535a <IfxAsclin_Asc_isrReceive+0x6c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80005306:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
8000530a:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000530e:	0d 00 40 03 	disable 
80005312:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80005314:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005318:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000531c:	8f 02 40 21 	or %d2,%d2,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80005320:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80005324:	76 33       	jz %d3,8000532a <IfxAsclin_Asc_isrReceive+0x3c>
    {
        __enable();
80005326:	0d 00 00 03 	enable 
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
8000532a:	c8 04       	ld.a %a4,[%a15]0
8000532c:	d9 a5 10 00 	lea %a5,[%sp]16
80005330:	82 14       	mov %d4,1
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
80005332:	78 02       	st.w [%sp]8,%d15
80005334:	59 a2 04 00 	st.w [%sp]4,%d2
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
80005338:	6d ff 7a fd 	call 80004e2c <IfxAsclin_read8>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000533c:	c8 24       	ld.a %a4,[%a15]8

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
8000533e:	39 af 10 00 	ld.bu %d15,[%sp]16

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
80005342:	d2 06       	mov %e6,0
80005344:	d9 a5 04 00 	lea %a5,[%sp]4
80005348:	3b c0 00 40 	mov %d4,12

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
8000534c:	2c ac       	st.b [%sp]12,%d15

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000534e:	6d 00 a7 19 	call 8000869c <Ifx_Fifo_write>
80005352:	df 02 d5 7f 	jeq %d2,0,800052fc <IfxAsclin_Asc_isrReceive+0xe>
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
80005356:	28 d8       	st.b [%a15]13,%d8
80005358:	3c d2       	j 800052fc <IfxAsclin_Asc_isrReceive+0xe>
8000535a:	00 90       	ret 
    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
    {
        uint8 count;
        count = IfxAsclin_getRxFifoFillLevel(asclin->asclin);
8000535c:	d4 44       	ld.a %a4,[%a4]
        IfxAsclin_read8(asclin->asclin, &ascData[0], count);
8000535e:	d9 a5 10 00 	lea %a5,[%sp]16
80005362:	4c 44       	ld.w %d15,[%a4]16
80005364:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005368:	02 f4       	mov %d4,%d15
8000536a:	6d ff 61 fd 	call 80004e2c <IfxAsclin_read8>

        if (Ifx_Fifo_write(asclin->rx, &ascData[0], count, TIME_NULL) != 0)
8000536e:	c8 24       	ld.a %a4,[%a15]8
80005370:	d2 06       	mov %e6,0
80005372:	d9 a5 10 00 	lea %a5,[%sp]16
80005376:	02 f4       	mov %d4,%d15
80005378:	6d 00 92 19 	call 8000869c <Ifx_Fifo_write>
8000537c:	76 23       	jz %d2,80005382 <IfxAsclin_Asc_isrReceive+0x94>
        {
            /* Receive buffer is full, data is discard */
            asclin->rxSwFifoOverflow = TRUE;
8000537e:	82 1f       	mov %d15,1
80005380:	28 df       	st.b [%a15]13,%d15
80005382:	00 90       	ret 

80005384 <IfxAsclin_Asc_blockingRead>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
80005384:	20 08       	sub.a %sp,8
    Ifx_SizeT count = 1;
80005386:	82 1f       	mov %d15,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
80005388:	40 4f       	mov.aa %a15,%a4
    Ifx_SizeT count = 1;
8000538a:	ac a3       	st.h [%sp]6,%d15
    uint8     data;

    while (IfxAsclin_Asc_read(asclin, &data, &count, TIME_INFINITE) != TRUE)
8000538c:	82 f4       	mov %d4,-1
8000538e:	40 f4       	mov.aa %a4,%a15
80005390:	d9 a5 05 00 	lea %a5,[%sp]5
80005394:	d9 a6 06 00 	lea %a6,[%sp]6
80005398:	9b 04 00 58 	addih %d5,%d4,32768
8000539c:	6d ff 4c ff 	call 80005234 <IfxAsclin_Asc_read>
800053a0:	df 12 f6 ff 	jne %d2,1,8000538c <IfxAsclin_Asc_blockingRead+0x8>
    {}

    return data;
}
800053a4:	39 a2 05 00 	ld.bu %d2,[%sp]5
800053a8:	00 90       	ret 

800053aa <IfxAsclin_Asc_disableModule>:
}


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
800053aa:	cc 40       	ld.a %a15,[%a4]0
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
800053ac:	6d 00 c5 0f 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
800053b0:	02 24       	mov %d4,%d2


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
800053b2:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
800053b4:	6d 00 c1 0e 	call 80007136 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
800053b8:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclinSFR); /* disabling the module */
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
800053ba:	02 f4       	mov %d4,%d15
800053bc:	8f 12 40 21 	or %d2,%d2,1
800053c0:	68 02       	st.w [%a15]0,%d2
800053c2:	1d 00 ef 0f 	j 800073a0 <IfxScuWdt_setCpuEndinit>

800053c6 <IfxAsclin_Asc_initModule>:
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
800053c6:	cc 50       	ld.a %a15,[%a5]0
    return &asclin->tx->eventWriter;
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
800053c8:	40 4e       	mov.aa %a14,%a4
800053ca:	40 5c       	mov.aa %a12,%a5
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
    IfxAsclin_Status status    = IfxAsclin_Status_noError;

    asclin->asclin = asclinSFR;                                         /* adding register pointer to module handler*/
800053cc:	ec 40       	st.a [%a4]0,%a15

    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
800053ce:	40 f4       	mov.aa %a4,%a15
800053d0:	6d ff 71 fc 	call 80004cb2 <IfxAsclin_enableModule>
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
800053d4:	40 f4       	mov.aa %a4,%a15
800053d6:	82 04       	mov %d4,0
800053d8:	6d ff 59 fd 	call 80004e8a <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
800053dc:	4c f6       	ld.w %d15,[%a15]24
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
800053de:	40 f4       	mov.aa %a4,%a15
800053e0:	b7 0f 02 f8 	insert %d15,%d15,0,16,2
800053e4:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
800053e6:	8c c4       	ld.h %d15,[%a12]8
800053e8:	48 52       	ld.w %d2,[%a15]20
800053ea:	c2 ff       	add %d15,-1
800053ec:	37 f2 0c f0 	insert %d15,%d2,%d15,0,12
800053f0:	68 5f       	st.w [%a15]20,%d15
800053f2:	39 c4 28 00 	ld.bu %d4,[%a12]40
800053f6:	6d ff 4a fd 	call 80004e8a <IfxAsclin_setClockSource>
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
800053fa:	40 f4       	mov.aa %a4,%a15
800053fc:	19 c4 04 00 	ld.w %d4,[%a12]4
80005400:	39 c5 0a 00 	ld.bu %d5,[%a12]10
80005404:	39 c6 0d 00 	ld.bu %d6,[%a12]13
80005408:	39 c7 0c 00 	ld.bu %d7,[%a12]12
8000540c:	6d ff 79 fd 	call 80004efe <IfxAsclin_setBitTiming>
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
80005410:	40 f4       	mov.aa %a4,%a15
80005412:	82 04       	mov %d4,0
    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
80005414:	02 29       	mov %d9,%d2
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
80005416:	6d ff 3a fd 	call 80004e8a <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.LB = enable ? 1 : 0;
8000541a:	39 c2 38 00 	ld.bu %d2,[%a12]56
8000541e:	7b 00 00 f1 	movh %d15,4096
80005422:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80005426:	4c f1       	ld.w %d15,[%a15]4
80005428:	b7 0f 01 fe 	insert %d15,%d15,0,28,1
8000542c:	a6 2f       	or %d15,%d2
8000542e:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FRAMECON.B.PEN = enable ? 1 : 0;
80005430:	39 c2 14 00 	ld.bu %d2,[%a12]20
80005434:	7b 00 00 f4 	movh %d15,16384
80005438:	ab 0f 80 22 	sel %d2,%d2,%d15,0
8000543c:	4c f6       	ld.w %d15,[%a15]24
8000543e:	b7 0f 01 ff 	insert %d15,%d15,0,30,1
80005442:	a6 2f       	or %d15,%d2
80005444:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type)
{
    asclin->FRAMECON.B.ODD = type;
80005446:	48 62       	ld.w %d2,[%a15]24
80005448:	39 cf 12 00 	ld.bu %d15,[%a12]18
8000544c:	37 f2 81 ff 	insert %d15,%d2,%d15,31,1
80005450:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit)
{
    asclin->FRAMECON.B.STOP = stopBit;
80005452:	48 62       	ld.w %d2,[%a15]24
80005454:	0c cf       	ld.bu %d15,[%a12]15
80005456:	37 f2 83 f4 	insert %d15,%d2,%d15,9,3
8000545a:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir)
{
    asclin->FRAMECON.B.MSB = dir;
8000545c:	48 62       	ld.w %d2,[%a15]24
8000545e:	39 cf 11 00 	ld.bu %d15,[%a12]17
80005462:	67 f2 1c f0 	ins.t %d15,%d2,28,%d15,0
80005466:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
{
    asclin->DATCON.B.DATLEN = length;
80005468:	48 72       	ld.w %d2,[%a15]28
8000546a:	39 cf 13 00 	ld.bu %d15,[%a12]19
8000546e:	37 f2 04 f0 	insert %d15,%d2,%d15,0,4
80005472:	68 7f       	st.w [%a15]28,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width)
{
    asclin->TXFIFOCON.B.INW = width;
80005474:	48 32       	ld.w %d2,[%a15]12
80005476:	39 cf 16 00 	ld.bu %d15,[%a12]22
8000547a:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
8000547e:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width)
{
    asclin->RXFIFOCON.B.OUTW = width;
80005480:	48 42       	ld.w %d2,[%a15]16
80005482:	39 cf 17 00 	ld.bu %d15,[%a12]23
80005486:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
8000548a:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
{
    asclin->FRAMECON.B.IDLE = delay;
8000548c:	48 62       	ld.w %d2,[%a15]24
8000548e:	0c ce       	ld.bu %d15,[%a12]14
80005490:	37 f2 03 f3 	insert %d15,%d2,%d15,6,3
80005494:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level)
{
    asclin->TXFIFOCON.B.INTLEVEL = __minu(level, 15);
80005496:	39 c2 18 00 	ld.bu %d2,[%a12]24
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000549a:	da 0f       	mov %d15,15
8000549c:	0b f2 90 21 	min.u %d2,%d2,%d15
800054a0:	48 33       	ld.w %d3,[%a15]12
800054a2:	37 23 04 24 	insert %d2,%d3,%d2,8,4
800054a6:	68 32       	st.w [%a15]12,%d2
}


IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level)
{
    asclin->RXFIFOCON.B.INTLEVEL = __minu(level, 15);
800054a8:	39 c2 19 00 	ld.bu %d2,[%a12]25
800054ac:	0b f2 90 f1 	min.u %d15,%d2,%d15
800054b0:	48 42       	ld.w %d2,[%a15]16
800054b2:	37 f2 04 f4 	insert %d15,%d2,%d15,8,4
800054b6:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
800054b8:	39 cf 10 00 	ld.bu %d15,[%a12]16
800054bc:	48 62       	ld.w %d2,[%a15]24
800054be:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
800054c2:	68 6f       	st.w [%a15]24,%d15
    IfxAsclin_setTxFifoInterruptLevel(asclinSFR, config->fifo.txFifoInterruptLevel); /* setting Tx FIFO level at which a Tx interrupt will be triggered*/
    IfxAsclin_setRxFifoInterruptLevel(asclinSFR, config->fifo.rxFifoInterruptLevel); /* setting Rx FIFO interrupt level at which a Rx interrupt will be triggered*/
    IfxAsclin_setFrameMode(asclinSFR, config->frame.frameMode);                      /* selecting the frame mode*/

    /* Pin mapping */
    const IfxAsclin_Asc_Pins *pins = config->pins;
800054c4:	99 cd 24 00 	ld.a %a13,[%a12]36

    if (pins != NULL_PTR)
800054c8:	bd 0d 81 00 	jz.a %a13,800055ca <IfxAsclin_Asc_initModule+0x204>
    {
        IfxAsclin_Cts_In *cts = pins->cts;
800054cc:	4c d0       	ld.w %d15,[%a13]0

        if (cts != NULL_PTR)
800054ce:	6e 27       	jz %d15,8000551c <IfxAsclin_Asc_initModule+0x156>
}


IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (cts->pin.port != NULL_PTR)
800054d0:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initCtsPin(cts, pins->ctsMode, pins->pinDriver);
800054d2:	79 d5 04 00 	ld.b %d5,[%a13]4
800054d6:	99 24 04 00 	ld.a %a4,[%a2]4
800054da:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800054de:	bd 04 1f 00 	jz.a %a4,8000551c <IfxAsclin_Asc_initModule+0x156>
800054e2:	39 24 08 00 	ld.bu %d4,[%a2]8
800054e6:	8f f5 0f 51 	and %d5,%d5,255
800054ea:	6d 00 ba 03 	call 80005c5e <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
800054ee:	60 f3       	mov.a %a3,%d15
800054f0:	02 85       	mov %d5,%d8
800054f2:	99 34 04 00 	ld.a %a4,[%a3]4
800054f6:	39 34 08 00 	ld.bu %d4,[%a3]8
800054fa:	6d 00 30 04 	call 80005d5a <IfxPort_setPinPadDriver>
        IfxAsclin_enableCts(cts->module, TRUE);
800054fe:	60 f3       	mov.a %a3,%d15
80005500:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.CTSEN = enable ? 1 : 0;
80005502:	19 22 04 00 	ld.w %d2,[%a2]4
80005506:	b7 f2 81 2e 	insert %d2,%d2,15,29,1
8000550a:	59 22 04 00 	st.w [%a2]4,%d2
    if (cts->pin.port != NULL_PTR)
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
        IfxAsclin_enableCts(cts->module, TRUE);
        IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
8000550e:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
{
    asclin->IOCR.B.CTS = ctsi;
80005510:	0c 3c       	ld.bu %d15,[%a3]12
80005512:	19 22 04 00 	ld.w %d2,[%a2]4
80005516:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
8000551a:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rx_In *rx = pins->rx;
8000551c:	4c d2       	ld.w %d15,[%a13]8

        if (rx != NULL_PTR)
8000551e:	6e 20       	jz %d15,8000555e <IfxAsclin_Asc_initModule+0x198>
}


IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (rx->pin.port != NULL_PTR)
80005520:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initRxPin(rx, pins->rxMode, pins->pinDriver);
80005522:	79 d5 0c 00 	ld.b %d5,[%a13]12
80005526:	99 24 04 00 	ld.a %a4,[%a2]4
8000552a:	39 d8 1d 00 	ld.bu %d8,[%a13]29
8000552e:	bd 04 18 00 	jz.a %a4,8000555e <IfxAsclin_Asc_initModule+0x198>
80005532:	39 24 08 00 	ld.bu %d4,[%a2]8
80005536:	8f f5 0f 51 	and %d5,%d5,255
8000553a:	6d 00 92 03 	call 80005c5e <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
8000553e:	60 f3       	mov.a %a3,%d15
80005540:	02 85       	mov %d5,%d8
80005542:	99 34 04 00 	ld.a %a4,[%a3]4
80005546:	39 34 08 00 	ld.bu %d4,[%a3]8
8000554a:	6d 00 08 04 	call 80005d5a <IfxPort_setPinPadDriver>
        IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
8000554e:	60 f3       	mov.a %a3,%d15
80005550:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti)
{
    asclin->IOCR.B.ALTI = alti;
80005552:	0c 3c       	ld.bu %d15,[%a3]12
80005554:	19 22 04 00 	ld.w %d2,[%a2]4
80005558:	37 f2 03 f0 	insert %d15,%d2,%d15,0,3
8000555c:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rts_Out *rts = pins->rts;
8000555e:	4c d4       	ld.w %d15,[%a13]16

        if (rts != NULL_PTR)
80005560:	6e 1a       	jz %d15,80005594 <IfxAsclin_Asc_initModule+0x1ce>
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
80005562:	60 f2       	mov.a %a2,%d15
80005564:	39 d2 14 00 	ld.bu %d2,[%a13]20
80005568:	39 23 0c 00 	ld.bu %d3,[%a2]12
8000556c:	99 24 04 00 	ld.a %a4,[%a2]4
80005570:	0f 23 a0 50 	or %d5,%d3,%d2
80005574:	39 24 08 00 	ld.bu %d4,[%a2]8
80005578:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initRtsPin(rts, pins->rtsMode, pins->pinDriver);
8000557c:	39 d8 1d 00 	ld.bu %d8,[%a13]29
80005580:	6d 00 6f 03 	call 80005c5e <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
    IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
80005584:	60 f3       	mov.a %a3,%d15
80005586:	02 85       	mov %d5,%d8
80005588:	99 34 04 00 	ld.a %a4,[%a3]4
8000558c:	39 34 08 00 	ld.bu %d4,[%a3]8
80005590:	6d 00 e5 03 	call 80005d5a <IfxPort_setPinPadDriver>
        }

        IfxAsclin_Tx_Out *tx = pins->tx;
80005594:	4c d6       	ld.w %d15,[%a13]24

        if (tx != NULL_PTR)
80005596:	6e 1a       	jz %d15,800055ca <IfxAsclin_Asc_initModule+0x204>
80005598:	60 f2       	mov.a %a2,%d15
8000559a:	39 d2 1c 00 	ld.bu %d2,[%a13]28
8000559e:	39 23 0c 00 	ld.bu %d3,[%a2]12
800055a2:	99 24 04 00 	ld.a %a4,[%a2]4
800055a6:	0f 23 a0 50 	or %d5,%d3,%d2
800055aa:	39 24 08 00 	ld.bu %d4,[%a2]8
800055ae:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initTxPin(tx, pins->txMode, pins->pinDriver);
800055b2:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800055b6:	6d 00 54 03 	call 80005c5e <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
    IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
800055ba:	60 f3       	mov.a %a3,%d15
800055bc:	02 85       	mov %d5,%d8
800055be:	99 34 04 00 	ld.a %a4,[%a3]4
800055c2:	39 34 08 00 	ld.bu %d4,[%a3]8
800055c6:	6d 00 ca 03 	call 80005d5a <IfxPort_setPinPadDriver>
        }
    }

    IfxAsclin_setClockSource(asclinSFR, config->clockSource); /* select the clock source*/
800055ca:	40 f4       	mov.aa %a4,%a15
800055cc:	39 c4 28 00 	ld.bu %d4,[%a12]40
800055d0:	6d ff 5d fc 	call 80004e8a <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSENABLE.U = 0x00000000;
800055d4:	82 0f       	mov %d15,0
800055d6:	59 ff 00 10 	st.w [%a15]64,%d15
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
800055da:	82 f2       	mov %d2,-1
800055dc:	68 f2       	st.w [%a15]60,%d2

    IfxAsclin_disableAllFlags(asclinSFR);                     /* disable all flags */
    IfxAsclin_clearAllFlags(asclinSFR);                       /* clear all flags */

    /* HW error flags */
    asclin->errorFlags.ALL = 0;
800055de:	2c ee       	st.b [%a14]14,%d15

    if (config->errorFlags.flags.parityError)
800055e0:	4c ca       	ld.w %d15,[%a12]40
800055e2:	2e 87       	jz.t %d15,8,800055f0 <IfxAsclin_Asc_initModule+0x22a>
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
800055e4:	19 ff 00 10 	ld.w %d15,[%a15]64
800055e8:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
800055ec:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableParityErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.frameError)
800055f0:	4c ca       	ld.w %d15,[%a12]40
800055f2:	2e 97       	jz.t %d15,9,80005600 <IfxAsclin_Asc_initModule+0x23a>
}


IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
800055f4:	19 ff 00 10 	ld.w %d15,[%a15]64
800055f8:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800055fc:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableFrameErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoOverflow)
80005600:	4c ca       	ld.w %d15,[%a12]40
80005602:	2e a7       	jz.t %d15,10,80005610 <IfxAsclin_Asc_initModule+0x24a>
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
80005604:	19 ff 00 10 	ld.w %d15,[%a15]64
80005608:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
8000560c:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoOverflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoUnderflow)
80005610:	4c ca       	ld.w %d15,[%a12]40
80005612:	2e b7       	jz.t %d15,11,80005620 <IfxAsclin_Asc_initModule+0x25a>
}


IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
80005614:	19 ff 00 10 	ld.w %d15,[%a15]64
80005618:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
8000561c:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoUnderflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.txFifoOverflow)
80005620:	4c ca       	ld.w %d15,[%a12]40
80005622:	2e c7       	jz.t %d15,12,80005630 <IfxAsclin_Asc_initModule+0x26a>
}


IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
80005624:	19 ff 00 10 	ld.w %d15,[%a15]64
80005628:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000562c:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableTxFifoOverflowFlag(asclinSFR, TRUE);
    }

    /* transmission flags */
    asclin->rxSwFifoOverflow = FALSE;
80005630:	82 0f       	mov %d15,0
80005632:	2c ed       	st.b [%a14]13,%d15
    asclin->txInProgress     = FALSE;
80005634:	2c ec       	st.b [%a14]12,%d15

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
80005636:	d2 04       	mov %e4,0
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
80005638:	39 c3 39 00 	ld.bu %d3,[%a12]57
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;
8000563c:	82 0f       	mov %d15,0
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
8000563e:	89 e4 54 09 	st.d [%a14]20,%e4
    asclin->sendCount      = 0;
80005642:	6c e4       	st.w [%a14]16,%d15
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
80005644:	e9 e3 0f 00 	st.b [%a14]15,%d3
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
        elementSize = 1;
80005648:	82 1f       	mov %d15,1
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
8000564a:	76 34       	jz %d3,80005652 <IfxAsclin_Asc_initModule+0x28c>
        break;
    case Ifx_DataBufferMode_timeStampSingle:
        elementSize = sizeof(Ifx_DataBufferMode_TimeStampSingle);
        break;
    default:
        elementSize = 0;
8000564c:	ba 13       	eq %d15,%d3,1
8000564e:	ab cf a0 ff 	seln %d15,%d15,%d15,12
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
80005652:	99 c4 2c 00 	ld.a %a4,[%a12]44
80005656:	c9 c4 2a 00 	ld.h %d4,[%a12]42
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
8000565a:	02 f5       	mov %d5,%d15
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
8000565c:	bc 44       	jz.a %a4,80005664 <IfxAsclin_Asc_initModule+0x29e>
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
8000565e:	6d 00 36 16 	call 800082ca <Ifx_Fifo_init>
80005662:	3c 03       	j 80005668 <IfxAsclin_Asc_initModule+0x2a2>
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
80005664:	6d 00 50 16 	call 80008304 <Ifx_Fifo_create>
    }

    if (config->rxBuffer != NULL_PTR)
80005668:	99 c4 34 00 	ld.a %a4,[%a12]52
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
8000566c:	b5 e2 04 00 	st.a [%a14]4,%a2
80005670:	c9 c4 30 00 	ld.h %d4,[%a12]48
    }

    if (config->rxBuffer != NULL_PTR)
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
80005674:	02 f5       	mov %d5,%d15
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
    }

    if (config->rxBuffer != NULL_PTR)
80005676:	bc 44       	jz.a %a4,8000567e <IfxAsclin_Asc_initModule+0x2b8>
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
80005678:	6d 00 29 16 	call 800082ca <Ifx_Fifo_init>
8000567c:	3c 03       	j 80005682 <IfxAsclin_Asc_initModule+0x2bc>
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
8000567e:	6d 00 43 16 	call 80008304 <Ifx_Fifo_create>
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;
80005682:	39 cf 22 00 	ld.bu %d15,[%a12]34

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
80005686:	b9 c2 1e 00 	ld.hu %d2,[%a12]30
8000568a:	8b 3f 00 82 	eq %d8,%d15,3
8000568e:	02 83       	mov %d3,%d8
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
80005690:	b5 e2 08 00 	st.a [%a14]8,%a2
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
80005694:	8b 02 00 35 	or.ne %d3,%d2,0
80005698:	df 03 1e 00 	jeq %d3,0,800056d4 <IfxAsclin_Asc_initModule+0x30e>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerRx(asclinSFR);
8000569c:	40 f4       	mov.aa %a4,%a15
8000569e:	6d ff a1 fb 	call 80004de0 <IfxAsclin_getSrcPointerRx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
800056a2:	54 22       	ld.w %d2,[%a2]
800056a4:	39 c3 1e 00 	ld.bu %d3,[%a12]30
800056a8:	8f f2 cf 21 	andn %d2,%d2,255
800056ac:	a6 32       	or %d2,%d3
800056ae:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800056b0:	54 22       	ld.w %d2,[%a2]
800056b2:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
800056b6:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800056b8:	54 22       	ld.w %d2,[%a2]
800056ba:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
800056be:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
800056c0:	19 f2 00 10 	ld.w %d2,[%a15]64
800056c4:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
800056c8:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
800056cc:	54 22       	ld.w %d2,[%a2]
800056ce:	b7 f2 01 25 	insert %d2,%d2,15,10,1
800056d2:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.rxPriority);
        IfxAsclin_enableRxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if ((config->interrupt.txPriority > 0) || (tos == IfxSrc_Tos_dma))
800056d4:	b9 c2 1c 00 	ld.hu %d2,[%a12]28
800056d8:	8b 02 00 85 	or.ne %d8,%d2,0
800056dc:	df 08 1e 00 	jeq %d8,0,80005718 <IfxAsclin_Asc_initModule+0x352>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerTx(asclinSFR);
800056e0:	40 f4       	mov.aa %a4,%a15
800056e2:	6d ff 89 fb 	call 80004df4 <IfxAsclin_getSrcPointerTx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
800056e6:	54 22       	ld.w %d2,[%a2]
800056e8:	39 c3 1c 00 	ld.bu %d3,[%a12]28
800056ec:	8f f2 cf 21 	andn %d2,%d2,255
800056f0:	a6 32       	or %d2,%d3
800056f2:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800056f4:	54 22       	ld.w %d2,[%a2]
800056f6:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
800056fa:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800056fc:	54 22       	ld.w %d2,[%a2]
800056fe:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
80005702:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
80005704:	19 f2 00 10 	ld.w %d2,[%a15]64
80005708:	b7 f2 81 2f 	insert %d2,%d2,15,31,1
8000570c:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80005710:	54 22       	ld.w %d2,[%a2]
80005712:	b7 f2 01 25 	insert %d2,%d2,15,10,1
80005716:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.txPriority);
        IfxAsclin_enableTxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if (config->interrupt.erPriority > 0) /*These interrupts are not serviced by dma*/
80005718:	b9 c2 20 00 	ld.hu %d2,[%a12]32
8000571c:	df 02 1e 00 	jeq %d2,0,80005758 <IfxAsclin_Asc_initModule+0x392>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerEr(asclinSFR);
80005720:	40 f4       	mov.aa %a4,%a15
80005722:	6d ff 55 fb 	call 80004dcc <IfxAsclin_getSrcPointerEr>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80005726:	54 22       	ld.w %d2,[%a2]
80005728:	39 c3 20 00 	ld.bu %d3,[%a12]32
8000572c:	8f f2 cf 21 	andn %d2,%d2,255
80005730:	a6 32       	or %d2,%d3
80005732:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80005734:	54 22       	ld.w %d2,[%a2]
80005736:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
8000573a:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
8000573c:	4c 20       	ld.w %d15,[%a2]0
8000573e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80005742:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80005744:	19 ff 00 10 	ld.w %d15,[%a15]64
80005748:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000574c:	59 ff 00 10 	st.w [%a15]64,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80005750:	4c 20       	ld.w %d15,[%a2]0
80005752:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80005756:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
80005758:	4c f4       	ld.w %d15,[%a15]16

    IfxAsclin_flushRxFifo(asclinSFR);              // flushing Rx FIFO
    IfxAsclin_flushTxFifo(asclinSFR);              // flushing Tx FIFO

    return status;
}
8000575a:	02 92       	mov %d2,%d9
8000575c:	96 02       	or %d15,2
8000575e:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
80005760:	4c f3       	ld.w %d15,[%a15]12
80005762:	96 02       	or %d15,2
80005764:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
80005766:	4c f4       	ld.w %d15,[%a15]16
80005768:	96 01       	or %d15,1
8000576a:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
8000576c:	4c f3       	ld.w %d15,[%a15]12
8000576e:	96 01       	or %d15,1
80005770:	68 3f       	st.w [%a15]12,%d15
80005772:	00 90       	ret 

80005774 <IfxAsclin_Asc_initModuleConfig>:

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
80005774:	82 12       	mov %d2,1
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
80005776:	7b 10 7e 34 	movh %d3,18401

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
8000577a:	e9 42 28 00 	st.b [%a4]40,%d2
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
8000577e:	82 12       	mov %d2,1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
80005780:	82 0f       	mov %d15,0

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
80005782:	f9 42 08 00 	st.h [%a4]8,%d2
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
80005786:	59 43 04 00 	st.w [%a4]4,%d3
    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
8000578a:	e9 42 0f 00 	st.b [%a4]15,%d2

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
8000578e:	82 33       	mov %d3,3
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
80005790:	e9 42 10 00 	st.b [%a4]16,%d2
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
80005794:	e9 42 16 00 	st.b [%a4]22,%d2
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
80005798:	e9 42 17 00 	st.b [%a4]23,%d2
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
8000579c:	82 f2       	mov %d2,-1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
8000579e:	e9 4f 38 00 	st.b [%a4]56,%d15

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
800057a2:	e9 43 0a 00 	st.b [%a4]10,%d3

    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
800057a6:	2c 4c       	st.b [%a4]12,%d15
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
800057a8:	e9 43 0d 00 	st.b [%a4]13,%d3
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
800057ac:	2c 4e       	st.b [%a4]14,%d15
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
800057ae:	e9 4f 11 00 	st.b [%a4]17,%d15
    config->frame.parityBit               = FALSE;                             /* disable parity*/
800057b2:	e9 4f 14 00 	st.b [%a4]20,%d15
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
800057b6:	e9 4f 12 00 	st.b [%a4]18,%d15
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
800057ba:	82 73       	mov %d3,7

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
800057bc:	e9 4f 18 00 	st.b [%a4]24,%d15
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
800057c0:	e9 4f 19 00 	st.b [%a4]25,%d15
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/
800057c4:	e9 4f 1a 00 	st.b [%a4]26,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
800057c8:	e9 42 29 00 	st.b [%a4]41,%d2
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
800057cc:	82 0f       	mov %d15,0

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
800057ce:	82 02       	mov %d2,0
}


void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;
800057d0:	f4 45       	st.a [%a4],%a5
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
800057d2:	e9 43 13 00 	st.b [%a4]19,%d3
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
800057d6:	ac 4f       	st.h [%a4]30,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
800057d8:	ac 4e       	st.h [%a4]28,%d15
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
800057da:	f9 4f 20 00 	st.h [%a4]32,%d15
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/
800057de:	e9 4f 22 00 	st.b [%a4]34,%d15

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
800057e2:	59 42 24 00 	st.w [%a4]36,%d2
    config->rxBuffer       = NULL_PTR;                                         /* Rx Fifo buffer*/
800057e6:	59 42 34 00 	st.w [%a4]52,%d2
    config->txBuffer       = NULL_PTR;                                         /* Tx Fifo buffer*/
800057ea:	59 42 2c 00 	st.w [%a4]44,%d2

    config->txBufferSize   = 0;                                                /* Rx Fifo buffer size*/
800057ee:	f9 42 2a 00 	st.h [%a4]42,%d2
    config->rxBufferSize   = 0;                                                /* Rx Fifo buffer size*/
800057f2:	f9 42 30 00 	st.h [%a4]48,%d2

    config->dataBufferMode = Ifx_DataBufferMode_normal;
800057f6:	e9 4f 39 00 	st.b [%a4]57,%d15
800057fa:	00 90       	ret 

800057fc <IfxAsclin_Asc_initiateTransmission>:
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
800057fc:	0c 4c       	ld.bu %d15,[%a4]12
    config->dataBufferMode = Ifx_DataBufferMode_normal;
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
800057fe:	20 10       	sub.a %sp,16
80005800:	40 4f       	mov.aa %a15,%a4
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
80005802:	ee 20       	jnz %d15,80005842 <IfxAsclin_Asc_initiateTransmission+0x46>
    {

        if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005804:	99 44 04 00 	ld.a %a4,[%a4]4
80005808:	8c 42       	ld.h %d15,[%a4]4
8000580a:	6e 1c       	jz %d15,80005842 <IfxAsclin_Asc_initiateTransmission+0x46>
        {
            uint8 data;

            asclin->txInProgress = TRUE;
8000580c:	82 1f       	mov %d15,1
8000580e:	28 cf       	st.b [%a15]12,%d15

            switch (asclin->dataBufferMode)
80005810:	0c ff       	ld.bu %d15,[%a15]15
80005812:	6e 0c       	jz %d15,8000582a <IfxAsclin_Asc_initiateTransmission+0x2e>
80005814:	de 11       	jne %d15,1,80005836 <IfxAsclin_Asc_initiateTransmission+0x3a>
            break;
            case Ifx_DataBufferMode_timeStampSingle:
            {

                Ifx_DataBufferMode_TimeStampSingle packedData;
                Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
80005816:	d2 06       	mov %e6,0
80005818:	d9 a5 04 00 	lea %a5,[%sp]4
8000581c:	3b c0 00 40 	mov %d4,12
80005820:	6d 00 f0 15 	call 80008400 <Ifx_Fifo_read>
                data = packedData.data;
80005824:	0c ac       	ld.bu %d15,[%sp]12
80005826:	2c a3       	st.b [%sp]3,%d15
80005828:	3c 07       	j 80005836 <IfxAsclin_Asc_initiateTransmission+0x3a>
            switch (asclin->dataBufferMode)
            {
            case Ifx_DataBufferMode_normal: // here
            {

                Ifx_Fifo_read(asclin->tx, &data, 1, TIME_NULL);
8000582a:	d2 06       	mov %e6,0
8000582c:	d9 a5 03 00 	lea %a5,[%sp]3
80005830:	82 14       	mov %d4,1
80005832:	6d 00 e7 15 	call 80008400 <Ifx_Fifo_read>
                data = packedData.data;
            }
            break;
            }

            IfxAsclin_write8(asclin->asclin, &data, 1);
80005836:	c8 04       	ld.a %a4,[%a15]0
80005838:	d9 a5 03 00 	lea %a5,[%sp]3
8000583c:	82 14       	mov %d4,1
8000583e:	6d ff 34 fc 	call 800050a6 <IfxAsclin_write8>
80005842:	00 90       	ret 

80005844 <IfxAsclin_Asc_write>:
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
80005844:	40 4f       	mov.aa %a15,%a4

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
80005846:	0c 4c       	ld.bu %d15,[%a4]12
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005848:	99 44 04 00 	ld.a %a4,[%a4]4

    if (*count != 0)
8000584c:	94 63       	ld.h %d3,[%a6]
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
8000584e:	0b 45 10 88 	mov %e8,%d5,%d4
80005852:	40 5d       	mov.aa %a13,%a5

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005854:	c9 44 18 00 	ld.h %d4,[%a4]24
#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
80005858:	82 12       	mov %d2,1
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;

    if (*count != 0)
8000585a:	df 03 25 00 	jeq %d3,0,800058a4 <IfxAsclin_Asc_write+0x60>
8000585e:	40 6c       	mov.aa %a12,%a6
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
80005860:	ee 13       	jnz %d15,80005886 <IfxAsclin_Asc_write+0x42>
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005862:	37 04 70 f0 	extr.u %d15,%d4,0,16

    if (*count != 0)
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
80005866:	7f 3f 10 00 	jge %d15,%d3,80005886 <IfxAsclin_Asc_write+0x42>
        {


            Ifx_Fifo_write(asclin->tx, data, tx_fifo_size, timeout); /*Fill upto the S/W FIFO size and initiate transmission*/
8000586a:	0b 89 10 68 	mov %e6,%d9,%d8
8000586e:	6d 00 17 17 	call 8000869c <Ifx_Fifo_write>
            IfxAsclin_Asc_initiateTransmission(asclin);
80005872:	40 f4       	mov.aa %a4,%a15
80005874:	6d ff c4 ff 	call 800057fc <IfxAsclin_Asc_initiateTransmission>

            left = Ifx_Fifo_write(asclin->tx, (((const uint8 *)data) + tx_fifo_size), (*count) - tx_fifo_size, timeout);
80005878:	94 c4       	ld.h %d4,[%a12]
8000587a:	c8 14       	ld.a %a4,[%a15]4
8000587c:	a2 f4       	sub %d4,%d15
8000587e:	10 d5       	addsc.a %a5,%a13,%d15,0
80005880:	37 04 50 40 	extr %d4,%d4,0,16
80005884:	3c 03       	j 8000588a <IfxAsclin_Asc_write+0x46>

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
80005886:	40 d5       	mov.aa %a5,%a13
80005888:	02 34       	mov %d4,%d3
8000588a:	0b 89 10 68 	mov %e6,%d9,%d8
8000588e:	6d 00 07 17 	call 8000869c <Ifx_Fifo_write>

            IfxAsclin_Asc_initiateTransmission(asclin);
80005892:	40 f4       	mov.aa %a4,%a15

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
80005894:	02 2f       	mov %d15,%d2

            IfxAsclin_Asc_initiateTransmission(asclin);
80005896:	6d ff b3 ff 	call 800057fc <IfxAsclin_Asc_initiateTransmission>
        }

        *count -= left;
8000589a:	94 c2       	ld.h %d2,[%a12]
8000589c:	a2 f2       	sub %d2,%d15
8000589e:	b4 c2       	st.h [%a12],%d2
        result  = left == 0;
800058a0:	8b 0f 00 22 	eq %d2,%d15,0

    }

    return result;
}
800058a4:	00 90       	ret 

800058a6 <IfxAsclin_Asc_blockingWrite>:
    return data;
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
800058a6:	20 10       	sub.a %sp,16
800058a8:	e9 a4 07 00 	st.b [%sp]7,%d4
    Ifx_SizeT count = 1;

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
800058ac:	82 f4       	mov %d4,-1
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
800058ae:	82 1f       	mov %d15,1

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
800058b0:	d9 a5 07 00 	lea %a5,[%sp]7
800058b4:	d9 a6 0e 00 	lea %a6,[%sp]14
800058b8:	9b 04 00 58 	addih %d5,%d4,32768
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
800058bc:	ac a7       	st.h [%sp]14,%d15

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
}
800058be:	1d ff c3 ff 	j 80005844 <IfxAsclin_Asc_write>

800058c2 <IfxAsclin_Asc_stdIfDPipeInit>:


boolean IfxAsclin_Asc_stdIfDPipeInit(IfxStdIf_DPipe *stdif, IfxAsclin_Asc *asclin)
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));
800058c2:	40 42       	mov.aa %a2,%a4
800058c4:	82 0f       	mov %d15,0
800058c6:	c5 0f 0b 10 	lea %a15,4b <_.+0x4a>
800058ca:	24 2f       	st.b [%a2+],%d15
800058cc:	fc ff       	loop %a15,800058ca <IfxAsclin_Asc_stdIfDPipeInit+0x8>

    /* Set the API link */
    stdif->driver         = asclin;
    stdif->write          = (IfxStdIf_DPipe_Write) & IfxAsclin_Asc_write;
800058ce:	7b 00 00 f8 	movh %d15,32768
800058d2:	1b 4f 84 f5 	addi %d15,%d15,22596
800058d6:	6c 42       	st.w [%a4]8,%d15
    stdif->read           = (IfxStdIf_DPipe_Read) & IfxAsclin_Asc_read;
800058d8:	7b 00 00 f8 	movh %d15,32768
800058dc:	1b 4f 23 f5 	addi %d15,%d15,21044
800058e0:	6c 43       	st.w [%a4]12,%d15
    stdif->getReadCount   = (IfxStdIf_DPipe_GetReadCount) & IfxAsclin_Asc_getReadCount;
800058e2:	7b 00 00 f8 	movh %d15,32768
800058e6:	1b 8f 0b f5 	addi %d15,%d15,20664
800058ea:	6c 44       	st.w [%a4]16,%d15
    stdif->getReadEvent   = (IfxStdIf_DPipe_GetReadEvent) & IfxAsclin_Asc_getReadEvent;
800058ec:	7b 00 00 f8 	movh %d15,32768
800058f0:	1b ef 0b f5 	addi %d15,%d15,20670
800058f4:	6c 45       	st.w [%a4]20,%d15
    stdif->getWriteCount  = (IfxStdIf_DPipe_GetWriteCount) & IfxAsclin_Asc_getWriteCount;
800058f6:	7b 00 00 f8 	movh %d15,32768
800058fa:	1b 4f 0d f5 	addi %d15,%d15,20692
800058fe:	6c 46       	st.w [%a4]24,%d15
    stdif->getWriteEvent  = (IfxStdIf_DPipe_GetWriteEvent) & IfxAsclin_Asc_getWriteEvent;
80005900:	7b 00 00 f8 	movh %d15,32768
80005904:	1b 2f 0e f5 	addi %d15,%d15,20706
80005908:	6c 47       	st.w [%a4]28,%d15
    stdif->canReadCount   = (IfxStdIf_DPipe_CanReadCount) & IfxAsclin_Asc_canReadCount;
8000590a:	7b 00 00 f8 	movh %d15,32768
8000590e:	1b 4f 16 f5 	addi %d15,%d15,20836
80005912:	6c 48       	st.w [%a4]32,%d15
    stdif->canWriteCount  = (IfxStdIf_DPipe_CanWriteCount) & IfxAsclin_Asc_canWriteCount;
80005914:	7b 00 00 f8 	movh %d15,32768
80005918:	1b 8f 20 f5 	addi %d15,%d15,21000
8000591c:	6c 49       	st.w [%a4]36,%d15
    stdif->flushTx        = (IfxStdIf_DPipe_FlushTx) & IfxAsclin_Asc_flushTx;
8000591e:	7b 00 00 f8 	movh %d15,32768
80005922:	1b cf 16 f5 	addi %d15,%d15,20844
80005926:	6c 4a       	st.w [%a4]40,%d15
    stdif->clearTx        = (IfxStdIf_DPipe_ClearTx) & IfxAsclin_Asc_clearTx;
80005928:	7b 00 00 f8 	movh %d15,32768
8000592c:	1b 0f 22 f5 	addi %d15,%d15,21024
80005930:	6c 4b       	st.w [%a4]44,%d15
    stdif->clearRx        = (IfxStdIf_DPipe_ClearRx) & IfxAsclin_Asc_clearRx;
80005932:	7b 00 00 f8 	movh %d15,32768
80005936:	1b 0f 21 f5 	addi %d15,%d15,21008
8000593a:	6c 4c       	st.w [%a4]48,%d15
    stdif->onReceive      = (IfxStdIf_DPipe_OnReceive) & IfxAsclin_Asc_isrReceive;
8000593c:	7b 00 00 f8 	movh %d15,32768
80005940:	1b ef 2e f5 	addi %d15,%d15,21230
80005944:	6c 4d       	st.w [%a4]52,%d15
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
80005946:	7b 00 00 f8 	movh %d15,32768
8000594a:	1b 0f 25 f5 	addi %d15,%d15,21072
8000594e:	6c 4e       	st.w [%a4]56,%d15
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
80005950:	7b 00 00 f8 	movh %d15,32768
80005954:	1b cf 0e f5 	addi %d15,%d15,20716
80005958:	6c 4f       	st.w [%a4]60,%d15
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
8000595a:	7b 00 00 f8 	movh %d15,32768
8000595e:	1b 8f 0c f5 	addi %d15,%d15,20680
80005962:	59 4f 00 10 	st.w [%a4]64,%d15
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
80005966:	7b 00 00 f8 	movh %d15,32768
8000596a:	1b ef 0c f5 	addi %d15,%d15,20686
8000596e:	59 4f 04 10 	st.w [%a4]68,%d15
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
80005972:	7b 00 00 f8 	movh %d15,32768
80005976:	1b ef 15 f5 	addi %d15,%d15,20830
8000597a:	59 4f 08 10 	st.w [%a4]72,%d15
    stdif->txDisabled     = FALSE;
8000597e:	82 0f       	mov %d15,0
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));

    /* Set the API link */
    stdif->driver         = asclin;
80005980:	f4 45       	st.a [%a4],%a5
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
    stdif->txDisabled     = FALSE;
80005982:	2c 44       	st.b [%a4]4,%d15
    return TRUE;
}
80005984:	82 12       	mov %d2,1
80005986:	00 90       	ret 

80005988 <IfxPort_getAddress>:
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
80005988:	91 00 00 28 	movh.a %a2,32768
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
8000598c:	82 05       	mov %d5,0
}


Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
8000598e:	82 02       	mov %d2,0
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
80005990:	d9 22 98 40 	lea %a2,[%a2]2328 <80000918 <IfxPort_cfg_indexMap>>
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
80005994:	8f f5 0f f1 	and %d15,%d5,255
80005998:	8b 02 00 32 	eq %d3,%d2,0
8000599c:	8b 0f 61 34 	and.lt.u %d3,%d15,16
800059a0:	76 3a       	jz %d3,800059b4 <IfxPort_getAddress+0x2c>
800059a2:	02 5f       	mov %d15,%d5
800059a4:	16 ff       	and %d15,255
    {
        if (IfxPort_cfg_indexMap[i].index == port)
800059a6:	d0 2f       	addsc.a %a15,%a2,%d15,3
800059a8:	82 02       	mov %d2,0
800059aa:	4c f1       	ld.w %d15,[%a15]4
800059ac:	7e 42       	jne %d15,%d4,800059b0 <IfxPort_getAddress+0x28>
        {
            module = IfxPort_cfg_indexMap[i].module;
800059ae:	48 02       	ld.w %d2,[%a15]0
800059b0:	c2 15       	add %d5,1
800059b2:	3c f1       	j 80005994 <IfxPort_getAddress+0xc>

        i++;
    }

    return module;
}
800059b4:	60 22       	mov.a %a2,%d2
800059b6:	00 90       	ret 

800059b8 <IfxPort_getIndex>:

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
    {
        if (IfxPort_cfg_indexMap[index].module == port)
800059b8:	91 00 00 38 	movh.a %a3,32768
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
800059bc:	82 0f       	mov %d15,0
    {
        if (IfxPort_cfg_indexMap[index].module == port)
800059be:	d9 33 98 40 	lea %a3,[%a3]2328 <80000918 <IfxPort_cfg_indexMap>>
800059c2:	a0 ff       	mov.a %a15,15
800059c4:	d0 32       	addsc.a %a2,%a3,%d15,3
800059c6:	d4 25       	ld.a %a5,[%a2]
800059c8:	7d 45 05 80 	jne.a %a5,%a4,800059d2 <IfxPort_getIndex+0x1a>
        {
            result = (IfxPort_Index)IfxPort_cfg_indexMap[index].index;
800059cc:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
800059d0:	00 90       	ret 
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
800059d2:	c2 1f       	add %d15,1
800059d4:	fc f8       	loop %a15,800059c4 <IfxPort_getIndex+0xc>
IfxPort_Index IfxPort_getIndex(Ifx_P *port)
{
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;
800059d6:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
800059d8:	00 90       	ret 

800059da <IfxPort_resetESR>:


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
800059da:	40 4f       	mov.aa %a15,%a4
800059dc:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800059de:	6d 00 ac 0c 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
800059e2:	02 24       	mov %d4,%d2
}


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800059e4:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
800059e6:	6d 00 a8 0b 	call 80007136 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 0);
800059ea:	82 12       	mov %d2,1
800059ec:	d9 f4 10 10 	lea %a4,[%a15]80
800059f0:	0f 82 00 20 	sh %d2,%d2,%d8

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
800059f4:	d2 06       	mov %e6,0
800059f6:	02 27       	mov %d7,%d2
800059f8:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
800059fc:	02 f4       	mov %d4,%d15
800059fe:	1d 00 d1 0c 	j 800073a0 <IfxScuWdt_setCpuEndinit>

80005a02 <IfxPort_disableEmergencyStop>:
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005a02:	91 00 00 38 	movh.a %a3,32768
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005a06:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005a08:	d9 33 98 60 	lea %a3,[%a3]2456 <80000998 <IfxPort_cfg_esrMasks>>
80005a0c:	a0 ff       	mov.a %a15,15
80005a0e:	d0 32       	addsc.a %a2,%a3,%d15,3
80005a10:	d4 25       	ld.a %a5,[%a2]
80005a12:	7d 54 0c 80 	jne.a %a4,%a5,80005a2a <IfxPort_disableEmergencyStop+0x28>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005a16:	b9 2f 04 00 	ld.hu %d15,[%a2]4
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
80005a1a:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005a1c:	57 0f 61 f4 	extr.u %d15,%d15,%d4,1
80005a20:	6e 08       	jz %d15,80005a30 <IfxPort_disableEmergencyStop+0x2e>
            {
                IfxPort_resetESR(port, pinIndex);
80005a22:	6d ff dc ff 	call 800059da <IfxPort_resetESR>
                result = TRUE;
80005a26:	82 12       	mov %d2,1
80005a28:	00 90       	ret 
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005a2a:	c2 1f       	add %d15,1
80005a2c:	fc f1       	loop %a15,80005a0e <IfxPort_disableEmergencyStop+0xc>
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
80005a2e:	82 02       	mov %d2,0
            break;
        }
    }

    return result;
}
80005a30:	00 90       	ret 

80005a32 <IfxPort_setESR>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
80005a32:	40 4f       	mov.aa %a15,%a4
80005a34:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a36:	6d 00 80 0c 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005a3a:	02 24       	mov %d4,%d2
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a3c:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005a3e:	6d 00 7c 0b 	call 80007136 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 1U << pinIndex);
80005a42:	82 12       	mov %d2,1
80005a44:	0f 82 00 20 	sh %d2,%d2,%d8
80005a48:	d9 f4 10 10 	lea %a4,[%a15]80
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005a4c:	53 12 40 60 	mul.u %e6,%d2,1

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005a50:	02 27       	mov %d7,%d2
80005a52:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
80005a56:	02 f4       	mov %d4,%d15
80005a58:	1d 00 a4 0c 	j 800073a0 <IfxScuWdt_setCpuEndinit>

80005a5c <IfxPort_enableEmergencyStop>:
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
80005a5c:	82 19       	mov %d9,1
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005a5e:	91 00 00 d8 	movh.a %a13,32768
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
80005a62:	40 4c       	mov.aa %a12,%a4
80005a64:	02 48       	mov %d8,%d4
80005a66:	0f 49 00 90 	sh %d9,%d9,%d4
    sint32  portIndex;
    boolean result = FALSE;
80005a6a:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005a6c:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005a6e:	d9 dd 98 60 	lea %a13,[%a13]2456 <80000998 <IfxPort_cfg_esrMasks>>
80005a72:	d0 df       	addsc.a %a15,%a13,%d15,3
80005a74:	c8 02       	ld.a %a2,[%a15]0
80005a76:	7d 2c 0b 80 	jne.a %a12,%a2,80005a8c <IfxPort_enableEmergencyStop+0x30>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005a7a:	b9 f3 04 00 	ld.hu %d3,[%a15]4
80005a7e:	26 93       	and %d3,%d9
80005a80:	76 36       	jz %d3,80005a8c <IfxPort_enableEmergencyStop+0x30>
            {
                IfxPort_setESR(port, pinIndex);
80005a82:	40 c4       	mov.aa %a4,%a12
80005a84:	02 84       	mov %d4,%d8
80005a86:	6d ff d6 ff 	call 80005a32 <IfxPort_setESR>
                result = TRUE;
80005a8a:	82 12       	mov %d2,1
boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005a8c:	c2 1f       	add %d15,1
80005a8e:	8b 0f 21 32 	ne %d3,%d15,16
80005a92:	df 03 f0 ff 	jne %d3,0,80005a72 <IfxPort_enableEmergencyStop+0x16>
            }
        }
    }

    return result;
}
80005a96:	00 90       	ret 

80005a98 <IfxPort_setGroupModeInput>:
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a98:	82 0f       	mov %d15,0
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode)
{
80005a9a:	20 20       	sub.a %sp,32
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a9c:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005a9e:	78 04       	st.w [%sp]16,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005aa0:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005aa2:	78 05       	st.w [%sp]20,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005aa4:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005aa6:	78 06       	st.w [%sp]24,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005aa8:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005aaa:	78 07       	st.w [%sp]28,%d15
80005aac:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005ab0:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
80005ab4:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005ab8:	3b 80 0f 70 	mov %d7,248
80005abc:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005ac0:	9f 0f 07 80 	jned %d15,0,80005ace <IfxPort_setGroupModeInput+0x36>
80005ac4:	d9 44 10 00 	lea %a4,[%a4]16
80005ac8:	82 0f       	mov %d15,0
80005aca:	a0 3f       	mov.a %a15,3
80005acc:	3c 1e       	j 80005b08 <IfxPort_setGroupModeInput+0x70>
    {
        if ((imask & (1U << i)) != 0)
80005ace:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005ad2:	df 02 19 00 	jeq %d2,0,80005b04 <IfxPort_setGroupModeInput+0x6c>
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005ad6:	8f 34 c0 31 	andn %d3,%d4,3
80005ada:	60 32       	mov.a %a2,%d3
80005adc:	d9 af 20 00 	lea %a15,[%sp]32
80005ae0:	30 2f       	add.a %a15,%a2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
80005ae2:	8f 34 00 21 	and %d2,%d4,3
80005ae6:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
80005ae8:	19 f0 f0 ff 	ld.w %d0,[%a15]-16
80005aec:	0f 27 00 30 	sh %d3,%d7,%d2
80005af0:	a6 03       	or %d3,%d0
80005af2:	59 f3 f0 ff 	st.w [%a15]-16,%d3
            iocrVal[index]  |= (mode) << shift;
80005af6:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
80005afa:	0f 26 00 20 	sh %d2,%d6,%d2
80005afe:	a6 32       	or %d2,%d3
80005b00:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005b04:	c2 14       	add %d4,1
80005b06:	3c dd       	j 80005ac0 <IfxPort_setGroupModeInput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
80005b08:	d9 a3 20 00 	lea %a3,[%sp]32
80005b0c:	90 32       	addsc.a %a2,%a3,%d15,2
80005b0e:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005b12:	76 47       	jz %d4,80005b20 <IfxPort_setGroupModeInput+0x88>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005b14:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005b18:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005b1a:	02 43       	mov %d3,%d4
80005b1c:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
80005b20:	c2 1f       	add %d15,1
80005b22:	b0 44       	add.a %a4,4
80005b24:	fc f2       	loop %a15,80005b08 <IfxPort_setGroupModeInput+0x70>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
80005b26:	00 90       	ret 

80005b28 <IfxPort_setGroupModeOutput>:
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b28:	82 0f       	mov %d15,0
    }
}


void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
80005b2a:	20 20       	sub.a %sp,32
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b2c:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005b2e:	78 04       	st.w [%sp]16,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b30:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005b32:	78 05       	st.w [%sp]20,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b34:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005b36:	78 06       	st.w [%sp]24,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b38:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005b3a:	78 07       	st.w [%sp]28,%d15
80005b3c:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b40:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
80005b44:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b48:	3b 80 0f 00 	mov %d0,248
80005b4c:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005b50:	9f 0f 07 80 	jned %d15,0,80005b5e <IfxPort_setGroupModeOutput+0x36>
80005b54:	d9 44 10 00 	lea %a4,[%a4]16
80005b58:	82 0f       	mov %d15,0
80005b5a:	a0 3f       	mov.a %a15,3
80005b5c:	3c 1f       	j 80005b9a <IfxPort_setGroupModeOutput+0x72>
    {
        if ((imask & (1U << i)) != 0)
80005b5e:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005b62:	df 02 1a 00 	jeq %d2,0,80005b96 <IfxPort_setGroupModeOutput+0x6e>
        {
            uint32 index = i / 4;
80005b66:	8f e4 1f 30 	sh %d3,%d4,-2
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b6a:	d9 a2 20 00 	lea %a2,[%sp]32
80005b6e:	01 23 02 f6 	addsc.a %a15,%a2,%d3,2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
80005b72:	8f 34 00 21 	and %d2,%d4,3
80005b76:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
            iocrVal[index]  |= (mode | index) << shift;
80005b78:	a6 63       	or %d3,%d6
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b7a:	0f 20 00 70 	sh %d7,%d0,%d2
80005b7e:	19 f1 f0 ff 	ld.w %d1,[%a15]-16
            iocrVal[index]  |= (mode | index) << shift;
80005b82:	0f 23 00 20 	sh %d2,%d3,%d2
80005b86:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b8a:	a6 17       	or %d7,%d1
            iocrVal[index]  |= (mode | index) << shift;
80005b8c:	a6 32       	or %d2,%d3
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b8e:	59 f7 f0 ff 	st.w [%a15]-16,%d7
            iocrVal[index]  |= (mode | index) << shift;
80005b92:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005b96:	c2 14       	add %d4,1
80005b98:	3c dc       	j 80005b50 <IfxPort_setGroupModeOutput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
80005b9a:	d9 a3 20 00 	lea %a3,[%sp]32
80005b9e:	90 32       	addsc.a %a2,%a3,%d15,2
80005ba0:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005ba4:	76 47       	jz %d4,80005bb2 <IfxPort_setGroupModeOutput+0x8a>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005ba6:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005baa:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005bac:	02 43       	mov %d3,%d4
80005bae:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode | index) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
80005bb2:	c2 1f       	add %d15,1
80005bb4:	b0 44       	add.a %a4,4
80005bb6:	fc f2       	loop %a15,80005b9a <IfxPort_setGroupModeOutput+0x72>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
80005bb8:	00 90       	ret 

80005bba <IfxPort_setGroupPadDriver>:


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
80005bba:	20 10       	sub.a %sp,16
80005bbc:	02 4f       	mov %d15,%d4
80005bbe:	02 5a       	mov %d10,%d5
80005bc0:	40 4c       	mov.aa %a12,%a4
80005bc2:	02 69       	mov %d9,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005bc4:	6d 00 b9 0b 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005bc8:	02 24       	mov %d4,%d2
}


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005bca:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005bcc:	6d 00 b5 0a 	call 80007136 <IfxScuWdt_clearCpuEndinit>
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
80005bd0:	82 03       	mov %d3,0
80005bd2:	74 a3       	st.w [%sp],%d3
            pdrMask[i] = 0;
80005bd4:	59 a3 08 00 	st.w [%sp]8,%d3
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
80005bd8:	59 a3 04 00 	st.w [%sp]4,%d3
            pdrMask[i] = 0;
80005bdc:	59 a3 0c 00 	st.w [%sp]12,%d3
80005be0:	8b 1f a1 22 	ge.u %d2,%d15,17
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005be4:	8b 0f 01 31 	rsub %d3,%d15,16
            pdrVal[i]  = 0;
            pdrMask[i] = 0;
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;
80005be8:	0f fa 00 50 	sh %d5,%d10,%d15
80005bec:	ab 03 a0 32 	seln %d3,%d2,%d3,0

        for (i = pinIndex; i < 16; i++)
80005bf0:	9f 03 03 80 	jned %d3,0,80005bf6 <IfxPort_setGroupPadDriver+0x3c>
80005bf4:	3c 1d       	j 80005c2e <IfxPort_setGroupPadDriver+0x74>
        {
            if ((imask & (1U << i)) != 0)
80005bf6:	57 05 61 2f 	extr.u %d2,%d5,%d15,1
80005bfa:	df 02 18 00 	jeq %d2,0,80005c2a <IfxPort_setGroupPadDriver+0x70>
            {
                uint32 index = i / 8;
80005bfe:	8f df 1f 40 	sh %d4,%d15,-3
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005c02:	d9 a2 10 00 	lea %a2,[%sp]16
80005c06:	01 24 02 f6 	addsc.a %a15,%a2,%d4,2
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005c0a:	8f 7f 00 21 	and %d2,%d15,7
                pdrMask[index] |= (0xFUL << shift);
80005c0e:	19 f4 f8 ff 	ld.w %d4,[%a15]-8
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005c12:	06 22       	sh %d2,2
                pdrMask[index] |= (0xFUL << shift);
80005c14:	d7 f4 04 42 	insert %d4,%d4,15,%d2,4
                pdrVal[index]  |= (padDriver << shift);
80005c18:	0f 29 00 20 	sh %d2,%d9,%d2
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005c1c:	59 f4 f8 ff 	st.w [%a15]-8,%d4
                pdrVal[index]  |= (padDriver << shift);
80005c20:	19 f4 f0 ff 	ld.w %d4,[%a15]-16
80005c24:	a6 42       	or %d2,%d4
80005c26:	59 f2 f0 ff 	st.w [%a15]-16,%d2
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;

        for (i = pinIndex; i < 16; i++)
80005c2a:	c2 1f       	add %d15,1
80005c2c:	3c e2       	j 80005bf0 <IfxPort_setGroupPadDriver+0x36>
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005c2e:	58 02       	ld.w %d15,[%sp]8
80005c30:	6e 08       	jz %d15,80005c40 <IfxPort_setGroupPadDriver+0x86>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005c32:	d9 cf 00 10 	lea %a15,[%a12]64
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c36:	54 a6       	ld.w %d6,[%sp]
80005c38:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005c3a:	02 f7       	mov %d7,%d15
80005c3c:	49 f6 40 08 	ldmst [%a15]0,%e6
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005c40:	58 03       	ld.w %d15,[%sp]12
80005c42:	6e 09       	jz %d15,80005c54 <IfxPort_setGroupPadDriver+0x9a>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005c44:	d9 cc 04 10 	lea %a12,[%a12]68
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c48:	19 a6 04 00 	ld.w %d6,[%sp]4
80005c4c:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005c4e:	02 f7       	mov %d7,%d15
80005c50:	49 c6 40 08 	ldmst [%a12]0,%e6
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005c54:	02 84       	mov %d4,%d8
}
80005c56:	d9 aa 10 00 	lea %sp,[%sp]16
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005c5a:	1d 00 a3 0b 	j 800073a0 <IfxScuWdt_setCpuEndinit>

80005c5e <IfxPort_setPinMode>:
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
80005c5e:	91 40 00 2f 	movh.a %a2,61444

void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005c62:	8f 34 00 91 	and %d9,%d4,3

    if (port == &MODULE_P40)
80005c66:	d9 22 00 0e 	lea %a2,[%a2]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80005c6a:	40 4f       	mov.aa %a15,%a4
80005c6c:	02 4f       	mov %d15,%d4
80005c6e:	02 5a       	mov %d10,%d5
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80005c70:	d9 4c 10 00 	lea %a12,[%a4]16
    uint8                 iocrIndex = (pinIndex / 4);
80005c74:	8f e4 1f b0 	sh %d11,%d4,-2
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005c78:	06 39       	sh %d9,3

    if (port == &MODULE_P40)
80005c7a:	7d 24 11 80 	jne.a %a4,%a2,80005c9c <IfxPort_setPinMode+0x3e>
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005c7e:	6d 00 5c 0b 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>
        IfxScuWdt_clearCpuEndinit(passwd);
80005c82:	02 24       	mov %d4,%d2
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005c84:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
80005c86:	6d 00 58 0a 	call 80007136 <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
80005c8a:	19 f2 20 10 	ld.w %d2,[%a15]96
        IfxScuWdt_setCpuEndinit(passwd);
80005c8e:	02 84       	mov %d4,%d8

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
80005c90:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80005c94:	59 ff 20 10 	st.w [%a15]96,%d15
        IfxScuWdt_setCpuEndinit(passwd);
80005c98:	6d 00 84 0b 	call 800073a0 <IfxScuWdt_setCpuEndinit>
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
80005c9c:	da ff       	mov %d15,255
80005c9e:	01 cb 02 f6 	addsc.a %a15,%a12,%d11,2
80005ca2:	0f 9f 00 f0 	sh %d15,%d15,%d9
80005ca6:	0f 9a 00 20 	sh %d2,%d10,%d9
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005caa:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005cac:	02 f3       	mov %d3,%d15
80005cae:	49 f2 40 08 	ldmst [%a15]0,%e2
80005cb2:	00 90       	ret 

80005cb4 <IfxPort_setPinModeLvdsHigh>:
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
80005cb4:	02 5a       	mov %d10,%d5
80005cb6:	40 4f       	mov.aa %a15,%a4
80005cb8:	02 49       	mov %d9,%d4
80005cba:	02 6f       	mov %d15,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005cbc:	6d 00 3d 0b 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005cc0:	02 24       	mov %d4,%d2
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005cc2:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005cc4:	6d 00 39 0a 	call 80007136 <IfxScuWdt_clearCpuEndinit>

    if (mode < IfxPort_Mode_outputPushPullGeneral)
80005cc8:	37 0a 48 50 	extr %d5,%d10,0,8
80005ccc:	bf 05 11 00 	jlt %d5,0,80005cee <IfxPort_setPinModeLvdsHigh+0x3a>
    {
        if (pinIndex < 2)
80005cd0:	bf 29 21 80 	jlt.u %d9,2,80005d12 <IfxPort_setPinModeLvdsHigh+0x5e>
        {}
        else
        {
            port->LPCR1.B_P21.RDIS_CTRL = enablePortControlled;
80005cd4:	19 f2 24 20 	ld.w %d2,[%a15]164
80005cd8:	37 f2 01 f0 	insert %d15,%d2,%d15,0,1
80005cdc:	59 ff 24 20 	st.w [%a15]164,%d15
            port->LPCR1.B_P21.RX_DIS    = 0;
80005ce0:	19 ff 24 20 	ld.w %d15,[%a15]164
80005ce4:	8f 2f c0 f1 	andn %d15,%d15,2
80005ce8:	59 ff 24 20 	st.w [%a15]164,%d15
80005cec:	3c 13       	j 80005d12 <IfxPort_setPinModeLvdsHigh+0x5e>
        }
    }
    else
    {
        port->LPCR2.B.TDIS_CTRL = enablePortControlled;
80005cee:	19 f2 28 20 	ld.w %d2,[%a15]168
80005cf2:	67 f2 0c f0 	ins.t %d15,%d2,12,%d15,0
80005cf6:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_DIS    = 0;
80005cfa:	19 ff 28 20 	ld.w %d15,[%a15]168
80005cfe:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80005d02:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_PD     = 0;
80005d06:	19 ff 28 20 	ld.w %d15,[%a15]168
80005d0a:	b7 0f 01 f7 	insert %d15,%d15,0,14,1
80005d0e:	59 ff 28 20 	st.w [%a15]168,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
80005d12:	02 84       	mov %d4,%d8
80005d14:	1d 00 46 0b 	j 800073a0 <IfxScuWdt_setCpuEndinit>

80005d18 <IfxPort_setPinModeLvdsMedium>:
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005d18:	0b 65 10 a8 	mov %e10,%d5,%d6
80005d1c:	40 4f       	mov.aa %a15,%a4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005d1e:	8f f4 1f 90 	sh %d9,%d4,-1
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005d22:	02 48       	mov %d8,%d4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005d24:	6d 00 09 0b 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005d28:	02 24       	mov %d4,%d2
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005d2a:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005d2c:	6d 00 05 0a 	call 80007136 <IfxScuWdt_clearCpuEndinit>
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
80005d30:	06 d8       	sh %d8,-3
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
80005d32:	d9 f2 00 10 	lea %a2,[%a15]64
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005d36:	01 28 02 26 	addsc.a %a2,%a2,%d8,2


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005d3a:	8f 39 00 20 	sh %d2,%d9,3
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
80005d3e:	d9 f4 20 20 	lea %a4,[%a15]160
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005d42:	01 49 02 46 	addsc.a %a4,%a4,%d9,2
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005d46:	0f 2b 00 50 	sh %d5,%d11,%d2
80005d4a:	74 25       	st.w [%a2],%d5
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005d4c:	54 46       	ld.w %d6,[%a4]
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005d4e:	02 f4       	mov %d4,%d15
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005d50:	67 a6 01 60 	ins.t %d6,%d6,1,%d10,0
80005d54:	74 46       	st.w [%a4],%d6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005d56:	1d 00 25 0b 	j 800073a0 <IfxScuWdt_setCpuEndinit>

80005d5a <IfxPort_setPinPadDriver>:
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
80005d5a:	0b 45 10 88 	mov %e8,%d5,%d4
80005d5e:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d60:	6d 00 eb 0a 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005d64:	02 24       	mov %d4,%d2
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d66:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005d68:	6d 00 e7 09 	call 80007136 <IfxScuWdt_clearCpuEndinit>
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
80005d6c:	8f 78 00 21 	and %d2,%d8,7
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005d70:	06 22       	sh %d2,2
80005d72:	06 d8       	sh %d8,-3
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
80005d74:	d9 ff 00 10 	lea %a15,[%a15]64
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005d78:	3b f0 00 30 	mov %d3,15
80005d7c:	01 f8 02 f6 	addsc.a %a15,%a15,%d8,2
80005d80:	0f 23 00 30 	sh %d3,%d3,%d2
80005d84:	0f 29 00 60 	sh %d6,%d9,%d2
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005d88:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005d8a:	02 37       	mov %d7,%d3
80005d8c:	49 f6 40 08 	ldmst [%a15]0,%e6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005d90:	02 f4       	mov %d4,%d15
80005d92:	1d 00 07 0b 	j 800073a0 <IfxScuWdt_setCpuEndinit>
	...

80005d98 <IfxScuCcu_calculateSysPllDividers>:
        //' K2+1 div should be even for 50% duty cycle
        k2Steps = 2;

        if (fPll > 240000000)
        {
            k2Steps = 1;
80005d98:	7b e0 e4 30 	movh %d3,3662
80005d9c:	1b 13 c0 31 	addi %d3,%d3,7169
80005da0:	0b 34 30 c1 	lt.u %d12,%d4,%d3
80005da4:	82 2f       	mov %d15,2
80005da6:	ab 1f 80 cc 	sel %d12,%d12,%d15,1
80005daa:	8f 4c 00 80 	sh %d8,%d12,4
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005dae:	7b c0 be 00 	movh %d0,3052

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005db2:	91 40 0f 50 	movh.a %a5,244
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005db6:	7b 80 82 6e 	movh %d6,59432
80005dba:	91 80 7d 61 	movh.a %a6,6104

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
    uint8   deviationAllowed = 2;
    uint32  fOsc             = cfg->xtalFrequency;
80005dbe:	19 4e 10 10 	ld.w %d14,[%a4]80
80005dc2:	60 83       	mov.a %a3,%d8
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005dc4:	1b 00 20 0c 	addi %d0,%d0,-15872

        uint32       p;
        uint32       n;
        uint32       k2;
        uint32       k2Steps;
        uint32       bestK2 = 0, bestN = 0, bestP = 0;
80005dc8:	d2 0a       	mov %e10,0
80005dca:	82 09       	mov %d9,0
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005dcc:	3b 00 01 50 	mov %d5,16
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005dd0:	d9 55 41 02 	lea %a5,[%a5]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005dd4:	82 f7       	mov %d7,-1
80005dd6:	1b 06 c0 67 	addi %d6,%d6,31744
80005dda:	d9 66 41 08 	lea %a6,[%a6]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
80005dde:	a0 ff       	mov.a %a15,15
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005de0:	4b 5e 11 22 	div.u %e2,%d14,%d5

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005de4:	7b 60 f8 1f 	movh %d1,65414
80005de8:	1b 01 e0 1e 	addi %d1,%d1,-4608
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005dec:	82 03       	mov %d3,0

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005dee:	0b 12 40 10 	addx %d1,%d2,%d1
80005df2:	8b f3 bf 20 	addc %d2,%d3,-1
80005df6:	80 53       	mov.d %d3,%a5
80005df8:	ba 02       	eq %d15,%d2,0
80005dfa:	0b 31 50 f2 	and.ge.u %d15,%d1,%d3
80005dfe:	8b 02 00 f5 	or.ne %d15,%d2,0
80005e02:	ee 24       	jnz %d15,80005e4a <IfxScuCcu_calculateSysPllDividers+0xb2>
80005e04:	02 5d       	mov %d13,%d5
80005e06:	82 11       	mov %d1,1
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005e08:	03 41 68 26 	madd.u %e2,%e6,%d1,%d4
80005e0c:	80 68       	mov.d %d8,%a6
80005e0e:	ba 03       	eq %d15,%d3,0
80005e10:	0b 82 50 f2 	and.ge.u %d15,%d2,%d8
80005e14:	8b 03 00 f5 	or.ne %d15,%d3,0
80005e18:	ee 13       	jnz %d15,80005e3e <IfxScuCcu_calculateSysPllDividers+0xa6>
80005e1a:	82 18       	mov %d8,1
80005e1c:	c5 02 3f 10 	lea %a2,7f <_.+0x7e>
                    {
                        for (n = nMin; n <= nMax; n++)
                        {
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);
80005e20:	4b d8 11 22 	div.u %e2,%d8,%d13
80005e24:	e2 e2       	mul %d2,%d14
80005e26:	a2 42       	sub %d2,%d4

                            if (fPllError == 0)
80005e28:	df 02 18 00 	jeq %d2,0,80005e58 <IfxScuCcu_calculateSysPllDividers+0xc0>
                                bestP          = p;

                                goto EXITCALC_LOOP;
                            }

                            if (fPllLeastError > fPllError)
80005e2c:	82 1f       	mov %d15,1
80005e2e:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80005e32:	6a 8b       	cmovn %d11,%d15,%d8
80005e34:	6a 20       	cmovn %d0,%d15,%d2
80005e36:	6a 5a       	cmovn %d10,%d15,%d5
80005e38:	6a 19       	cmovn %d9,%d15,%d1
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
                    {
                        for (n = nMin; n <= nMax; n++)
80005e3a:	c2 18       	add %d8,1
80005e3c:	fc 22       	loop %a2,80005e20 <IfxScuCcu_calculateSysPllDividers+0x88>
80005e3e:	80 3f       	mov.d %d15,%a3
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
80005e40:	42 c1       	add %d1,%d12
80005e42:	42 fd       	add %d13,%d15
80005e44:	8b 11 68 f2 	lt.u %d15,%d1,129
80005e48:	ee e0       	jnz %d15,80005e08 <IfxScuCcu_calculateSysPllDividers+0x70>
80005e4a:	60 c2       	mov.a %a2,%d12
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005e4c:	c2 f5       	add %d5,-1
80005e4e:	01 23 20 30 	sub.a %a3,%a3,%a2
80005e52:	fd f0 c7 7f 	loop %a15,80005de0 <IfxScuCcu_calculateSysPllDividers+0x48>
80005e56:	3c 05       	j 80005e60 <IfxScuCcu_calculateSysPllDividers+0xc8>

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
                                bestN          = n;
80005e58:	0b 58 10 a8 	mov %e10,%d8,%d5
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
80005e5c:	02 19       	mov %d9,%d1
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
80005e5e:	82 00       	mov %d0,0
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005e60:	da 64       	mov %d15,100
80005e62:	06 14       	sh %d4,1
80005e64:	4b f4 11 42 	div.u %e4,%d4,%d15
80005e68:	82 1f       	mov %d15,1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
        }
        else
        {
            retVal = 1;
80005e6a:	82 12       	mov %d2,1
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005e6c:	0b 40 50 f2 	and.ge.u %d15,%d0,%d4
80005e70:	ee 0f       	jnz %d15,80005e8e <IfxScuCcu_calculateSysPllDividers+0xf6>
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005e72:	82 02       	mov %d2,0

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005e74:	c2 fb       	add %d11,-1
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005e76:	c2 fa       	add %d10,-1
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005e78:	c2 f9       	add %d9,-1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005e7a:	59 42 0c 00 	st.w [%a4]12,%d2

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005e7e:	e9 4b 09 00 	st.b [%a4]9,%d11
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005e82:	e9 4a 08 00 	st.b [%a4]8,%d10
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005e86:	e9 49 0a 00 	st.b [%a4]10,%d9
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
80005e8a:	2c 40       	st.b [%a4]0,%d15
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
80005e8c:	82 02       	mov %d2,0
        {
            retVal = 1;
        }
    }
    return retVal;
}
80005e8e:	00 90       	ret 

80005e90 <IfxScuCcu_getOsc0Frequency>:
}


float32 IfxScuCcu_getOsc0Frequency(void)
{
    return (float32)IfxScuCcu_xtalFrequency;
80005e90:	91 00 00 f7 	movh.a %a15,28672
80005e94:	19 f2 38 20 	ld.w %d2,[%a15]184 <700000b8 <IfxScuCcu_xtalFrequency>>
}
80005e98:	4b 02 61 21 	utof %d2,%d2
80005e9c:	00 90       	ret 

80005e9e <IfxScuCcu_getOscFrequency>:

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005e9e:	91 30 00 ff 	movh.a %a15,61443
80005ea2:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80005ea6:	4c f0       	ld.w %d15,[%a15]0
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005ea8:	7b f0 cb 24 	movh %d2,19647

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005eac:	37 0f 62 fe 	extr.u %d15,%d15,28,2
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005eb0:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005eb4:	6e 0c       	jz %d15,80005ecc <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005eb6:	4c f0       	ld.w %d15,[%a15]0
        freq = (float32)IfxScuCcu_xtalFrequency;
    }
    else
    {
        /* Reserved values, this */
        freq = 0.0;
80005eb8:	82 02       	mov %d2,0

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005eba:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80005ebe:	5e 17       	jne %d15,1,80005ecc <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = (float32)IfxScuCcu_xtalFrequency;
80005ec0:	91 00 00 f7 	movh.a %a15,28672
80005ec4:	19 f2 38 20 	ld.w %d2,[%a15]184 <700000b8 <IfxScuCcu_xtalFrequency>>
80005ec8:	4b 02 61 21 	utof %d2,%d2
        /* Reserved values, this */
        freq = 0.0;
    }

    return freq;
}
80005ecc:	00 90       	ret 

80005ece <IfxScuCcu_getPllErayFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005ece:	91 30 00 ff 	movh.a %a15,61443
80005ed2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005ed6:	6d ff e4 ff 	call 80005e9e <IfxScuCcu_getOscFrequency>

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005eda:	4c f9       	ld.w %d15,[%a15]36
80005edc:	2e 05       	jz.t %d15,0,80005ee6 <IfxScuCcu_getPllErayFrequency+0x18>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLERAYCON1.B.K1DIV + 1);
80005ede:	4c fb       	ld.w %d15,[%a15]44
80005ee0:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005ee4:	3c 21       	j 80005f26 <IfxScuCcu_getPllErayFrequency+0x58>
    }
    else if (scu->PLLERAYSTAT.B.FINDIS == 1)
80005ee6:	4c f9       	ld.w %d15,[%a15]36
80005ee8:	6f 3f 15 00 	jz.t %d15,3,80005f12 <IfxScuCcu_getPllErayFrequency+0x44>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLERAYCON1.B.K2DIV + 1);
80005eec:	48 b4       	ld.w %d4,[%a15]44
80005eee:	8f f4 07 41 	and %d4,%d4,127
80005ef2:	c2 14       	add %d4,1
80005ef4:	6d 00 6d 23 	call 8000a5ce <__floatsidf>
80005ef8:	7b 80 19 54 	movh %d5,16792
80005efc:	0b 23 10 68 	mov %e6,%d3,%d2
80005f00:	82 04       	mov %d4,0
80005f02:	1b 45 78 5d 	addi %d5,%d5,-10364
80005f06:	6d 00 d8 22 	call 8000a4b6 <__divdf3>
80005f0a:	0b 23 10 48 	mov %e4,%d3,%d2
80005f0e:	1d 00 93 23 	j 8000a634 <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLERAYCON0.B.NDIV + 1)) / (scu->PLLERAYCON1.B.K2DIV + 1);
80005f12:	48 a3       	ld.w %d3,[%a15]40
80005f14:	4c fb       	ld.w %d15,[%a15]44
80005f16:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005f1a:	16 7f       	and %d15,127
80005f1c:	c2 13       	add %d3,1
80005f1e:	4b 03 41 31 	itof %d3,%d3
80005f22:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005f26:	c2 1f       	add %d15,1
80005f28:	4b 0f 41 f1 	itof %d15,%d15
80005f2c:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80005f30:	00 90       	ret 

80005f32 <IfxScuCcu_getPllErayVcoFrequency>:

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005f32:	91 30 00 ff 	movh.a %a15,61443
80005f36:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80005f3a:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005f3c:	7b f0 cb 24 	movh %d2,19647
80005f40:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005f44:	6f 3f 18 80 	jnz.t %d15,3,80005f74 <IfxScuCcu_getPllErayVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLERAYCON0.B.NDIV + 1)) / (SCU_PLLERAYCON0.B.PDIV + 1);
80005f48:	6d ff ab ff 	call 80005e9e <IfxScuCcu_getOscFrequency>
80005f4c:	91 30 00 ff 	movh.a %a15,61443
80005f50:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80005f54:	48 03       	ld.w %d3,[%a15]0
80005f56:	4c f0       	ld.w %d15,[%a15]0
80005f58:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005f5c:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005f60:	c2 13       	add %d3,1
80005f62:	4b 03 41 31 	itof %d3,%d3
80005f66:	c2 1f       	add %d15,1
80005f68:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005f6c:	4b 0f 41 f1 	itof %d15,%d15
80005f70:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
80005f74:	00 90       	ret 

80005f76 <IfxScuCcu_getPllFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLSTAT.B.VCOBYST == 1)
80005f76:	91 30 00 ff 	movh.a %a15,61443
80005f7a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005f7e:	6d ff 90 ff 	call 80005e9e <IfxScuCcu_getOscFrequency>

    if (scu->PLLSTAT.B.VCOBYST == 1)
80005f82:	4c f5       	ld.w %d15,[%a15]20
80005f84:	2e 06       	jz.t %d15,0,80005f90 <IfxScuCcu_getPllFrequency+0x1a>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
80005f86:	4c f7       	ld.w %d15,[%a15]28
80005f88:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005f8c:	c2 1f       	add %d15,1
80005f8e:	3c 28       	j 80005fde <IfxScuCcu_getPllFrequency+0x68>
    }
    else if (scu->PLLSTAT.B.FINDIS == 1)
80005f90:	4c f5       	ld.w %d15,[%a15]20
80005f92:	6f 3f 15 00 	jz.t %d15,3,80005fbc <IfxScuCcu_getPllFrequency+0x46>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
80005f96:	48 74       	ld.w %d4,[%a15]28
80005f98:	8f f4 07 41 	and %d4,%d4,127
80005f9c:	c2 14       	add %d4,1
80005f9e:	6d 00 18 23 	call 8000a5ce <__floatsidf>
80005fa2:	7b 80 19 54 	movh %d5,16792
80005fa6:	0b 23 10 68 	mov %e6,%d3,%d2
80005faa:	82 04       	mov %d4,0
80005fac:	1b 45 78 5d 	addi %d5,%d5,-10364
80005fb0:	6d 00 83 22 	call 8000a4b6 <__divdf3>
80005fb4:	0b 23 10 48 	mov %e4,%d3,%d2
80005fb8:	1d 00 3e 23 	j 8000a634 <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
80005fbc:	48 64       	ld.w %d4,[%a15]24
80005fbe:	4c f7       	ld.w %d15,[%a15]28
80005fc0:	37 04 e7 44 	extr.u %d4,%d4,9,7
80005fc4:	8f ff 07 31 	and %d3,%d15,127
80005fc8:	4c f6       	ld.w %d15,[%a15]24
80005fca:	c2 14       	add %d4,1
80005fcc:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005fd0:	4b 04 41 41 	itof %d4,%d4
80005fd4:	c2 1f       	add %d15,1
80005fd6:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80005fda:	4b 42 41 20 	mul.f %d2,%d2,%d4
80005fde:	4b 0f 41 f1 	itof %d15,%d15
80005fe2:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80005fe6:	00 90       	ret 

80005fe8 <IfxScuCcu_getPllVcoFrequency>:

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
80005fe8:	91 30 00 ff 	movh.a %a15,61443
80005fec:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80005ff0:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005ff2:	7b f0 cb 24 	movh %d2,19647
80005ff6:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
80005ffa:	6f 3f 18 80 	jnz.t %d15,3,8000602a <IfxScuCcu_getPllVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLCON0.B.NDIV + 1)) / (SCU_PLLCON0.B.PDIV + 1);
80005ffe:	6d ff 50 ff 	call 80005e9e <IfxScuCcu_getOscFrequency>
80006002:	91 30 00 ff 	movh.a %a15,61443
80006006:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
8000600a:	48 03       	ld.w %d3,[%a15]0
8000600c:	4c f0       	ld.w %d15,[%a15]0
8000600e:	37 03 e7 34 	extr.u %d3,%d3,9,7
80006012:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80006016:	c2 13       	add %d3,1
80006018:	4b 03 41 31 	itof %d3,%d3
8000601c:	c2 1f       	add %d15,1
8000601e:	4b 32 41 20 	mul.f %d2,%d2,%d3
80006022:	4b 0f 41 f1 	itof %d15,%d15
80006026:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
8000602a:	00 90       	ret 

8000602c <IfxScuCcu_getSourceFrequency>:

float32 IfxScuCcu_getSourceFrequency(void)
{
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
8000602c:	91 30 00 ff 	movh.a %a15,61443
80006030:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006034:	4c f0       	ld.w %d15,[%a15]0
80006036:	37 0f 62 fe 	extr.u %d15,%d15,28,2
8000603a:	6e 06       	jz %d15,80006046 <IfxScuCcu_getSourceFrequency+0x1a>
8000603c:	1e 13       	jeq %d15,1,80006042 <IfxScuCcu_getSourceFrequency+0x16>
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
        break;
    default:
        sourcefreq = 0;
8000603e:	82 02       	mov %d2,0
80006040:	00 90       	ret 
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
80006042:	1d ff 9a ff 	j 80005f76 <IfxScuCcu_getPllFrequency>
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
80006046:	7b f0 cb 24 	movh %d2,19647
8000604a:	1b 02 c2 2b 	addi %d2,%d2,-17376
        sourcefreq = 0;
        break;
    }

    return sourcefreq;
}
8000604e:	00 90       	ret 

80006050 <IfxScuCcu_wait>:
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
80006050:	02 4f       	mov %d15,%d4
80006052:	6d ff ed ff 	call 8000602c <IfxScuCcu_getSourceFrequency>
80006056:	91 30 00 ff 	movh.a %a15,61443
8000605a:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000605e:	48 03       	ld.w %d3,[%a15]0
80006060:	37 03 64 34 	extr.u %d3,%d3,8,4
80006064:	4b 03 41 31 	itof %d3,%d3
80006068:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
    uint32 stmCountBegin = STM0_TIM0.U;
8000606c:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
80006070:	4b f2 41 20 	mul.f %d2,%d2,%d15
80006074:	4b 02 71 21 	ftouz %d2,%d2
    uint32 stmCountBegin = STM0_TIM0.U;

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80006078:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
8000607c:	a2 3f       	sub %d15,%d3
8000607e:	3f 2f fd ff 	jlt.u %d15,%d2,80006078 <IfxScuCcu_wait+0x28>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
80006082:	00 90       	ret 

80006084 <IfxScuCcu_getBbbFrequency>:
float32 IfxScuCcu_getBbbFrequency(void)
{
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
80006084:	6d ff d4 ff 	call 8000602c <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006088:	91 30 00 ff 	movh.a %a15,61443
8000608c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006090:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
        break;
    default:
        bbbFrequency = 0.0;
80006092:	82 0f       	mov %d15,0
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80006094:	37 03 64 36 	extr.u %d3,%d3,12,4
80006098:	ff 53 30 80 	jge.u %d3,5,800060f8 <IfxScuCcu_getBbbFrequency+0x74>
8000609c:	91 00 00 f8 	movh.a %a15,32768
800060a0:	d9 ff 2c 26 	lea %a15,[%a15]24748 <800060ac <IfxScuCcu_getBbbFrequency+0x28>>
800060a4:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
800060a8:	dc 0f       	ji %a15
800060aa:	00 00       	nop 
800060ac:	1d 00 0a 00 	j 800060c0 <IfxScuCcu_getBbbFrequency+0x3c>
800060b0:	1d 00 17 00 	j 800060de <IfxScuCcu_getBbbFrequency+0x5a>
800060b4:	1d 00 18 00 	j 800060e4 <IfxScuCcu_getBbbFrequency+0x60>
800060b8:	1d 00 19 00 	j 800060ea <IfxScuCcu_getBbbFrequency+0x66>
800060bc:	1d 00 1a 00 	j 800060f0 <IfxScuCcu_getBbbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
800060c0:	91 30 00 ff 	movh.a %a15,61443
800060c4:	d9 ff 00 16 	lea %a15,[%a15]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
800060c8:	48 03       	ld.w %d3,[%a15]0
        {
            bbbFrequency = 0.0;
800060ca:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
800060cc:	8f f3 00 31 	and %d3,%d3,15
800060d0:	df 03 14 00 	jeq %d3,0,800060f8 <IfxScuCcu_getBbbFrequency+0x74>
        {
            bbbFrequency = 0.0;
        }
        else
        {
            bbbFrequency = sourceFrequency / SCU_CCUCON2.B.BBBDIV;
800060d4:	4c f0       	ld.w %d15,[%a15]0
800060d6:	16 0f       	and %d15,15
800060d8:	4b 0f 41 f1 	itof %d15,%d15
800060dc:	3c 0c       	j 800060f4 <IfxScuCcu_getBbbFrequency+0x70>
        }

        break;
    case 1:
        bbbFrequency = sourceFrequency / 30;
800060de:	7b 00 1f f4 	movh %d15,16880
800060e2:	3c 09       	j 800060f4 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 2:
        bbbFrequency = sourceFrequency / 60;
800060e4:	7b 00 27 f4 	movh %d15,17008
800060e8:	3c 06       	j 800060f4 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 3:
        bbbFrequency = sourceFrequency / 120;
800060ea:	7b 00 2f f4 	movh %d15,17136
800060ee:	3c 03       	j 800060f4 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
800060f0:	7b 00 37 f4 	movh %d15,17264
800060f4:	4b f2 51 f0 	div.f %d15,%d2,%d15
        bbbFrequency = 0.0;
        break;
    }

    return bbbFrequency;
}
800060f8:	02 f2       	mov %d2,%d15
800060fa:	00 90       	ret 

800060fc <IfxScuCcu_getMaxFrequency>:
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
800060fc:	91 30 00 ff 	movh.a %a15,61443
80006100:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>

float32 IfxScuCcu_getMaxFrequency(void)
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();
80006104:	6d ff 94 ff 	call 8000602c <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006108:	4c f0       	ld.w %d15,[%a15]0
8000610a:	37 0f 64 f6 	extr.u %d15,%d15,12,4
8000610e:	ff 5f 2d 80 	jge.u %d15,5,80006168 <IfxScuCcu_getMaxFrequency+0x6c>
80006112:	91 00 00 f8 	movh.a %a15,32768
80006116:	d9 ff 20 46 	lea %a15,[%a15]24864 <80006120 <IfxScuCcu_getMaxFrequency+0x24>>
8000611a:	90 ff       	addsc.a %a15,%a15,%d15,2
8000611c:	dc 0f       	ji %a15
8000611e:	00 00       	nop 
80006120:	1d 00 0a 00 	j 80006134 <IfxScuCcu_getMaxFrequency+0x38>
80006124:	1d 00 14 00 	j 8000614c <IfxScuCcu_getMaxFrequency+0x50>
80006128:	1d 00 15 00 	j 80006152 <IfxScuCcu_getMaxFrequency+0x56>
8000612c:	1d 00 16 00 	j 80006158 <IfxScuCcu_getMaxFrequency+0x5c>
80006130:	1d 00 17 00 	j 8000615e <IfxScuCcu_getMaxFrequency+0x62>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON5.B.MAXDIV == 0)
80006134:	91 30 00 ff 	movh.a %a15,61443
80006138:	d9 ff 0c 16 	lea %a15,[%a15]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
8000613c:	4c f0       	ld.w %d15,[%a15]0
8000613e:	16 0f       	and %d15,15
80006140:	6e 15       	jz %d15,8000616a <IfxScuCcu_getMaxFrequency+0x6e>
        {
            maxFrequency = sourceFrequency;
        }
        else
        {
            maxFrequency = sourceFrequency / SCU_CCUCON5.B.MAXDIV;
80006142:	4c f0       	ld.w %d15,[%a15]0
80006144:	16 0f       	and %d15,15
80006146:	4b 0f 41 f1 	itof %d15,%d15
8000614a:	3c 0c       	j 80006162 <IfxScuCcu_getMaxFrequency+0x66>
        }

        break;
    case 1:
        maxFrequency = sourceFrequency / 15;
8000614c:	7b 00 17 f4 	movh %d15,16752
80006150:	3c 09       	j 80006162 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 2:
        maxFrequency = sourceFrequency / 30;
80006152:	7b 00 1f f4 	movh %d15,16880
80006156:	3c 06       	j 80006162 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 3:
        maxFrequency = sourceFrequency / 60;
80006158:	7b 00 27 f4 	movh %d15,17008
8000615c:	3c 03       	j 80006162 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 4:
        maxFrequency = sourceFrequency / 120;
8000615e:	7b 00 2f f4 	movh %d15,17136
80006162:	4b f2 51 20 	div.f %d2,%d2,%d15
        break;
80006166:	00 90       	ret 
    default:
        maxFrequency = 0.0;
80006168:	82 02       	mov %d2,0
        break;
    }

    return maxFrequency;
}
8000616a:	00 90       	ret 

8000616c <IfxScuCcu_getBaud1Frequency>:


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000616c:	91 30 00 ff 	movh.a %a15,61443
80006170:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006174:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD1DIV == 0)
    {
        frequency = 0;
80006176:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006178:	8f ff 00 81 	and %d8,%d15,15

    if (ccucon0.B.BAUD1DIV == 0)
8000617c:	76 87       	jz %d8,8000618a <IfxScuCcu_getBaud1Frequency+0x1e>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD1DIV;
8000617e:	6d ff bf ff 	call 800060fc <IfxScuCcu_getMaxFrequency>
80006182:	4b 08 41 f1 	itof %d15,%d8
80006186:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
8000618a:	00 90       	ret 

8000618c <IfxScuCcu_getBaud2Frequency>:


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000618c:	91 30 00 ff 	movh.a %a15,61443
80006190:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006194:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD2DIV == 0)
    {
        frequency = 0;
80006196:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006198:	37 0f 64 82 	extr.u %d8,%d15,4,4

    if (ccucon0.B.BAUD2DIV == 0)
8000619c:	16 f0       	and %d15,240
8000619e:	6e 07       	jz %d15,800061ac <IfxScuCcu_getBaud2Frequency+0x20>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD2DIV;
800061a0:	6d ff ae ff 	call 800060fc <IfxScuCcu_getMaxFrequency>
800061a4:	4b 08 41 f1 	itof %d15,%d8
800061a8:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
800061ac:	00 90       	ret 

800061ae <IfxScuCcu_getSpbFrequency>:
float32 IfxScuCcu_getSpbFrequency(void)
{
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
800061ae:	6d ff 3f ff 	call 8000602c <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800061b2:	91 30 00 ff 	movh.a %a15,61443
800061b6:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800061ba:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
        break;
    default:
        spbFrequency = 0.0;
800061bc:	82 0f       	mov %d15,0
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
800061be:	37 03 64 36 	extr.u %d3,%d3,12,4
800061c2:	ff 53 30 80 	jge.u %d3,5,80006222 <IfxScuCcu_getSpbFrequency+0x74>
800061c6:	91 00 00 f8 	movh.a %a15,32768
800061ca:	d9 ff 14 76 	lea %a15,[%a15]25044 <800061d4 <IfxScuCcu_getSpbFrequency+0x26>>
800061ce:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
800061d2:	dc 0f       	ji %a15
800061d4:	1d 00 0a 00 	j 800061e8 <IfxScuCcu_getSpbFrequency+0x3a>
800061d8:	1d 00 18 00 	j 80006208 <IfxScuCcu_getSpbFrequency+0x5a>
800061dc:	1d 00 19 00 	j 8000620e <IfxScuCcu_getSpbFrequency+0x60>
800061e0:	1d 00 1a 00 	j 80006214 <IfxScuCcu_getSpbFrequency+0x66>
800061e4:	1d 00 1b 00 	j 8000621a <IfxScuCcu_getSpbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
800061e8:	91 30 00 ff 	movh.a %a15,61443
800061ec:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800061f0:	48 03       	ld.w %d3,[%a15]0
        {
            spbFrequency = 0.0;
800061f2:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
800061f4:	37 03 64 38 	extr.u %d3,%d3,16,4
800061f8:	df 03 15 00 	jeq %d3,0,80006222 <IfxScuCcu_getSpbFrequency+0x74>
        {
            spbFrequency = 0.0;
        }
        else
        {
            spbFrequency = sourceFrequency / SCU_CCUCON0.B.SPBDIV;
800061fc:	4c f0       	ld.w %d15,[%a15]0
800061fe:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80006202:	4b 0f 41 f1 	itof %d15,%d15
80006206:	3c 0c       	j 8000621e <IfxScuCcu_getSpbFrequency+0x70>
        }

        break;
    case 1:
        spbFrequency = sourceFrequency / 30;
80006208:	7b 00 1f f4 	movh %d15,16880
8000620c:	3c 09       	j 8000621e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 2:
        spbFrequency = sourceFrequency / 60;
8000620e:	7b 00 27 f4 	movh %d15,17008
80006212:	3c 06       	j 8000621e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 3:
        spbFrequency = sourceFrequency / 120;
80006214:	7b 00 2f f4 	movh %d15,17136
80006218:	3c 03       	j 8000621e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
8000621a:	7b 00 37 f4 	movh %d15,17264
8000621e:	4b f2 51 f0 	div.f %d15,%d2,%d15
        spbFrequency = 0.0;
        break;
    }

    return spbFrequency;
}
80006222:	02 f2       	mov %d2,%d15
80006224:	00 90       	ret 

80006226 <IfxScuCcu_getModuleFrequency>:
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
80006226:	91 30 00 ff 	movh.a %a15,61443
8000622a:	d9 ff 38 06 	lea %a15,[%a15]24632 <f0036038 <_SMALL_DATA4_+0x4002e038>>
8000622e:	48 09       	ld.w %d9,[%a15]0
    spbFreq = IfxScuCcu_getSpbFrequency();
80006230:	6d ff bf ff 	call 800061ae <IfxScuCcu_getSpbFrequency>

    if (scuFdr.B.DM == 1)
80006234:	bb 00 00 fc 	mov.u %d15,49152
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
    spbFreq = IfxScuCcu_getSpbFrequency();
80006238:	02 23       	mov %d3,%d2

    if (scuFdr.B.DM == 1)
8000623a:	26 9f       	and %d15,%d9
8000623c:	3b 00 00 24 	mov %d2,16384
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
80006240:	b7 09 16 85 	insert %d8,%d9,0,10,22
    spbFreq = IfxScuCcu_getSpbFrequency();

    if (scuFdr.B.DM == 1)
80006244:	7e 29       	jne %d15,%d2,80006256 <IfxScuCcu_getModuleFrequency+0x30>
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
80006246:	3b 00 40 20 	mov %d2,1024
8000624a:	a2 82       	sub %d2,%d8
8000624c:	4b 02 41 21 	itof %d2,%d2
80006250:	4b 23 51 20 	div.f %d2,%d3,%d2
80006254:	00 90       	ret 
    }
    else if (scuFdr.B.DM == 2)
80006256:	bb 00 00 48 	mov.u %d4,32768
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
    }
    else
    {
        moduleFreq = 0;
8000625a:	82 02       	mov %d2,0

    if (scuFdr.B.DM == 1)
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
    }
    else if (scuFdr.B.DM == 2)
8000625c:	7e 49       	jne %d15,%d4,8000626e <IfxScuCcu_getModuleFrequency+0x48>
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
8000625e:	4b 08 41 21 	itof %d2,%d8
80006262:	7b 00 a8 f3 	movh %d15,14976
80006266:	4b 23 41 20 	mul.f %d2,%d3,%d2
8000626a:	4b f2 41 20 	mul.f %d2,%d2,%d15
    {
        moduleFreq = 0;
    }

    return moduleFreq;
}
8000626e:	00 90       	ret 

80006270 <IfxScuCcu_getSriFrequency>:
float32 IfxScuCcu_getSriFrequency(void)
{
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
80006270:	6d ff de fe 	call 8000602c <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006274:	91 30 00 ff 	movh.a %a15,61443
80006278:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000627c:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
        break;
    default:
        sriFrequency = 0.0;
8000627e:	82 0f       	mov %d15,0
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80006280:	37 03 64 36 	extr.u %d3,%d3,12,4
80006284:	ff 53 31 80 	jge.u %d3,5,800062e6 <IfxScuCcu_getSriFrequency+0x76>
80006288:	91 00 00 f8 	movh.a %a15,32768
8000628c:	d9 ff 18 a6 	lea %a15,[%a15]25240 <80006298 <IfxScuCcu_getSriFrequency+0x28>>
80006290:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006294:	dc 0f       	ji %a15
80006296:	00 00       	nop 
80006298:	1d 00 0a 00 	j 800062ac <IfxScuCcu_getSriFrequency+0x3c>
8000629c:	1d 00 18 00 	j 800062cc <IfxScuCcu_getSriFrequency+0x5c>
800062a0:	1d 00 19 00 	j 800062d2 <IfxScuCcu_getSriFrequency+0x62>
800062a4:	1d 00 1a 00 	j 800062d8 <IfxScuCcu_getSriFrequency+0x68>
800062a8:	1d 00 1b 00 	j 800062de <IfxScuCcu_getSriFrequency+0x6e>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
800062ac:	91 30 00 ff 	movh.a %a15,61443
800062b0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800062b4:	48 03       	ld.w %d3,[%a15]0
        {
            sriFrequency = 0.0;
800062b6:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
800062b8:	37 03 64 34 	extr.u %d3,%d3,8,4
800062bc:	df 03 15 00 	jeq %d3,0,800062e6 <IfxScuCcu_getSriFrequency+0x76>
        {
            sriFrequency = 0.0;
        }
        else
        {
            sriFrequency = sourceFrequency / SCU_CCUCON0.B.SRIDIV;
800062c0:	4c f0       	ld.w %d15,[%a15]0
800062c2:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800062c6:	4b 0f 41 f1 	itof %d15,%d15
800062ca:	3c 0c       	j 800062e2 <IfxScuCcu_getSriFrequency+0x72>
        }

        break;
    case 1:
        sriFrequency = sourceFrequency / 30;
800062cc:	7b 00 1f f4 	movh %d15,16880
800062d0:	3c 09       	j 800062e2 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 2:
        sriFrequency = sourceFrequency / 60;
800062d2:	7b 00 27 f4 	movh %d15,17008
800062d6:	3c 06       	j 800062e2 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 3:
        sriFrequency = sourceFrequency / 120;
800062d8:	7b 00 2f f4 	movh %d15,17136
800062dc:	3c 03       	j 800062e2 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
800062de:	7b 00 37 f4 	movh %d15,17264
800062e2:	4b f2 51 f0 	div.f %d15,%d2,%d15
        sriFrequency = 0.0;
        break;
    }

    return sriFrequency;
}
800062e6:	02 f2       	mov %d2,%d15
800062e8:	00 90       	ret 

800062ea <IfxScuCcu_getCpuFrequency>:
    return bbbFrequency;
}


float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu)
{
800062ea:	02 4f       	mov %d15,%d4
    float32 frequency = IfxScuCcu_getSriFrequency();
800062ec:	6d ff c2 ff 	call 80006270 <IfxScuCcu_getSriFrequency>
    uint32  cpuDiv    = 0;

    switch (cpu)
800062f0:	1e 1d       	jeq %d15,1,8000630a <IfxScuCcu_getCpuFrequency+0x20>
800062f2:	6e 07       	jz %d15,80006300 <IfxScuCcu_getCpuFrequency+0x16>
800062f4:	de 2a       	jne %d15,2,80006328 <IfxScuCcu_getCpuFrequency+0x3e>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
800062f6:	91 30 00 ff 	movh.a %a15,61443
800062fa:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
800062fe:	3c 0a       	j 80006312 <IfxScuCcu_getCpuFrequency+0x28>
    uint32  cpuDiv    = 0;

    switch (cpu)
    {
    case IfxCpu_ResourceCpu_0:
        cpuDiv = SCU_CCUCON6.U;
80006300:	91 30 00 ff 	movh.a %a15,61443
80006304:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006308:	3c 05       	j 80006312 <IfxScuCcu_getCpuFrequency+0x28>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
8000630a:	91 30 00 ff 	movh.a %a15,61443
8000630e:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
80006312:	4c f0       	ld.w %d15,[%a15]0
    default:
        frequency = 0.0;
        break;
    }

    if (cpuDiv != 0)
80006314:	6e 0b       	jz %d15,8000632a <IfxScuCcu_getCpuFrequency+0x40>
    {
        frequency = frequency * (cpuDiv / 64.0f);
80006316:	4b 0f 61 f1 	utof %d15,%d15
8000631a:	7b 00 c8 33 	movh %d3,15488
8000631e:	4b 3f 41 f0 	mul.f %d15,%d15,%d3
80006322:	4b f2 41 20 	mul.f %d2,%d2,%d15
80006326:	00 90       	ret 
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
        break;
    default:
        frequency = 0.0;
80006328:	82 02       	mov %d2,0
    {
        frequency = frequency * (cpuDiv / 64.0f);
    }

    return frequency;
}
8000632a:	00 90       	ret 

8000632c <IfxScuCcu_getFsi2Frequency>:


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000632c:	91 30 00 ff 	movh.a %a15,61443
80006330:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006334:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSI2DIV == 0)
80006336:	7b 00 03 30 	movh %d3,48
8000633a:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000633c:	37 0f 62 8a 	extr.u %d8,%d15,20,2

    if (ccucon0.B.FSI2DIV == 0)
    {
        frequency = 0;
80006340:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSI2DIV == 0)
80006342:	76 3f       	jz %d3,80006360 <IfxScuCcu_getFsi2Frequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
80006344:	6d ff 96 ff 	call 80006270 <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
80006348:	3b 00 f0 30 	mov %d3,3840
8000634c:	26 3f       	and %d15,%d3
8000634e:	1b 0f f0 ff 	addi %d15,%d15,-256
80006352:	8f 0f d0 f1 	andn %d15,%d15,256
80006356:	ee 05       	jnz %d15,80006360 <IfxScuCcu_getFsi2Frequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSI2DIV;
80006358:	4b 08 41 f1 	itof %d15,%d8
8000635c:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
80006360:	00 90       	ret 

80006362 <IfxScuCcu_getFsiFrequency>:


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006362:	91 30 00 ff 	movh.a %a15,61443
80006366:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000636a:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSIDIV == 0)
8000636c:	7b 00 30 30 	movh %d3,768
80006370:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006372:	37 0f 62 8c 	extr.u %d8,%d15,24,2

    if (ccucon0.B.FSIDIV == 0)
    {
        frequency = 0;
80006376:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSIDIV == 0)
80006378:	76 3f       	jz %d3,80006396 <IfxScuCcu_getFsiFrequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
8000637a:	6d ff 7b ff 	call 80006270 <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
8000637e:	3b 00 f0 30 	mov %d3,3840
80006382:	26 3f       	and %d15,%d3
80006384:	1b 0f f0 ff 	addi %d15,%d15,-256
80006388:	8f 0f d0 f1 	andn %d15,%d15,256
8000638c:	ee 05       	jnz %d15,80006396 <IfxScuCcu_getFsiFrequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSIDIV;
8000638e:	4b 08 41 f1 	itof %d15,%d8
80006392:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
80006396:	00 90       	ret 

80006398 <IfxScuCcu_init>:
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
80006398:	19 4f 10 10 	ld.w %d15,[%a4]80
8000639c:	91 00 00 c7 	movh.a %a12,28672
    return sriFrequency;
}


boolean IfxScuCcu_init(const IfxScuCcu_Config *cfg)
{
800063a0:	40 4f       	mov.aa %a15,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
800063a2:	59 cf 38 20 	st.w [%a12]184 <700000b8 <IfxScuCcu_xtalFrequency>>,%d15

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
800063a6:	6d 00 c8 07 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>
800063aa:	02 29       	mov %d9,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
800063ac:	6d 00 e3 07 	call 80007372 <IfxScuWdt_getSafetyWatchdogPassword>

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800063b0:	02 94       	mov %d4,%d9
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
800063b2:	02 28       	mov %d8,%d2

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800063b4:	6d 00 c1 06 	call 80007136 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800063b8:	91 30 00 2f 	movh.a %a2,61443
800063bc:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800063c0:	54 2c       	ld.w %d12,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;
800063c2:	4c 20       	ld.w %d15,[%a2]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800063c4:	02 94       	mov %d4,%d9

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
800063c6:	96 08       	or %d15,8
800063c8:	6c 20       	st.w [%a2]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
800063ca:	6d 00 eb 07 	call 800073a0 <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800063ce:	02 84       	mov %d4,%d8
800063d0:	6d 00 ce 06 	call 8000716c <IfxScuWdt_clearSafetyEndinit>
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800063d4:	37 0c e1 c1 	extr.u %d12,%d12,3,1

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        while (SCU_CCUCON0.B.LCK != 0U)
800063d8:	91 30 00 3f 	movh.a %a3,61443
800063dc:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800063e0:	4c 30       	ld.w %d15,[%a3]0
800063e2:	91 30 00 2f 	movh.a %a2,61443
800063e6:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800063ea:	bf 0f fb 7f 	jlt %d15,0,800063e0 <IfxScuCcu_init+0x48>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
800063ee:	4c 20       	ld.w %d15,[%a2]0
800063f0:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
800063f4:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
800063f6:	4c 20       	ld.w %d15,[%a2]0
800063f8:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
800063fc:	6c 20       	st.w [%a2]0,%d15

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
800063fe:	91 30 00 2f 	movh.a %a2,61443
80006402:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006406:	4c 20       	ld.w %d15,[%a2]0
80006408:	96 10       	or %d15,16
8000640a:	6c 20       	st.w [%a2]0,%d15
        /* Now PLL is in free running mode */

        /* Select Clock Source as PLL input clock */
        while (SCU_CCUCON0.B.LCK != 0U)
8000640c:	91 30 00 2f 	movh.a %a2,61443
80006410:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006414:	4c 20       	ld.w %d15,[%a2]0
80006416:	bf 0f ff 7f 	jlt %d15,0,80006414 <IfxScuCcu_init+0x7c>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
8000641a:	91 30 00 2f 	movh.a %a2,61443
8000641e:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80006422:	4c 20       	ld.w %d15,[%a2]0
80006424:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
80006428:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
8000642a:	4c 20       	ld.w %d15,[%a2]0
8000642c:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006430:	6c 20       	st.w [%a2]0,%d15
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
80006432:	6d 00 82 07 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80006436:	91 30 00 2f 	movh.a %a2,61443
8000643a:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
8000643e:	02 2f       	mov %d15,%d2

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80006440:	54 22       	ld.w %d2,[%a2]

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
80006442:	40 23       	mov.aa %a3,%a2
    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80006444:	8f 02 c6 21 	andn %d2,%d2,96
80006448:	74 22       	st.w [%a2],%d2

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
8000644a:	19 c6 38 20 	ld.w %d6,[%a12]184 <700000b8 <IfxScuCcu_xtalFrequency>>
8000644e:	7b 60 02 20 	movh %d2,38
80006452:	1b 02 5a 22 	addi %d2,%d2,9632
80006456:	4b 26 11 62 	div.u %e6,%d6,%d2
8000645a:	54 22       	ld.w %d2,[%a2]
8000645c:	c2 f6       	add %d6,-1
8000645e:	37 62 05 68 	insert %d6,%d2,%d6,16,5
80006462:	74 26       	st.w [%a2],%d6

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
80006464:	54 22       	ld.w %d2,[%a2]
80006466:	8f 42 40 21 	or %d2,%d2,4
8000646a:	74 22       	st.w [%a2],%d2

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
8000646c:	c5 02 3f 90 	lea %a2,27f <_.+0x27e>
80006470:	54 32       	ld.w %d2,[%a3]
80006472:	6f 12 05 80 	jnz.t %d2,1,8000647c <IfxScuCcu_init+0xe4>
80006476:	fc 2d       	loop %a2,80006470 <IfxScuCcu_init+0xd8>
    {
        TimeoutCtr--;

        if (TimeoutCtr == 0)
        {
            status = 1;
80006478:	82 1b       	mov %d11,1
8000647a:	3c 05       	j 80006484 <IfxScuCcu_init+0xec>

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
8000647c:	54 32       	ld.w %d2,[%a3]
8000647e:	6f 82 fc 7f 	jz.t %d2,8,80006476 <IfxScuCcu_init+0xde>


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;
80006482:	82 0b       	mov %d11,0
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
80006484:	02 f4       	mov %d4,%d15
80006486:	6d 00 58 06 	call 80007136 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
8000648a:	91 30 00 2f 	movh.a %a2,61443
8000648e:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
80006492:	54 22       	ld.w %d2,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
        IfxScuWdt_setCpuEndinit(endinitPw);
80006494:	02 f4       	mov %d4,%d15
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
80006496:	8f 82 40 21 	or %d2,%d2,8
8000649a:	74 22       	st.w [%a2],%d2
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
8000649c:	91 30 00 2f 	movh.a %a2,61443
800064a0:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800064a4:	54 22       	ld.w %d2,[%a2]
800064a6:	8f 82 40 21 	or %d2,%d2,8
800064aa:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinitPw);
800064ac:	6d 00 7a 07 	call 800073a0 <IfxScuWdt_setCpuEndinit>
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */

        status             |= IfxScuCcu_isOscillatorStable();

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800064b0:	02 84       	mov %d4,%d8
800064b2:	6d 00 e3 07 	call 80007478 <IfxScuWdt_setSafetyEndinit>
    }

    if (status == 0)
800064b6:	df 0b 29 81 	jne %d11,0,80006708 <IfxScuCcu_init+0x370>

        /*Setting up P N and K2 values equate pll to evr osc freq */
        {
            {
                /*Set the K2 divider value for the step corresponding to step count */
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800064ba:	02 84       	mov %d4,%d8
800064bc:	6d 00 58 06 	call 8000716c <IfxScuWdt_clearSafetyEndinit>

                while (SCU_PLLSTAT.B.K2RDY == 0U)
800064c0:	91 30 00 2f 	movh.a %a2,61443
800064c4:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800064c8:	4c 20       	ld.w %d15,[%a2]0
800064ca:	6f 5f ff 7f 	jz.t %d15,5,800064c8 <IfxScuCcu_init+0x130>
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
800064ce:	91 30 00 2f 	movh.a %a2,61443
800064d2:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
800064d6:	54 22       	ld.w %d2,[%a2]
800064d8:	0c fa       	ld.bu %d15,[%a15]10
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
800064da:	7b 20 85 43 	movh %d4,14418
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
800064de:	37 f2 07 f0 	insert %d15,%d2,%d15,0,7
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
800064e2:	1b 74 71 4b 	addi %d4,%d4,-18665
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
800064e6:	6c 20       	st.w [%a2]0,%d15

                {
                    /*change P and N divider values */
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
800064e8:	91 30 00 2f 	movh.a %a2,61443
800064ec:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800064f0:	54 22       	ld.w %d2,[%a2]
800064f2:	0c f8       	ld.bu %d15,[%a15]8
800064f4:	37 f2 04 fc 	insert %d15,%d2,%d15,24,4
800064f8:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
800064fa:	54 22       	ld.w %d2,[%a2]
800064fc:	0c f9       	ld.bu %d15,[%a15]9
800064fe:	37 f2 87 f4 	insert %d15,%d2,%d15,9,7
80006502:	6c 20       	st.w [%a2]0,%d15

                    /* Disable oscillator disconnect feature
                     * in case of PLL unlock, PLL stays connected to fref */
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
80006504:	4c 20       	ld.w %d15,[%a2]0
80006506:	96 40       	or %d15,64
80006508:	6c 20       	st.w [%a2]0,%d15
                    //                    workaround for Errata: PLL TC 005
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
8000650a:	4c 20       	ld.w %d15,[%a2]0
8000650c:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80006510:	6c 20       	st.w [%a2]0,%d15
                    /* Connect PLL to fREF as oscillator clock is connected to PLL   */
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
80006512:	4c 20       	ld.w %d15,[%a2]0
80006514:	96 20       	or %d15,32
80006516:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
80006518:	4c 20       	ld.w %d15,[%a2]0
8000651a:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000651e:	6c 20       	st.w [%a2]0,%d15

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;
80006520:	4c 20       	ld.w %d15,[%a2]0
80006522:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80006526:	6c 20       	st.w [%a2]0,%d15

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80006528:	6d ff 94 fd 	call 80006050 <IfxScuCcu_wait>

                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
8000652c:	91 30 00 2f 	movh.a %a2,61443
80006530:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006534:	4c 20       	ld.w %d15,[%a2]0
80006536:	6f 2f ff 7f 	jz.t %d15,2,80006534 <IfxScuCcu_init+0x19c>
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
8000653a:	91 30 00 2f 	movh.a %a2,61443
8000653e:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006542:	4c 20       	ld.w %d15,[%a2]0

                    while (SCU_CCUCON0.B.LCK != 0U)
80006544:	91 30 00 3f 	movh.a %a3,61443
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
80006548:	8f 1f c0 f1 	andn %d15,%d15,1
8000654c:	6c 20       	st.w [%a2]0,%d15

                    while (SCU_CCUCON0.B.LCK != 0U)
8000654e:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006552:	4c 30       	ld.w %d15,[%a3]0
80006554:	91 30 00 2f 	movh.a %a2,61443
80006558:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000655c:	bf 0f fb 7f 	jlt %d15,0,80006552 <IfxScuCcu_init+0x1ba>
                    {
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_CCUCON0.B.CLKSEL = 0x01;
80006560:	4c 20       	ld.w %d15,[%a2]0
80006562:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
80006566:	6c 20       	st.w [%a2]0,%d15

                    /*Configure the clock distribution */
                    while (SCU_CCUCON0.B.LCK != 0U)
80006568:	4c 20       	ld.w %d15,[%a2]0
8000656a:	91 30 00 cf 	movh.a %a12,61443
8000656e:	d9 cc 30 06 	lea %a12,[%a12]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006572:	bf 0f fb 7f 	jlt %d15,0,80006568 <IfxScuCcu_init+0x1d0>
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
80006576:	48 34       	ld.w %d4,[%a15]12
80006578:	6d ff 6c fd 	call 80006050 <IfxScuCcu_wait>

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
8000657c:	4c f5       	ld.w %d15,[%a15]20
8000657e:	54 c3       	ld.w %d3,[%a12]
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80006580:	48 42       	ld.w %d2,[%a15]16
                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
80006582:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80006586:	26 f2       	and %d2,%d15
80006588:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
8000658c:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon0.B.UP     = 1;
80006590:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
80006594:	91 30 00 3f 	movh.a %a3,61443
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
                        ccucon0.B.UP     = 1;
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
80006598:	6c c0       	st.w [%a12]0,%d15
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
8000659a:	d9 33 34 06 	lea %a3,[%a3]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000659e:	4c 30       	ld.w %d15,[%a3]0
800065a0:	91 30 00 2f 	movh.a %a2,61443
800065a4:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800065a8:	bf 0f fb 7f 	jlt %d15,0,8000659e <IfxScuCcu_init+0x206>
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
800065ac:	4c f7       	ld.w %d15,[%a15]28
800065ae:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
800065b0:	48 62       	ld.w %d2,[%a15]24
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
800065b2:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
800065b6:	26 f2       	and %d2,%d15
800065b8:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon1.B.INSEL = 1;
800065bc:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon1.B.UP    = 1;
800065c0:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON1     = ccucon1;
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
800065c4:	91 30 00 3f 	movh.a %a3,61443
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
                        ccucon1.B.INSEL = 1;
                        ccucon1.B.UP    = 1;
                        SCU_CCUCON1     = ccucon1;
800065c8:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
800065ca:	d9 33 00 16 	lea %a3,[%a3]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
800065ce:	4c 30       	ld.w %d15,[%a3]0
800065d0:	91 30 00 2f 	movh.a %a2,61443
800065d4:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
800065d8:	bf 0f fb 7f 	jlt %d15,0,800065ce <IfxScuCcu_init+0x236>
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
800065dc:	4c f9       	ld.w %d15,[%a15]36
800065de:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
800065e0:	48 82       	ld.w %d2,[%a15]32
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
800065e2:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
800065e6:	26 f2       	and %d2,%d15
800065e8:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon2.B.UP = 1;
800065ec:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON2  = ccucon2;
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
800065f0:	91 30 00 3f 	movh.a %a3,61443
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
                        ccucon2.B.UP = 1;
                        SCU_CCUCON2  = ccucon2;
800065f4:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
800065f6:	d9 33 0c 16 	lea %a3,[%a3]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
800065fa:	4c 30       	ld.w %d15,[%a3]0
800065fc:	91 30 00 2f 	movh.a %a2,61443
80006600:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
80006604:	bf 0f fb 7f 	jlt %d15,0,800065fa <IfxScuCcu_init+0x262>
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
80006608:	54 23       	ld.w %d3,[%a2]
8000660a:	4c fb       	ld.w %d15,[%a15]44
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
8000660c:	48 a2       	ld.w %d2,[%a15]40
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
8000660e:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
80006612:	26 f2       	and %d2,%d15
80006614:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon5.B.UP = 1;
80006618:	b7 1f 01 ff 	insert %d15,%d15,1,30,1

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
8000661c:	48 c2       	ld.w %d2,[%a15]48
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
                        ccucon5.B.UP = 1;
                        SCU_CCUCON5  = ccucon5;
8000661e:	6c 20       	st.w [%a2]0,%d15
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
80006620:	91 30 00 2f 	movh.a %a2,61443
80006624:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006628:	54 23       	ld.w %d3,[%a2]
8000662a:	4c fd       	ld.w %d15,[%a15]52
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
                        SCU_CCUCON8 = ccucon8;
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000662c:	02 84       	mov %d4,%d8
                        SCU_CCUCON5  = ccucon5;
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
8000662e:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
80006632:	26 f2       	and %d2,%d15
80006634:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON6 = ccucon6;
80006638:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
8000663a:	91 30 00 2f 	movh.a %a2,61443
8000663e:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
80006642:	54 23       	ld.w %d3,[%a2]
80006644:	4c ff       	ld.w %d15,[%a15]60
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80006646:	48 e2       	ld.w %d2,[%a15]56
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80006648:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
8000664c:	26 f2       	and %d2,%d15
8000664e:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON7 = ccucon7;
80006652:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80006654:	91 30 00 2f 	movh.a %a2,61443
80006658:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
8000665c:	54 23       	ld.w %d3,[%a2]
8000665e:	19 ff 04 10 	ld.w %d15,[%a15]68 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
80006662:	19 f2 00 10 	ld.w %d2,[%a15]64 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80006666:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
8000666a:	26 f2       	and %d2,%d15
8000666c:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON8 = ccucon8;
80006670:	6c 20       	st.w [%a2]0,%d15
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006672:	6d 00 03 07 	call 80007478 <IfxScuWdt_setSafetyEndinit>
            }
        }

        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
80006676:	91 00 80 cf 	movh.a %a12,63488
8000667a:	d9 cc 14 02 	lea %a12,[%a12]8212 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
8000667e:	19 ff 0c 10 	ld.w %d15,[%a15]76 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
80006682:	54 c3       	ld.w %d3,[%a12]

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80006684:	19 f2 08 10 	ld.w %d2,[%a15]72 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
80006688:	0f f3 e0 30 	andn %d3,%d3,%d15
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
8000668c:	26 f2       	and %d2,%d15
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
8000668e:	02 94       	mov %d4,%d9
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80006690:	0f 23 a0 f0 	or %d15,%d3,%d2
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
80006694:	6d 00 51 05 	call 80007136 <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
80006698:	6c c0       	st.w [%a12]0,%d15
                IfxScuWdt_setCpuEndinit(endinit_pw);
8000669a:	02 94       	mov %d4,%d9
8000669c:	6d 00 82 06 	call 800073a0 <IfxScuWdt_setCpuEndinit>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
800066a0:	91 30 00 df 	movh.a %a13,61443
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800066a4:	91 30 00 cf 	movh.a %a12,61443
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
800066a8:	82 0d       	mov %d13,0
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
800066aa:	d9 dd 14 06 	lea %a13,[%a13]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800066ae:	d9 cc 1c 06 	lea %a12,[%a12]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
800066b2:	0c f0       	ld.bu %d15,[%a15]0
800066b4:	8f fd 0f 21 	and %d2,%d13,255
800066b8:	7f f2 28 80 	jge.u %d2,%d15,80006708 <IfxScuCcu_init+0x370>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800066bc:	02 84       	mov %d4,%d8
800066be:	6d 00 57 05 	call 8000716c <IfxScuWdt_clearSafetyEndinit>

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
800066c2:	4c d0       	ld.w %d15,[%a13]0
800066c4:	6f 5f ff 7f 	jz.t %d15,5,800066c2 <IfxScuCcu_init+0x32a>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800066c8:	02 df       	mov %d15,%d13
800066ca:	16 ff       	and %d15,255
800066cc:	53 cf 20 a0 	mul %d10,%d15,12
800066d0:	c8 12       	ld.a %a2,[%a15]4
800066d2:	4c c0       	ld.w %d15,[%a12]0
800066d4:	60 a3       	mov.a %a3,%d10
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800066d6:	02 84       	mov %d4,%d8
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800066d8:	30 32       	add.a %a2,%a3
800066da:	14 22       	ld.bu %d2,[%a2]
800066dc:	37 2f 07 20 	insert %d2,%d15,%d2,0,7
800066e0:	74 c2       	st.w [%a12],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800066e2:	6d 00 cb 06 	call 80007478 <IfxScuWdt_setSafetyEndinit>
            }

            /*call the hook function if configured */
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
800066e6:	c8 12       	ld.a %a2,[%a15]4
800066e8:	60 a3       	mov.a %a3,%d10
800066ea:	30 32       	add.a %a2,%a3
800066ec:	99 22 08 00 	ld.a %a2,[%a2]8
800066f0:	bc 23       	jz.a %a2,800066f6 <IfxScuCcu_init+0x35e>
            {
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
800066f2:	2d 02 00 00 	calli %a2
            }

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
800066f6:	c8 12       	ld.a %a2,[%a15]4
800066f8:	60 a3       	mov.a %a3,%d10
800066fa:	c2 1d       	add %d13,1
800066fc:	30 32       	add.a %a2,%a3
800066fe:	19 24 04 00 	ld.w %d4,[%a2]4
80006702:	6d ff a7 fc 	call 80006050 <IfxScuCcu_wait>
80006706:	3c d6       	j 800066b2 <IfxScuCcu_init+0x31a>
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006708:	02 84       	mov %d4,%d8
8000670a:	6d 00 31 05 	call 8000716c <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
8000670e:	91 30 00 ff 	movh.a %a15,61443
80006712:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006716:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006718:	02 84       	mov %d4,%d8
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
8000671a:	8f 0f c4 f1 	andn %d15,%d15,64
8000671e:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006720:	6d 00 ac 06 	call 80007478 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006724:	91 30 00 ff 	movh.a %a15,61443
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006728:	02 94       	mov %d4,%d9
        SCU_TRAPCLR.B.SMUT = 1U;
8000672a:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
8000672e:	6d 00 04 05 	call 80007136 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006732:	4c f0       	ld.w %d15,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006734:	06 3c       	sh %d12,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006736:	96 08       	or %d15,8
80006738:	68 0f       	st.w [%a15]0,%d15
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
8000673a:	91 30 00 ff 	movh.a %a15,61443
8000673e:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006742:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006744:	02 94       	mov %d4,%d9
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006746:	8f 8f c0 f1 	andn %d15,%d15,8
8000674a:	a6 fc       	or %d12,%d15
8000674c:	68 0c       	st.w [%a15]0,%d12
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000674e:	6d 00 29 06 	call 800073a0 <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
80006752:	02 b2       	mov %d2,%d11
80006754:	00 90       	ret 

80006756 <IfxScuCcu_initConfig>:


void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg)
{
    *cfg = IfxScuCcu_defaultClockConfig;
80006756:	91 00 00 f8 	movh.a %a15,32768
8000675a:	d9 ff a0 80 	lea %a15,[%a15]2592 <80000a20 <IfxScuCcu_defaultClockConfig>>
8000675e:	c5 02 14 00 	lea %a2,14 <_.+0x13>
80006762:	44 ff       	ld.w %d15,[%a15+]
80006764:	64 4f       	st.w [%a4+],%d15
80006766:	fc 2e       	loop %a2,80006762 <IfxScuCcu_initConfig+0xc>
80006768:	00 90       	ret 

8000676a <IfxScuCcu_initErayPll>:
}


boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
8000676a:	40 4c       	mov.aa %a12,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
8000676c:	6d 00 e5 05 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>
80006770:	02 2f       	mov %d15,%d2
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006772:	6d 00 00 06 	call 80007372 <IfxScuWdt_getSafetyWatchdogPassword>

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006776:	02 f4       	mov %d4,%d15
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006778:	02 28       	mov %d8,%d2

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
8000677a:	6d 00 de 04 	call 80007136 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
8000677e:	91 30 00 ff 	movh.a %a15,61443
80006782:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006786:	48 03       	ld.w %d3,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006788:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000678a:	02 f4       	mov %d4,%d15
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
8000678c:	8f 82 40 21 	or %d2,%d2,8
80006790:	68 02       	st.w [%a15]0,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006792:	37 03 e1 a1 	extr.u %d10,%d3,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006796:	6d 00 05 06 	call 800073a0 <IfxScuWdt_setCpuEndinit>
    }
    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000679a:	02 84       	mov %d4,%d8
8000679c:	6d 00 e8 04 	call 8000716c <IfxScuWdt_clearSafetyEndinit>

    // ensure that PLL enabled
    if (!SCU_PLLERAYCON0.B.PLLPWD || SCU_PLLERAYCON0.B.VCOPWD || SCU_PLLERAYSTAT.B.PWDSTAT)
800067a0:	91 30 00 ff 	movh.a %a15,61443
800067a4:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800067a8:	48 02       	ld.w %d2,[%a15]0
800067aa:	ef 02 0c 00 	jz.t %d2,16,800067c2 <IfxScuCcu_initErayPll+0x58>
800067ae:	48 02       	ld.w %d2,[%a15]0
800067b0:	6f 12 09 80 	jnz.t %d2,1,800067c2 <IfxScuCcu_initErayPll+0x58>
800067b4:	91 30 00 ff 	movh.a %a15,61443
800067b8:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800067bc:	48 02       	ld.w %d2,[%a15]0
800067be:	6f 12 19 00 	jz.t %d2,1,800067f0 <IfxScuCcu_initErayPll+0x86>
    {   // PLLPWD=0 or VCOPWD=1 or PWDSTAT=1?
      // enable PLL and leave power saving mode
        SCU_PLLERAYCON0.B.PLLPWD = 1;
800067c2:	91 30 00 ff 	movh.a %a15,61443
800067c6:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800067ca:	48 02       	ld.w %d2,[%a15]0
800067cc:	b7 f2 01 28 	insert %d2,%d2,15,16,1
800067d0:	68 02       	st.w [%a15]0,%d2
        SCU_PLLERAYCON0.B.VCOPWD = 0;
800067d2:	48 02       	ld.w %d2,[%a15]0
800067d4:	8f 22 c0 21 	andn %d2,%d2,2
800067d8:	68 02       	st.w [%a15]0,%d2

        while (SCU_PLLERAYSTAT.B.PWDSTAT)  // poll PWDSTAT
800067da:	91 30 00 ff 	movh.a %a15,61443
800067de:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800067e2:	48 02       	ld.w %d2,[%a15]0
800067e4:	6f 12 ff ff 	jnz.t %d2,1,800067e2 <IfxScuCcu_initErayPll+0x78>
        {}

        /*Wait for waitCounter corresponding to the pll step */
        IfxScuCcu_wait(cfg->pllInitialStep.waitTime);
800067e8:	19 c4 04 00 	ld.w %d4,[%a12]4
800067ec:	6d ff 32 fc 	call 80006050 <IfxScuCcu_wait>
    }

    /* Enter Prescalar mode */
    /* Update K and N dividers */
    if (!SCU_PLLERAYSTAT.B.VCOBYST)      // checking PLLERAYBYPST flag
800067f0:	91 30 00 ff 	movh.a %a15,61443
800067f4:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800067f8:	48 02       	ld.w %d2,[%a15]0
800067fa:	6f 02 15 80 	jnz.t %d2,0,80006824 <IfxScuCcu_initErayPll+0xba>
    {                                    // select "secure" K1 value - please check @silicon if K1=4 is ok
        while (!SCU_PLLERAYSTAT.B.K1RDY) // poll K1RDY before changing K
800067fe:	48 02       	ld.w %d2,[%a15]0
80006800:	6f 42 ff 7f 	jz.t %d2,4,800067fe <IfxScuCcu_initErayPll+0x94>
        {}

        SCU_PLLERAYCON1.B.K1DIV = 3;
80006804:	91 30 00 ff 	movh.a %a15,61443
80006808:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
8000680c:	48 02       	ld.w %d2,[%a15]0
8000680e:	b7 32 07 28 	insert %d2,%d2,3,16,7
80006812:	68 02       	st.w [%a15]0,%d2

        // activate VCO bypass (bit 0: VCOBYP=1)
        SCU_PLLERAYCON0.B.VCOBYP = 1;
80006814:	91 30 00 ff 	movh.a %a15,61443
80006818:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
8000681c:	48 02       	ld.w %d2,[%a15]0
8000681e:	8f 12 40 21 	or %d2,%d2,1
80006822:	68 02       	st.w [%a15]0,%d2
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
80006824:	91 30 00 ff 	movh.a %a15,61443
80006828:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
8000682c:	48 02       	ld.w %d2,[%a15]0
8000682e:	6f 52 ff 7f 	jz.t %d2,5,8000682c <IfxScuCcu_initErayPll+0xc2>
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
80006832:	91 30 00 ff 	movh.a %a15,61443
80006836:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
8000683a:	48 03       	ld.w %d3,[%a15]0
8000683c:	39 c2 02 00 	ld.bu %d2,[%a12]2 <f0030000 <_SMALL_DATA4_+0x40028000>>
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006840:	02 84       	mov %d4,%d8
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
80006842:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006846:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.PDIV  = cfg->pllInitialStep.pDivider;
80006848:	91 30 00 ff 	movh.a %a15,61443
8000684c:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006850:	48 03       	ld.w %d3,[%a15]0
80006852:	14 c2       	ld.bu %d2,[%a12]
80006854:	37 23 04 2c 	insert %d2,%d3,%d2,24,4
80006858:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.NDIV  = cfg->pllInitialStep.nDivider;
8000685a:	48 03       	ld.w %d3,[%a15]0
8000685c:	39 c2 01 00 	ld.bu %d2,[%a12]1
80006860:	37 23 85 24 	insert %d2,%d3,%d2,9,5
80006864:	68 02       	st.w [%a15]0,%d2
     *  CLRFINDIS = 1 ==> Connect OSC to PLL
     *  PLLPWD = 1    ==> PLL Power Saving Mode : Normal behaviour
     *  NDIV = NDIV
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
80006866:	48 02       	ld.w %d2,[%a15]0
80006868:	b7 f2 01 29 	insert %d2,%d2,15,18,1
8000686c:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;
8000686e:	48 02       	ld.w %d2,[%a15]0
80006870:	8f 02 42 21 	or %d2,%d2,32
80006874:	68 02       	st.w [%a15]0,%d2

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006876:	6d 00 01 06 	call 80007478 <IfxScuWdt_setSafetyEndinit>

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
8000687a:	91 10 00 f0 	movh.a %a15,1
8000687e:	91 30 00 2f 	movh.a %a2,61443
80006882:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006886:	d9 ff 0f dc 	lea %a15,[%a15]-15537 <c34f <__TRICORE_DERIVATE_MEMORY_MAP__+0x9c4f>>
8000688a:	fd f0 04 00 	loop %a15,80006892 <IfxScuCcu_initErayPll+0x128>
    {}

    // check for timeout, exit immediately (don't disable VCO bypass) of not locked
    if (!time_out_ctr)
    {
        status = TRUE;
8000688e:	82 19       	mov %d9,1
80006890:	3c 05       	j 8000689a <IfxScuCcu_initErayPll+0x130>
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
80006892:	54 22       	ld.w %d2,[%a2]
80006894:	6f 22 fb 7f 	jz.t %d2,2,8000688a <IfxScuCcu_initErayPll+0x120>

boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
80006898:	82 09       	mov %d9,0
    if (!time_out_ctr)
    {
        status = TRUE;
    }

    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000689a:	02 84       	mov %d4,%d8
8000689c:	6d 00 68 04 	call 8000716c <IfxScuWdt_clearSafetyEndinit>
    /*Bypass VCO*/
    SCU_PLLERAYCON0.B.VCOBYP = 0U;
800068a0:	91 30 00 ff 	movh.a %a15,61443
800068a4:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800068a8:	48 02       	ld.w %d2,[%a15]0
800068aa:	8f 12 c0 21 	andn %d2,%d2,1
800068ae:	68 02       	st.w [%a15]0,%d2

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
800068b0:	91 30 00 ff 	movh.a %a15,61443
800068b4:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800068b8:	48 02       	ld.w %d2,[%a15]0
800068ba:	6f 02 ff ff 	jnz.t %d2,0,800068b8 <IfxScuCcu_initErayPll+0x14e>
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
800068be:	91 30 00 ff 	movh.a %a15,61443
800068c2:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800068c6:	48 02       	ld.w %d2,[%a15]0
    {
        status = TRUE;
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800068c8:	02 84       	mov %d4,%d8

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
800068ca:	37 02 61 21 	extr.u %d2,%d2,2,1

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
800068ce:	91 30 00 ff 	movh.a %a15,61443
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
    {
        status = TRUE;
800068d2:	ab 19 80 92 	sel %d9,%d2,%d9,1
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800068d6:	6d 00 d1 05 	call 80007478 <IfxScuWdt_setSafetyEndinit>

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800068da:	02 f4       	mov %d4,%d15
800068dc:	6d 00 2d 04 	call 80007136 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
800068e0:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
800068e4:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800068e6:	8f 3a 00 30 	sh %d3,%d10,3

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
800068ea:	8f 82 40 21 	or %d2,%d2,8
800068ee:	68 02       	st.w [%a15]0,%d2
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800068f0:	91 30 00 ff 	movh.a %a15,61443
800068f4:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800068f8:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800068fa:	02 f4       	mov %d4,%d15
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800068fc:	8f 82 c0 21 	andn %d2,%d2,8
80006900:	a6 32       	or %d2,%d3
80006902:	68 02       	st.w [%a15]0,%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006904:	6d 00 4e 05 	call 800073a0 <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
80006908:	02 92       	mov %d2,%d9
8000690a:	00 90       	ret 

8000690c <IfxScuCcu_initErayPllConfig>:


void IfxScuCcu_initErayPllConfig(IfxScuCcu_ErayPllConfig *cfg)
{
    *cfg = IfxScuCcu_defaultErayPllConfig;
8000690c:	91 00 00 f8 	movh.a %a15,32768
80006910:	d9 ff 98 80 	lea %a15,[%a15]2584 <80000a18 <IfxScuCcu_defaultErayPllConfig>>
80006914:	09 f2 40 09 	ld.d %e2,[%a15]
80006918:	89 42 40 09 	st.d [%a4],%e2
8000691c:	00 90       	ret 

8000691e <IfxScuCcu_setCpuFrequency>:
    return status;
}


float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq)
{
8000691e:	02 5a       	mov %d10,%d5
80006920:	02 49       	mov %d9,%d4
    uint16  endinitSfty_pw;
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();
80006922:	6d ff a7 fc 	call 80006270 <IfxScuCcu_getSriFrequency>
80006926:	02 2f       	mov %d15,%d2

    if (cpuFreq >= sriFreq)
80006928:	4b 2a 01 20 	cmp.f %d2,%d10,%d2
8000692c:	87 22 a2 20 	or.t %d2,%d2,2,%d2,1
    {
        cpuDiv = 0;
80006930:	82 08       	mov %d8,0
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();

    if (cpuFreq >= sriFreq)
80006932:	f6 29       	jnz %d2,80006944 <IfxScuCcu_setCpuFrequency+0x26>
    {
        cpuDiv = 0;
    }
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
80006934:	7b 00 28 84 	movh %d8,17024
80006938:	4b 8a 41 80 	mul.f %d8,%d10,%d8
8000693c:	4b f8 51 80 	div.f %d8,%d8,%d15
80006940:	4b 08 71 81 	ftouz %d8,%d8
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006944:	6d 00 17 05 	call 80007372 <IfxScuWdt_getSafetyWatchdogPassword>

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006948:	02 24       	mov %d4,%d2
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
8000694a:	02 2a       	mov %d10,%d2

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000694c:	6d 00 10 04 	call 8000716c <IfxScuWdt_clearSafetyEndinit>

        switch (cpu)
80006950:	df 19 0f 00 	jeq %d9,1,8000696e <IfxScuCcu_setCpuFrequency+0x50>
80006954:	76 98       	jz %d9,80006964 <IfxScuCcu_setCpuFrequency+0x46>
80006956:	df 29 11 80 	jne %d9,2,80006978 <IfxScuCcu_setCpuFrequency+0x5a>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
8000695a:	91 30 00 ff 	movh.a %a15,61443
8000695e:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
80006962:	3c 0a       	j 80006976 <IfxScuCcu_setCpuFrequency+0x58>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        switch (cpu)
        {
        case IfxCpu_ResourceCpu_0:
            SCU_CCUCON6.U = cpuDiv;
80006964:	91 30 00 ff 	movh.a %a15,61443
80006968:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
8000696c:	3c 05       	j 80006976 <IfxScuCcu_setCpuFrequency+0x58>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
8000696e:	91 30 00 ff 	movh.a %a15,61443
80006972:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
80006976:	68 08       	st.w [%a15]0,%d8

        default:
            break;
        }

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006978:	02 a4       	mov %d4,%d10
8000697a:	6d 00 7f 05 	call 80007478 <IfxScuWdt_setSafetyEndinit>
    }

    if (cpuDiv != 0)
8000697e:	76 89       	jz %d8,80006990 <IfxScuCcu_setCpuFrequency+0x72>
    {
        sriFreq = sriFreq * (cpuDiv / 64.0f);
80006980:	4b 08 61 81 	utof %d8,%d8
80006984:	7b 00 c8 23 	movh %d2,15488
80006988:	4b 28 41 80 	mul.f %d8,%d8,%d2
8000698c:	4b 8f 41 f0 	mul.f %d15,%d15,%d8
    }

    return sriFreq;
}
80006990:	02 f2       	mov %d2,%d15
80006992:	00 90       	ret 

80006994 <IfxScuCcu_setGtmFrequency>:


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
80006994:	91 30 00 ff 	movh.a %a15,61443
80006998:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
    return sriFreq;
}


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
8000699c:	02 48       	mov %d8,%d4
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
8000699e:	4c f0       	ld.w %d15,[%a15]0

    float32         inputFreq = IfxScuCcu_getSourceFrequency();
800069a0:	6d ff 46 fb 	call 8000602c <IfxScuCcu_getSourceFrequency>
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
800069a4:	4b 82 51 20 	div.f %d2,%d2,%d8
800069a8:	4b 02 31 31 	ftoiz %d3,%d2
800069ac:	4b 03 41 41 	itof %d4,%d3
800069b0:	6b 04 31 22 	sub.f %d2,%d2,%d4
800069b4:	7b 00 f0 43 	movh %d4,16128
800069b8:	4b 42 01 20 	cmp.f %d2,%d2,%d4
800069bc:	37 02 61 21 	extr.u %d2,%d2,2,1
800069c0:	42 32       	add %d2,%d3
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800069c2:	82 13       	mov %d3,1
800069c4:	0b 32 b0 21 	max.u %d2,%d2,%d3
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
800069c8:	8b e2 00 52 	eq %d5,%d2,14
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
800069cc:	1b 92 ff 4f 	addi %d4,%d2,-7
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
    {
        gtmDiv = 12;
800069d0:	ab c2 a0 95 	seln %d9,%d5,%d2,12
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
800069d4:	8f 12 c0 31 	andn %d3,%d2,1
800069d8:	02 92       	mov %d2,%d9
800069da:	8b 74 a0 92 	ge.u %d9,%d4,7
800069de:	2b 32 40 99 	sel %d9,%d9,%d2,%d3
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
800069e2:	6d 00 c8 04 	call 80007372 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
800069e6:	02 24       	mov %d4,%d2
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
800069e8:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
800069ea:	6d 00 c1 03 	call 8000716c <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON1.B.LCK != 0U)
800069ee:	40 f2       	mov.aa %a2,%a15
800069f0:	54 22       	ld.w %d2,[%a2]
800069f2:	91 30 00 ff 	movh.a %a15,61443
800069f6:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800069fa:	bf 02 fb 7f 	jlt %d2,0,800069f0 <IfxScuCcu_setGtmFrequency+0x5c>
    {}

    ccucon1.B.GTMDIV = gtmDiv;
800069fe:	37 9f 04 f6 	insert %d15,%d15,%d9,12,4
    ccucon1.B.UP     = 1U;
80006a02:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON1.U    = ccucon1.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006a06:	02 84       	mov %d4,%d8
    while (SCU_CCUCON1.B.LCK != 0U)
    {}

    ccucon1.B.GTMDIV = gtmDiv;
    ccucon1.B.UP     = 1U;
    SCU_CCUCON1.U    = ccucon1.U;
80006a08:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006a0a:	6d 00 37 05 	call 80007478 <IfxScuWdt_setSafetyEndinit>
}


IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.GTMDIV;
80006a0e:	6d ff 0f fb 	call 8000602c <IfxScuCcu_getSourceFrequency>
80006a12:	4c f0       	ld.w %d15,[%a15]0
80006a14:	37 0f 64 f6 	extr.u %d15,%d15,12,4
80006a18:	4b 0f 41 f1 	itof %d15,%d15

    return IfxScuCcu_getGtmFrequency();
}
80006a1c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006a20:	00 90       	ret 

80006a22 <IfxScuCcu_setPll2ErayFrequency>:


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
80006a22:	02 48       	mov %d8,%d4
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
80006a24:	6d 00 a7 04 	call 80007372 <IfxScuWdt_getSafetyWatchdogPassword>
80006a28:	02 2f       	mov %d15,%d2
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a2a:	6d ff 84 fa 	call 80005f32 <IfxScuCcu_getPllErayVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006a2e:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a30:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006a32:	6d 00 9d 03 	call 8000716c <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a36:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006a3a:	91 30 00 ff 	movh.a %a15,61443
80006a3e:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006a42:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a44:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(password);
80006a48:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a4a:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006a4e:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006a52:	37 82 04 84 	insert %d8,%d2,%d8,8,4
80006a56:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(password);
80006a58:	6d 00 10 05 	call 80007478 <IfxScuWdt_setSafetyEndinit>

IFX_INLINE float32 IfxScuCcu_getPll2ErayFrequency(void)
{
    float32 pll2ErayFrequency;

    pll2ErayFrequency = IfxScuCcu_getPllErayVcoFrequency() / (SCU_PLLERAYCON1.B.K3DIV + 1);
80006a5c:	6d ff 6b fa 	call 80005f32 <IfxScuCcu_getPllErayVcoFrequency>
80006a60:	4c f0       	ld.w %d15,[%a15]0
80006a62:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80006a66:	c2 1f       	add %d15,1
80006a68:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2ErayFrequency();
}
80006a6c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006a70:	00 90       	ret 

80006a72 <IfxScuCcu_setPll2Frequency>:


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
80006a72:	02 48       	mov %d8,%d4
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006a74:	6d 00 7f 04 	call 80007372 <IfxScuWdt_getSafetyWatchdogPassword>
80006a78:	02 2f       	mov %d15,%d2
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006a7a:	6d ff b7 fa 	call 80005fe8 <IfxScuCcu_getPllVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006a7e:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006a80:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006a82:	6d 00 75 03 	call 8000716c <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006a86:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006a8a:	91 30 00 ff 	movh.a %a15,61443
80006a8e:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80006a92:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006a94:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006a98:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006a9a:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006a9e:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006aa2:	37 82 07 84 	insert %d8,%d2,%d8,8,7
80006aa6:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006aa8:	6d 00 e8 04 	call 80007478 <IfxScuWdt_setSafetyEndinit>


IFX_INLINE float32 IfxScuCcu_getPll2Frequency(void)
{
    float32 pll2Frequency;
    pll2Frequency = IfxScuCcu_getPllVcoFrequency() / (SCU_PLLCON1.B.K3DIV + 1);
80006aac:	6d ff 9e fa 	call 80005fe8 <IfxScuCcu_getPllVcoFrequency>
80006ab0:	4c f0       	ld.w %d15,[%a15]0
80006ab2:	37 0f 67 f4 	extr.u %d15,%d15,8,7
80006ab6:	c2 1f       	add %d15,1
80006ab8:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2Frequency();
}
80006abc:	4b f2 51 20 	div.f %d2,%d2,%d15
80006ac0:	00 90       	ret 

80006ac2 <IfxScuCcu_setSpbFrequency>:


float32 IfxScuCcu_setSpbFrequency(float32 spbFreq)
{
80006ac2:	02 4f       	mov %d15,%d4
    /* TODO: check whether it is necessary to disable trap and/or the safety */
    uint16          l_EndInitPW;
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
80006ac4:	6d ff b4 fa 	call 8000602c <IfxScuCcu_getSourceFrequency>
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
80006ac8:	4b f2 51 20 	div.f %d2,%d2,%d15
80006acc:	82 24       	mov %d4,2
80006ace:	4b 02 71 21 	ftouz %d2,%d2
80006ad2:	0b 42 b0 41 	max.u %d4,%d2,%d4
    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
    {
        spbDiv = spbDiv - 1;
    }

    if (spbDiv == 14)
80006ad6:	8b e4 00 32 	eq %d3,%d4,14
    {
        spbDiv = 12;
80006ada:	ab c4 a0 a3 	seln %d10,%d3,%d4,12
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
    spbDiv = __maxu(spbDiv, 2);

    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
80006ade:	1b 94 ff 2f 	addi %d2,%d4,-7
    {
        spbDiv = spbDiv - 1;
80006ae2:	8f 14 c0 f1 	andn %d15,%d4,1
80006ae6:	02 a4       	mov %d4,%d10
80006ae8:	8b 72 a0 a2 	ge.u %d10,%d2,7
80006aec:	2b f4 40 aa 	sel %d10,%d10,%d4,%d15
    if (spbDiv == 14)
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
80006af0:	6d 00 23 04 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>
80006af4:	02 28       	mov %d8,%d2
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006af6:	6d 00 3e 04 	call 80007372 <IfxScuWdt_getSafetyWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006afa:	02 84       	mov %d4,%d8
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006afc:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006afe:	6d 00 1c 03 	call 80007136 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006b02:	91 30 00 ff 	movh.a %a15,61443
80006b06:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006b0a:	48 02       	ld.w %d2,[%a15]0
80006b0c:	3b 00 3e f0 	mov %d15,992
80006b10:	a6 2f       	or %d15,%d2
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b12:	02 84       	mov %d4,%d8

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006b14:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b16:	6d 00 45 04 	call 800073a0 <IfxScuWdt_setCpuEndinit>

    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006b1a:	02 94       	mov %d4,%d9
80006b1c:	6d 00 28 03 	call 8000716c <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006b20:	91 30 00 2f 	movh.a %a2,61443
80006b24:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006b28:	4c 20       	ld.w %d15,[%a2]0
80006b2a:	91 30 00 ff 	movh.a %a15,61443
80006b2e:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006b32:	bf 0f fb 7f 	jlt %d15,0,80006b28 <IfxScuCcu_setSpbFrequency+0x66>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006b36:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SPBDIV = spbDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006b38:	02 94       	mov %d4,%d9

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SPBDIV = spbDiv;
80006b3a:	37 af 04 f8 	insert %d15,%d15,%d10,16,4
    ccucon0.B.UP     = 1;
80006b3e:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006b42:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006b44:	6d 00 9a 04 	call 80007478 <IfxScuWdt_setSafetyEndinit>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006b48:	02 84       	mov %d4,%d8
80006b4a:	6d 00 f6 02 	call 80007136 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006b4e:	91 30 00 ff 	movh.a %a15,61443
80006b52:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006b56:	4c f0       	ld.w %d15,[%a15]0
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b58:	02 84       	mov %d4,%d8
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006b5a:	b7 0f 85 f2 	insert %d15,%d15,0,5,5
80006b5e:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b60:	6d 00 20 04 	call 800073a0 <IfxScuWdt_setCpuEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006b64:	91 30 00 ff 	movh.a %a15,61443
80006b68:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006b6c:	4c f0       	ld.w %d15,[%a15]0
80006b6e:	bf 0f ff 7f 	jlt %d15,0,80006b6c <IfxScuCcu_setSpbFrequency+0xaa>
    {}

    return IfxScuCcu_getSpbFrequency();
80006b72:	1d ff 1e fb 	j 800061ae <IfxScuCcu_getSpbFrequency>

80006b76 <IfxScuCcu_setSriFrequency>:
}


float32 IfxScuCcu_setSriFrequency(float32 sriFreq)
{
80006b76:	02 4f       	mov %d15,%d4
    float32         freq   = 0;
    float32         source = IfxScuCcu_getSourceFrequency();
80006b78:	6d ff 5a fa 	call 8000602c <IfxScuCcu_getSourceFrequency>
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
80006b7c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006b80:	4b 02 31 31 	ftoiz %d3,%d2
80006b84:	4b 03 41 f1 	itof %d15,%d3
80006b88:	6b 0f 31 22 	sub.f %d2,%d2,%d15
80006b8c:	7b 00 f0 f3 	movh %d15,16128
80006b90:	4b f2 01 f0 	cmp.f %d15,%d2,%d15
80006b94:	37 0f 61 f1 	extr.u %d15,%d15,2,1
80006b98:	82 12       	mov %d2,1
80006b9a:	42 3f       	add %d15,%d3
80006b9c:	0b 2f b0 f1 	max.u %d15,%d15,%d2
    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
80006ba0:	8b ef 00 42 	eq %d4,%d15,14
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
80006ba4:	92 93       	add %d3,%d15,-7
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
    {
        sriDiv = 12;
80006ba6:	ab cf a0 94 	seln %d9,%d4,%d15,12
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
80006baa:	8f 1f c0 21 	andn %d2,%d15,1
80006bae:	02 9f       	mov %d15,%d9
80006bb0:	8b 73 a0 92 	ge.u %d9,%d3,7
80006bb4:	2b 2f 40 99 	sel %d9,%d9,%d15,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006bb8:	6d 00 dd 03 	call 80007372 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006bbc:	02 24       	mov %d4,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006bbe:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006bc0:	6d 00 d6 02 	call 8000716c <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006bc4:	91 30 00 2f 	movh.a %a2,61443
80006bc8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bcc:	4c 20       	ld.w %d15,[%a2]0
80006bce:	91 30 00 ff 	movh.a %a15,61443
80006bd2:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bd6:	bf 0f fb 7f 	jlt %d15,0,80006bcc <IfxScuCcu_setSriFrequency+0x56>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006bda:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SRIDIV = sriDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006bdc:	02 84       	mov %d4,%d8

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SRIDIV = sriDiv;
80006bde:	37 9f 04 f4 	insert %d15,%d15,%d9,8,4
    ccucon0.B.UP     = 1;
80006be2:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006be6:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006be8:	6d 00 48 04 	call 80007478 <IfxScuWdt_setSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006bec:	4c f0       	ld.w %d15,[%a15]0
80006bee:	bf 0f ff 7f 	jlt %d15,0,80006bec <IfxScuCcu_setSriFrequency+0x76>
    {}

    freq = IfxScuCcu_getSriFrequency();
80006bf2:	1d ff 3f fb 	j 80006270 <IfxScuCcu_getSriFrequency>

80006bf6 <IfxScuCcu_switchToBackupClock>:
{
    uint16 endinit_pw, endinitSfty_pw;
    int    pllStepsCount;
    uint8  smuTrapEnable;

    if (SCU_CCUCON0.B.CLKSEL == 0) /* Already source is backup clock */
80006bf6:	91 30 00 ff 	movh.a %a15,61443
80006bfa:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bfe:	4c f0       	ld.w %d15,[%a15]0
80006c00:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80006c04:	df 0f 81 00 	jeq %d15,0,80006d06 <IfxScuCcu_switchToBackupClock+0x110>
80006c08:	40 4f       	mov.aa %a15,%a4
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006c0a:	6d 00 b4 03 	call 80007372 <IfxScuWdt_getSafetyWatchdogPassword>
80006c0e:	02 29       	mov %d9,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006c10:	6d 00 93 03 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006c14:	0c f0       	ld.bu %d15,[%a15]0
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006c16:	02 28       	mov %d8,%d2
80006c18:	53 cf 20 20 	mul %d2,%d15,12
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006c1c:	91 30 00 ef 	movh.a %a14,61443
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c20:	91 30 00 df 	movh.a %a13,61443
80006c24:	60 22       	mov.a %a2,%d2
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006c26:	d9 ee 14 06 	lea %a14,[%a14]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006c2a:	d9 2c f4 ff 	lea %a12,[%a2]-12 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c2e:	d9 dd 1c 06 	lea %a13,[%a13]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006c32:	6e 1b       	jz %d15,80006c68 <IfxScuCcu_switchToBackupClock+0x72>
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006c34:	02 94       	mov %d4,%d9
80006c36:	6d 00 9b 02 	call 8000716c <IfxScuWdt_clearSafetyEndinit>

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006c3a:	54 e2       	ld.w %d2,[%a14]
80006c3c:	6f 52 ff 7f 	jz.t %d2,5,80006c3a <IfxScuCcu_switchToBackupClock+0x44>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c40:	c8 12       	ld.a %a2,[%a15]4
80006c42:	54 d3       	ld.w %d3,[%a13]

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006c44:	02 94       	mov %d4,%d9
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c46:	30 c2       	add.a %a2,%a12
80006c48:	14 22       	ld.bu %d2,[%a2]

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006c4a:	c2 ff       	add %d15,-1
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c4c:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006c50:	74 d2       	st.w [%a13],%d2

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006c52:	6d 00 13 04 	call 80007478 <IfxScuWdt_setSafetyEndinit>

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount - 1].waitTime);
80006c56:	c8 12       	ld.a %a2,[%a15]4
80006c58:	30 c2       	add.a %a2,%a12
80006c5a:	19 24 04 00 	ld.w %d4,[%a2]4
80006c5e:	6d ff f9 f9 	call 80006050 <IfxScuCcu_wait>
80006c62:	d9 cc f4 ff 	lea %a12,[%a12]-12
80006c66:	3c e6       	j 80006c32 <IfxScuCcu_switchToBackupClock+0x3c>
        }
    }

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006c68:	02 84       	mov %d4,%d8
80006c6a:	6d 00 66 02 	call 80007136 <IfxScuWdt_clearCpuEndinit>

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006c6e:	91 30 00 ff 	movh.a %a15,61443
80006c72:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006c76:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006c78:	4c f0       	ld.w %d15,[%a15]0

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006c7a:	02 84       	mov %d4,%d8
    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
80006c7c:	96 08       	or %d15,8
80006c7e:	68 0f       	st.w [%a15]0,%d15

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006c80:	37 02 e1 a1 	extr.u %d10,%d2,3,1
        SCU_TRAPDIS.B.SMUT = 1U;

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006c84:	6d 00 8e 03 	call 800073a0 <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006c88:	02 94       	mov %d4,%d9
80006c8a:	6d 00 71 02 	call 8000716c <IfxScuWdt_clearSafetyEndinit>

        while (SCU_CCUCON0.B.LCK != 0U)
80006c8e:	91 30 00 2f 	movh.a %a2,61443
80006c92:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c96:	4c 20       	ld.w %d15,[%a2]0
80006c98:	91 30 00 ff 	movh.a %a15,61443
80006c9c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006ca0:	bf 0f fb 7f 	jlt %d15,0,80006c96 <IfxScuCcu_switchToBackupClock+0xa0>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
80006ca4:	4c f0       	ld.w %d15,[%a15]0
80006ca6:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006caa:	68 0f       	st.w [%a15]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80006cac:	4c f0       	ld.w %d15,[%a15]0
80006cae:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006cb2:	68 0f       	st.w [%a15]0,%d15

        while (SCU_CCUCON0.B.LCK != 0U)
80006cb4:	4c f0       	ld.w %d15,[%a15]0
80006cb6:	bf 0f ff 7f 	jlt %d15,0,80006cb4 <IfxScuCcu_switchToBackupClock+0xbe>
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006cba:	91 30 00 ff 	movh.a %a15,61443
80006cbe:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006cc2:	4c f0       	ld.w %d15,[%a15]0

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006cc4:	02 94       	mov %d4,%d9
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006cc6:	96 10       	or %d15,16
80006cc8:	68 0f       	st.w [%a15]0,%d15

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006cca:	4c f0       	ld.w %d15,[%a15]0
80006ccc:	8f 0f c4 f1 	andn %d15,%d15,64
80006cd0:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006cd2:	6d 00 d3 03 	call 80007478 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006cd6:	91 30 00 ff 	movh.a %a15,61443
80006cda:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006cde:	02 84       	mov %d4,%d8
80006ce0:	6d 00 2b 02 	call 80007136 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006ce4:	4c f0       	ld.w %d15,[%a15]0

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006ce6:	8f 3a 00 20 	sh %d2,%d10,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006cea:	96 08       	or %d15,8
80006cec:	68 0f       	st.w [%a15]0,%d15

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006cee:	91 30 00 ff 	movh.a %a15,61443
80006cf2:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006cf6:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006cf8:	02 84       	mov %d4,%d8
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006cfa:	8f 8f c0 f1 	andn %d15,%d15,8
80006cfe:	a6 2f       	or %d15,%d2
80006d00:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006d02:	1d 00 4f 03 	j 800073a0 <IfxScuWdt_setCpuEndinit>
80006d06:	00 90       	ret 

80006d08 <IfxScuEru_clearAllEventFlags>:
/******************************************************************************/

void IfxScuEru_clearAllEventFlags(void)
{
    uint32 mask = (0xFF << 16);
    MODULE_SCU.FMR.U = mask;
80006d08:	91 30 00 ff 	movh.a %a15,61443
80006d0c:	7b f0 0f f0 	movh %d15,255
80006d10:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d14:	59 ff 24 80 	st.w [%a15]548 <f0030224 <_SMALL_DATA4_+0x40028224>>,%d15
80006d18:	00 90       	ret 

80006d1a <IfxScuEru_clearEventFlag>:
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006d1a:	1b 04 01 40 	addi %d4,%d4,16
80006d1e:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006d20:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006d24:	0f 4f 00 f0 	sh %d15,%d15,%d4
    SCU_FMR.U = mask;
80006d28:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006d2c:	68 0f       	st.w [%a15]0,%d15
80006d2e:	00 90       	ret 

80006d30 <IfxScuEru_clearInputChannelConfiguration>:


void IfxScuEru_clearInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d30:	8f f4 1f f0 	sh %d15,%d4,-1
80006d34:	06 2f       	sh %d15,2
80006d36:	60 ff       	mov.a %a15,%d15
80006d38:	d9 ff 00 06 	lea %a15,[%a15]24576
80006d3c:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006d40:	19 ff 10 80 	ld.w %d15,[%a15]528
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006d44:	6f 04 05 00 	jz.t %d4,0,80006d4e <IfxScuEru_clearInputChannelConfiguration+0x1e>
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006d48:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006d4c:	3c 03       	j 80006d52 <IfxScuEru_clearInputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006d4e:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006d52:	59 ff 10 80 	st.w [%a15]528,%d15
80006d56:	00 90       	ret 

80006d58 <IfxScuEru_clearOutputChannelConfiguration>:


void IfxScuEru_clearOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d58:	8f f4 1f f0 	sh %d15,%d4,-1
80006d5c:	06 2f       	sh %d15,2
80006d5e:	60 ff       	mov.a %a15,%d15
80006d60:	d9 ff 00 06 	lea %a15,[%a15]24576
80006d64:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006d68:	19 ff 2c 80 	ld.w %d15,[%a15]556
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006d6c:	6f 04 05 00 	jz.t %d4,0,80006d76 <IfxScuEru_clearOutputChannelConfiguration+0x1e>
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006d70:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006d74:	3c 03       	j 80006d7a <IfxScuEru_clearOutputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006d76:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006d7a:	59 ff 2c 80 	st.w [%a15]556,%d15
80006d7e:	00 90       	ret 

80006d80 <IfxScuEru_connectTrigger>:


void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d80:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006d84:	91 30 00 ff 	movh.a %a15,61443
80006d88:	1b 4f 08 f0 	addi %d15,%d15,132
80006d8c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d90:	8f 75 00 51 	and %d5,%d5,7
80006d94:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006d96:	6f 04 08 00 	jz.t %d4,0,80006da6 <IfxScuEru_connectTrigger+0x26>
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006d9a:	4c f0       	ld.w %d15,[%a15]0
80006d9c:	8f c5 01 50 	sh %d5,%d5,28
80006da0:	b7 0f 03 fe 	insert %d15,%d15,0,28,3
80006da4:	3c 06       	j 80006db0 <IfxScuEru_connectTrigger+0x30>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.INP0 = triggerSelect;
80006da6:	4c f0       	ld.w %d15,[%a15]0
80006da8:	8f c5 00 50 	sh %d5,%d5,12
80006dac:	b7 0f 03 f6 	insert %d15,%d15,0,12,3
80006db0:	a6 f5       	or %d5,%d15
80006db2:	68 05       	st.w [%a15]0,%d5
80006db4:	00 90       	ret 

80006db6 <IfxScuEru_disableAutoClear>:


void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006db6:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006dba:	91 30 00 ff 	movh.a %a15,61443
80006dbe:	1b 4f 08 f0 	addi %d15,%d15,132
80006dc2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006dc6:	90 ff       	addsc.a %a15,%a15,%d15,2
80006dc8:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006dca:	6f 04 05 00 	jz.t %d4,0,80006dd4 <IfxScuEru_disableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006dce:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80006dd2:	3c 03       	j 80006dd8 <IfxScuEru_disableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = FALSE;
80006dd4:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80006dd8:	68 0f       	st.w [%a15]0,%d15
80006dda:	00 90       	ret 

80006ddc <IfxScuEru_disableFallingEdgeDetection>:


void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ddc:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006de0:	91 30 00 ff 	movh.a %a15,61443
80006de4:	1b 4f 08 f0 	addi %d15,%d15,132
80006de8:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006dec:	90 ff       	addsc.a %a15,%a15,%d15,2
80006dee:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006df0:	6f 04 05 00 	jz.t %d4,0,80006dfa <IfxScuEru_disableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006df4:	b7 0f 01 fc 	insert %d15,%d15,0,24,1
80006df8:	3c 03       	j 80006dfe <IfxScuEru_disableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = FALSE;
80006dfa:	8f 0f d0 f1 	andn %d15,%d15,256
80006dfe:	68 0f       	st.w [%a15]0,%d15
80006e00:	00 90       	ret 

80006e02 <IfxScuEru_disablePatternDetectionTrigger>:


void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e02:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006e06:	91 30 00 ff 	movh.a %a15,61443
80006e0a:	1b bf 08 f0 	addi %d15,%d15,139
80006e0e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e12:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e14:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006e16:	6f 04 05 00 	jz.t %d4,0,80006e20 <IfxScuEru_disablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006e1a:	b7 0f 81 fe 	insert %d15,%d15,0,29,1
80006e1e:	3c 03       	j 80006e24 <IfxScuEru_disablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = FALSE;
80006e20:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80006e24:	68 0f       	st.w [%a15]0,%d15
80006e26:	00 90       	ret 

80006e28 <IfxScuEru_disableRisingEdgeDetection>:


void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e28:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006e2c:	91 30 00 ff 	movh.a %a15,61443
80006e30:	1b 4f 08 f0 	addi %d15,%d15,132
80006e34:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e38:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e3a:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e3c:	6f 04 05 00 	jz.t %d4,0,80006e46 <IfxScuEru_disableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006e40:	b7 0f 81 fc 	insert %d15,%d15,0,25,1
80006e44:	3c 03       	j 80006e4a <IfxScuEru_disableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = FALSE;
80006e46:	b7 0f 81 f4 	insert %d15,%d15,0,9,1
80006e4a:	68 0f       	st.w [%a15]0,%d15
80006e4c:	00 90       	ret 

80006e4e <IfxScuEru_disableTriggerPulse>:


void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e4e:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006e52:	91 30 00 ff 	movh.a %a15,61443
80006e56:	1b 4f 08 f0 	addi %d15,%d15,132
80006e5a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e5e:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e60:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e62:	6f 04 05 00 	jz.t %d4,0,80006e6c <IfxScuEru_disableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006e66:	b7 0f 81 fd 	insert %d15,%d15,0,27,1
80006e6a:	3c 03       	j 80006e70 <IfxScuEru_disableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = FALSE;
80006e6c:	b7 0f 81 f5 	insert %d15,%d15,0,11,1
80006e70:	68 0f       	st.w [%a15]0,%d15
80006e72:	00 90       	ret 

80006e74 <IfxScuEru_enableAutoClear>:


void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e74:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006e78:	91 30 00 ff 	movh.a %a15,61443
80006e7c:	1b 4f 08 f0 	addi %d15,%d15,132
80006e80:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e84:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e86:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e88:	6f 04 05 00 	jz.t %d4,0,80006e92 <IfxScuEru_enableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006e8c:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80006e90:	3c 03       	j 80006e96 <IfxScuEru_enableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = TRUE;
80006e92:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80006e96:	68 0f       	st.w [%a15]0,%d15
80006e98:	00 90       	ret 

80006e9a <IfxScuEru_enableFallingEdgeDetection>:


void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e9a:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006e9e:	91 30 00 ff 	movh.a %a15,61443
80006ea2:	1b 4f 08 f0 	addi %d15,%d15,132
80006ea6:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006eaa:	90 ff       	addsc.a %a15,%a15,%d15,2
80006eac:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006eae:	6f 04 05 00 	jz.t %d4,0,80006eb8 <IfxScuEru_enableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006eb2:	b7 ff 01 fc 	insert %d15,%d15,15,24,1
80006eb6:	3c 03       	j 80006ebc <IfxScuEru_enableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = TRUE;
80006eb8:	8f 0f 50 f1 	or %d15,%d15,256
80006ebc:	68 0f       	st.w [%a15]0,%d15
80006ebe:	00 90       	ret 

80006ec0 <IfxScuEru_enablePatternDetectionTrigger>:


void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ec0:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006ec4:	91 30 00 ff 	movh.a %a15,61443
80006ec8:	1b bf 08 f0 	addi %d15,%d15,139
80006ecc:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ed0:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ed2:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006ed4:	6f 04 05 00 	jz.t %d4,0,80006ede <IfxScuEru_enablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006ed8:	b7 ff 81 fe 	insert %d15,%d15,15,29,1
80006edc:	3c 03       	j 80006ee2 <IfxScuEru_enablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = TRUE;
80006ede:	b7 ff 81 f6 	insert %d15,%d15,15,13,1
80006ee2:	68 0f       	st.w [%a15]0,%d15
80006ee4:	00 90       	ret 

80006ee6 <IfxScuEru_enableRisingEdgeDetection>:


void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ee6:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006eea:	91 30 00 ff 	movh.a %a15,61443
80006eee:	1b 4f 08 f0 	addi %d15,%d15,132
80006ef2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ef6:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ef8:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006efa:	6f 04 05 00 	jz.t %d4,0,80006f04 <IfxScuEru_enableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006efe:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80006f02:	3c 03       	j 80006f08 <IfxScuEru_enableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = TRUE;
80006f04:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80006f08:	68 0f       	st.w [%a15]0,%d15
80006f0a:	00 90       	ret 

80006f0c <IfxScuEru_enableTriggerPulse>:


void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f0c:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006f10:	91 30 00 ff 	movh.a %a15,61443
80006f14:	1b 4f 08 f0 	addi %d15,%d15,132
80006f18:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f1c:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f1e:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006f20:	6f 04 05 00 	jz.t %d4,0,80006f2a <IfxScuEru_enableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006f24:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80006f28:	3c 03       	j 80006f2e <IfxScuEru_enableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = TRUE;
80006f2a:	b7 ff 81 f5 	insert %d15,%d15,15,11,1
80006f2e:	68 0f       	st.w [%a15]0,%d15
80006f30:	00 90       	ret 

80006f32 <IfxScuEru_getAllEventFlagsStatus>:
}


uint32 IfxScuEru_getAllEventFlagsStatus(void)
{
    return MODULE_SCU.EIFR.U;
80006f32:	91 30 00 ff 	movh.a %a15,61443
80006f36:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f3a:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006f3e:	00 90       	ret 

80006f40 <IfxScuEru_getEventFlagStatus>:


boolean IfxScuEru_getEventFlagStatus(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = (1U << inputChannel);
    return (MODULE_SCU.EIFR.U & mask) ? TRUE : FALSE;
80006f40:	91 30 00 ff 	movh.a %a15,61443
80006f44:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f48:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006f4c:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006f50:	00 90       	ret 

80006f52 <IfxScuEru_getInputChannelConfiguration>:


uint32 IfxScuEru_getInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f52:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006f56:	91 30 00 ff 	movh.a %a15,61443
80006f5a:	1b 4f 08 f0 	addi %d15,%d15,132
80006f5e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f62:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f64:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006f66:	6f 04 05 00 	jz.t %d4,0,80006f70 <IfxScuEru_getInputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006f6a:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006f6e:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.EICR[index].U & mask);
80006f70:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80006f74:	00 90       	ret 

80006f76 <IfxScuEru_getOutputChannelConfiguration>:


uint32 IfxScuEru_getOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f76:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006f7a:	91 30 00 ff 	movh.a %a15,61443
80006f7e:	1b bf 08 f0 	addi %d15,%d15,139
80006f82:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f86:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f88:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006f8a:	6f 04 05 00 	jz.t %d4,0,80006f94 <IfxScuEru_getOutputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006f8e:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006f92:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.IGCR[index].U & mask);
80006f94:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80006f98:	00 90       	ret 

80006f9a <IfxScuEru_getPatternDetectionResult>:


boolean IfxScuEru_getPatternDetectionResult(IfxScuEru_OutputChannel outputChannel)
{
    uint32 mask = (1U << outputChannel);
    return (MODULE_SCU.PDRR.U & mask) ? TRUE : FALSE;
80006f9a:	91 30 00 ff 	movh.a %a15,61443
80006f9e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fa2:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80006fa6:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006faa:	00 90       	ret 

80006fac <IfxScuEru_getWholePatternDetectionResult>:


uint32 IfxScuEru_getWholePatternDetectionResult(void)
{
    return MODULE_SCU.PDRR.U;
80006fac:	91 30 00 ff 	movh.a %a15,61443
80006fb0:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fb4:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80006fb8:	00 90       	ret 

80006fba <IfxScuEru_selectExternalInput>:


void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006fba:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80006fbe:	91 30 00 ff 	movh.a %a15,61443
80006fc2:	1b 4f 08 f0 	addi %d15,%d15,132
80006fc6:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fca:	8f 75 00 51 	and %d5,%d5,7
80006fce:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006fd0:	6f 04 08 00 	jz.t %d4,0,80006fe0 <IfxScuEru_selectExternalInput+0x26>
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80006fd4:	4c f0       	ld.w %d15,[%a15]0
80006fd6:	8f 45 01 50 	sh %d5,%d5,20
80006fda:	b7 0f 03 fa 	insert %d15,%d15,0,20,3
80006fde:	3c 05       	j 80006fe8 <IfxScuEru_selectExternalInput+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EXIS0 = inputSignal;
80006fe0:	4c f0       	ld.w %d15,[%a15]0
80006fe2:	06 45       	sh %d5,4
80006fe4:	8f 0f c7 f1 	andn %d15,%d15,112
80006fe8:	a6 f5       	or %d5,%d15
80006fea:	68 05       	st.w [%a15]0,%d5
80006fec:	00 90       	ret 

80006fee <IfxScuEru_setEventFlag>:
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
80006fee:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006ff0:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
80006ff4:	0f 4f 00 40 	sh %d4,%d15,%d4
    SCU_FMR.U = mask;
80006ff8:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006ffc:	68 04       	st.w [%a15]0,%d4
80006ffe:	00 90       	ret 

80007000 <IfxScuEru_setFlagPatternDetection>:
}


void IfxScuEru_setFlagPatternDetection(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InputChannel inputChannel, boolean state)
{
80007000:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 shift, mask;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD) // for channels 1, 3 ,5 and 7
80007004:	6f 04 04 00 	jz.t %d4,0,8000700c <IfxScuEru_setFlagPatternDetection+0xc>
    {
        shift = (inputChannel + 16);                  // offset at location IPEN10
80007008:	1b 05 01 50 	addi %d5,%d5,16
8000700c:	06 2f       	sh %d15,2
8000700e:	60 f2       	mov.a %a2,%d15
80007010:	d9 2f 00 06 	lea %a15,[%a2]24576
80007014:	11 3f 00 ff 	addih.a %a15,%a15,61443
    {
        shift = inputChannel;
        mask  = (1 << shift);
        // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
        uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & ~mask) | ((uint32)state << shift);
80007018:	19 ff 2c 80 	ld.w %d15,[%a15]556
8000701c:	d7 0f 01 f5 	insert %d15,%d15,0,%d5,1
80007020:	0f 56 00 50 	sh %d5,%d6,%d5
80007024:	a6 f5       	or %d5,%d15
80007026:	59 f5 2c 80 	st.w [%a15]556,%d5
8000702a:	00 90       	ret 

8000702c <IfxScuEru_setInterruptGatingPattern>:


void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
8000702c:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
80007030:	91 30 00 ff 	movh.a %a15,61443
80007034:	1b bf 08 f0 	addi %d15,%d15,139
80007038:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
8000703c:	8f 35 00 51 	and %d5,%d5,3
80007040:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80007042:	6f 04 06 00 	jz.t %d4,0,8000704e <IfxScuEru_setInterruptGatingPattern+0x22>
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
80007046:	4c f0       	ld.w %d15,[%a15]0
80007048:	37 5f 02 5f 	insert %d5,%d15,%d5,30,2
8000704c:	3c 07       	j 8000705a <IfxScuEru_setInterruptGatingPattern+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.IGP0 = gatingPattern;
8000704e:	4c f0       	ld.w %d15,[%a15]0
80007050:	8f e5 00 50 	sh %d5,%d5,14
80007054:	b7 0f 02 f7 	insert %d15,%d15,0,14,2
80007058:	a6 f5       	or %d5,%d15
8000705a:	68 05       	st.w [%a15]0,%d5
8000705c:	00 90       	ret 

8000705e <IfxScuWdt_changeCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000705e:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007062:	16 07       	and %d15,7
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword)
{
    Ifx_SCU_WDTCPU     *watchdog = &MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()];
80007064:	53 cf 20 f0 	mul %d15,%d15,12
80007068:	60 f2       	mov.a %a2,%d15
8000706a:	d9 2f 00 46 	lea %a15,[%a2]24832
8000706e:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
80007072:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80007074:	2e 16       	jz.t %d15,1,80007080 <IfxScuWdt_changeCpuWatchdogPassword+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80007076:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
8000707a:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
8000707e:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007080:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80007084:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
80007088:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
8000708c:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000708e:	4c f0       	ld.w %d15,[%a15]0
80007090:	6f 0f ff 7f 	jz.t %d15,0,8000708e <IfxScuWdt_changeCpuWatchdogPassword+0x30>
    {}
}
80007094:	00 90       	ret 

80007096 <IfxScuWdt_changeCpuWatchdogReload>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007096:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000709a:	16 07       	and %d15,7

void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload)
{
    /* Select CPU Watchdog based on Core Id */
    uint32              coreId = IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU     *wdt    = &MODULE_SCU.WDTCPU[coreId];
8000709c:	53 cf 20 f0 	mul %d15,%d15,12
800070a0:	60 f2       	mov.a %a2,%d15
800070a2:	d9 2f 00 46 	lea %a15,[%a2]24832
800070a6:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
800070aa:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
800070ac:	2e 16       	jz.t %d15,1,800070b8 <IfxScuWdt_changeCpuWatchdogReload+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800070ae:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
800070b2:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800070b6:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
800070b8:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
800070bc:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
800070c0:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
800070c4:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
800070c6:	4c f0       	ld.w %d15,[%a15]0
800070c8:	6f 0f ff 7f 	jz.t %d15,0,800070c6 <IfxScuWdt_changeCpuWatchdogReload+0x30>
    {}
}
800070cc:	00 90       	ret 

800070ce <IfxScuWdt_changeSafetyWatchdogPassword>:
{
    Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
800070ce:	91 30 00 ff 	movh.a %a15,61443
800070d2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800070d6:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
800070d8:	2e 16       	jz.t %d15,1,800070e4 <IfxScuWdt_changeSafetyWatchdogPassword+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800070da:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
800070de:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
800070e2:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
800070e4:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
800070e8:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
800070ec:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
800070f0:	91 30 00 ff 	movh.a %a15,61443
800070f4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800070f8:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800070fa:	4c f0       	ld.w %d15,[%a15]0
800070fc:	6f 0f ff 7f 	jz.t %d15,0,800070fa <IfxScuWdt_changeSafetyWatchdogPassword+0x2c>
    {}
}
80007100:	00 90       	ret 

80007102 <IfxScuWdt_changeSafetyWatchdogReload>:
    /* Initialize pointer to Safety Watchdog */
    Ifx_SCU_WDTS     *wdt = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
80007102:	91 30 00 ff 	movh.a %a15,61443
80007106:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000710a:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
8000710c:	2e 16       	jz.t %d15,1,80007118 <IfxScuWdt_changeSafetyWatchdogReload+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
8000710e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80007112:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80007116:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007118:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
8000711c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
80007120:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
80007124:	91 30 00 ff 	movh.a %a15,61443
80007128:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000712c:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
8000712e:	4c f0       	ld.w %d15,[%a15]0
80007130:	6f 0f ff 7f 	jz.t %d15,0,8000712e <IfxScuWdt_changeSafetyWatchdogReload+0x2c>
    {}
}
80007134:	00 90       	ret 

80007136 <IfxScuWdt_clearCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007136:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000713a:	16 07       	and %d15,7


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
8000713c:	53 cf 20 f0 	mul %d15,%d15,12
80007140:	06 24       	sh %d4,2
80007142:	60 f2       	mov.a %a2,%d15
80007144:	d9 2f 00 46 	lea %a15,[%a2]24832
80007148:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
8000714c:	4c f0       	ld.w %d15,[%a15]0
8000714e:	2e 16       	jz.t %d15,1,8000715a <IfxScuWdt_clearCpuEndinit+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007150:	4c f0       	ld.w %d15,[%a15]0
80007152:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007156:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007158:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000715a:	4c f0       	ld.w %d15,[%a15]0
8000715c:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007160:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007162:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80007164:	4c f0       	ld.w %d15,[%a15]0
80007166:	6f 0f ff ff 	jnz.t %d15,0,80007164 <IfxScuWdt_clearCpuEndinit+0x2e>
}
8000716a:	00 90       	ret 

8000716c <IfxScuWdt_clearSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
8000716c:	91 30 00 ff 	movh.a %a15,61443
80007170:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007174:	4c f0       	ld.w %d15,[%a15]0
80007176:	06 24       	sh %d4,2
80007178:	2e 16       	jz.t %d15,1,80007184 <IfxScuWdt_clearSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000717a:	4c f0       	ld.w %d15,[%a15]0
8000717c:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007180:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007182:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007184:	91 30 00 ff 	movh.a %a15,61443
80007188:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000718c:	4c f0       	ld.w %d15,[%a15]0
8000718e:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007192:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007194:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007196:	4c f0       	ld.w %d15,[%a15]0
80007198:	6f 0f ff ff 	jnz.t %d15,0,80007196 <IfxScuWdt_clearSafetyEndinit+0x2a>


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
}
8000719c:	00 90       	ret 

8000719e <IfxScuWdt_disableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000719e:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800071a2:	16 07       	and %d15,7

void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
800071a4:	53 cf 20 f0 	mul %d15,%d15,12
800071a8:	06 24       	sh %d4,2
800071aa:	60 f2       	mov.a %a2,%d15
800071ac:	d9 2f 00 46 	lea %a15,[%a2]24832
800071b0:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800071b4:	4c f0       	ld.w %d15,[%a15]0
800071b6:	2e 16       	jz.t %d15,1,800071c2 <IfxScuWdt_disableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071b8:	4c f0       	ld.w %d15,[%a15]0
800071ba:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071be:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071c0:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071c2:	4c f0       	ld.w %d15,[%a15]0
800071c4:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071c8:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071ca:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
800071cc:	4c f0       	ld.w %d15,[%a15]0
800071ce:	6f 0f ff ff 	jnz.t %d15,0,800071cc <IfxScuWdt_disableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
800071d2:	4c f1       	ld.w %d15,[%a15]4
800071d4:	96 08       	or %d15,8
800071d6:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800071d8:	4c f0       	ld.w %d15,[%a15]0
800071da:	2e 16       	jz.t %d15,1,800071e6 <IfxScuWdt_disableCpuWatchdog+0x48>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071dc:	4c f0       	ld.w %d15,[%a15]0
800071de:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071e2:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071e4:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071e6:	4c f0       	ld.w %d15,[%a15]0
800071e8:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071ec:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071ee:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800071f0:	4c f0       	ld.w %d15,[%a15]0
800071f2:	6f 0f ff 7f 	jz.t %d15,0,800071f0 <IfxScuWdt_disableCpuWatchdog+0x52>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800071f6:	00 90       	ret 

800071f8 <IfxScuWdt_disableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800071f8:	91 30 00 ff 	movh.a %a15,61443
800071fc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007200:	4c f0       	ld.w %d15,[%a15]0
80007202:	06 24       	sh %d4,2
80007204:	2e 16       	jz.t %d15,1,80007210 <IfxScuWdt_disableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007206:	4c f0       	ld.w %d15,[%a15]0
80007208:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000720c:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000720e:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007210:	91 30 00 ff 	movh.a %a15,61443
80007214:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007218:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
8000721a:	40 f2       	mov.aa %a2,%a15
8000721c:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007220:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007222:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007224:	4c 20       	ld.w %d15,[%a2]0
80007226:	91 30 00 ff 	movh.a %a15,61443
8000722a:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000722e:	6f 0f fb ff 	jnz.t %d15,0,80007224 <IfxScuWdt_disableSafetyWatchdog+0x2c>


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
80007232:	91 30 00 2f 	movh.a %a2,61443
80007236:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
8000723a:	4c 20       	ld.w %d15,[%a2]0
8000723c:	96 08       	or %d15,8
8000723e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007240:	4c f0       	ld.w %d15,[%a15]0
80007242:	2e 16       	jz.t %d15,1,8000724e <IfxScuWdt_disableSafetyWatchdog+0x56>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007244:	4c f0       	ld.w %d15,[%a15]0
80007246:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000724a:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000724c:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000724e:	91 30 00 ff 	movh.a %a15,61443
80007252:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007256:	4c f0       	ld.w %d15,[%a15]0
80007258:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000725c:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000725e:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80007260:	4c f0       	ld.w %d15,[%a15]0
80007262:	6f 0f ff 7f 	jz.t %d15,0,80007260 <IfxScuWdt_disableSafetyWatchdog+0x68>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007266:	00 90       	ret 

80007268 <IfxScuWdt_enableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007268:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000726c:	16 07       	and %d15,7

void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
8000726e:	53 cf 20 f0 	mul %d15,%d15,12
80007272:	06 24       	sh %d4,2
80007274:	60 f2       	mov.a %a2,%d15
80007276:	d9 2f 00 46 	lea %a15,[%a2]24832
8000727a:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
8000727e:	4c f0       	ld.w %d15,[%a15]0
80007280:	2e 16       	jz.t %d15,1,8000728c <IfxScuWdt_enableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007282:	4c f0       	ld.w %d15,[%a15]0
80007284:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007288:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000728a:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000728c:	4c f0       	ld.w %d15,[%a15]0
8000728e:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007292:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007294:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80007296:	4c f0       	ld.w %d15,[%a15]0
80007298:	6f 0f ff ff 	jnz.t %d15,0,80007296 <IfxScuWdt_enableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
8000729c:	4c f1       	ld.w %d15,[%a15]4
8000729e:	8f 8f c0 f1 	andn %d15,%d15,8
800072a2:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800072a4:	4c f0       	ld.w %d15,[%a15]0
800072a6:	2e 16       	jz.t %d15,1,800072b2 <IfxScuWdt_enableCpuWatchdog+0x4a>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800072a8:	4c f0       	ld.w %d15,[%a15]0
800072aa:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800072ae:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800072b0:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800072b2:	4c f0       	ld.w %d15,[%a15]0
800072b4:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800072b8:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800072ba:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800072bc:	4c f0       	ld.w %d15,[%a15]0
800072be:	6f 0f ff 7f 	jz.t %d15,0,800072bc <IfxScuWdt_enableCpuWatchdog+0x54>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800072c2:	00 90       	ret 

800072c4 <IfxScuWdt_enableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800072c4:	91 30 00 ff 	movh.a %a15,61443
800072c8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072cc:	4c f0       	ld.w %d15,[%a15]0
800072ce:	06 24       	sh %d4,2
800072d0:	2e 16       	jz.t %d15,1,800072dc <IfxScuWdt_enableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072d2:	4c f0       	ld.w %d15,[%a15]0
800072d4:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072d8:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072da:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072dc:	91 30 00 ff 	movh.a %a15,61443
800072e0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072e4:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800072e6:	40 f2       	mov.aa %a2,%a15
800072e8:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072ec:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072ee:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800072f0:	4c 20       	ld.w %d15,[%a2]0
800072f2:	91 30 00 ff 	movh.a %a15,61443
800072f6:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072fa:	6f 0f fb ff 	jnz.t %d15,0,800072f0 <IfxScuWdt_enableSafetyWatchdog+0x2c>


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
800072fe:	91 30 00 2f 	movh.a %a2,61443
80007302:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
80007306:	4c 20       	ld.w %d15,[%a2]0
80007308:	8f 8f c0 f1 	andn %d15,%d15,8
8000730c:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
8000730e:	4c f0       	ld.w %d15,[%a15]0
80007310:	2e 16       	jz.t %d15,1,8000731c <IfxScuWdt_enableSafetyWatchdog+0x58>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007312:	4c f0       	ld.w %d15,[%a15]0
80007314:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007318:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000731a:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000731c:	91 30 00 ff 	movh.a %a15,61443
80007320:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007324:	4c f0       	ld.w %d15,[%a15]0
80007326:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000732a:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000732c:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
8000732e:	4c f0       	ld.w %d15,[%a15]0
80007330:	6f 0f ff 7f 	jz.t %d15,0,8000732e <IfxScuWdt_enableSafetyWatchdog+0x6a>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007334:	00 90       	ret 

80007336 <IfxScuWdt_getCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007336:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000733a:	16 07       	and %d15,7


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
8000733c:	53 cf 20 f0 	mul %d15,%d15,12
80007340:	60 f2       	mov.a %a2,%d15
80007342:	d9 2f 00 46 	lea %a15,[%a2]24832
80007346:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
8000734a:	48 02       	ld.w %d2,[%a15]0
8000734c:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
80007350:	8f f2 83 21 	xor %d2,%d2,63
80007354:	00 90       	ret 

80007356 <IfxScuWdt_getCpuWatchdogEndInit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007356:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000735a:	16 07       	and %d15,7


boolean IfxScuWdt_getCpuWatchdogEndInit(void)
{
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
8000735c:	53 cf 20 f0 	mul %d15,%d15,12
80007360:	60 f2       	mov.a %a2,%d15
80007362:	d9 2f 00 46 	lea %a15,[%a2]24832
80007366:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
{
    return (boolean)watchdog->CON0.B.ENDINIT;
8000736a:	48 02       	ld.w %d2,[%a15]0
}
8000736c:	8f 12 00 21 	and %d2,%d2,1
80007370:	00 90       	ret 

80007372 <IfxScuWdt_getSafetyWatchdogPassword>:
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80007372:	91 30 00 ff 	movh.a %a15,61443
80007376:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000737a:	48 02       	ld.w %d2,[%a15]0
8000737c:	37 02 6e 21 	extr.u %d2,%d2,2,14


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
80007380:	8f f2 83 21 	xor %d2,%d2,63
80007384:	00 90       	ret 

80007386 <IfxScuWdt_initConfig>:


void IfxScuWdt_initConfig(IfxScuWdt_Config *config)
{
    config->password                      = IFXSCUWDT_RESET_PASSWORD;
80007386:	da 3c       	mov %d15,60
80007388:	ac 40       	st.h [%a4]0,%d15
    config->reload                        = 0xFFFC;
8000738a:	82 cf       	mov %d15,-4
8000738c:	ac 41       	st.h [%a4]2,%d15
    config->inputFrequency                = IfxScu_WDTCON1_IR_divBy16384;
8000738e:	82 0f       	mov %d15,0
80007390:	2c 44       	st.b [%a4]4,%d15
    config->disableWatchdog               = FALSE;
80007392:	2c 45       	st.b [%a4]5,%d15
    config->enableSmuRestriction          = FALSE;
80007394:	2c 46       	st.b [%a4]6,%d15
    config->enableAutomaticPasswordChange = FALSE;
80007396:	2c 47       	st.b [%a4]7,%d15
    config->enableTimerCheck              = FALSE;
80007398:	2c 48       	st.b [%a4]8,%d15
    config->enableTimerCheckTolerance     = FALSE;
8000739a:	2c 49       	st.b [%a4]9,%d15
    config->clrInternalResetFlag          = FALSE;
8000739c:	2c 4a       	st.b [%a4]10,%d15
8000739e:	00 90       	ret 

800073a0 <IfxScuWdt_setCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800073a0:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800073a4:	16 07       	and %d15,7
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
800073a6:	53 cf 20 f0 	mul %d15,%d15,12
800073aa:	06 24       	sh %d4,2
800073ac:	60 f2       	mov.a %a2,%d15
800073ae:	d9 2f 00 46 	lea %a15,[%a2]24832
800073b2:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800073b6:	4c f0       	ld.w %d15,[%a15]0
800073b8:	2e 16       	jz.t %d15,1,800073c4 <IfxScuWdt_setCpuEndinit+0x24>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800073ba:	4c f0       	ld.w %d15,[%a15]0
800073bc:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800073c0:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800073c2:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800073c4:	4c f0       	ld.w %d15,[%a15]0
800073c6:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800073ca:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800073cc:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800073ce:	4c f0       	ld.w %d15,[%a15]0
800073d0:	6f 0f ff 7f 	jz.t %d15,0,800073ce <IfxScuWdt_setCpuEndinit+0x2e>
}
800073d4:	00 90       	ret 

800073d6 <IfxScuWdt_initCpuWatchdog>:
{
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    Ifx_SCU_WDTCPU_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
800073d6:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
800073d8:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
800073da:	6f 12 0b 00 	jz.t %d2,1,800073f0 <IfxScuWdt_initCpuWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800073de:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
800073e2:	37 02 6e 31 	extr.u %d3,%d2,2,14
800073e6:	8f f3 83 31 	xor %d3,%d3,63
800073ea:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800073ee:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
800073f0:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
800073f2:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
800073f6:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
800073fa:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
800073fe:	b9 53 02 00 	ld.hu %d3,[%a5]2
80007402:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
80007406:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
80007408:	54 42       	ld.w %d2,[%a4]
8000740a:	6f 02 ff ff 	jnz.t %d2,0,80007408 <IfxScuWdt_initCpuWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
8000740e:	39 52 04 00 	ld.bu %d2,[%a5]4
80007412:	df 12 0a 00 	jeq %d2,1,80007426 <IfxScuWdt_initCpuWatchdog+0x50>
80007416:	76 26       	jz %d2,80007422 <IfxScuWdt_initCpuWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
80007418:	8b 22 20 22 	ne %d2,%d2,2
8000741c:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
80007420:	3c 07       	j 8000742e <IfxScuWdt_initCpuWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
80007422:	82 0f       	mov %d15,0
        break;
80007424:	3c 05       	j 8000742e <IfxScuWdt_initCpuWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
80007426:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
8000742a:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR   = config->disableWatchdog ? 1 : 0;
8000742e:	39 52 05 00 	ld.bu %d2,[%a5]5
80007432:	8b 02 20 22 	ne %d2,%d2,0
80007436:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR   = config->enableSmuRestriction ? 1 : 0;
8000743a:	39 52 06 00 	ld.bu %d2,[%a5]6
8000743e:	8b 02 20 22 	ne %d2,%d2,0
80007442:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR  = config->enableAutomaticPasswordChange ? 1 : 0;
80007446:	39 52 07 00 	ld.bu %d2,[%a5]7
8000744a:	8b 02 20 22 	ne %d2,%d2,0
8000744e:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR  = config->enableTimerCheck ? 1 : 0;
80007452:	39 52 08 00 	ld.bu %d2,[%a5]8
80007456:	8b 02 20 22 	ne %d2,%d2,0
8000745a:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR = config->enableTimerCheckTolerance ? 1 : 0;
8000745e:	39 52 09 00 	ld.bu %d2,[%a5]9
80007462:	8b 02 20 22 	ne %d2,%d2,0
80007466:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
8000746a:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set CPU ENDINIT protection */
    IfxScuWdt_setCpuEndinit(config->password);
8000746c:	b9 54 00 00 	ld.hu %d4,[%a5]0
80007470:	1d ff 98 ff 	j 800073a0 <IfxScuWdt_setCpuEndinit>

80007474 <IfxScuWdt_serviceCpuWatchdog>:
}


void IfxScuWdt_serviceCpuWatchdog(uint16 password)
{
    IfxScuWdt_setCpuEndinit(password);
80007474:	1d ff 96 ff 	j 800073a0 <IfxScuWdt_setCpuEndinit>

80007478 <IfxScuWdt_setSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007478:	91 30 00 ff 	movh.a %a15,61443
8000747c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007480:	4c f0       	ld.w %d15,[%a15]0
80007482:	06 24       	sh %d4,2
80007484:	2e 16       	jz.t %d15,1,80007490 <IfxScuWdt_setSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007486:	4c f0       	ld.w %d15,[%a15]0
80007488:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000748c:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000748e:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007490:	91 30 00 ff 	movh.a %a15,61443
80007494:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007498:	4c f0       	ld.w %d15,[%a15]0
8000749a:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000749e:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800074a0:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
800074a2:	4c f0       	ld.w %d15,[%a15]0
800074a4:	6f 0f ff 7f 	jz.t %d15,0,800074a2 <IfxScuWdt_setSafetyEndinit+0x2a>


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
    IfxScuWdt_setSafetyEndinitInline(password);
}
800074a8:	00 90       	ret 

800074aa <IfxScuWdt_initSafetyWatchdog>:
{
    Ifx_SCU_WDTS_CON0 wdt_con0;
    Ifx_SCU_WDTS_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
800074aa:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
800074ac:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
800074ae:	6f 12 0b 00 	jz.t %d2,1,800074c4 <IfxScuWdt_initSafetyWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800074b2:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
800074b6:	37 02 6e 31 	extr.u %d3,%d2,2,14
800074ba:	8f f3 83 31 	xor %d3,%d3,63
800074be:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800074c2:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
800074c4:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
800074c6:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
800074ca:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
800074ce:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
800074d2:	b9 53 02 00 	ld.hu %d3,[%a5]2
800074d6:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
800074da:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
800074dc:	54 42       	ld.w %d2,[%a4]
800074de:	6f 02 ff ff 	jnz.t %d2,0,800074dc <IfxScuWdt_initSafetyWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
800074e2:	39 52 04 00 	ld.bu %d2,[%a5]4
800074e6:	df 12 0a 00 	jeq %d2,1,800074fa <IfxScuWdt_initSafetyWatchdog+0x50>
800074ea:	76 26       	jz %d2,800074f6 <IfxScuWdt_initSafetyWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
800074ec:	8b 22 20 22 	ne %d2,%d2,2
800074f0:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
800074f4:	3c 07       	j 80007502 <IfxScuWdt_initSafetyWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
800074f6:	82 0f       	mov %d15,0
        break;
800074f8:	3c 05       	j 80007502 <IfxScuWdt_initSafetyWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
800074fa:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
800074fe:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR     = config->disableWatchdog ? 1 : 0;
80007502:	39 52 05 00 	ld.bu %d2,[%a5]5
80007506:	8b 02 20 22 	ne %d2,%d2,0
8000750a:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR     = config->enableSmuRestriction ? 1 : 0;
8000750e:	39 52 06 00 	ld.bu %d2,[%a5]6
80007512:	8b 02 20 22 	ne %d2,%d2,0
80007516:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR    = config->enableAutomaticPasswordChange ? 1 : 0;
8000751a:	39 52 07 00 	ld.bu %d2,[%a5]7
8000751e:	8b 02 20 22 	ne %d2,%d2,0
80007522:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR    = config->enableTimerCheck ? 1 : 0;
80007526:	39 52 08 00 	ld.bu %d2,[%a5]8
8000752a:	8b 02 20 22 	ne %d2,%d2,0
8000752e:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR   = config->enableTimerCheckTolerance ? 1 : 0;
80007532:	39 52 09 00 	ld.bu %d2,[%a5]9
80007536:	8b 02 20 22 	ne %d2,%d2,0
8000753a:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7
    wdt_con1.B.CLRIRF = config->clrInternalResetFlag ? 0 : 1;
8000753e:	39 52 0a 00 	ld.bu %d2,[%a5]10
80007542:	8b 02 00 22 	eq %d2,%d2,0
80007546:	67 2f 00 f0 	ins.t %d15,%d15,0,%d2,0

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
8000754a:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set Safety ENDINIT protection */
    IfxScuWdt_setSafetyEndinit(config->password);
8000754c:	b9 54 00 00 	ld.hu %d4,[%a5]0
80007550:	1d ff 94 ff 	j 80007478 <IfxScuWdt_setSafetyEndinit>

80007554 <IfxScuWdt_serviceSafetyWatchdog>:
}


void IfxScuWdt_serviceSafetyWatchdog(uint16 password)
{
    IfxScuWdt_setSafetyEndinit(password);
80007554:	1d ff 92 ff 	j 80007478 <IfxScuWdt_setSafetyEndinit>

80007558 <IfxScuWdt_enableWatchdogWithDebugger>:
    volatile uint32 *oecPtr    = (volatile uint32 *)0xF0000478;
    volatile uint32 *ostatePtr = (volatile uint32 *)0xF0000480;
    volatile uint32 *ocntrlPtr = (volatile uint32 *)0xF000047C;

    /* read OSTATE.OEN */
    ostateValue = *ostatePtr;
80007558:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
    oenEnabled  = (ostateValue & 0x00000001);

    if (!oenEnabled)
8000755c:	2e 07       	jz.t %d15,0,8000756a <IfxScuWdt_enableWatchdogWithDebugger+0x12>
    }

    if (oenEnabled)
    {
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
8000755e:	3b 00 00 f3 	mov %d15,12288
80007562:	a5 ff 7c 10 	st.w f000047c <_SMALL_DATA4_+0x3fff847c>,%d15
}


boolean IfxScuWdt_enableWatchdogWithDebugger(void)
{
    boolean          status = 0, oenEnabled = 0, watchdogEnabled = 0;
80007566:	82 0f       	mov %d15,0
80007568:	3c 11       	j 8000758a <IfxScuWdt_enableWatchdogWithDebugger+0x32>

    if (!oenEnabled)
    {
        /* enable the debug interface (OSTATE.OEN )if it is not already enabled */
        /* pattern for enabling OSTATE.OEN */
        *oecPtr = 0xA1;
8000756a:	3b 10 0a 20 	mov %d2,161
8000756e:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
80007572:	da 5e       	mov %d15,94
80007574:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15
        *oecPtr = 0xA1;
80007578:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
8000757c:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15

        /* read OSTATE.OEN again*/
        ostateValue = *ostatePtr;
80007580:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
        oenEnabled  = (ostateValue & 0x00000001);
    }

    if (oenEnabled)
80007584:	6f 0f ed ff 	jnz.t %d15,0,8000755e <IfxScuWdt_enableWatchdogWithDebugger+0x6>
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
    }
    else
    {
        status = 1;
80007588:	82 1f       	mov %d15,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, oenEnabled == 1);

    /* read OSTATE.WDTSUS */
    ostateValue     = *ostatePtr;
8000758a:	85 f2 40 20 	ld.w %d2,f0000480 <_SMALL_DATA4_+0x3fff8480>
    watchdogEnabled = (ostateValue & 0x00000080);

    if (!watchdogEnabled)
8000758e:	37 02 e1 23 	extr.u %d2,%d2,7,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, watchdogEnabled == 1);

    return status;
}
80007592:	ab 1f 80 22 	sel %d2,%d2,%d15,1
80007596:	00 90       	ret 

80007598 <IfxVadc_Adc_deInitGroup>:
    Ifx_VADC_G     *vadcG      = IfxVadc_Adc_getGroupRegsFromGroup(group);
    /* Get group index */
    IfxVadc_GroupId groupIndex = group->groupId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007598:	0c 48       	ld.bu %d15,[%a4]8
8000759a:	d4 4c       	ld.a %a12,[%a4]
8000759c:	1b 0f 01 f0 	addi %d15,%d15,16
800075a0:	16 ff       	and %d15,255
800075a2:	99 4d 04 00 	ld.a %a13,[%a4]4
800075a6:	02 f4       	mov %d4,%d15
800075a8:	40 c4       	mov.aa %a4,%a12
800075aa:	6d ff 91 e8 	call 800046cc <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG)
{
    vadcG->ARBCFG.B.ANONC = IfxVadc_AnalogConverterMode_off;   /* turn off group */
800075ae:	54 d2       	ld.w %d2,[%a13]
    IfxVadc_resetGroup(vadcG);
    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800075b0:	40 c4       	mov.aa %a4,%a12
800075b2:	8f 32 c0 21 	andn %d2,%d2,3
800075b6:	74 d2       	st.w [%a13],%d2
800075b8:	02 f4       	mov %d4,%d15
800075ba:	1d ff 6d e8 	j 80004694 <IfxVadc_disableAccess>

800075be <IfxVadc_Adc_disableModule>:
}


void IfxVadc_Adc_disableModule(Ifx_VADC *vadc)
{
800075be:	40 4f       	mov.aa %a15,%a4
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800075c0:	6d ff bb fe 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
800075c4:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800075c6:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
800075c8:	6d ff b7 fd 	call 80007136 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.B.DISR = 1;
800075cc:	48 02       	ld.w %d2,[%a15]0
    IfxScuWdt_setCpuEndinit(passwd);
800075ce:	02 f4       	mov %d4,%d15

IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->CLC.B.DISR = 1;
800075d0:	8f 12 40 21 	or %d2,%d2,1
800075d4:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
800075d6:	1d ff e5 fe 	j 800073a0 <IfxScuWdt_setCpuEndinit>

800075da <IfxVadc_Adc_getChannelConfig>:
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
800075da:	99 42 04 00 	ld.a %a2,[%a4]4
800075de:	99 2d 04 00 	ld.a %a13,[%a2]4
    IfxVadc_ChannelId channelIndex = channel->channel;
800075e2:	79 42 00 00 	ld.b %d2,[%a4]0

    config->channelId = channel->channel;
    config->group     = channel->group;
800075e6:	b5 52 14 00 	st.a [%a5]20,%a2


IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U = vadcG->CHCTR[channelIndex].U;
800075ea:	1b 02 06 f0 	addi %d15,%d2,96
800075ee:	90 d2       	addsc.a %a2,%a13,%d15,2
void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
    IfxVadc_ChannelId channelIndex = channel->channel;

    config->channelId = channel->channel;
800075f0:	e9 52 0c 00 	st.b [%a5]12,%d2
800075f4:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
800075f6:	40 4c       	mov.aa %a12,%a4

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
800075f8:	37 0f 62 30 	extr.u %d3,%d15,0,2
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
800075fc:	40 5f       	mov.aa %a15,%a5

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
800075fe:	e9 53 0d 00 	st.b [%a5]13,%d3
    config->reference           = (IfxVadc_ChannelReference)tempChctr.B.REFSEL;
80007602:	37 0f e1 35 	extr.u %d3,%d15,11,1
80007606:	e9 53 0e 00 	st.b [%a5]14,%d3
    config->resultRegister      = (IfxVadc_ChannelResult)tempChctr.B.RESREG;
8000760a:	37 0f 64 38 	extr.u %d3,%d15,16,4
8000760e:	e9 53 0f 00 	st.b [%a5]15,%d3
    config->globalResultUsage   = tempChctr.B.RESTBS;
80007612:	37 0f 61 3a 	extr.u %d3,%d15,20,1
80007616:	34 53       	st.b [%a5],%d3
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
80007618:	37 0f 62 32 	extr.u %d3,%d15,4,2
8000761c:	e9 53 10 00 	st.b [%a5]16,%d3
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
80007620:	37 0f 62 33 	extr.u %d3,%d15,6,2
80007624:	e9 53 11 00 	st.b [%a5]17,%d3
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
80007628:	37 0f 64 36 	extr.u %d3,%d15,12,4
8000762c:	e9 53 12 00 	st.b [%a5]18,%d3
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
80007630:	37 0f 62 34 	extr.u %d3,%d15,8,2
80007634:	e9 53 13 00 	st.b [%a5]19,%d3
    config->synchonize          = tempChctr.B.SYNC;
80007638:	37 0f 61 35 	extr.u %d3,%d15,10,1
    config->rightAlignedStorage = tempChctr.B.RESPOS;
8000763c:	37 0f e1 fa 	extr.u %d15,%d15,21,1
    config->globalResultUsage   = tempChctr.B.RESTBS;
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
    config->synchonize          = tempChctr.B.SYNC;
80007640:	e9 53 01 00 	st.b [%a5]1,%d3
    config->rightAlignedStorage = tempChctr.B.RESPOS;
80007644:	2c 53       	st.b [%a5]3,%d15


IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CHASS assignChannels;
    assignChannels.U = vadcG->CHASS.U;
80007646:	4c d2       	ld.w %d15,[%a13]8

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
80007648:	57 0f 61 22 	extr.u %d2,%d15,%d2,1
8000764c:	8f 12 80 21 	xor %d2,%d2,1
80007650:	e9 52 02 00 	st.b [%a5]2,%d2
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
80007654:	99 42 04 00 	ld.a %a2,[%a4]4
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
80007658:	79 4f 00 00 	ld.b %d15,[%a4]0


IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CEVNP0 serviceRequestNodePtr;
    serviceRequestNodePtr.U = vadcG->CEVNP0.U;
8000765c:	19 d2 20 40 	ld.w %d2,[%a13]288
80007660:	06 2f       	sh %d15,2
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
80007662:	57 02 64 ff 	extr.u %d15,%d2,%d15,4
    config->rightAlignedStorage = tempChctr.B.RESPOS;

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
80007666:	39 28 08 00 	ld.bu %d8,[%a2]8
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
8000766a:	0b 8f 10 48 	mov %e4,%d15,%d8
8000766e:	6d ff 60 e9 	call 8000492e <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
80007672:	54 22       	ld.w %d2,[%a2]
80007674:	6f a2 0a 00 	jz.t %d2,10,80007688 <IfxVadc_Adc_getChannelConfig+0xae>
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)channelServiceRequestNodePtr;
80007678:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)src->B.SRPN;
8000767a:	4c 20       	ld.w %d15,[%a2]0
8000767c:	16 ff       	and %d15,255
8000767e:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)src->B.TOS;
80007680:	4c 20       	ld.w %d15,[%a2]0
80007682:	37 0f e2 f5 	extr.u %d15,%d15,11,2
80007686:	3c 05       	j 80007690 <IfxVadc_Adc_getChannelConfig+0xb6>
    }
    else
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)0;
80007688:	82 0f       	mov %d15,0
8000768a:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)0;
8000768c:	82 0f       	mov %d15,0
8000768e:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)0;
80007690:	28 9f       	st.b [%a15]9,%d15
    }

    uint32 resultServiceRequestNodePtr;

    if (config->resultRegister < IfxVadc_ChannelResult_8)
80007692:	0c ff       	ld.bu %d15,[%a15]15
80007694:	79 c2 00 00 	ld.b %d2,[%a12]0
80007698:	ff 8f 08 80 	jge.u %d15,8,800076a8 <IfxVadc_Adc_getChannelConfig+0xce>


IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP0 resultServiceRequestNodePtr0;
    resultServiceRequestNodePtr0.U = vadcG->REVNP0.U;
8000769c:	19 df 30 40 	ld.w %d15,[%a13]304
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
800076a0:	06 22       	sh %d2,2
800076a2:	57 0f 64 f2 	extr.u %d15,%d15,%d2,4
800076a6:	3c 08       	j 800076b6 <IfxVadc_Adc_getChannelConfig+0xdc>
    }
    else
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer1(vadcG)).U >> ((channel->channel - IfxVadc_ChannelResult_8) * 4)) & 0xF;
800076a8:	9a 82       	add %d15,%d2,-8


IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP1 resultServiceRequestNodePtr1;
    resultServiceRequestNodePtr1.U = vadcG->REVNP1.U;
800076aa:	19 d3 34 40 	ld.w %d3,[%a13]308
800076ae:	8f 2f 00 20 	sh %d2,%d15,2
800076b2:	57 03 64 f2 	extr.u %d15,%d3,%d2,4
    }

    src = IfxVadc_getSrcAddress(groupIndex, resultServiceRequestNodePtr);
800076b6:	16 ff       	and %d15,255
800076b8:	0b 8f 10 48 	mov %e4,%d15,%d8
800076bc:	6d ff 39 e9 	call 8000492e <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
800076c0:	54 22       	ld.w %d2,[%a2]
800076c2:	6f a2 0a 00 	jz.t %d2,10,800076d6 <IfxVadc_Adc_getChannelConfig+0xfc>
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)resultServiceRequestNodePtr;
800076c6:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)src->B.SRPN;
800076c8:	4c 20       	ld.w %d15,[%a2]0
800076ca:	16 ff       	and %d15,255
800076cc:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)src->B.TOS;
800076ce:	4c 20       	ld.w %d15,[%a2]0
800076d0:	37 0f e2 f5 	extr.u %d15,%d15,11,2
800076d4:	3c 05       	j 800076de <IfxVadc_Adc_getChannelConfig+0x104>
    }
    else
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)0;
800076d6:	82 0f       	mov %d15,0
800076d8:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)0;
800076da:	82 0f       	mov %d15,0
800076dc:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)0;
800076de:	28 8f       	st.b [%a15]8,%d15
800076e0:	00 90       	ret 

800076e2 <IfxVadc_Adc_getChannelConversionTime>:
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
800076e2:	cc 41       	ld.a %a15,[%a4]4
800076e4:	c8 12       	ld.a %a2,[%a15]4
}


IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    return (IfxVadc_InputClasses)vadcG->CHCTR[channelIndex].B.ICLSEL;
800076e6:	79 4f 00 00 	ld.b %d15,[%a4]0
800076ea:	08 8a       	ld.bu %d10,[%a15]8
800076ec:	c8 0f       	ld.a %a15,[%a15]0
800076ee:	1b 0f 06 f0 	addi %d15,%d15,96
800076f2:	90 22       	addsc.a %a2,%a2,%d15,2
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
800076f4:	20 08       	sub.a %sp,8
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
800076f6:	40 f4       	mov.aa %a4,%a15
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
800076f8:	02 49       	mov %d9,%d4
800076fa:	54 28       	ld.w %d8,[%a2]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
800076fc:	6d ff 9a e8 	call 80004830 <IfxVadc_getAdcAnalogFrequency>
80007700:	02 2f       	mov %d15,%d2
80007702:	6d ff b0 e8 	call 80004862 <IfxVadc_getAdcModuleFrequency>
80007706:	8f 38 00 81 	and %d8,%d8,3
8000770a:	74 a9       	st.w [%sp],%d9
8000770c:	40 f4       	mov.aa %a4,%a15
8000770e:	0b a8 10 48 	mov %e4,%d8,%d10
80007712:	0b f2 10 68 	mov %e6,%d2,%d15
}
80007716:	1d ff c1 e9 	j 80004a98 <IfxVadc_getChannelConversionTime>

8000771a <IfxVadc_Adc_getGroupConfig>:

void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
8000771a:	d4 4d       	ld.a %a13,[%a4]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
8000771c:	40 4e       	mov.aa %a14,%a4
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
8000771e:	99 4c 04 00 	ld.a %a12,[%a4]4
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007722:	40 d4       	mov.aa %a4,%a13
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
80007724:	40 5f       	mov.aa %a15,%a5
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007726:	6d ff 85 e8 	call 80004830 <IfxVadc_getAdcAnalogFrequency>

    config->groupId                    = group->groupId;
8000772a:	0c e8       	ld.bu %d15,[%a14]8
    config->module                     = &group->module;
8000772c:	e8 0e       	st.a [%a15]0,%a14
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);

    config->groupId                    = group->groupId;
8000772e:	28 4f       	st.b [%a15]4,%d15
}


IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_ArbitrationRounds)vadcG->ARBCFG.B.ARBRND;
80007730:	4c c0       	ld.w %d15,[%a12]0
80007732:	37 0f 62 f2 	extr.u %d15,%d15,4,2
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);
80007736:	e9 ff 32 00 	st.b [%a15]50,%d15
8000773a:	82 0f       	mov %d15,0
}


IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum)
{
    return (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
8000773c:	1b 8f 00 30 	addi %d3,%d15,8
80007740:	01 c3 02 26 	addsc.a %a2,%a12,%d3,2

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
80007744:	d0 f3       	addsc.a %a3,%a15,%d15,3
80007746:	54 23       	ld.w %d3,[%a2]
80007748:	37 03 63 34 	extr.u %d3,%d3,8,3
8000774c:	e9 33 0c 00 	st.b [%a3]12,%d3
}


IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency)
{
    uint32 sampleTime = vadcG->ICLASS[inputClassNum].B.STCS;
80007750:	54 23       	ld.w %d3,[%a2]
80007752:	8f f3 01 31 	and %d3,%d3,31

    if (sampleTime > 16)
80007756:	8b 13 61 42 	lt.u %d4,%d3,17
8000775a:	f6 44       	jnz %d4,80007762 <IfxVadc_Adc_getGroupConfig+0x48>
    {
        sampleTime = (sampleTime - 15) * 16;
8000775c:	1b 13 ff 3f 	addi %d3,%d3,-15
80007760:	06 43       	sh %d3,4
    }

    return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
80007762:	c2 23       	add %d3,2
80007764:	4b 03 41 31 	itof %d3,%d3
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
80007768:	92 14       	add %d4,%d15,1
8000776a:	4b 23 51 30 	div.f %d3,%d3,%d2
8000776e:	01 f4 03 26 	addsc.a %a2,%a15,%d4,3
80007772:	74 23       	st.w [%a2],%d3
    config->groupId                    = group->groupId;
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80007774:	1e 13       	jeq %d15,1,8000777a <IfxVadc_Adc_getGroupConfig+0x60>
80007776:	82 1f       	mov %d15,1
80007778:	3c e2       	j 8000773c <IfxVadc_Adc_getGroupConfig+0x22>
}


IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN1;
8000777a:	19 c2 04 00 	ld.w %d2,[%a12]4
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
    }

    if (IfxVadc_isRequestScanSlotEnabled(vadcG) == TRUE)
8000777e:	ef 92 33 00 	jz.t %d2,25,800077e4 <IfxVadc_Adc_getGroupConfig+0xca>
    {
        config->arbiter.requestSlotScanEnabled          = TRUE;
80007782:	e9 ff 34 00 	st.b [%a15]52,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO1;
80007786:	19 c2 04 00 	ld.w %d2,[%a12]4
8000778a:	37 02 62 22 	extr.u %d2,%d2,4,2
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
8000778e:	e9 f2 1e 00 	st.b [%a15]30,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM1;
80007792:	19 c2 04 00 	ld.w %d2,[%a12]4
80007796:	37 02 e1 23 	extr.u %d2,%d2,7,1
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);
8000779a:	e9 f2 1f 00 	st.b [%a15]31,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->ASCTRL.B.XTSEL;
8000779e:	19 c3 20 20 	ld.w %d3,[%a12]160
800077a2:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
800077a6:	e9 f3 1b 00 	st.b [%a15]27,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->ASCTRL.B.XTMODE;
800077aa:	19 c2 20 20 	ld.w %d2,[%a12]160
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800077ae:	8b f3 00 32 	eq %d3,%d3,15
800077b2:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotScanEnabled          = TRUE;
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);
800077b6:	e9 f2 1d 00 	st.b [%a15]29,%d2

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800077ba:	f6 35       	jnz %d3,800077c4 <IfxVadc_Adc_getGroupConfig+0xaa>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->ASMR.B.ENGT;
800077bc:	19 cf 24 20 	ld.w %d15,[%a12]164
800077c0:	16 03       	and %d15,3
800077c2:	3c 02       	j 800077c6 <IfxVadc_Adc_getGroupConfig+0xac>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_getScanSlotGatingMode(vadcG);
        }
        else if (config->scanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800077c4:	76 23       	jz %d2,800077ca <IfxVadc_Adc_getGroupConfig+0xb0>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800077c6:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->ASCTRL.B.GTSEL;
800077ca:	19 cf 20 20 	ld.w %d15,[%a12]160
800077ce:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->scanRequest.triggerConfig.gatingSource = IfxVadc_getScanSlotGatingSource(vadcG);
800077d2:	e9 ff 1a 00 	st.b [%a15]26,%d15
}


IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ASMR.B.SCAN;
800077d6:	19 cf 24 20 	ld.w %d15,[%a12]164
800077da:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->scanRequest.autoscanEnabled            = IfxVadc_isAutoScanEnabled(vadcG);
800077de:	e9 ff 18 00 	st.b [%a15]24,%d15
800077e2:	3c 0c       	j 800077fa <IfxVadc_Adc_getGroupConfig+0xe0>
    }
    else
    {
        config->scanRequest.autoscanEnabled             = FALSE;
800077e4:	82 0f       	mov %d15,0
800077e6:	e9 ff 18 00 	st.b [%a15]24,%d15
        config->scanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
800077ea:	e9 ff 1c 00 	st.b [%a15]28,%d15
        config->scanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;    /* Use CCU6061 TRIG0 */
800077ee:	e9 ff 1a 00 	st.b [%a15]26,%d15
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
800077f2:	e9 ff 1d 00 	st.b [%a15]29,%d15
        config->scanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;   /* Trigger source taken from Gating Input */
800077f6:	e9 ff 1b 00 	st.b [%a15]27,%d15
}


IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN0;
800077fa:	4c c1       	ld.w %d15,[%a12]4
800077fc:	37 0f 61 fc 	extr.u %d15,%d15,24,1
    }

    if (IfxVadc_isRequestQueueSlotEnabled(vadcG) == TRUE)
80007800:	df 1f 30 80 	jne %d15,1,80007860 <IfxVadc_Adc_getGroupConfig+0x146>
    {
        config->arbiter.requestSlotQueueEnabled          = TRUE;
80007804:	e9 ff 33 00 	st.b [%a15]51,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO0;
80007808:	19 c2 04 00 	ld.w %d2,[%a12]4
8000780c:	8f 32 00 21 	and %d2,%d2,3
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
80007810:	e9 f2 26 00 	st.b [%a15]38,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM0;
80007814:	19 c2 04 00 	ld.w %d2,[%a12]4
80007818:	37 02 e1 21 	extr.u %d2,%d2,3,1
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);
8000781c:	e9 f2 27 00 	st.b [%a15]39,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->QCTRL0.B.XTSEL;
80007820:	19 c3 00 20 	ld.w %d3,[%a12]128
80007824:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
80007828:	e9 f3 23 00 	st.b [%a15]35,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->QCTRL0.B.XTMODE;
8000782c:	19 c2 00 20 	ld.w %d2,[%a12]128
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007830:	8b f3 00 32 	eq %d3,%d3,15
80007834:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotQueueEnabled          = TRUE;
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);
80007838:	e9 f2 25 00 	st.b [%a15]37,%d2

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000783c:	f6 35       	jnz %d3,80007846 <IfxVadc_Adc_getGroupConfig+0x12c>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->QMR0.B.ENGT;
8000783e:	19 cf 04 20 	ld.w %d15,[%a12]132
80007842:	16 03       	and %d15,3
80007844:	3c 02       	j 80007848 <IfxVadc_Adc_getGroupConfig+0x12e>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_getQueueSlotGatingMode(vadcG);
        }
        else if (config->queueRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007846:	76 23       	jz %d2,8000784c <IfxVadc_Adc_getGroupConfig+0x132>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007848:	e9 ff 24 00 	st.b [%a15]36,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->QCTRL0.B.GTSEL;
8000784c:	19 cf 00 20 	ld.w %d15,[%a12]128
80007850:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->queueRequest.triggerConfig.gatingSource = IfxVadc_getQueueSlotGatingSource(vadcG);
80007854:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.flushQueueAfterInit        = FALSE;
80007858:	82 0f       	mov %d15,0
8000785a:	e9 ff 20 00 	st.b [%a15]32,%d15
8000785e:	3c 0c       	j 80007876 <IfxVadc_Adc_getGroupConfig+0x15c>
    }
    else
    {
        config->queueRequest.flushQueueAfterInit         = FALSE;
80007860:	82 0f       	mov %d15,0
80007862:	e9 ff 20 00 	st.b [%a15]32,%d15
        config->queueRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
80007866:	e9 ff 24 00 	st.b [%a15]36,%d15
        config->queueRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;        /* Use CCU6061 TRIG0 */
8000786a:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
8000786e:	e9 ff 25 00 	st.b [%a15]37,%d15
        config->queueRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;       /* Trigger source taken from Gating Input */
80007872:	e9 ff 23 00 	st.b [%a15]35,%d15
}


IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN2;
80007876:	4c c1       	ld.w %d15,[%a12]4
80007878:	37 0f 61 fd 	extr.u %d15,%d15,26,1
    }

    if (IfxVadc_isRequestBackgroundScanSlotEnabled(vadcG) == TRUE)
8000787c:	df 1f 33 80 	jne %d15,1,800078e2 <IfxVadc_Adc_getGroupConfig+0x1c8>
    {
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
80007880:	e9 ff 35 00 	st.b [%a15]53,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO2;
80007884:	19 c2 04 00 	ld.w %d2,[%a12]4
80007888:	37 02 62 24 	extr.u %d2,%d2,8,2
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
8000788c:	e9 f2 2e 00 	st.b [%a15]46,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM2;
80007890:	19 c2 04 00 	ld.w %d2,[%a12]4
80007894:	37 02 e1 25 	extr.u %d2,%d2,11,1
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);
80007898:	e9 f2 2f 00 	st.b [%a15]47,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerSource)vadc->BRSCTRL.B.XTSEL;
8000789c:	19 d3 00 80 	ld.w %d3,[%a13]512
800078a0:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
800078a4:	e9 f3 2b 00 	st.b [%a15]43,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerMode)vadc->BRSCTRL.B.XTMODE;
800078a8:	19 d2 00 80 	ld.w %d2,[%a13]512
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800078ac:	8b f3 00 32 	eq %d3,%d3,15
800078b0:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);
800078b4:	e9 f2 2d 00 	st.b [%a15]45,%d2

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800078b8:	f6 35       	jnz %d3,800078c2 <IfxVadc_Adc_getGroupConfig+0x1a8>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingMode)vadc->BRSMR.B.ENGT;
800078ba:	19 df 04 80 	ld.w %d15,[%a13]516
800078be:	16 03       	and %d15,3
800078c0:	3c 02       	j 800078c4 <IfxVadc_Adc_getGroupConfig+0x1aa>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_getBackgroundScanGatingMode(vadc);
        }
        else if (config->backgroundScanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800078c2:	76 23       	jz %d2,800078c8 <IfxVadc_Adc_getGroupConfig+0x1ae>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800078c4:	e9 ff 2c 00 	st.b [%a15]44,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingSource)vadc->BRSCTRL.B.GTSEL;
800078c8:	19 df 00 80 	ld.w %d15,[%a13]512
800078cc:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->backgroundScanRequest.triggerConfig.gatingSource = IfxVadc_getBackgroundScanGatingSource(vadc);
800078d0:	e9 ff 2a 00 	st.b [%a15]42,%d15
}


IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc)
{
    return (boolean)vadc->BRSMR.B.SCAN;
800078d4:	19 df 04 80 	ld.w %d15,[%a13]516
800078d8:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->backgroundScanRequest.autoBackgroundScanEnabled  = IfxVadc_isAutoBackgroundScanEnabled(vadc);
800078dc:	e9 ff 28 00 	st.b [%a15]40,%d15
800078e0:	3c 0c       	j 800078f8 <IfxVadc_Adc_getGroupConfig+0x1de>
    }
    else
    {
        config->backgroundScanRequest.autoBackgroundScanEnabled   = FALSE;
800078e2:	82 0f       	mov %d15,0
800078e4:	e9 ff 28 00 	st.b [%a15]40,%d15
        config->backgroundScanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
800078e8:	e9 ff 2c 00 	st.b [%a15]44,%d15
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
800078ec:	e9 ff 2a 00 	st.b [%a15]42,%d15
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
800078f0:	e9 ff 2d 00 	st.b [%a15]45,%d15
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
800078f4:	e9 ff 2b 00 	st.b [%a15]43,%d15


IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG)
{
    uint8 masterIndex = 0;
    masterIndex = vadcG->SYNCTR.B.STSEL;
800078f8:	19 c3 00 10 	ld.w %d3,[%a12]64
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
800078fc:	39 e7 08 00 	ld.bu %d7,[%a14]8
80007900:	8f 33 00 31 	and %d3,%d3,3
80007904:	02 72       	mov %d2,%d7
IFX_INLINE IfxVadc_GroupId IfxVadc_Adc_getMasterId(IfxVadc_GroupId slave, IfxVadc_Adc_SYNCTR_STSEL masterIndex)
{
    uint8           i, idxOffset;
    IfxVadc_GroupId masterId = slave;

    if (masterIndex == 0)
80007906:	df 03 1f 00 	jeq %d3,0,80007944 <IfxVadc_Adc_getGroupConfig+0x22a>
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
8000790a:	7b 00 00 58 	movh %d5,32768
8000790e:	1b 05 d1 50 	addi %d5,%d5,3344
80007912:	13 87 20 55 	madd %d5,%d5,%d7,8
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
80007916:	8b 47 60 42 	lt.u %d4,%d7,4
8000791a:	82 02       	mov %d2,0
8000791c:	ab 42 80 24 	sel %d2,%d4,%d2,4

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
80007920:	1a 25       	add %d15,%d5,%d2
80007922:	60 f4       	mov.a %a4,%d15
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
80007924:	82 04       	mov %d4,0

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
80007926:	a0 32       	mov.a %a2,3
80007928:	01 44 00 36 	addsc.a %a3,%a4,%d4,0
8000792c:	8f f4 0f 61 	and %d6,%d4,255
80007930:	14 35       	ld.bu %d5,[%a3]
80007932:	5f 35 06 80 	jne %d5,%d3,8000793e <IfxVadc_Adc_getGroupConfig+0x224>
            {
                return (IfxVadc_GroupId)(i + idxOffset);
80007936:	42 62       	add %d2,%d6
80007938:	8f f2 0f 21 	and %d2,%d2,255
8000793c:	3c 04       	j 80007944 <IfxVadc_Adc_getGroupConfig+0x22a>
8000793e:	c2 14       	add %d4,1
80007940:	fc 24       	loop %a2,80007928 <IfxVadc_Adc_getGroupConfig+0x20e>
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
80007942:	02 72       	mov %d2,%d7
80007944:	28 52       	st.b [%a15]5,%d2


IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc)
{
    Ifx_VADC_GLOBCFG globCfg;
    globCfg.U = vadc->GLOBCFG.U;
80007946:	19 d2 00 20 	ld.w %d2,[%a13]128

    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
8000794a:	1b 07 01 f0 	addi %d15,%d7,16
8000794e:	57 02 61 ff 	extr.u %d15,%d2,%d15,1
80007952:	e9 ff 30 00 	st.b [%a15]48,%d15
80007956:	00 90       	ret 

80007958 <IfxVadc_Adc_initChannel>:


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
80007958:	99 52 14 00 	ld.a %a2,[%a5]20
8000795c:	d4 2e       	ld.a %a14,[%a2]
8000795e:	99 2c 04 00 	ld.a %a12,[%a2]4
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
80007962:	39 28 08 00 	ld.bu %d8,[%a2]8
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
80007966:	b5 42 04 00 	st.a [%a4]4,%a2
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
8000796a:	02 84       	mov %d4,%d8
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
8000796c:	40 4d       	mov.aa %a13,%a4
    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
8000796e:	40 e4       	mov.aa %a4,%a14
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
80007970:	40 5f       	mov.aa %a15,%a5
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;
80007972:	79 59 0c 00 	ld.b %d9,[%a5]12

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007976:	6d ff ab e6 	call 800046cc <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference)
{
    vadcG->CHCTR[channelIndex].B.REFSEL = reference;
8000797a:	1b 09 06 20 	addi %d2,%d9,96
8000797e:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007982:	0c fe       	ld.bu %d15,[%a15]14
80007984:	54 22       	ld.w %d2,[%a2]
        IfxVadc_setResultPosition(vadcG, channelIndex, config->rightAlignedStorage);
        IfxVadc_setBackgroundResultTarget(vadcG, channelIndex, config->globalResultUsage);
        IfxVadc_setBoundaryMode(vadcG, channelIndex, config->boundaryMode);
    }

    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007986:	40 e4       	mov.aa %a4,%a14
80007988:	67 f2 0b f0 	ins.t %d15,%d2,11,%d15,0
8000798c:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister)
{
    vadcG->CHCTR[channelIndex].B.RESREG = resultRegister;
8000798e:	54 22       	ld.w %d2,[%a2]
80007990:	0c ff       	ld.bu %d15,[%a15]15
80007992:	37 f2 04 f8 	insert %d15,%d2,%d15,16,4
80007996:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELL = lowerBoundary;
80007998:	54 22       	ld.w %d2,[%a2]
8000799a:	39 ff 10 00 	ld.bu %d15,[%a15]16
8000799e:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
800079a2:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELU = upperBoundary;
800079a4:	54 22       	ld.w %d2,[%a2]
800079a6:	39 ff 11 00 	ld.bu %d15,[%a15]17
800079aa:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
800079ae:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize)
{
    vadcG->CHCTR[channelIndex].B.SYNC = synchonize;
800079b0:	54 22       	ld.w %d2,[%a2]
800079b2:	0c f1       	ld.bu %d15,[%a15]1
800079b4:	67 f2 0a f0 	ins.t %d15,%d2,10,%d15,0
800079b8:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass)
{
    vadcG->CHCTR[channelIndex].B.ICLSEL = inputClass;
800079ba:	54 22       	ld.w %d2,[%a2]
800079bc:	0c fd       	ld.bu %d15,[%a15]13
800079be:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
800079c2:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck)
{
    vadcG->CHCTR[channelIndex].B.CHEVMODE = limitCheck;
800079c4:	54 22       	ld.w %d2,[%a2]
800079c6:	39 ff 13 00 	ld.bu %d15,[%a15]19
800079ca:	37 f2 02 f4 	insert %d15,%d2,%d15,8,2
800079ce:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage)
{
    vadcG->CHCTR[channelIndex].B.RESPOS = rightAlignedStorage;
800079d0:	54 22       	ld.w %d2,[%a2]
800079d2:	0c f3       	ld.bu %d15,[%a15]3
800079d4:	67 f2 15 f0 	ins.t %d15,%d2,21,%d15,0
800079d8:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage)
{
    vadcG->CHCTR[channelIndex].B.RESTBS = globalResultUsage;
800079da:	54 22       	ld.w %d2,[%a2]
800079dc:	0c f0       	ld.bu %d15,[%a15]0
800079de:	67 f2 14 f0 	ins.t %d15,%d2,20,%d15,0
800079e2:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode)
{
    vadcG->CHCTR[channelIndex].B.BNDSELX = boundaryMode;
800079e4:	54 22       	ld.w %d2,[%a2]
800079e6:	39 ff 12 00 	ld.bu %d15,[%a15]18
800079ea:	37 f2 04 f6 	insert %d15,%d2,%d15,12,4
800079ee:	6c 20       	st.w [%a2]0,%d15
800079f0:	1b 08 01 f0 	addi %d15,%d8,16
800079f4:	16 ff       	and %d15,255
800079f6:	02 f4       	mov %d4,%d15
800079f8:	6d ff 6a e6 	call 800046cc <IfxVadc_enableAccess>

    if (config->backgroundChannel == FALSE)
800079fc:	08 23       	ld.bu %d3,[%a15]2
800079fe:	82 12       	mov %d2,1
80007a00:	0f 92 00 20 	sh %d2,%d2,%d9
80007a04:	f6 35       	jnz %d3,80007a0e <IfxVadc_Adc_initChannel+0xb6>
}


IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U |= (1 << channelIndex);
80007a06:	19 c3 08 00 	ld.w %d3,[%a12]8
80007a0a:	a6 32       	or %d2,%d3
80007a0c:	3c 05       	j 80007a16 <IfxVadc_Adc_initChannel+0xbe>
}


IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U &= ~(1 << channelIndex);
80007a0e:	19 c3 08 00 	ld.w %d3,[%a12]8
80007a12:	0f 23 e0 20 	andn %d2,%d3,%d2
    else
    {
        IfxVadc_setBackgroundPriorityChannel(vadcG, channelIndex);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007a16:	02 f4       	mov %d4,%d15
80007a18:	59 c2 08 00 	st.w [%a12]8,%d2
80007a1c:	40 e4       	mov.aa %a4,%a14
80007a1e:	6d ff 3b e6 	call 80004694 <IfxVadc_disableAccess>
}


IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel)
{
    vadcG->CEVNP0.U &= ~(IFX_VADC_G_CEVNP0_CEV0NP_MSK << (channel * 4));
80007a22:	79 d3 00 00 	ld.b %d3,[%a13]0
80007a26:	19 c5 20 40 	ld.w %d5,[%a12]288
80007a2a:	8f 23 00 f0 	sh %d15,%d3,2
80007a2e:	3b f0 00 20 	mov %d2,15
80007a32:	0f f2 00 20 	sh %d2,%d2,%d15
80007a36:	0f 25 e0 20 	andn %d2,%d5,%d2

    IfxVadc_setChannelEventNodePointer0(vadcG, config->channelSrcNr, channel->channel);
80007a3a:	08 b4       	ld.bu %d4,[%a15]11
80007a3c:	59 c2 20 40 	st.w [%a12]288,%d2
    vadcG->CEVNP0.U |= (channelSrcNr << (channel * 4));
80007a40:	19 c2 20 40 	ld.w %d2,[%a12]288
80007a44:	0f f4 00 f0 	sh %d15,%d4,%d15
80007a48:	a6 2f       	or %d15,%d2
80007a4a:	59 cf 20 40 	st.w [%a12]288,%d15

    if (config->channelPriority > 0)
80007a4e:	b9 ff 06 00 	ld.hu %d15,[%a15]6
80007a52:	6e 1f       	jz %d15,80007a90 <IfxVadc_Adc_initChannel+0x138>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->channelSrcNr);
80007a54:	02 84       	mov %d4,%d8
80007a56:	08 b5       	ld.bu %d5,[%a15]11
80007a58:	6d ff 6b e7 	call 8000492e <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
{
    vadcG->CEFCLR.U = 1 << channelId;
80007a5c:	79 f2 0c 00 	ld.b %d2,[%a15]12
80007a60:	82 1f       	mov %d15,1
80007a62:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007a66:	59 cf 10 40 	st.w [%a12]272,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80007a6a:	54 22       	ld.w %d2,[%a2]
80007a6c:	08 63       	ld.bu %d3,[%a15]6
80007a6e:	8f f2 cf 21 	andn %d2,%d2,255
80007a72:	a6 32       	or %d2,%d3

        IfxVadc_clearChannelRequest(vadcG, config->channelId);
        IfxSrc_init(src, config->channelServProvider, config->channelPriority);
80007a74:	0c f9       	ld.bu %d15,[%a15]9
80007a76:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007a78:	54 22       	ld.w %d2,[%a2]
80007a7a:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007a7e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80007a80:	4c 20       	ld.w %d15,[%a2]0
80007a82:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007a86:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80007a88:	4c 20       	ld.w %d15,[%a2]0
80007a8a:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007a8e:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    if (config->resultRegister < IfxVadc_ChannelResult_8)
80007a90:	0c ff       	ld.bu %d15,[%a15]15
80007a92:	08 a2       	ld.bu %d2,[%a15]10
80007a94:	ff 8f 15 80 	jge.u %d15,8,80007abe <IfxVadc_Adc_initChannel+0x166>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP0.U &= ~(IFX_VADC_G_REVNP0_REV0NP_MSK << (resultRegister * 4));
80007a98:	19 c4 30 40 	ld.w %d4,[%a12]304
80007a9c:	06 2f       	sh %d15,2
80007a9e:	3b f0 00 30 	mov %d3,15
80007aa2:	0f f3 00 30 	sh %d3,%d3,%d15
80007aa6:	0f 34 e0 30 	andn %d3,%d4,%d3
80007aaa:	59 c3 30 40 	st.w [%a12]304,%d3
    vadcG->REVNP0.U |= (resultSrcNr << (resultRegister * 4));
80007aae:	19 c3 30 40 	ld.w %d3,[%a12]304
80007ab2:	0f f2 00 f0 	sh %d15,%d2,%d15
80007ab6:	a6 3f       	or %d15,%d3
80007ab8:	59 cf 30 40 	st.w [%a12]304,%d15
80007abc:	3c 14       	j 80007ae4 <IfxVadc_Adc_initChannel+0x18c>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP1.U &= ~(IFX_VADC_G_REVNP1_REV8NP_MSK << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80007abe:	c2 8f       	add %d15,-8
80007ac0:	19 c4 34 40 	ld.w %d4,[%a12]308
80007ac4:	06 2f       	sh %d15,2
80007ac6:	3b f0 00 30 	mov %d3,15
80007aca:	0f f3 00 30 	sh %d3,%d3,%d15
80007ace:	0f 34 e0 30 	andn %d3,%d4,%d3
80007ad2:	59 c3 34 40 	st.w [%a12]308,%d3
    vadcG->REVNP1.U |= (resultSrcNr << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80007ad6:	19 c3 34 40 	ld.w %d3,[%a12]308
80007ada:	0f f2 00 f0 	sh %d15,%d2,%d15
80007ade:	a6 3f       	or %d15,%d3
80007ae0:	59 cf 34 40 	st.w [%a12]308,%d15
    else
    {
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
    }

    if (config->resultPriority > 0)
80007ae4:	b9 ff 04 00 	ld.hu %d15,[%a15]4
80007ae8:	6e 24       	jz %d15,80007b30 <IfxVadc_Adc_initChannel+0x1d8>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->resultSrcNr);
80007aea:	02 84       	mov %d4,%d8
80007aec:	08 a5       	ld.bu %d5,[%a15]10
80007aee:	6d ff 20 e7 	call 8000492e <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
{
    vadcG->RCR[resultRegister].B.SRGEN = 1;
80007af2:	0c ff       	ld.bu %d15,[%a15]15
80007af4:	1b 0f 08 f0 	addi %d15,%d15,128
80007af8:	90 c3       	addsc.a %a3,%a12,%d15,2
80007afa:	4c 30       	ld.w %d15,[%a3]0
80007afc:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80007b00:	6c 30       	st.w [%a3]0,%d15
}


IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
{
    vadcG->REFCLR.U = 0x0000FFFFu;
80007b02:	bb f0 ff ff 	mov.u %d15,65535
80007b06:	59 cf 14 40 	st.w [%a12]276,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80007b0a:	54 22       	ld.w %d2,[%a2]
80007b0c:	08 43       	ld.bu %d3,[%a15]4
80007b0e:	8f f2 cf 21 	andn %d2,%d2,255
80007b12:	a6 32       	or %d2,%d3

        IfxVadc_enableServiceRequest(vadcG, config->resultRegister);
        IfxVadc_clearAllResultRequests(vadcG);
        IfxSrc_init(src, config->resultServProvider, config->resultPriority);
80007b14:	0c f8       	ld.bu %d15,[%a15]8
80007b16:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007b18:	54 22       	ld.w %d2,[%a2]
80007b1a:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007b1e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80007b20:	4c 20       	ld.w %d15,[%a2]0
80007b22:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007b26:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80007b28:	4c 20       	ld.w %d15,[%a2]0
80007b2a:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007b2e:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007b30:	40 e4       	mov.aa %a4,%a14
80007b32:	02 84       	mov %d4,%d8
80007b34:	6d ff b0 e5 	call 80004694 <IfxVadc_disableAccess>
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007b38:	0c ff       	ld.bu %d15,[%a15]15
    channel->channel   = config->channelId;

    return Status;
}
80007b3a:	82 02       	mov %d2,0
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007b3c:	2c d1       	st.b [%a13]1,%d15
    channel->channel   = config->channelId;
80007b3e:	0c fc       	ld.bu %d15,[%a15]12
80007b40:	2c d0       	st.b [%a13]0,%d15

    return Status;
}
80007b42:	00 90       	ret 

80007b44 <IfxVadc_Adc_initChannelConfig>:
        .resultServProvider  = IfxSrc_Tos_cpu0,
        .channelPriority     = 0,
        .channelSrcNr        = IfxVadc_SrcNr_group0,
        .channelServProvider = IfxSrc_Tos_cpu0
    };
    *config       = IfxVadc_Adc_defaultChannelConfig;
80007b44:	40 42       	mov.aa %a2,%a4
80007b46:	d2 02       	mov %e2,0
80007b48:	89 22 48 01 	st.d [%a2+]8,%e2
80007b4c:	89 22 48 01 	st.d [%a2+]8,%e2
80007b50:	89 22 48 01 	st.d [%a2+]8,%e2
    config->group = group;
80007b54:	b5 45 14 00 	st.a [%a4]20,%a5
80007b58:	00 90       	ret 

80007b5a <IfxVadc_Adc_initGroup>:


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007b5a:	d4 52       	ld.a %a2,[%a5]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007b5c:	39 58 04 00 	ld.bu %d8,[%a5]4


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007b60:	d4 2c       	ld.a %a12,[%a2]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007b62:	8f a8 00 90 	sh %d9,%d8,10
80007b66:	1b 09 48 f0 	addi %d15,%d9,1152
80007b6a:	10 cd       	addsc.a %a13,%a12,%d15,0

    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
80007b6c:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];

    /* check for write access */
    group->group   = vadcG;
80007b6e:	b5 4d 04 00 	st.a [%a4]4,%a13
    group->module  = *config->module;
80007b72:	6c 40       	st.w [%a4]0,%d15
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
80007b74:	e9 48 08 00 	st.b [%a4]8,%d8
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007b78:	40 c4       	mov.aa %a4,%a12
    config->group = group;
}


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
80007b7a:	40 5f       	mov.aa %a15,%a5
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007b7c:	6d ff 5a e6 	call 80004830 <IfxVadc_getAdcAnalogFrequency>

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007b80:	1b 08 01 f0 	addi %d15,%d8,16
80007b84:	8f ff 0f a1 	and %d10,%d15,255
80007b88:	40 c4       	mov.aa %a4,%a12
80007b8a:	02 a4       	mov %d4,%d10
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007b8c:	02 2b       	mov %d11,%d2

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007b8e:	6d ff 9f e5 	call 800046cc <IfxVadc_enableAccess>

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007b92:	39 ff 33 00 	ld.bu %d15,[%a15]51
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007b96:	40 d4       	mov.aa %a4,%a13
    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007b98:	5e 17       	jne %d15,1,80007ba6 <IfxVadc_Adc_initGroup+0x4c>
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007b9a:	82 14       	mov %d4,1
80007b9c:	39 f5 26 00 	ld.bu %d5,[%a15]38
80007ba0:	39 f6 27 00 	ld.bu %d6,[%a15]39
80007ba4:	3c 03       	j 80007baa <IfxVadc_Adc_initGroup+0x50>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
80007ba6:	d2 04       	mov %e4,0
80007ba8:	82 06       	mov %d6,0
80007baa:	82 07       	mov %d7,0
80007bac:	6d ff 06 e8 	call 80004bb8 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007bb0:	39 ff 34 00 	ld.bu %d15,[%a15]52
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80007bb4:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007bb6:	5e 17       	jne %d15,1,80007bc4 <IfxVadc_Adc_initGroup+0x6a>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80007bb8:	82 14       	mov %d4,1
80007bba:	39 f5 1e 00 	ld.bu %d5,[%a15]30
80007bbe:	39 f6 1f 00 	ld.bu %d6,[%a15]31
80007bc2:	3c 03       	j 80007bc8 <IfxVadc_Adc_initGroup+0x6e>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
80007bc4:	d2 04       	mov %e4,0
80007bc6:	82 06       	mov %d6,0
80007bc8:	82 17       	mov %d7,1
80007bca:	6d ff f7 e7 	call 80004bb8 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007bce:	39 ff 35 00 	ld.bu %d15,[%a15]53
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80007bd2:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007bd4:	5e 17       	jne %d15,1,80007be2 <IfxVadc_Adc_initGroup+0x88>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80007bd6:	82 14       	mov %d4,1
80007bd8:	39 f5 2e 00 	ld.bu %d5,[%a15]46
80007bdc:	39 f6 2f 00 	ld.bu %d6,[%a15]47
80007be0:	3c 03       	j 80007be6 <IfxVadc_Adc_initGroup+0x8c>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_background);
80007be2:	d2 04       	mov %e4,0
80007be4:	82 06       	mov %d6,0
80007be6:	82 27       	mov %d7,2
80007be8:	6d ff e8 e7 	call 80004bb8 <IfxVadc_setArbiterPriority>
    }

    /* master slave configuration */
    if (config->master != groupIndex)
80007bec:	0c f5       	ld.bu %d15,[%a15]5
80007bee:	be 8b       	jeq %d15,%d8,80007c24 <IfxVadc_Adc_initGroup+0xca>
}


IFX_INLINE IfxVadc_Adc_SYNCTR_STSEL IfxVadc_Adc_getMasterKernelIndex(IfxVadc_GroupId slave, IfxVadc_GroupId master)
{
    return IfxVadc_Adc_masterIndex[slave][master];
80007bf0:	13 88 20 ff 	madd %d15,%d15,%d8,8
80007bf4:	91 00 00 28 	movh.a %a2,32768
80007bf8:	d9 22 d0 40 	lea %a2,[%a2]3344 <80000d10 <IfxVadc_Adc_masterIndex>>
80007bfc:	10 22       	addsc.a %a2,%a2,%d15,0
80007bfe:	0c 20       	ld.bu %d15,[%a2]0
}


IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex)
{
    vadcG->SYNCTR.B.STSEL = (masterIndex % 4);
80007c00:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007c04:	8f 3f 00 21 	and %d2,%d15,3
80007c08:	19 23 40 30 	ld.w %d3,[%a2]1216
80007c0c:	37 f3 02 f0 	insert %d15,%d3,%d15,0,2
80007c10:	59 2f 40 30 	st.w [%a2]1216,%d15
    vadcG->SYNCTR.U      |= (0x00000008U << (masterIndex % 4));
80007c14:	19 23 40 30 	ld.w %d3,[%a2]1216
80007c18:	da 08       	mov %d15,8
80007c1a:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007c1e:	a6 3f       	or %d15,%d3
80007c20:	59 2f 40 30 	st.w [%a2]1216,%d15
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007c24:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007c28:	19 2f 40 20 	ld.w %d15,[%a2]1152
80007c2c:	8f 3f c0 f1 	andn %d15,%d15,3
80007c30:	59 2f 40 20 	st.w [%a2]1152,%d15
}


IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength)
{
    vadcG->ARBCFG.B.ARBRND = arbiterRoundLength;
80007c34:	39 ff 32 00 	ld.bu %d15,[%a15]50
80007c38:	19 22 40 20 	ld.w %d2,[%a2]1152
80007c3c:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007c40:	59 2f 40 20 	st.w [%a2]1152,%d15
    IfxVadc_setAnalogConvertControl(vadcG, IfxVadc_AnalogConverterMode_off);

    IfxVadc_setArbitrationRoundLength(vadcG, config->arbiter.arbiterRoundLength);

    /* Setup queue request if enabled */
    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007c44:	39 ff 33 00 	ld.bu %d15,[%a15]51
80007c48:	df 1f 5a 80 	jne %d15,1,80007cfc <IfxVadc_Adc_initGroup+0x1a2>
    {
        const IfxVadc_Adc_QueueConfig *queueSlot = &config->queueRequest;

        /* configure external Trigger if enabled */
        if (queueSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007c4c:	39 ff 25 00 	ld.bu %d15,[%a15]37
80007c50:	6e 28       	jz %d15,80007ca0 <IfxVadc_Adc_initGroup+0x146>
}


IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
80007c52:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007c56:	96 04       	or %d15,4
80007c58:	59 2f 44 40 	st.w [%a2]1284,%d15


IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U        = vadcG->QCTRL0.U;
80007c5c:	19 23 40 40 	ld.w %d3,[%a2]1280
        {
            /* enable external trigger */
            IfxVadc_enableQueueSlotExternalTrigger(vadcG);
            IfxVadc_setQueueSlotTriggerOperatingConfig(vadcG, queueSlot->triggerConfig.triggerMode, queueSlot->triggerConfig.triggerSource);
80007c60:	39 f2 25 00 	ld.bu %d2,[%a15]37
80007c64:	39 ff 23 00 	ld.bu %d15,[%a15]35
    qctrl0.B.XTWC   = 1;
80007c68:	b7 13 81 37 	insert %d3,%d3,1,15,1
    qctrl0.B.XTMODE = triggerMode;
80007c6c:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    qctrl0.B.XTSEL  = triggerSource;
80007c70:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->QCTRL0.U = qctrl0.U;
80007c74:	59 23 40 40 	st.w [%a2]1280,%d3

            /* if last input is used the trigger input selection is extend by Gating inputs */
            if (queueSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)
80007c78:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007c7c:	8b ff 20 f2 	ne %d15,%d15,15
80007c80:	ee 16       	jnz %d15,80007cac <IfxVadc_Adc_initGroup+0x152>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007c82:	19 23 40 40 	ld.w %d3,[%a2]1280
            {
                IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007c86:	39 ff 22 00 	ld.bu %d15,[%a15]34
    qctrl0.B.GTWC      = 1;
80007c8a:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007c8e:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007c92:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007c96:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007c9a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007c9e:	3c 05       	j 80007ca8 <IfxVadc_Adc_initGroup+0x14e>
}


IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
80007ca0:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007ca4:	8f 4f c0 f1 	andn %d15,%d15,4
80007ca8:	59 2f 44 40 	st.w [%a2]1284,%d15
            /* disable external trigger */
            IfxVadc_disableQueueSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((queueSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007cac:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007cb0:	8b ff 00 f2 	eq %d15,%d15,15
80007cb4:	ee 15       	jnz %d15,80007cde <IfxVadc_Adc_initGroup+0x184>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007cb6:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, queueSlot->triggerConfig.gatingMode);
80007cba:	39 f2 22 00 	ld.bu %d2,[%a15]34
80007cbe:	19 23 40 40 	ld.w %d3,[%a2]1280
80007cc2:	39 ff 24 00 	ld.bu %d15,[%a15]36
    qctrl0.B.GTWC      = 1;
80007cc6:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007cca:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007cce:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007cd2:	19 22 44 40 	ld.w %d2,[%a2]1284
80007cd6:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007cda:	59 2f 44 40 	st.w [%a2]1284,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_clearQueue(vadcG, (queueSlot->flushQueueAfterInit) ? 1 : 0);
80007cde:	39 f2 20 00 	ld.bu %d2,[%a15]32
}


IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
{
    vadcG->QMR0.B.FLUSH = flushQueue;
80007ce2:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007ce6:	3b 00 40 f0 	mov %d15,1024
80007cea:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80007cee:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007cf2:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80007cf6:	a6 2f       	or %d15,%d2
80007cf8:	59 2f 44 40 	st.w [%a2]1284,%d15
    {
        /* do nothing */
    }

    /* Setup scan request if enabled */
    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007cfc:	39 ff 34 00 	ld.bu %d15,[%a15]52
80007d00:	df 1f 5a 80 	jne %d15,1,80007db4 <IfxVadc_Adc_initGroup+0x25a>
    {
        const IfxVadc_Adc_ScanConfig *scanSlot = &config->scanRequest;

        /* configure external Trigger if enabled */
        if (scanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007d04:	39 ff 1d 00 	ld.bu %d15,[%a15]29
}


IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
80007d08:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007d0c:	6e 28       	jz %d15,80007d5c <IfxVadc_Adc_initGroup+0x202>
80007d0e:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d12:	96 04       	or %d15,4
80007d14:	59 2f 64 40 	st.w [%a2]1316,%d15


IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U        = vadcG->ASCTRL.U;
80007d18:	19 23 60 40 	ld.w %d3,[%a2]1312
        {
            /* enable external trigger */
            IfxVadc_enableScanSlotExternalTrigger(vadcG);

            IfxVadc_setScanSlotTriggerConfig(vadcG, scanSlot->triggerConfig.triggerMode, scanSlot->triggerConfig.triggerSource);
80007d1c:	39 f2 1d 00 	ld.bu %d2,[%a15]29
80007d20:	39 ff 1b 00 	ld.bu %d15,[%a15]27
    asctrl.B.XTWC   = 1;
80007d24:	b7 13 81 37 	insert %d3,%d3,1,15,1
    asctrl.B.XTMODE = triggerMode;
80007d28:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    asctrl.B.XTSEL  = triggerSource;
80007d2c:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->ASCTRL.U = asctrl.U;
80007d30:	59 23 60 40 	st.w [%a2]1312,%d3

            if (scanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007d34:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007d38:	8b ff 20 f2 	ne %d15,%d15,15
80007d3c:	ee 16       	jnz %d15,80007d68 <IfxVadc_Adc_initGroup+0x20e>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007d3e:	19 23 60 40 	ld.w %d3,[%a2]1312
            {
                IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007d42:	39 ff 1a 00 	ld.bu %d15,[%a15]26
    asctrl.B.GTWC      = 1;
80007d46:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007d4a:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007d4e:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007d52:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d56:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007d5a:	3c 05       	j 80007d64 <IfxVadc_Adc_initGroup+0x20a>
}


IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
80007d5c:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d60:	8f 4f c0 f1 	andn %d15,%d15,4
80007d64:	59 2f 64 40 	st.w [%a2]1316,%d15
        {
            IfxVadc_disableScanSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((scanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007d68:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007d6c:	8b ff 00 f2 	eq %d15,%d15,15
80007d70:	ee 15       	jnz %d15,80007d9a <IfxVadc_Adc_initGroup+0x240>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007d72:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, scanSlot->triggerConfig.gatingMode);
80007d76:	39 f2 1a 00 	ld.bu %d2,[%a15]26
80007d7a:	19 23 60 40 	ld.w %d3,[%a2]1312
80007d7e:	39 ff 1c 00 	ld.bu %d15,[%a15]28
    asctrl.B.GTWC      = 1;
80007d82:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007d86:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007d8a:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007d8e:	19 22 64 40 	ld.w %d2,[%a2]1316
80007d92:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007d96:	59 2f 64 40 	st.w [%a2]1316,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoScan(vadcG, scanSlot->autoscanEnabled ? 1 : 0);
80007d9a:	39 ff 18 00 	ld.bu %d15,[%a15]24
}


IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable)
{
    vadcG->ASMR.B.SCAN = autoscanEnable;
80007d9e:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007da2:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007da6:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007daa:	8f 0f c1 f1 	andn %d15,%d15,16
80007dae:	a6 2f       	or %d15,%d2
80007db0:	59 2f 64 40 	st.w [%a2]1316,%d15
    else
    {
        /* do nothing */
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007db4:	39 ff 35 00 	ld.bu %d15,[%a15]53
80007db8:	df 1f 4f 80 	jne %d15,1,80007e56 <IfxVadc_Adc_initGroup+0x2fc>
    {
        const IfxVadc_Adc_BackgroundScanConfig *backgroundScanSlot = &config->backgroundScanRequest;

        /* configure external Trigger if enabled */
        if (backgroundScanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007dbc:	39 ff 2d 00 	ld.bu %d15,[%a15]45
80007dc0:	6e 29       	jz %d15,80007e12 <IfxVadc_Adc_initGroup+0x2b8>
}


IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
80007dc2:	19 cf 04 80 	ld.w %d15,[%a12]516
80007dc6:	96 04       	or %d15,4
80007dc8:	59 cf 04 80 	st.w [%a12]516,%d15


IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U        = vadc->BRSCTRL.U;
80007dcc:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_enableBackgroundScanSlotExternalTrigger(vadc);

            IfxVadc_setBackgroundScanSlotTriggerConfig(vadc, backgroundScanSlot->triggerConfig.triggerMode, backgroundScanSlot->triggerConfig.triggerSource);
80007dd0:	39 f2 2d 00 	ld.bu %d2,[%a15]45
80007dd4:	39 ff 2b 00 	ld.bu %d15,[%a15]43
    brsctrl.B.XTWC   = 1;
80007dd8:	b7 13 81 37 	insert %d3,%d3,1,15,1
    brsctrl.B.XTMODE = triggerMode;
80007ddc:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    brsctrl.B.XTSEL  = triggerSource;
80007de0:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadc->BRSCTRL.U  = brsctrl.U;
80007de4:	59 c3 00 80 	st.w [%a12]512,%d3

            if (backgroundScanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007de8:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007dec:	8b ff 20 f2 	ne %d15,%d15,15
80007df0:	ee 11       	jnz %d15,80007e12 <IfxVadc_Adc_initGroup+0x2b8>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007df2:	19 c3 00 80 	ld.w %d3,[%a12]512
            {
                IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007df6:	39 ff 2a 00 	ld.bu %d15,[%a15]42
    brsctrl.B.GTWC     = 1;
80007dfa:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007dfe:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80007e02:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007e06:	19 cf 04 80 	ld.w %d15,[%a12]516
80007e0a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007e0e:	59 cf 04 80 	st.w [%a12]516,%d15
        {
            /* do nothing */
        }

        /* configure Gating if enabled */
        if ((backgroundScanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007e12:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007e16:	8b ff 00 f2 	eq %d15,%d15,15
80007e1a:	ee 13       	jnz %d15,80007e40 <IfxVadc_Adc_initGroup+0x2e6>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007e1c:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, backgroundScanSlot->triggerConfig.gatingMode);
80007e20:	39 f2 2a 00 	ld.bu %d2,[%a15]42
    brsctrl.B.GTWC     = 1;
80007e24:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007e28:	37 23 04 38 	insert %d3,%d3,%d2,16,4
80007e2c:	39 ff 2c 00 	ld.bu %d15,[%a15]44
    vadc->BRSCTRL.U    = brsctrl.U;
80007e30:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007e34:	19 c2 04 80 	ld.w %d2,[%a12]516
80007e38:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007e3c:	59 cf 04 80 	st.w [%a12]516,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoBackgroundScan(vadc, backgroundScanSlot->autoBackgroundScanEnabled ? 1 : 0);
80007e40:	39 ff 28 00 	ld.bu %d15,[%a15]40
}


IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable)
{
    vadc->BRSMR.B.SCAN = autoBackgroundScanEnable;
80007e44:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007e48:	19 cf 04 80 	ld.w %d15,[%a12]516
80007e4c:	8f 0f c1 f1 	andn %d15,%d15,16
80007e50:	a6 2f       	or %d15,%d2
80007e52:	59 cf 04 80 	st.w [%a12]516,%d15
    {
        /* do nothing */
    }

    /* turn on group after initialisation, only in master mode */
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
80007e56:	0c f5       	ld.bu %d15,[%a15]5
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007e58:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007e5c:	3a 8f       	eq %d15,%d15,%d8
80007e5e:	ab 3f a0 2f 	seln %d2,%d15,%d15,3
80007e62:	19 2f 40 20 	ld.w %d15,[%a2]1152
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);
80007e66:	02 84       	mov %d4,%d8
80007e68:	8f 3f c0 f1 	andn %d15,%d15,3
80007e6c:	a6 2f       	or %d15,%d2
80007e6e:	59 2f 40 20 	st.w [%a2]1152,%d15
80007e72:	39 f5 30 00 	ld.bu %d5,[%a15]48
80007e76:	40 c4       	mov.aa %a4,%a12
80007e78:	6d ff 69 e4 	call 8000474a <IfxVadc_disablePostCalibration>
}


IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadcG->ICLASS[inputClassNum].B.CMS = resolution;
80007e7c:	8f 88 00 80 	sh %d8,%d8,8
80007e80:	82 05       	mov %d5,0
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80007e82:	3b f0 0f 40 	mov %d4,255

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        /* configure Group input class registers */
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
80007e86:	01 f5 03 26 	addsc.a %a2,%a15,%d5,3
80007e8a:	0b 58 00 20 	add %d2,%d8,%d5
80007e8e:	1b 82 12 20 	addi %d2,%d2,296
80007e92:	0c 2c       	ld.bu %d15,[%a2]12
80007e94:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007e98:	54 22       	ld.w %d2,[%a2]
80007e9a:	37 f2 03 f4 	insert %d15,%d2,%d15,8,3
80007e9e:	6c 20       	st.w [%a2]0,%d15
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
80007ea0:	9a 15       	add %d15,%d5,1
80007ea2:	d0 f2       	addsc.a %a2,%a15,%d15,3

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80007ea4:	54 23       	ld.w %d3,[%a2]
80007ea6:	4b 3b 41 30 	mul.f %d3,%d11,%d3
80007eaa:	4b 03 71 31 	ftouz %d3,%d3
80007eae:	c2 e3       	add %d3,-2

    if (ticks > 31)
80007eb0:	8b 03 62 f2 	lt.u %d15,%d3,32
80007eb4:	ee 04       	jnz %d15,80007ebc <IfxVadc_Adc_initGroup+0x362>
    {
        ticks = (ticks / 16) + 15;
80007eb6:	06 c3       	sh %d3,-4
80007eb8:	1b f3 00 30 	addi %d3,%d3,15
80007ebc:	0b 43 90 31 	min.u %d3,%d3,%d4
}


IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadcG->ICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80007ec0:	1a 58       	add %d15,%d8,%d5
80007ec2:	1b 8f 12 f0 	addi %d15,%d15,296
80007ec6:	90 c2       	addsc.a %a2,%a12,%d15,2
80007ec8:	4c 20       	ld.w %d15,[%a2]0
80007eca:	37 3f 05 30 	insert %d3,%d15,%d3,0,5
80007ece:	74 23       	st.w [%a2],%d3
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80007ed0:	df 15 04 00 	jeq %d5,1,80007ed8 <IfxVadc_Adc_initGroup+0x37e>
80007ed4:	82 15       	mov %d5,1
80007ed6:	3c d8       	j 80007e86 <IfxVadc_Adc_initGroup+0x32c>
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007ed8:	40 c4       	mov.aa %a4,%a12
80007eda:	02 a4       	mov %d4,%d10
80007edc:	6d ff dc e3 	call 80004694 <IfxVadc_disableAccess>

    return status;
}
80007ee0:	82 02       	mov %d2,0
80007ee2:	00 90       	ret 

80007ee4 <IfxVadc_Adc_initGroupConfig>:
        .inputClass[0].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
        .inputClass[1].resolution = IfxVadc_ChannelResolution_12bit,
        .inputClass[1].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
    };

    *config                        = IfxVadc_Adc_defaultGroupConfig;
80007ee4:	40 42       	mov.aa %a2,%a4
80007ee6:	7b 60 58 f3 	movh %d15,13702
80007eea:	d2 02       	mov %e2,0
80007eec:	a0 6f       	mov.a %a15,6
80007eee:	89 22 48 01 	st.d [%a2+]8,%e2
80007ef2:	fc fe       	loop %a15,80007eee <IfxVadc_Adc_initGroupConfig+0xa>
80007ef4:	1b df 7b f3 	addi %d15,%d15,14269
80007ef8:	6c 42       	st.w [%a4]8,%d15
80007efa:	6c 44       	st.w [%a4]16,%d15
80007efc:	82 1f       	mov %d15,1
80007efe:	e9 4f 1e 00 	st.b [%a4]30,%d15
80007f02:	e9 4f 20 00 	st.b [%a4]32,%d15
80007f06:	e9 4f 26 00 	st.b [%a4]38,%d15
80007f0a:	e9 4f 2e 00 	st.b [%a4]46,%d15
    config->groupId                = IfxVadc_GroupId_0;
    config->module                 = vadc;
80007f0e:	f4 45       	st.a [%a4],%a5
80007f10:	00 90       	ret 

80007f12 <IfxVadc_Adc_initModule>:


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
80007f12:	cc 50       	ld.a %a15,[%a5]0
    config->disablePostCalibration = FALSE;
}


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
80007f14:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
    vadc->vadc = vadcSFR;
80007f16:	ec 40       	st.a [%a4]0,%a15
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007f18:	6d ff 0f fa 	call 80007336 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80007f1c:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007f1e:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80007f20:	6d ff 0b f9 	call 80007136 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.U = 0x00000000;
80007f24:	82 02       	mov %d2,0
80007f26:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80007f28:	02 f4       	mov %d4,%d15
80007f2a:	6d ff 3b fa 	call 800073a0 <IfxScuWdt_setCpuEndinit>
    float32        analogFrequency;
    uint8          inputClassNum, groupNum;

    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);
80007f2e:	40 f4       	mov.aa %a4,%a15
80007f30:	39 c4 21 00 	ld.bu %d4,[%a12]33
80007f34:	6d ff 30 e6 	call 80004b94 <IfxVadc_selectPowerSupplyVoltage>

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007f38:	19 c4 18 00 	ld.w %d4,[%a12]24
80007f3c:	40 f4       	mov.aa %a4,%a15
80007f3e:	4b 04 71 41 	ftouz %d4,%d4
    {
        return IfxVadc_Status_notInitialised;
80007f42:	82 1f       	mov %d15,1
    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007f44:	6d ff 42 e5 	call 800049c8 <IfxVadc_initializeFAdcI>
80007f48:	df 02 57 00 	jeq %d2,0,80007ff6 <IfxVadc_Adc_initModule+0xe4>
    {
        /* do nothing */
    }

    /* Set digital Frequency */
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);
80007f4c:	19 c4 14 00 	ld.w %d4,[%a12]20
80007f50:	40 f4       	mov.aa %a4,%a15
80007f52:	4b 04 71 41 	ftouz %d4,%d4
80007f56:	6d ff 24 e5 	call 8000499e <IfxVadc_initializeFAdcD>

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);
80007f5a:	40 f4       	mov.aa %a4,%a15
80007f5c:	6d ff 6a e4 	call 80004830 <IfxVadc_getAdcAnalogFrequency>
80007f60:	82 03       	mov %d3,0
80007f62:	3b f0 0f 60 	mov %d6,255

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
    {
        /* configure ADC channel resolution ( conversion mode ) */
        IfxVadc_setGlobalResolution(vadcSFR, inputClassNum, config->globalInputClass[inputClassNum].resolution);
80007f66:	9a 13       	add %d15,%d3,1
}


IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadc->GLOBICLASS[inputClassNum].B.CMS = resolution;
80007f68:	1b 83 02 40 	addi %d4,%d3,40
80007f6c:	d0 c2       	addsc.a %a2,%a12,%d15,3
80007f6e:	01 f4 02 36 	addsc.a %a3,%a15,%d4,2
80007f72:	0c 20       	ld.bu %d15,[%a2]0
80007f74:	54 35       	ld.w %d5,[%a3]
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
80007f76:	01 c3 03 26 	addsc.a %a2,%a12,%d3,3
80007f7a:	37 f5 03 f4 	insert %d15,%d5,%d15,8,3
80007f7e:	6c 30       	st.w [%a3]0,%d15

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80007f80:	4c 21       	ld.w %d15,[%a2]4
80007f82:	4b f2 41 f0 	mul.f %d15,%d2,%d15
80007f86:	4b 0f 71 f1 	ftouz %d15,%d15
80007f8a:	c2 ef       	add %d15,-2

    if (ticks > 31)
80007f8c:	8b 0f 62 52 	lt.u %d5,%d15,32
80007f90:	f6 54       	jnz %d5,80007f98 <IfxVadc_Adc_initModule+0x86>
    {
        ticks = (ticks / 16) + 15;
80007f92:	06 cf       	sh %d15,-4
80007f94:	1b ff 00 f0 	addi %d15,%d15,15
80007f98:	0b 6f 90 f1 	min.u %d15,%d15,%d6
}


IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadc->GLOBICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80007f9c:	01 f4 02 26 	addsc.a %a2,%a15,%d4,2
80007fa0:	54 24       	ld.w %d4,[%a2]
80007fa2:	37 f4 05 f0 	insert %d15,%d4,%d15,0,5
80007fa6:	6c 20       	st.w [%a2]0,%d15
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
80007fa8:	df 13 04 00 	jeq %d3,1,80007fb0 <IfxVadc_Adc_initModule+0x9e>
80007fac:	82 13       	mov %d3,1
80007fae:	3c dc       	j 80007f66 <IfxVadc_Adc_initModule+0x54>
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80007fb0:	39 c2 20 00 	ld.bu %d2,[%a12]32

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
    }

    return status;
80007fb4:	82 0f       	mov %d15,0
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80007fb6:	df 12 20 80 	jne %d2,1,80007ff6 <IfxVadc_Adc_initModule+0xe4>
80007fba:	82 08       	mov %d8,0
80007fbc:	1b 08 01 f0 	addi %d15,%d8,16
80007fc0:	16 ff       	and %d15,255
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007fc2:	02 f4       	mov %d4,%d15
80007fc4:	40 f4       	mov.aa %a4,%a15
80007fc6:	6d ff 83 e3 	call 800046cc <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007fca:	8f a8 00 20 	sh %d2,%d8,10
80007fce:	01 f2 00 26 	addsc.a %a2,%a15,%d2,0
80007fd2:	c2 18       	add %d8,1
80007fd4:	19 22 40 20 	ld.w %d2,[%a2]1152
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007fd8:	02 f4       	mov %d4,%d15
80007fda:	8f 32 40 21 	or %d2,%d2,3
80007fde:	59 22 40 20 	st.w [%a2]1152,%d2
80007fe2:	40 f4       	mov.aa %a4,%a15

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80007fe4:	8b 88 20 f2 	ne %d15,%d8,8
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007fe8:	6d ff 56 e3 	call 80004694 <IfxVadc_disableAccess>

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80007fec:	ee e8       	jnz %d15,80007fbc <IfxVadc_Adc_initModule+0xaa>
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
        }

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
80007fee:	40 f4       	mov.aa %a4,%a15
80007ff0:	6d ff 19 e6 	call 80004c22 <IfxVadc_startupCalibration>
    }

    return status;
80007ff4:	82 0f       	mov %d15,0
}
80007ff6:	02 f2       	mov %d2,%d15
80007ff8:	00 90       	ret 

80007ffa <IfxVadc_Adc_initModuleConfig>:


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007ffa:	7b 90 b9 f4 	movh %d15,19353
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
80007ffe:	40 4f       	mov.aa %a15,%a4
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80008000:	1b 0f 68 f9 	addi %d15,%d15,-27008
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
80008004:	40 54       	mov.aa %a4,%a5
    config->vadc                           = vadc;
80008006:	e8 05       	st.a [%a15]0,%a5
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80008008:	68 6f       	st.w [%a15]24,%d15

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
8000800a:	6d ff 1f e4 	call 80004848 <IfxVadc_getAdcDigitalFrequency>
8000800e:	68 52       	st.w [%a15]20,%d2
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
80008010:	6d ff cf f0 	call 800061ae <IfxScuCcu_getSpbFrequency>
80008014:	68 72       	st.w [%a15]28,%d2
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
    config->globalInputClass[0].sampleTime = 1.0e-6;
80008016:	7b 60 58 23 	movh %d2,13702
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
8000801a:	82 0f       	mov %d15,0
    config->globalInputClass[0].sampleTime = 1.0e-6;
8000801c:	1b d2 7b 23 	addi %d2,%d2,14269
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
80008020:	28 8f       	st.b [%a15]8,%d15
    config->globalInputClass[0].sampleTime = 1.0e-6;
80008022:	68 12       	st.w [%a15]4,%d2
    config->globalInputClass[1].resolution = IfxVadc_ChannelResolution_12bit;
80008024:	e9 ff 10 00 	st.b [%a15]16,%d15
    config->globalInputClass[1].sampleTime = 1.0e-6;
80008028:	68 32       	st.w [%a15]12,%d2
    config->startupCalibration             = FALSE;
8000802a:	e9 ff 20 00 	st.b [%a15]32,%d15
    config->supplyVoltage                  = IfxVadc_LowSupplyVoltageSelect_5V;
8000802e:	e9 ff 21 00 	st.b [%a15]33,%d15
80008032:	00 90       	ret 

80008034 <IfxVadc_Adc_initExternalMultiplexerModeConfig>:
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
80008034:	20 10       	sub.a %sp,16
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
80008036:	82 0f       	mov %d15,0
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
80008038:	40 a2       	mov.aa %a2,%sp


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
8000803a:	2c 49       	st.b [%a4]9,%d15
    emuxConfig->groupId               = IfxVadc_GroupId_0;
8000803c:	2c 48       	st.b [%a4]8,%d15
    emuxConfig->emuxInterface         = IfxVadc_EmuxInterface_0;
8000803e:	2c 4a       	st.b [%a4]10,%d15
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
80008040:	2c 45       	st.b [%a4]5,%d15
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
80008042:	2c 46       	st.b [%a4]6,%d15
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
80008044:	2c 47       	st.b [%a4]7,%d15
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
80008046:	2c 44       	st.b [%a4]4,%d15
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
80008048:	e9 4f 1c 00 	st.b [%a4]28,%d15
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
8000804c:	d2 02       	mov %e2,0
8000804e:	89 22 48 01 	st.d [%a2+]8,%e2
80008052:	89 22 48 01 	st.d [%a2+]8,%e2
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
80008056:	3b 00 f8 ff 	mov %d15,-128
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
8000805a:	f4 45       	st.a [%a4],%a5
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
8000805c:	40 af       	mov.aa %a15,%sp
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
8000805e:	2c ac       	st.b [%sp]12,%d15
80008060:	d9 44 0c 00 	lea %a4,[%a4]12
80008064:	09 f2 48 01 	ld.d %e2,[%a15+]8
80008068:	89 42 48 01 	st.d [%a4+]8,%e2
8000806c:	09 f2 48 01 	ld.d %e2,[%a15+]8
80008070:	89 42 48 01 	st.d [%a4+]8,%e2
80008074:	00 90       	ret 

80008076 <IfxVadc_Adc_initExternalMultiplexerMode>:


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
80008076:	0c 58       	ld.bu %d15,[%a5]8
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
80008078:	20 08       	sub.a %sp,8
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
8000807a:	8f af 00 20 	sh %d2,%d15,10
8000807e:	1b 02 48 20 	addi %d2,%d2,1152
80008082:	01 42 00 e6 	addsc.a %a14,%a4,%d2,0
}


IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group)
{
    if (emuxInterface == IfxVadc_EmuxInterface_0)
80008086:	39 52 0a 00 	ld.bu %d2,[%a5]10
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
8000808a:	40 4c       	mov.aa %a12,%a4
8000808c:	40 5f       	mov.aa %a15,%a5
8000808e:	16 0f       	and %d15,15
80008090:	f6 2a       	jnz %d2,800080a4 <IfxVadc_Adc_initExternalMultiplexerMode+0x2e>
    {
        vadc->EMUXSEL.B.EMUXGRP0 = group;
80008092:	19 42 30 f0 	ld.w %d2,[%a4]1008
80008096:	8f f2 c0 21 	andn %d2,%d2,15
8000809a:	a6 2f       	or %d15,%d2
8000809c:	59 cf 30 f0 	st.w [%a12]1008,%d15
800080a0:	82 0f       	mov %d15,0
800080a2:	3c 07       	j 800080b0 <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
    }
    else
    {
        vadc->EMUXSEL.B.EMUXGRP1 = group;
800080a4:	19 42 30 f0 	ld.w %d2,[%a4]1008
800080a8:	06 4f       	sh %d15,4
800080aa:	8f 02 cf 21 	andn %d2,%d2,240
800080ae:	3c f6       	j 8000809a <IfxVadc_Adc_initExternalMultiplexerMode+0x24>
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
    {
        if (emuxControl->emuxOutPinConfig.pins[count] != NULL_PTR)
800080b0:	90 f2       	addsc.a %a2,%a15,%d15,2
800080b2:	99 2d 0c 00 	ld.a %a13,[%a2]12
800080b6:	bd 0d 19 00 	jz.a %a13,800080e8 <IfxVadc_Adc_initExternalMultiplexerMode+0x72>
800080ba:	39 d3 0c 00 	ld.bu %d3,[%a13]12
800080be:	39 f2 18 00 	ld.bu %d2,[%a15]24
800080c2:	99 d4 04 00 	ld.a %a4,[%a13]4
800080c6:	0f 23 a0 50 	or %d5,%d3,%d2
800080ca:	39 d4 08 00 	ld.bu %d4,[%a13]8
800080ce:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
800080d2:	39 f8 19 00 	ld.bu %d8,[%a15]25
800080d6:	6d ff c4 ed 	call 80005c5e <IfxPort_setPinMode>


IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(emux->pin.port, emux->pin.pinIndex, outputMode, emux->select);
    IfxPort_setPinPadDriver(emux->pin.port, emux->pin.pinIndex, padDriver);
800080da:	99 d4 04 00 	ld.a %a4,[%a13]4
800080de:	39 d4 08 00 	ld.bu %d4,[%a13]8
800080e2:	02 85       	mov %d5,%d8
800080e4:	6d ff 3b ee 	call 80005d5a <IfxPort_setPinPadDriver>
800080e8:	c2 1f       	add %d15,1
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
800080ea:	df 3f e3 ff 	jne %d15,3,800080b0 <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
        }
    }

    IfxVadc_configExternalMultiplexerMode(vadc, vadcG, emuxControl->mode, emuxControl->channels, emuxControl->startChannel, emuxControl->code, emuxControl->sampleTimeControl, emuxControl->channelSelectionStyle);
800080ee:	0c f7       	ld.bu %d15,[%a15]7
800080f0:	08 44       	ld.bu %d4,[%a15]4
800080f2:	78 00       	st.w [%sp]0,%d15
800080f4:	39 ff 1c 00 	ld.bu %d15,[%a15]28
800080f8:	08 95       	ld.bu %d5,[%a15]9
800080fa:	08 56       	ld.bu %d6,[%a15]5
800080fc:	08 67       	ld.bu %d7,[%a15]6
800080fe:	78 01       	st.w [%sp]4,%d15
80008100:	40 c4       	mov.aa %a4,%a12
80008102:	40 e5       	mov.aa %a5,%a14
80008104:	1d ff 00 e3 	j 80004704 <IfxVadc_configExternalMultiplexerMode>

80008108 <Ifx_CircularBuffer_get32>:

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
80008108:	cc 40       	ld.a %a15,[%a4]0
8000810a:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 4;

    if (buffer->index >= buffer->length)
8000810e:	b9 43 06 00 	ld.hu %d3,[%a4]6

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
80008112:	90 ff       	addsc.a %a15,%a15,%d15,2

    buffer->index += 4;
80008114:	c2 4f       	add %d15,4
80008116:	37 0f 70 f0 	extr.u %d15,%d15,0,16

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
8000811a:	48 02       	ld.w %d2,[%a15]0

    buffer->index += 4;
8000811c:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
8000811e:	3f 3f 04 80 	jlt.u %d15,%d3,80008126 <Ifx_CircularBuffer_get32+0x1e>
    {
        buffer->index = 0;
80008122:	82 0f       	mov %d15,0
80008124:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
80008126:	00 90       	ret 

80008128 <Ifx_CircularBuffer_get16>:


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
80008128:	cc 40       	ld.a %a15,[%a4]0
8000812a:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 2;

    if (buffer->index >= buffer->length)
8000812e:	b9 43 06 00 	ld.hu %d3,[%a4]6
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
80008132:	50 ff       	addsc.a %a15,%a15,%d15,1

    buffer->index += 2;
80008134:	c2 2f       	add %d15,2
80008136:	37 0f 70 f0 	extr.u %d15,%d15,0,16
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
8000813a:	b9 f2 00 00 	ld.hu %d2,[%a15]0

    buffer->index += 2;
8000813e:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
80008140:	3f 3f 04 80 	jlt.u %d15,%d3,80008148 <Ifx_CircularBuffer_get16+0x20>
    {
        buffer->index = 0;
80008144:	82 0f       	mov %d15,0
80008146:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
80008148:	00 90       	ret 

8000814a <Ifx_CircularBuffer_addDataIncr>:
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
8000814a:	cc 40       	ld.a %a15,[%a4]0
8000814c:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    buffer->index                          += 4;

    if (buffer->index >= buffer->length)
80008150:	b9 42 06 00 	ld.hu %d2,[%a4]6
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
80008154:	90 ff       	addsc.a %a15,%a15,%d15,2
    buffer->index                          += 4;
80008156:	c2 4f       	add %d15,4
80008158:	37 0f 70 f0 	extr.u %d15,%d15,0,16
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
8000815c:	68 04       	st.w [%a15]0,%d4
    buffer->index                          += 4;
8000815e:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
80008160:	3f 2f 04 80 	jlt.u %d15,%d2,80008168 <Ifx_CircularBuffer_addDataIncr+0x1e>
    {
        buffer->index = 0;
80008164:	82 0f       	mov %d15,0
80008166:	ac 42       	st.h [%a4]4,%d15
80008168:	00 90       	ret 

8000816a <Ifx_CircularBuffer_read8>:
    }
}


void *Ifx_CircularBuffer_read8(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
8000816a:	80 52       	mov.d %d2,%a5
8000816c:	37 04 70 40 	extr.u %d4,%d4,0,16
80008170:	8f 02 60 31 	nor %d3,%d2,0
80008174:	1a 42       	add %d15,%d2,%d4
80008176:	42 3f       	add %d15,%d3
80008178:	42 23       	add %d3,%d2
8000817a:	42 43       	add %d3,%d4
    uint8 *Dest = (uint8 *)data;
8000817c:	40 5f       	mov.aa %a15,%a5
        Dest  = &Dest[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
8000817e:	82 06       	mov %d6,0
80008180:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80008184:	6f f3 03 00 	jz.t %d3,15,8000818a <Ifx_CircularBuffer_read8+0x20>
80008188:	82 0f       	mov %d15,0
    uint8 *Dest = (uint8 *)data;

    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
8000818a:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000818e:	d4 42       	ld.a %a2,[%a4]
80008190:	60 33       	mov.a %a3,%d3
80008192:	30 32       	add.a %a2,%a3
80008194:	14 23       	ld.bu %d3,[%a2]
80008196:	24 f3       	st.b [%a15+],%d3
        Dest  = &Dest[1];
        buffer->index++;
80008198:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
8000819c:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
        Dest  = &Dest[1];
        buffer->index++;
800081a0:	c2 13       	add %d3,1
800081a2:	37 03 70 30 	extr.u %d3,%d3,0,16
800081a6:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
800081aa:	3f 53 04 80 	jlt.u %d3,%d5,800081b2 <Ifx_CircularBuffer_read8+0x48>
        {
            buffer->index = 0;
800081ae:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
800081b2:	9f 0f ec ff 	jned %d15,0,8000818a <Ifx_CircularBuffer_read8+0x20>
800081b6:	c2 f4       	add %d4,-1
800081b8:	37 04 50 40 	extr %d4,%d4,0,16
800081bc:	8b 04 40 43 	max %d4,%d4,0
800081c0:	c2 14       	add %d4,1

    return Dest;
}
800081c2:	1a 42       	add %d15,%d2,%d4
800081c4:	60 f2       	mov.a %a2,%d15
800081c6:	00 90       	ret 

800081c8 <Ifx_CircularBuffer_read32>:


void *Ifx_CircularBuffer_read32(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
800081c8:	37 04 70 40 	extr.u %d4,%d4,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;
800081cc:	d4 42       	ld.a %a2,[%a4]
800081ce:	1b f4 ff 5f 	addi %d5,%d4,-1
800081d2:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
800081d6:	b9 46 06 00 	ld.hu %d6,[%a4]6
800081da:	82 03       	mov %d3,0
800081dc:	37 05 70 20 	extr.u %d2,%d5,0,16
800081e0:	6f f5 03 00 	jz.t %d5,15,800081e6 <Ifx_CircularBuffer_read32+0x1e>
800081e4:	82 02       	mov %d2,0
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
800081e6:	10 2f       	addsc.a %a15,%a2,%d15,0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
800081e8:	c2 4f       	add %d15,4
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
800081ea:	48 05       	ld.w %d5,[%a15]0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
800081ec:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
800081f0:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
800081f4:	c2 13       	add %d3,1
800081f6:	68 05       	st.w [%a15]0,%d5
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
800081f8:	0b 6f 30 51 	lt.u %d5,%d15,%d6
800081fc:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
80008200:	9f 02 f3 ff 	jned %d2,0,800081e6 <Ifx_CircularBuffer_read32+0x1e>
80008204:	c2 f4       	add %d4,-1
80008206:	37 04 50 40 	extr %d4,%d4,0,16
8000820a:	ac 42       	st.h [%a4]4,%d15
8000820c:	8b 04 40 43 	max %d4,%d4,0
80008210:	c2 14       	add %d4,1

    return Dest;
}
80008212:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
80008216:	00 90       	ret 

80008218 <Ifx_CircularBuffer_write8>:


const void *Ifx_CircularBuffer_write8(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
80008218:	80 52       	mov.d %d2,%a5
8000821a:	37 04 70 40 	extr.u %d4,%d4,0,16
8000821e:	8f 02 60 31 	nor %d3,%d2,0
80008222:	1a 42       	add %d15,%d2,%d4
80008224:	42 3f       	add %d15,%d3
80008226:	42 23       	add %d3,%d2
80008228:	42 43       	add %d3,%d4
    const uint8 *source = (const uint8 *)data;
8000822a:	40 5f       	mov.aa %a15,%a5
        source                                 = &source[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
8000822c:	82 06       	mov %d6,0
8000822e:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80008232:	6f f3 03 00 	jz.t %d3,15,80008238 <Ifx_CircularBuffer_write8+0x20>
80008236:	82 0f       	mov %d15,0
    const uint8 *source = (const uint8 *)data;

    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
80008238:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000823c:	d4 42       	ld.a %a2,[%a4]
8000823e:	60 33       	mov.a %a3,%d3
80008240:	04 f5       	ld.bu %d5,[%a15+]
80008242:	30 32       	add.a %a2,%a3
80008244:	34 25       	st.b [%a2],%d5
        source                                 = &source[1];
        buffer->index++;
80008246:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
8000824a:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
        source                                 = &source[1];
        buffer->index++;
8000824e:	c2 13       	add %d3,1
80008250:	37 03 70 30 	extr.u %d3,%d3,0,16
80008254:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
80008258:	3f 53 04 80 	jlt.u %d3,%d5,80008260 <Ifx_CircularBuffer_write8+0x48>
        {
            buffer->index = 0;
8000825c:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
80008260:	9f 0f ec ff 	jned %d15,0,80008238 <Ifx_CircularBuffer_write8+0x20>
80008264:	c2 f4       	add %d4,-1
80008266:	37 04 50 40 	extr %d4,%d4,0,16
8000826a:	8b 04 40 43 	max %d4,%d4,0
8000826e:	c2 14       	add %d4,1

    return source;
}
80008270:	1a 42       	add %d15,%d2,%d4
80008272:	60 f2       	mov.a %a2,%d15
80008274:	00 90       	ret 

80008276 <Ifx_CircularBuffer_write32>:


const void *Ifx_CircularBuffer_write32(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
80008276:	37 04 70 40 	extr.u %d4,%d4,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;
8000827a:	d4 42       	ld.a %a2,[%a4]
8000827c:	1b f4 ff 5f 	addi %d5,%d4,-1
80008280:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *((uint32 *)(&base[buffer->index])) = *source;
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
80008284:	b9 46 06 00 	ld.hu %d6,[%a4]6
80008288:	82 03       	mov %d3,0
8000828a:	37 05 70 20 	extr.u %d2,%d5,0,16
8000828e:	6f f5 03 00 	jz.t %d5,15,80008294 <Ifx_CircularBuffer_write32+0x1e>
80008292:	82 02       	mov %d2,0
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
80008294:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
80008298:	c2 13       	add %d3,1
8000829a:	48 05       	ld.w %d5,[%a15]0
8000829c:	10 2f       	addsc.a %a15,%a2,%d15,0
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;
8000829e:	c2 4f       	add %d15,4
800082a0:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
800082a4:	68 05       	st.w [%a15]0,%d5
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
800082a6:	0b 6f 30 51 	lt.u %d5,%d15,%d6
800082aa:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
800082ae:	9f 02 f3 ff 	jned %d2,0,80008294 <Ifx_CircularBuffer_write32+0x1e>
800082b2:	c2 f4       	add %d4,-1
800082b4:	37 04 50 40 	extr %d4,%d4,0,16
800082b8:	ac 42       	st.h [%a4]4,%d15
800082ba:	8b 04 40 43 	max %d4,%d4,0
800082be:	c2 14       	add %d4,1

    return source;
}
800082c0:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
800082c4:	00 90       	ret 

800082c6 <Ifx_Fifo_destroy>:
}


void Ifx_Fifo_destroy(Ifx_Fifo *fifo)
{
    free(fifo);
800082c6:	1d 00 8b 13 	j 8000a9dc <free>

800082ca <Ifx_Fifo_init>:
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
800082ca:	82 0f       	mov %d15,0
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
800082cc:	80 42       	mov.d %d2,%a4
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
800082ce:	e9 4f 1c 00 	st.b [%a4]28,%d15
        fifo->eventWriter        = TRUE;
800082d2:	82 1f       	mov %d15,1
800082d4:	e9 4f 1d 00 	st.b [%a4]29,%d15
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
800082d8:	1b 72 02 f0 	addi %d15,%d2,39
800082dc:	8f 7f c0 f1 	andn %d15,%d15,7
800082e0:	6c 40       	st.w [%a4]0,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
800082e2:	c2 34       	add %d4,3
    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
800082e4:	82 0f       	mov %d15,0
800082e6:	ac 42       	st.h [%a4]4,%d15
        fifo->shared.maxcount    = 0;
800082e8:	ac 48       	st.h [%a4]16,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
800082ea:	8f 34 c0 41 	andn %d4,%d4,3
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
800082ee:	82 0f       	mov %d15,0
    free(fifo);
}


Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
800082f0:	40 42       	mov.aa %a2,%a4
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
800082f2:	6c 43       	st.w [%a4]12,%d15
800082f4:	6c 42       	st.w [%a4]8,%d15
        fifo->startIndex         = fifo->endIndex = 0;
800082f6:	ac 4b       	st.h [%a4]22,%d15
800082f8:	ac 4a       	st.h [%a4]20,%d15
        fifo->size               = size;
800082fa:	f9 44 18 00 	st.h [%a4]24,%d4
        fifo->elementSize        = elementSize;
800082fe:	f9 45 1a 00 	st.h [%a4]26,%d5
    }

    return fifo;
}
80008302:	00 90       	ret 

80008304 <Ifx_Fifo_create>:
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
80008304:	c2 34       	add %d4,3
80008306:	37 04 50 f0 	extr %d15,%d4,0,16
 * This is valid is an OS is used.
 *
 */
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
8000830a:	02 58       	mov %d8,%d5
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
8000830c:	8f 3f c0 f1 	andn %d15,%d15,3

    fifo = malloc(size + sizeof(Ifx_Fifo) + 8); /* +8 because of padding in case the pointer is not aligned on 64 */
80008310:	1b 8f 02 40 	addi %d4,%d15,40
80008314:	6d 00 5e 13 	call 8000a9d0 <malloc>
80008318:	40 24       	mov.aa %a4,%a2

    if (IFX_VALIDATE(IFX_VERBOSE_LEVEL_ERROR, (fifo != NULL_PTR)))
8000831a:	bc 25       	jz.a %a2,80008324 <Ifx_Fifo_create+0x20>
    {
        fifo = Ifx_Fifo_init(fifo, size, elementSize);
8000831c:	0b f8 10 48 	mov %e4,%d8,%d15
80008320:	1d ff d5 ff 	j 800082ca <Ifx_Fifo_init>
    }

    return fifo;
}
80008324:	00 90       	ret 

80008326 <Ifx_Fifo_canReadCount>:
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
80008326:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be read from the buffer */
        result = FALSE;
80008328:	82 02       	mov %d2,0
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
8000832a:	3f f4 6a 00 	jlt %d4,%d15,800083fe <Ifx_Fifo_canReadCount+0xd8>
8000832e:	8c 4c       	ld.h %d15,[%a4]24
80008330:	3f 4f 67 00 	jlt %d15,%d4,800083fe <Ifx_Fifo_canReadCount+0xd8>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008334:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
80008338:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000833c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008340:	00 00       	nop 
    else
    {
        boolean interruptState;
        sint32  waitCount;
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);
80008342:	8c 42       	ld.h %d15,[%a4]4
80008344:	a2 f4       	sub %d4,%d15

        if (waitCount <= 0)
80008346:	4e 4c       	jgtz %d4,8000835e <Ifx_Fifo_canReadCount+0x38>
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE;
80008348:	82 1f       	mov %d15,1
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);

        if (waitCount <= 0)
        {
            fifo->shared.readerWaitx = 0;
8000834a:	59 42 08 00 	st.w [%a4]8,%d2
            fifo->eventReader        = TRUE;
8000834e:	e9 4f 1c 00 	st.b [%a4]28,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
80008352:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008354:	df 00 55 00 	jeq %d0,0,800083fe <Ifx_Fifo_canReadCount+0xd8>
    {
        __enable();
80008358:	0d 00 00 03 	enable 
8000835c:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000835e:	82 f2       	mov %d2,-1
80008360:	06 f2       	sh %d2,-1
80008362:	ba f6       	eq %d15,%d6,-1
80008364:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
80008368:	82 f5       	mov %d5,-1
8000836a:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000836c:	ee 16       	jnz %d15,80008398 <Ifx_Fifo_canReadCount+0x72>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000836e:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008372:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008376:	0d 00 40 03 	disable 
8000837a:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000837c:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008380:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008384:	02 15       	mov %d5,%d1
80008386:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000838a:	76 23       	jz %d2,80008390 <Ifx_Fifo_canReadCount+0x6a>
    {
        __enable();
8000838c:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008390:	0b 65 40 50 	addx %d5,%d5,%d6
80008394:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
80008398:	82 0f       	mov %d15,0
8000839a:	e9 4f 1c 00 	st.b [%a4]28,%d15
            fifo->shared.readerWaitx = waitCount;
8000839e:	59 44 08 00 	st.w [%a4]8,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800083a2:	76 03       	jz %d0,800083a8 <Ifx_Fifo_canReadCount+0x82>
    {
        __enable();
800083a4:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800083a8:	82 f6       	mov %d6,-1
800083aa:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800083ac:	39 4f 1c 00 	ld.bu %d15,[%a4]28
800083b0:	6e 08       	jz %d15,800083c0 <Ifx_Fifo_canReadCount+0x9a>
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
            result = fifo->eventReader == TRUE;
800083b2:	39 42 1c 00 	ld.bu %d2,[%a4]28
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
800083b6:	82 0f       	mov %d15,0
800083b8:	6c 42       	st.w [%a4]8,%d15
            result = fifo->eventReader == TRUE;
800083ba:	8b 12 00 22 	eq %d2,%d2,1
800083be:	00 90       	ret 
800083c0:	ba f5       	eq %d15,%d5,-1
800083c2:	0b 36 00 f2 	and.eq %d15,%d6,%d3
800083c6:	ee f3       	jnz %d15,800083ac <Ifx_Fifo_canReadCount+0x86>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800083c8:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800083cc:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800083d0:	0d 00 40 03 	disable 
800083d4:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800083d6:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800083da:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800083de:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800083e2:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800083e6:	76 23       	jz %d2,800083ec <Ifx_Fifo_canReadCount+0xc6>
    {
        __enable();
800083e8:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
            fifo->shared.readerWaitx = waitCount;
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800083ec:	0b 3f 00 21 	eq %d2,%d15,%d3
800083f0:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
800083f4:	0b 3f 90 22 	or.lt %d2,%d15,%d3
800083f8:	df 02 da ff 	jne %d2,0,800083ac <Ifx_Fifo_canReadCount+0x86>
800083fc:	3c db       	j 800083b2 <Ifx_Fifo_canReadCount+0x8c>
            result = fifo->eventReader == TRUE;
        }
    }

    return result;
}
800083fe:	00 90       	ret 

80008400 <Ifx_Fifo_read>:
    return count - blockSize;
}

#include <stdio.h>
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
80008400:	20 08       	sub.a %sp,8
80008402:	40 4f       	mov.aa %a15,%a4
80008404:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
80008406:	df 04 b6 00 	jeq %d4,0,80008572 <Ifx_Fifo_read+0x172>
    {

        buffer.base   = fifo->buffer;
8000840a:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000840c:	82 f2       	mov %d2,-1
8000840e:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;         /* size always fit into 16 bit */
80008410:	8c 4c       	ld.h %d15,[%a4]24
80008412:	06 f2       	sh %d2,-1
80008414:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->startIndex;   /* startIndex always fit into size */
80008416:	8c 4a       	ld.h %d15,[%a4]20
    {
        deadLine = TIME_INFINITE;
80008418:	82 fa       	mov %d10,-1
8000841a:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000841c:	ba f6       	eq %d15,%d6,-1
8000841e:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
80008422:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008424:	ee 16       	jnz %d15,80008450 <Ifx_Fifo_read+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008426:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000842a:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000842e:	0d 00 40 03 	disable 
80008432:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008434:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008438:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000843c:	02 3a       	mov %d10,%d3
8000843e:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008442:	76 23       	jz %d2,80008448 <Ifx_Fifo_read+0x48>
    {
        __enable();
80008444:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008448:	0b 6a 40 a0 	addx %d10,%d10,%d6
8000844c:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008450:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
80008452:	82 0d       	mov %d13,0
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventReader        = FALSE;
80008454:	82 0e       	mov %d14,0
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
80008456:	a0 0c       	mov.a %a12,0
80008458:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000845a:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
8000845e:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008462:	0d 00 40 03 	disable 
80008466:	00 00       	nop 
{
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
80008468:	88 2b       	ld.h %d11,[%a15]4
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000846a:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
8000846e:	8c fd       	ld.h %d15,[%a15]26
80008470:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventReader        = FALSE;
80008474:	e9 fe 1c 00 	st.b [%a15]28,%d14
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
80008478:	4b f2 01 22 	div %e2,%d2,%d15
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
8000847c:	88 c2       	ld.h %d2,[%a15]24
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
8000847e:	a2 3b       	sub %d11,%d3
80008480:	37 0b 70 b0 	extr.u %d11,%d11,0,16
80008484:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
80008488:	0b f9 80 30 	sub %d3,%d9,%d15
8000848c:	0b 23 80 21 	min %d2,%d3,%d2
80008490:	68 22       	st.w [%a15]8,%d2
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008492:	76 43       	jz %d4,80008498 <Ifx_Fifo_read+0x98>
    {
        __enable();
80008494:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginRead(fifo, count);

            if (blockSize != 0)
80008498:	6e 20       	jz %d15,800084d8 <Ifx_Fifo_read+0xd8>
            {
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
8000849a:	40 a4       	mov.aa %a4,%sp
8000849c:	02 f4       	mov %d4,%d15
8000849e:	6d ff 66 fe 	call 8000816a <Ifx_CircularBuffer_read8>
800084a2:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800084a4:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800084a8:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800084ac:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800084b0:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState      = IfxCpu_disableInterrupts();

    fifo->shared.count -= blockSize;
800084b2:	88 23       	ld.h %d3,[%a15]4
800084b4:	a2 b3       	sub %d3,%d11
800084b6:	a8 23       	st.h [%a15]4,%d3

    if (fifo->shared.writerWaitx != 0)
800084b8:	48 33       	ld.w %d3,[%a15]12
800084ba:	76 39       	jz %d3,800084cc <Ifx_Fifo_read+0xcc>
    {
        fifo->shared.writerWaitx -= blockSize;
800084bc:	5a f3       	sub %d15,%d3,%d15

        if (fifo->shared.writerWaitx <= 0)
800084be:	8e f3       	jlez %d15,800084c4 <Ifx_Fifo_read+0xc4>

    fifo->shared.count -= blockSize;

    if (fifo->shared.writerWaitx != 0)
    {
        fifo->shared.writerWaitx -= blockSize;
800084c0:	68 3f       	st.w [%a15]12,%d15
800084c2:	3c 05       	j 800084cc <Ifx_Fifo_read+0xcc>

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE; /* Signal the writer */
800084c4:	82 1f       	mov %d15,1
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
800084c6:	e8 3c       	st.a [%a15]12,%a12
            fifo->eventWriter        = TRUE; /* Signal the writer */
800084c8:	e9 ff 1d 00 	st.b [%a15]29,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800084cc:	76 23       	jz %d2,800084d2 <Ifx_Fifo_read+0xd2>
    {
        __enable();
800084ce:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
800084d2:	a2 b9       	sub %d9,%d11
800084d4:	37 09 50 90 	extr %d9,%d9,0,16
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800084d8:	76 d4       	jz %d13,800084e0 <Ifx_Fifo_read+0xe0>
            {
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
800084da:	82 0f       	mov %d15,0
800084dc:	68 2f       	st.w [%a15]8,%d15
                break;
800084de:	3c 48       	j 8000856e <Ifx_Fifo_read+0x16e>
800084e0:	ba fa       	eq %d15,%d10,-1
800084e2:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800084e6:	ee 1b       	jnz %d15,8000851c <Ifx_Fifo_read+0x11c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800084e8:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800084ec:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800084f0:	0d 00 40 03 	disable 
800084f4:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800084f6:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800084fa:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800084fe:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008502:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008506:	76 23       	jz %d2,8000850c <Ifx_Fifo_read+0x10c>
    {
        __enable();
80008508:	0d 00 00 03 	enable 
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
8000850c:	0b 8f 00 21 	eq %d2,%d15,%d8
80008510:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
80008514:	0b f8 90 22 	or.lt %d2,%d8,%d15
80008518:	df 02 e1 ff 	jne %d2,0,800084da <Ifx_Fifo_read+0xda>
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
                break;
            }

            if (count != 0)
8000851c:	df 09 29 00 	jeq %d9,0,8000856e <Ifx_Fifo_read+0x16e>
            {
                while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008520:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80008524:	ee 1f       	jnz %d15,80008562 <Ifx_Fifo_read+0x162>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008526:	ba fa       	eq %d15,%d10,-1
80008528:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
8000852c:	ee fa       	jnz %d15,80008520 <Ifx_Fifo_read+0x120>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000852e:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008532:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008536:	0d 00 40 03 	disable 
8000853a:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000853c:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008540:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008544:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008548:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000854c:	76 23       	jz %d2,80008552 <Ifx_Fifo_read+0x152>
    {
        __enable();
8000854e:	0d 00 00 03 	enable 
80008552:	0b 8f 00 21 	eq %d2,%d15,%d8
80008556:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
8000855a:	0b 8f 90 22 	or.lt %d2,%d15,%d8
8000855e:	df 02 e1 ff 	jne %d2,0,80008520 <Ifx_Fifo_read+0x120>
                {}

                Stop = (fifo->eventReader == FALSE);    /* If the function timeout, the maximum number of characters are read before returning */
80008562:	39 fd 1c 00 	ld.bu %d13,[%a15]28
80008566:	8b 0d 00 d2 	eq %d13,%d13,0
8000856a:	1d ff 78 ff 	j 8000845a <Ifx_Fifo_read+0x5a>
            }
        } while (count != 0);

        fifo->startIndex = buffer.index;
8000856e:	8c a2       	ld.h %d15,[%sp]4
80008570:	a8 af       	st.h [%a15]20,%d15
    }

    return count;
}
80008572:	02 92       	mov %d2,%d9
80008574:	00 90       	ret 

80008576 <Ifx_Fifo_clear>:
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008576:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000857a:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000857e:	0d 00 40 03 	disable 
80008582:	00 00       	nop 
{
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();

    if (fifo->shared.writerWaitx != 0)
80008584:	4c 43       	ld.w %d15,[%a4]12
80008586:	6e 06       	jz %d15,80008592 <Ifx_Fifo_clear+0x1c>
    {
        fifo->shared.writerWaitx = 0;
80008588:	82 0f       	mov %d15,0
8000858a:	6c 43       	st.w [%a4]12,%d15
        fifo->eventWriter        = TRUE; /* Signal the writer */
8000858c:	82 1f       	mov %d15,1
8000858e:	e9 4f 1d 00 	st.b [%a4]29,%d15
    }

    fifo->eventReader        = FALSE;
80008592:	82 0f       	mov %d15,0
80008594:	e9 4f 1c 00 	st.b [%a4]28,%d15
    fifo->shared.readerWaitx = 0;
80008598:	82 0f       	mov %d15,0
8000859a:	6c 42       	st.w [%a4]8,%d15
    fifo->shared.count       = 0;
8000859c:	ac 42       	st.h [%a4]4,%d15
    fifo->shared.maxcount    = 0;
8000859e:	ac 48       	st.h [%a4]16,%d15
    fifo->startIndex         = fifo->endIndex;
800085a0:	8c 4b       	ld.h %d15,[%a4]22
800085a2:	ac 4a       	st.h [%a4]20,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800085a4:	76 23       	jz %d2,800085aa <Ifx_Fifo_clear+0x34>
    {
        __enable();
800085a6:	0d 00 00 03 	enable 
800085aa:	00 90       	ret 

800085ac <Ifx_Fifo_canWriteCount>:
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
800085ac:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be written to the buffer */
        result = FALSE;
800085ae:	82 02       	mov %d2,0
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
800085b0:	3f f4 75 00 	jlt %d4,%d15,8000869a <Ifx_Fifo_canWriteCount+0xee>
800085b4:	8c 4c       	ld.h %d15,[%a4]24
800085b6:	3f 4f 72 00 	jlt %d15,%d4,8000869a <Ifx_Fifo_canWriteCount+0xee>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800085ba:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
800085be:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800085c2:	0d 00 40 03 	disable 
800085c6:	00 00       	nop 
    else
    {
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
800085c8:	c9 43 18 00 	ld.h %d3,[%a4]24
800085cc:	8c 42       	ld.h %d15,[%a4]4
800085ce:	5a f3       	sub %d15,%d3,%d15
800085d0:	3f 4f 0d 00 	jlt %d15,%d4,800085ea <Ifx_Fifo_canWriteCount+0x3e>
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE;
800085d4:	82 1f       	mov %d15,1
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
        {
            fifo->shared.writerWaitx = 0;
800085d6:	59 42 0c 00 	st.w [%a4]12,%d2
            fifo->eventWriter        = TRUE;
800085da:	e9 4f 1d 00 	st.b [%a4]29,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
800085de:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800085e0:	df 00 5d 00 	jeq %d0,0,8000869a <Ifx_Fifo_canWriteCount+0xee>
    {
        __enable();
800085e4:	0d 00 00 03 	enable 
800085e8:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800085ea:	82 f2       	mov %d2,-1
800085ec:	06 f2       	sh %d2,-1
800085ee:	ba f6       	eq %d15,%d6,-1
800085f0:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800085f4:	82 f5       	mov %d5,-1
800085f6:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800085f8:	ee 16       	jnz %d15,80008624 <Ifx_Fifo_canWriteCount+0x78>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800085fa:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800085fe:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008602:	0d 00 40 03 	disable 
80008606:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008608:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000860c:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008610:	02 15       	mov %d5,%d1
80008612:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008616:	76 23       	jz %d2,8000861c <Ifx_Fifo_canWriteCount+0x70>
    {
        __enable();
80008618:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
8000861c:	0b 65 40 50 	addx %d5,%d5,%d6
80008620:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
80008624:	82 0f       	mov %d15,0
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
80008626:	c9 42 04 00 	ld.h %d2,[%a4]4
            result                   = TRUE;
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
8000862a:	e9 4f 1d 00 	st.b [%a4]29,%d15
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
8000862e:	8c 4c       	ld.h %d15,[%a4]24
80008630:	5a f2       	sub %d15,%d2,%d15
80008632:	42 f4       	add %d4,%d15
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80008634:	82 02       	mov %d2,0
80008636:	0b 42 a0 41 	max %d4,%d2,%d4
8000863a:	59 44 0c 00 	st.w [%a4]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000863e:	76 03       	jz %d0,80008644 <Ifx_Fifo_canWriteCount+0x98>
    {
        __enable();
80008640:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008644:	82 f6       	mov %d6,-1
80008646:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008648:	39 4f 1d 00 	ld.bu %d15,[%a4]29
8000864c:	6e 08       	jz %d15,8000865c <Ifx_Fifo_canWriteCount+0xb0>
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
            result = fifo->eventWriter == TRUE;
8000864e:	39 42 1d 00 	ld.bu %d2,[%a4]29
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
80008652:	82 0f       	mov %d15,0
80008654:	6c 43       	st.w [%a4]12,%d15
            result = fifo->eventWriter == TRUE;
80008656:	8b 12 00 22 	eq %d2,%d2,1
8000865a:	00 90       	ret 
8000865c:	ba f5       	eq %d15,%d5,-1
8000865e:	0b 36 00 f2 	and.eq %d15,%d6,%d3
80008662:	ee f3       	jnz %d15,80008648 <Ifx_Fifo_canWriteCount+0x9c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008664:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008668:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000866c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008670:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008672:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008676:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000867a:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000867e:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008682:	76 23       	jz %d2,80008688 <Ifx_Fifo_canWriteCount+0xdc>
    {
        __enable();
80008684:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008688:	0b 3f 00 21 	eq %d2,%d15,%d3
8000868c:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
80008690:	0b 3f 90 22 	or.lt %d2,%d15,%d3
80008694:	df 02 da ff 	jne %d2,0,80008648 <Ifx_Fifo_canWriteCount+0x9c>
80008698:	3c db       	j 8000864e <Ifx_Fifo_canWriteCount+0xa2>
            result = fifo->eventWriter == TRUE;
        }
    }

    return result;
}
8000869a:	00 90       	ret 

8000869c <Ifx_Fifo_write>:
}


#include <stdio.h>
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
8000869c:	20 08       	sub.a %sp,8
8000869e:	40 4f       	mov.aa %a15,%a4
800086a0:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
800086a2:	df 04 be 00 	jeq %d4,0,8000881e <Ifx_Fifo_write+0x182>
    {
        buffer.base   = fifo->buffer;
800086a6:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800086a8:	82 f2       	mov %d2,-1
800086aa:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;     /* size always fit into 16 bit */
800086ac:	8c 4c       	ld.h %d15,[%a4]24
800086ae:	06 f2       	sh %d2,-1
800086b0:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->endIndex; /* startIndex always fit into size */
800086b2:	8c 4b       	ld.h %d15,[%a4]22
    {
        deadLine = TIME_INFINITE;
800086b4:	82 fa       	mov %d10,-1
800086b6:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800086b8:	ba f6       	eq %d15,%d6,-1
800086ba:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800086be:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800086c0:	ee 16       	jnz %d15,800086ec <Ifx_Fifo_write+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800086c2:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800086c6:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800086ca:	0d 00 40 03 	disable 
800086ce:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800086d0:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800086d4:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800086d8:	02 3a       	mov %d10,%d3
800086da:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800086de:	76 23       	jz %d2,800086e4 <Ifx_Fifo_write+0x48>
    {
        __enable();
800086e0:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
800086e4:	0b 6a 40 a0 	addx %d10,%d10,%d6
800086e8:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800086ec:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
800086ee:	82 0d       	mov %d13,0
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventWriter        = FALSE;
800086f0:	82 0e       	mov %d14,0
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
800086f2:	a0 0c       	mov.a %a12,0
800086f4:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800086f6:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
800086fa:	37 05 e1 57 	extr.u %d5,%d5,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800086fe:	0d 00 40 03 	disable 
80008702:	00 00       	nop 
{
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
80008704:	88 c4       	ld.h %d4,[%a15]24
80008706:	88 2b       	ld.h %d11,[%a15]4
80008708:	0b b4 80 b0 	sub %d11,%d4,%d11
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000870c:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
80008710:	8c fd       	ld.h %d15,[%a15]26
80008712:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventWriter        = FALSE;
80008716:	e9 fe 1d 00 	st.b [%a15]29,%d14
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
8000871a:	4b f2 01 22 	div %e2,%d2,%d15
8000871e:	a2 3b       	sub %d11,%d3
80008720:	37 0b 70 b0 	extr.u %d11,%d11,0,16
80008724:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventWriter        = FALSE;
    fifo->shared.writerWaitx = __min(count - blockSize, fifo->size);
80008728:	0b f9 80 20 	sub %d2,%d9,%d15
8000872c:	0b 42 80 41 	min %d4,%d2,%d4
80008730:	68 34       	st.w [%a15]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008732:	76 53       	jz %d5,80008738 <Ifx_Fifo_write+0x9c>
    {
        __enable();
80008734:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginWrite(fifo, count);

            if (blockSize != 0)
80008738:	6e 26       	jz %d15,80008784 <Ifx_Fifo_write+0xe8>
            {

                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
8000873a:	40 a4       	mov.aa %a4,%sp
8000873c:	02 f4       	mov %d4,%d15
8000873e:	6d ff 6d fd 	call 80008218 <Ifx_CircularBuffer_write8>
80008742:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008744:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80008748:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000874c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008750:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
80008752:	88 22       	ld.h %d2,[%a15]4
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
80008754:	88 84       	ld.h %d4,[%a15]16
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
80008756:	42 b2       	add %d2,%d11
80008758:	37 02 50 20 	extr %d2,%d2,0,16
8000875c:	a8 22       	st.h [%a15]4,%d2
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000875e:	0b 24 a0 21 	max %d2,%d4,%d2
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
80008762:	a8 82       	st.h [%a15]16,%d2

    if (fifo->shared.readerWaitx != 0)
80008764:	48 22       	ld.w %d2,[%a15]8
80008766:	76 29       	jz %d2,80008778 <Ifx_Fifo_write+0xdc>
    {
        fifo->shared.readerWaitx -= blockSize;
80008768:	5a f2       	sub %d15,%d2,%d15

        if (fifo->shared.readerWaitx <= 0)
8000876a:	8e f3       	jlez %d15,80008770 <Ifx_Fifo_write+0xd4>
    fifo->shared.count   += blockSize;
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */

    if (fifo->shared.readerWaitx != 0)
    {
        fifo->shared.readerWaitx -= blockSize;
8000876c:	68 2f       	st.w [%a15]8,%d15
8000876e:	3c 05       	j 80008778 <Ifx_Fifo_write+0xdc>

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
80008770:	82 1f       	mov %d15,1
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
80008772:	e8 2c       	st.a [%a15]8,%a12
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
80008774:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008778:	76 33       	jz %d3,8000877e <Ifx_Fifo_write+0xe2>
    {
        __enable();
8000877a:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
8000877e:	a2 b9       	sub %d9,%d11
80008780:	37 09 50 90 	extr %d9,%d9,0,16
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008784:	76 d4       	jz %d13,8000878c <Ifx_Fifo_write+0xf0>
            {
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
80008786:	82 0f       	mov %d15,0
80008788:	68 3f       	st.w [%a15]12,%d15
                break;
8000878a:	3c 48       	j 8000881a <Ifx_Fifo_write+0x17e>
8000878c:	ba fa       	eq %d15,%d10,-1
8000878e:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008792:	ee 1b       	jnz %d15,800087c8 <Ifx_Fifo_write+0x12c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008794:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008798:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000879c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800087a0:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800087a2:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800087a6:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800087aa:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800087ae:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800087b2:	76 23       	jz %d2,800087b8 <Ifx_Fifo_write+0x11c>
    {
        __enable();
800087b4:	0d 00 00 03 	enable 
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800087b8:	0b 8f 00 21 	eq %d2,%d15,%d8
800087bc:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
800087c0:	0b f8 90 22 	or.lt %d2,%d8,%d15
800087c4:	df 02 e1 ff 	jne %d2,0,80008786 <Ifx_Fifo_write+0xea>
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
                break;
            }

            if (count != 0)
800087c8:	df 09 29 00 	jeq %d9,0,8000881a <Ifx_Fifo_write+0x17e>
            {
                while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800087cc:	39 ff 1d 00 	ld.bu %d15,[%a15]29
800087d0:	ee 1f       	jnz %d15,8000880e <Ifx_Fifo_write+0x172>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800087d2:	ba fa       	eq %d15,%d10,-1
800087d4:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800087d8:	ee fa       	jnz %d15,800087cc <Ifx_Fifo_write+0x130>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800087da:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800087de:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800087e2:	0d 00 40 03 	disable 
800087e6:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800087e8:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800087ec:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800087f0:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800087f4:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800087f8:	76 23       	jz %d2,800087fe <Ifx_Fifo_write+0x162>
    {
        __enable();
800087fa:	0d 00 00 03 	enable 
800087fe:	0b 8f 00 21 	eq %d2,%d15,%d8
80008802:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
80008806:	0b 8f 90 22 	or.lt %d2,%d15,%d8
8000880a:	df 02 e1 ff 	jne %d2,0,800087cc <Ifx_Fifo_write+0x130>
                {}

                Stop = fifo->eventWriter == FALSE;  /* If the function timeout, the maximum number of characters are written before returning */
8000880e:	39 fd 1d 00 	ld.bu %d13,[%a15]29
80008812:	8b 0d 00 d2 	eq %d13,%d13,0
80008816:	1d ff 70 ff 	j 800086f6 <Ifx_Fifo_write+0x5a>
            }
        } while (count != 0);

        fifo->endIndex = buffer.index;
8000881a:	8c a2       	ld.h %d15,[%sp]4
8000881c:	a8 bf       	st.h [%a15]22,%d15
    }

    return count;
}
8000881e:	02 92       	mov %d2,%d9
80008820:	00 90       	ret 

80008822 <osEE_tc_core0_start>:
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008822:	91 30 00 2f 	movh.a %a2,61443
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008826:	91 30 00 ff 	movh.a %a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
8000882a:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
8000882e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008832:	54 25       	ld.w %d5,[%a2]
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008834:	48 08       	ld.w %d8,[%a15]0
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008836:	37 05 6e 51 	extr.u %d5,%d5,2,14
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
8000883a:	37 08 6e 81 	extr.u %d8,%d8,2,14
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000883e:	91 20 00 f7 	movh.a %a15,28674
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008842:	8f f5 83 51 	xor %d5,%d5,63
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008846:	8f f8 83 81 	xor %d8,%d8,63
8000884a:	d9 ff 40 89 	lea %a15,[%a15]-27136 <70019600 <__USTACK0>>
8000884e:	40 fa       	mov.aa %sp,%a15
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
80008850:	0d 00 80 04 	dsync 
  osEE_tc_dsync();

/* Set the PSW to its reset value in case of a warm start, set PSW.IS.
   Global Stack is needed since ERIKA's use the stack to save context for the
   current TASK */
  osEE_tc_set_csfr(OSEE_CSFR_PSW, OSEE_TC_START_PSW);
80008854:	3b 00 b8 f0 	mov %d15,2944
80008858:	cd 4f e0 0f 	mtcr $psw,%d15
8000885c:	0d 00 c0 04 	isync 

/* Set the PCXS and PCXO to its reset value in case of a warm start */
  pcxi  = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80008860:	4d 00 e0 ff 	mfcr %d15,$pcxi
  pcxi &= 0xFFF00000U;
80008864:	b7 0f 14 f0 	insert %d15,%d15,0,0,20
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, pcxi);
80008868:	cd 0f e0 0f 	mtcr $pcxi,%d15
8000886c:	0d 00 c0 04 	isync 
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80008870:	4d c0 e1 ff 	mfcr %d15,$core_id
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008874:	82 12       	mov %d2,1
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008876:	37 0f 48 f0 	extr %d15,%d15,0,8
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
8000887a:	cd 42 20 09 	mtcr $pcon1,%d2
8000887e:	0d 00 c0 04 	isync 
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008882:	53 cf 20 f0 	mul %d15,%d15,12
80008886:	10 22       	addsc.a %a2,%a2,%d15,0
80008888:	54 22       	ld.w %d2,[%a2]
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
8000888a:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
8000888c:	37 02 6e 21 	extr.u %d2,%d2,2,14
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008890:	d9 2f 00 46 	lea %a15,[%a2]24832
80008894:	11 3f 00 ff 	addih.a %a15,%a15,61443

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008898:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
8000889a:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000889e:	2e 16       	jz.t %d15,1,800088aa <osEE_tc_core0_start+0x88>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800088a0:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800088a4:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800088a8:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
800088aa:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
800088ae:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800088b2:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
800088b4:	4c f0       	ld.w %d15,[%a15]0
800088b6:	6f 0f ff ff 	jnz.t %d15,0,800088b4 <osEE_tc_core0_start+0x92>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* PCACHE enable steps */
/* Step 2: Set PCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_PCON0, pcon0);
800088ba:	82 0f       	mov %d15,0
800088bc:	cd cf 20 09 	mtcr $pcon0,%d15
800088c0:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800088c4:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800088c6:	2e 16       	jz.t %d15,1,800088d2 <osEE_tc_core0_start+0xb0>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800088c8:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800088cc:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800088d0:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
800088d2:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
800088d6:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800088da:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
800088dc:	4c f0       	ld.w %d15,[%a15]0
800088de:	6f 0f ff 7f 	jz.t %d15,0,800088dc <osEE_tc_core0_start+0xba>
800088e2:	4d c0 e1 ff 	mfcr %d15,$core_id
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
800088e6:	37 0f 48 f0 	extr %d15,%d15,0,8
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
800088ea:	91 30 00 ff 	movh.a %a15,61443
800088ee:	53 cf 20 f0 	mul %d15,%d15,12
800088f2:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800088f6:	10 ff       	addsc.a %a15,%a15,%d15,0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
800088f8:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
800088fa:	48 02       	ld.w %d2,[%a15]0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
800088fc:	d9 2f 00 46 	lea %a15,[%a2]24832
80008900:	11 3f 00 ff 	addih.a %a15,%a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008904:	37 02 6e 21 	extr.u %d2,%d2,2,14
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008908:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
8000890a:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000890e:	2e 16       	jz.t %d15,1,8000891a <osEE_tc_core0_start+0xf8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008910:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008914:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008918:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
8000891a:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
8000891e:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008922:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008924:	4c f0       	ld.w %d15,[%a15]0
80008926:	6f 0f ff ff 	jnz.t %d15,0,80008924 <osEE_tc_core0_start+0x102>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* DCACHE enable steps */
/* Step 2: Set DCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_DCON0, dcon0);
8000892a:	82 0f       	mov %d15,0
8000892c:	cd 0f 04 09 	mtcr $dcon0,%d15
80008930:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008934:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008936:	2e 16       	jz.t %d15,1,80008942 <osEE_tc_core0_start+0x120>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008938:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
8000893c:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008940:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008942:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008946:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
8000894a:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
8000894c:	4c f0       	ld.w %d15,[%a15]0
8000894e:	6f 0f ff 7f 	jz.t %d15,0,8000894c <osEE_tc_core0_start+0x12a>
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008952:	91 30 00 ff 	movh.a %a15,61443
80008956:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000895a:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000895c:	2e 16       	jz.t %d15,1,80008968 <osEE_tc_core0_start+0x146>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
8000895e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008962:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008966:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008968:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
8000896c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008970:	91 30 00 ff 	movh.a %a15,61443
80008974:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008978:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
8000897a:	4c f0       	ld.w %d15,[%a15]0
8000897c:	91 30 00 2f 	movh.a %a2,61443
80008980:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008984:	6f 0f fb ff 	jnz.t %d15,0,8000897a <osEE_tc_core0_start+0x158>

/* Clear the ENDINIT bit in the WDT_CON0 register */
  osEE_tc_clear_cpu_endinit(0U, cpu_wdt_pw);

/* Load Base Address of Trap Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BTV, (OsEE_reg)__TRAPTAB0);
80008988:	7b 00 00 f8 	movh %d15,32768
8000898c:	1b 0f 10 f1 	addi %d15,%d15,4352
80008990:	cd 4f e2 0f 	mtcr $btv,%d15
80008994:	0d 00 c0 04 	isync 

/* Load Base Address of Interrupt Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BIV, (OsEE_reg)__INTTAB0);
80008998:	7b 00 00 f8 	movh %d15,32768
8000899c:	1b 0f 00 f2 	addi %d15,%d15,8192
800089a0:	cd 0f e2 0f 	mtcr $biv,%d15
800089a4:	0d 00 c0 04 	isync 

/* Load Interrupt Stack Pointer. (Not Used) */
  osEE_tc_set_csfr(OSEE_CSFR_ISP, (OsEE_reg)__ISTACK0);
800089a8:	7b 20 00 f7 	movh %d15,28674
800089ac:	1b 0f b0 f9 	addi %d15,%d15,-25856
800089b0:	cd 8f e2 0f 	mtcr $isp,%d15
800089b4:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800089b8:	4c 20       	ld.w %d15,[%a2]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800089ba:	2e 16       	jz.t %d15,1,800089c6 <osEE_tc_core0_start+0x1a4>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800089bc:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800089c0:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800089c4:	6c 20       	st.w [%a2]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
800089c6:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
800089ca:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800089ce:	91 30 00 ff 	movh.a %a15,61443
800089d2:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800089d6:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
800089d8:	4c f0       	ld.w %d15,[%a15]0
800089da:	6f 0f ff 7f 	jz.t %d15,0,800089d8 <osEE_tc_core0_start+0x1b6>

/* Set the ENDINIT bit in the WDT_CON0 register back */
  osEE_tc_set_cpu_endinit(0U, cpu_wdt_pw);

/* Initialize SDA base pointers */
  osEE_tc_setareg(a0, _SMALL_DATA_);
800089de:	91 10 00 f7 	movh.a %a15,28673
800089e2:	d9 ff 00 08 	lea %a15,[%a15]-32768 <70008000 <_SMALL_DATA_>>
800089e6:	40 f0       	mov.aa %a0,%a15
  osEE_tc_setareg(a1, _SMALL_DATA2_);
800089e8:	91 10 00 f8 	movh.a %a15,32769
800089ec:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
800089f0:	40 f1       	mov.aa %a1,%a15

/* Initialization of A8 and A9 */
  osEE_tc_setareg(a8, _SMALL_DATA3_);
800089f2:	91 10 00 f8 	movh.a %a15,32769
800089f6:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
800089fa:	40 f8       	mov.aa %a8,%a15
#if (defined(OSEE_SINGLECORE)) || (defined(OSEE_TC_DISABLE_A9_OPTIMIZATION))
  osEE_tc_setareg(a9, _SMALL_DATA4_);
800089fc:	91 10 00 fb 	movh.a %a15,45057
80008a00:	d9 ff 00 08 	lea %a15,[%a15]-32768 <b0008000 <_SMALL_DATA4_>>
80008a04:	40 f9       	mov.aa %a9,%a15
/* Nr of CSAs in area. Best solution, even though is a MISRA deviation, since
   pointers subtraction handles OsEE_csa size and p_csa_end/p_csa_begin
   are the extremes of an array constructed in linker script
   (condition under where C language specification allows pointer subtraction).
 */
  size_t const no_of_csas = (size_t)(p_csa_end - p_csa_begin);
80008a06:	7b 20 00 f7 	movh %d15,28674
80008a0a:	7b 20 00 47 	movh %d4,28674
80008a0e:	1b 0f c0 69 	addi %d6,%d15,-25600
80008a12:	1b 04 c0 4b 	addi %d4,%d4,-17408
80008a16:	a2 64       	sub %d4,%d6
80008a18:	86 a4       	sha %d4,-6

/* Previous Context Pointer (CSA Link Word) */
  OsEE_reg pcxi_val = 0U;
80008a1a:	82 02       	mov %d2,0
/*
  IMPORTANT:
  I initialize the Free Context List in reverse order.
  So I will end with a list that will grow toward bigger addresses.
 */
  for (i = no_of_csas; i > 0U; --i) {
80008a1c:	df 04 16 00 	jeq %d4,0,80008a48 <osEE_tc_core0_start+0x226>
/* CSA PCXI segment */
    OsEE_reg   pcxi_s;
/* CSA PCXI offset */
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];
80008a20:	9a f4       	add %d15,%d4,-1
80008a22:	06 6f       	sh %d15,6
80008a24:	12 63       	add %d3,%d15,%d6

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008a26:	60 3f       	mov.a %a15,%d3
80008a28:	82 00       	mov %d0,0
80008a2a:	68 00       	st.w [%a15]0,%d0
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008a2c:	60 4f       	mov.a %a15,%d4
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80008a2e:	8f 43 1e 20 	sh %d2,%d3,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008a32:	37 03 70 73 	extr.u %d7,%d3,6,16
80008a36:	1b 0f fc ff 	addi %d15,%d15,-64

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008a3a:	b0 ff       	add.a %a15,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008a3c:	37 27 10 28 	insert %d2,%d7,%d2,16,16
80008a40:	42 6f       	add %d15,%d6

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008a42:	82 53       	mov %d3,5
80008a44:	fd f0 11 01 	loop %a15,80008c66 <osEE_tc_core0_start+0x444>
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
    }
  }
/* Initialize the HEAD of Free Context List */
  osEE_tc_set_csfr(OSEE_CSFR_FCX, pcxi_val);
80008a48:	cd 82 e3 0f 	mtcr $fcx,%d2
80008a4c:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008a50:	91 30 00 ff 	movh.a %a15,61443
80008a54:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008a58:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008a5a:	2e 16       	jz.t %d15,1,80008a66 <osEE_tc_core0_start+0x244>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008a5c:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008a60:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008a64:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008a66:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008a6a:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008a6e:	91 30 00 ff 	movh.a %a15,61443
80008a72:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008a76:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008a78:	40 f2       	mov.aa %a2,%a15
80008a7a:	4c 20       	ld.w %d15,[%a2]0
80008a7c:	91 30 00 ff 	movh.a %a15,61443
80008a80:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008a84:	6f 0f fb ff 	jnz.t %d15,0,80008a7a <osEE_tc_core0_start+0x258>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_cpu_wdt(OsEE_reg core_index, uint16_t pw)
{
  osEE_tc_clear_cpu_endinit(core_index, pw);
/* Set "Disable Request bit" on CPU_WDT[core_index].CON1 */
  OSEE_TC_SCU_WDTCPU[core_index].con1.bits.dr = 1U;
80008a88:	4c f1       	ld.w %d15,[%a15]4
80008a8a:	96 08       	or %d15,8
80008a8c:	68 1f       	st.w [%a15]4,%d15
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008a8e:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008a90:	2e 16       	jz.t %d15,1,80008a9c <osEE_tc_core0_start+0x27a>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008a92:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008a96:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008a9a:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008a9c:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008aa0:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008aa4:	91 30 00 ff 	movh.a %a15,61443
80008aa8:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008aac:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008aae:	4c f0       	ld.w %d15,[%a15]0
80008ab0:	6f 0f ff 7f 	jz.t %d15,0,80008aae <osEE_tc_core0_start+0x28c>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008ab4:	91 30 00 ff 	movh.a %a15,61443
80008ab8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008abc:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008abe:	2e 16       	jz.t %d15,1,80008aca <osEE_tc_core0_start+0x2a8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008ac0:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008ac4:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008ac8:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
80008aca:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
80008ace:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
80008ad2:	91 30 00 ff 	movh.a %a15,61443
80008ad6:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008ada:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
80008adc:	40 f2       	mov.aa %a2,%a15
80008ade:	4c 20       	ld.w %d15,[%a2]0
80008ae0:	91 30 00 ff 	movh.a %a15,61443
80008ae4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008ae8:	6f 0f fb ff 	jnz.t %d15,0,80008ade <osEE_tc_core0_start+0x2bc>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_safety_wdt(uint16_t pw)
{
  osEE_tc_clear_safety_endinit(pw);
/* Set "Disable Request bit" on CPU_WDTS.CON1 */
  OSEE_TC_SCU_WDTS.con1.bits.dr = 1U;
80008aec:	4c f1       	ld.w %d15,[%a15]4
80008aee:	96 08       	or %d15,8
80008af0:	68 1f       	st.w [%a15]4,%d15
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008af2:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008af4:	2e 16       	jz.t %d15,1,80008b00 <osEE_tc_core0_start+0x2de>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008af6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008afa:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008afe:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
80008b00:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
80008b04:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80008b08:	91 30 00 ff 	movh.a %a15,61443
80008b0c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008b10:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80008b12:	4c f0       	ld.w %d15,[%a15]0
80008b14:	6f 0f ff 7f 	jz.t %d15,0,80008b12 <osEE_tc_core0_start+0x2f0>
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
80008b18:	91 00 00 48 	movh.a %a4,32768
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
        *block_to_clear.p_ull = 0ULL;
80008b1c:	d2 02       	mov %e2,0
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
80008b1e:	d9 44 f8 c0 	lea %a4,[%a4]3896 <80000f38 <__clear_table>>
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
        *block_to_clear.p_ui = 0x0U;
80008b22:	82 07       	mov %d7,0
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
        *block_to_clear.p_us = 0x0U;
80008b24:	82 06       	mov %d6,0
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
        *block_to_clear.p_uc = 0x0U;
80008b26:	82 05       	mov %d5,0

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
80008b28:	4c 41       	ld.w %d15,[%a4]4
  while (p_clear_table != NULL) {
    OsEE_tc_init_table_entry_ptr  block_to_clear;
    MemSize                       table_entry_length;

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;
80008b2a:	d4 43       	ld.a %a3,[%a4]

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
80008b2c:	9e f6       	jeq %d15,-1,80008b58 <osEE_tc_core0_start+0x336>
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
80008b2e:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80008b32:	76 49       	jz %d4,80008b44 <osEE_tc_core0_start+0x322>
        *block_to_clear.p_ull = 0ULL;
80008b34:	60 4f       	mov.a %a15,%d4
80008b36:	40 32       	mov.aa %a2,%a3
80008b38:	b0 ff       	add.a %a15,-1
80008b3a:	89 22 48 01 	st.d [%a2+]8,%e2
80008b3e:	fc fe       	loop %a15,80008b3a <osEE_tc_core0_start+0x318>
80008b40:	01 34 03 36 	addsc.a %a3,%a3,%d4,3
        ++block_to_clear.p_ull;
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
80008b44:	2e 22       	jz.t %d15,2,80008b48 <osEE_tc_core0_start+0x326>
        *block_to_clear.p_ui = 0x0U;
80008b46:	64 37       	st.w [%a3+],%d7
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
80008b48:	2e 12       	jz.t %d15,1,80008b4c <osEE_tc_core0_start+0x32a>
        *block_to_clear.p_us = 0x0U;
80008b4a:	a4 36       	st.h [%a3+],%d6
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
80008b4c:	2e 02       	jz.t %d15,0,80008b50 <osEE_tc_core0_start+0x32e>
        *block_to_clear.p_uc = 0x0U;
80008b4e:	34 35       	st.b [%a3],%d5
      }

/* Prepare the table pointer for the next iteration */
      ++p_clear_table;
80008b50:	d9 44 08 00 	lea %a4,[%a4]8 <80000008 <BootModeHeader0+0x8>>
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
  while (p_clear_table != NULL) {
80008b54:	bd 04 ea ff 	jnz.a %a4,80008b28 <osEE_tc_core0_start+0x306>
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
80008b58:	91 00 00 68 	movh.a %a6,32768
80008b5c:	d9 66 e0 e0 	lea %a6,[%a6]4000 <80000fa0 <__copy_table>>

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
80008b60:	4c 62       	ld.w %d15,[%a6]8
    OsEE_tc_init_table_entry_ptr  block_src;
    OsEE_tc_init_table_entry_ptr  block_dest;
    MemSize                       table_entry_length;

/* Get pointer to the data source block */
    block_src = p_copy_table->block_src;
80008b62:	d4 65       	ld.a %a5,[%a6]

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;
80008b64:	99 64 04 00 	ld.a %a4,[%a6]4 <80000004 <BootModeHeader0+0x4>>

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
80008b68:	df ff 21 00 	jeq %d15,-1,80008baa <osEE_tc_core0_start+0x388>
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
80008b6c:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80008b70:	76 4f       	jz %d4,80008b8e <osEE_tc_core0_start+0x36c>
80008b72:	60 4f       	mov.a %a15,%d4
80008b74:	40 43       	mov.aa %a3,%a4
80008b76:	40 52       	mov.aa %a2,%a5
80008b78:	b0 ff       	add.a %a15,-1
        *block_dest.p_ull = *block_src.p_ull;
80008b7a:	09 22 48 01 	ld.d %e2,[%a2+]8
80008b7e:	89 32 48 01 	st.d [%a3+]8,%e2
80008b82:	fc fc       	loop %a15,80008b7a <osEE_tc_core0_start+0x358>
80008b84:	06 34       	sh %d4,3
80008b86:	01 54 00 56 	addsc.a %a5,%a5,%d4,0
80008b8a:	01 44 00 46 	addsc.a %a4,%a4,%d4,0
        ++block_dest.p_ull;
        --ull_cnt;
      }

/* Copy the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
80008b8e:	2e 23       	jz.t %d15,2,80008b94 <osEE_tc_core0_start+0x372>
        *block_dest.p_ui = *block_src.p_ui;
80008b90:	44 52       	ld.w %d2,[%a5+]
80008b92:	64 42       	st.w [%a4+],%d2
        ++block_src.p_ui;
        ++block_dest.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
80008b94:	2e 14       	jz.t %d15,1,80008b9c <osEE_tc_core0_start+0x37a>
        *block_dest.p_us = *block_src.p_us;
80008b96:	09 52 c2 00 	ld.hu %d2,[%a5+]2
80008b9a:	a4 42       	st.h [%a4+],%d2
        ++block_src.p_us;
        ++block_dest.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
80008b9c:	2e 03       	jz.t %d15,0,80008ba2 <osEE_tc_core0_start+0x380>
        *block_dest.p_uc = *block_src.p_uc;
80008b9e:	0c 50       	ld.bu %d15,[%a5]0
80008ba0:	2c 40       	st.b [%a4]0,%d15
      }

/* Prepare the table pointer for the next iteration */
      ++p_copy_table;
80008ba2:	d9 66 0c 00 	lea %a6,[%a6]12 <8000000c <BootModeHeader0+0xc>>
(
  const OsEE_tc_copy_table * p_copy_table_param
)
{
  const OsEE_tc_copy_table * p_copy_table = p_copy_table_param;
  while (p_copy_table != NULL) {
80008ba6:	bd 06 dd ff 	jnz.a %a6,80008b60 <osEE_tc_core0_start+0x33e>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008baa:	91 30 00 ff 	movh.a %a15,61443
80008bae:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008bb2:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008bb4:	2e 16       	jz.t %d15,1,80008bc0 <osEE_tc_core0_start+0x39e>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008bb6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008bba:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008bbe:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
80008bc0:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
80008bc4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
80008bc8:	91 30 00 ff 	movh.a %a15,61443
80008bcc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008bd0:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
80008bd2:	4c f0       	ld.w %d15,[%a15]0
80008bd4:	6f 0f ff ff 	jnz.t %d15,0,80008bd2 <osEE_tc_core0_start+0x3b0>
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON8_OFF) = OSEE_TC_SCU_CCUCON8_INIT;
#endif /* OSEE_TC_SCU_CCUCON8_INIT */

/* BUS Divisors */
/* Configure CCUCON0 */
  OSEE_TC_SCU_CCUCON0.reg = OSEE_TC_SCU_CCUCON0_INIT;
80008bd8:	7b 20 22 f1 	movh %d15,4642
80008bdc:	91 30 00 ff 	movh.a %a15,61443
80008be0:	1b 1f 10 f0 	addi %d15,%d15,257
80008be4:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80008be8:	68 0f       	st.w [%a15]0,%d15
#if (defined(OSEE_TC_SCU_CCUCON5_INIT))
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON5_OFF) = OSEE_TC_SCU_CCUCON5_INIT;
#endif /* OSEE_TC_SCU_CCUCON5_INIT */
/* Configure CCUCON1 and Update CCU 0, 1 & 5. Forced INSEL to 1 even for
   external configuration, otherwise PLL initialization won't work. */
  OSEE_TC_SCU_CCUCON1.reg = OSEE_TC_SCU_CCUCON1_INIT |
80008bea:	7b 00 00 f5 	movh %d15,20480
80008bee:	91 30 00 ff 	movh.a %a15,61443
80008bf2:	1b 0f 10 f1 	addi %d15,%d15,4352
80008bf6:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80008bfa:	68 0f       	st.w [%a15]0,%d15
{
  /*
   * Default System Oscillator Configuration
   * MODE:    0   -> External Crystal
   */
  OSEE_TC_SCU_OSCCON.reg = OSEE_TC_SCU_OSCCON_OSCRES |
80008bfc:	7b 70 00 f0 	movh %d15,7
80008c00:	91 30 00 ff 	movh.a %a15,61443
80008c04:	1b cf 01 f0 	addi %d15,%d15,28
80008c08:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80008c0c:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_OSCCON_GAINSEL | OSEE_TC_SCU_OSCCON_MODE(0U) |
    OSEE_TC_SCU_OSCCON_OSCVAL((OSEE_TC_BOARD_FOSC / 2500000U) - 1U);

  while (OSEE_TC_SCU_OSCCON.bits.plllv == 0U) {
80008c0e:	4c f0       	ld.w %d15,[%a15]0
80008c10:	6f 1f ff 7f 	jz.t %d15,1,80008c0e <osEE_tc_core0_start+0x3ec>
    ; /* Oscillator not too low */
  }

  while (OSEE_TC_SCU_OSCCON.bits.pllhv == 0U) {
80008c14:	91 30 00 ff 	movh.a %a15,61443
80008c18:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80008c1c:	4c f0       	ld.w %d15,[%a15]0
80008c1e:	6f 8f ff 7f 	jz.t %d15,8,80008c1c <osEE_tc_core0_start+0x3fa>
/*===================== Configure CCU Clock Control =========================*/
  osEE_tc_conf_clock_ctrl();
/*===================== Configure Oscillator Control ========================*/
  osEE_tc_conf_osc_ctrl();
/*============================ Configure PLL ================================*/
  osEE_tc_set_pll_fsource(OSEE_CPU_CLOCK);
80008c22:	7b c0 be 40 	movh %d4,3052
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008c26:	91 30 00 ff 	movh.a %a15,61443
80008c2a:	1b 04 20 4c 	addi %d4,%d4,-15872
80008c2e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008c32:	6d 00 58 00 	call 80008ce2 <osEE_tc_set_pll_fsource>
80008c36:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008c38:	2e 16       	jz.t %d15,1,80008c44 <osEE_tc_core0_start+0x422>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008c3a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008c3e:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008c42:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
80008c44:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
80008c48:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80008c4c:	91 30 00 ff 	movh.a %a15,61443
80008c50:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008c54:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80008c56:	4c f0       	ld.w %d15,[%a15]0
80008c58:	6f 0f ff 7f 	jz.t %d15,0,80008c56 <osEE_tc_core0_start+0x434>
  osEE_tc_set_safety_endinit(safety_wdt_pw);
#endif /* OSEE_CPU_CLOCK */
#endif /* !OSEE_BYPASS_CLOCK_CONFIGURATION */
#endif /* !OSEE_TRICORE_ILLD && !OSEE_TC_2G */

  OSEE_EXIT(main());
80008c5c:	6d ff f4 dc 	call 80004644 <main>
80008c60:	02 24       	mov %d4,%d2
80008c62:	6d 00 58 28 	call 8000dd12 <_exit>
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008c66:	60 f2       	mov.a %a2,%d15
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80008c68:	8f 4f 1e 40 	sh %d4,%d15,-28
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008c6c:	74 22       	st.w [%a2],%d2
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008c6e:	c2 f3       	add %d3,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008c70:	37 0f 70 23 	extr.u %d2,%d15,6,16
80008c74:	37 42 10 28 	insert %d2,%d2,%d4,16,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
    if (fcd_needed_csa == 0U) {
80008c78:	76 36       	jz %d3,80008c84 <osEE_tc_core0_start+0x462>
80008c7a:	1b 0f fc ff 	addi %d15,%d15,-64
80008c7e:	fc f4       	loop %a15,80008c66 <osEE_tc_core0_start+0x444>
80008c80:	1d ff e4 fe 	j 80008a48 <osEE_tc_core0_start+0x226>
/* After having stored the LCX, I would have to have a 32 bit wrap around to
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
80008c84:	cd c2 e3 0f 	mtcr $lcx,%d2
80008c88:	0d 00 c0 04 	isync 
80008c8c:	3c f7       	j 80008c7a <osEE_tc_core0_start+0x458>

80008c8e <osEE_tc_stm_us_ticks>:
#if (defined(__TASKING__))
#define OS_STOP_SEC_GLOBAL_VAR_CLEARED
#include "Os_MemMap.h"
#endif /* __TASKING__ */

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
80008c8e:	40 ae       	mov.aa %a14,%sp
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
80008c90:	91 00 00 f7 	movh.a %a15,28672
80008c94:	19 ff 90 f0 	ld.w %d15,[%a15]3024 <70000bd0 <osEE_tc_stm_freq_khz>>
80008c98:	3b 80 3e 20 	mov %d2,1000
80008c9c:	3f 2f 0c 80 	jlt.u %d15,%d2,80008cb4 <osEE_tc_stm_us_ticks+0x26>
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
80008ca0:	7b 20 06 21 	movh %d2,4194
80008ca4:	1b 32 dd 24 	addi %d2,%d2,19923
80008ca8:	73 2f 68 20 	mul.u %e2,%d15,%d2
80008cac:	8f a3 1f 20 	sh %d2,%d3,-6
80008cb0:	e2 42       	mul %d2,%d4
80008cb2:	00 90       	ret 
  } else if (usec >= OSEE_KILO) {
80008cb4:	02 25       	mov %d5,%d2
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
80008cb6:	73 f4 0a 20 	mul %d2,%d4,%d15
80008cba:	7b 20 06 31 	movh %d3,4194
80008cbe:	1b 33 dd 34 	addi %d3,%d3,19923
80008cc2:	73 32 68 20 	mul.u %e2,%d2,%d3
80008cc6:	8f a3 1f 20 	sh %d2,%d3,-6

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
  } else if (usec >= OSEE_KILO) {
80008cca:	3f 54 0b 80 	jlt.u %d4,%d5,80008ce0 <osEE_tc_stm_us_ticks+0x52>
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
80008cce:	7b 20 06 21 	movh %d2,4194
80008cd2:	1b 32 dd 24 	addi %d2,%d2,19923
80008cd6:	73 24 68 40 	mul.u %e4,%d4,%d2
80008cda:	8f a5 1f 20 	sh %d2,%d5,-6
80008cde:	e2 f2       	mul %d2,%d15
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
  }
  return ticks;
}
80008ce0:	00 90       	ret 

80008ce2 <osEE_tc_set_pll_fsource>:
#define OSEE_TC_K2_MIN      (1U)
#define OSEE_TC_N_MAX       (128U)  /* '7 bits */
#define OSEE_TC_N_MIN       (1U)
#define OSEE_TC_DEV_ALLOWED (2U)

void osEE_tc_set_pll_fsource(OsEE_reg fpll) {
80008ce2:	40 ae       	mov.aa %a14,%sp
  fPllLeastError  = OSEE_TC_CLOCK_MAX;
  fPllError       = OSEE_TC_CLOCK_MAX;

  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
80008ce4:	7b e0 e4 20 	movh %d2,3662
80008ce8:	1b 12 c0 21 	addi %d2,%d2,7169
80008cec:	0b 24 30 f1 	lt.u %d15,%d4,%d2
80008cf0:	82 22       	mov %d2,2
80008cf2:	ab 12 80 ff 	sel %d15,%d15,%d2,1
80008cf6:	60 f4       	mov.a %a4,%d15
80008cf8:	53 ff 20 f0 	mul %d15,%d15,15
80008cfc:	60 f5       	mov.a %a5,%d15
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80008cfe:	3b 00 01 e0 	mov %d14,16
80008d02:	82 03       	mov %d3,0
80008d04:	7b c0 be 20 	movh %d2,3052
80008d08:	1b 02 20 2c 	addi %d2,%d2,-15872
80008d0c:	02 28       	mov %d8,%d2
80008d0e:	82 01       	mov %d1,0
80008d10:	82 0b       	mov %d11,0
80008d12:	82 0d       	mov %d13,0
80008d14:	82 0c       	mov %d12,0
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
80008d16:	7b 10 13 a0 	movh %d10,305
80008d1a:	1b 0a d0 a2 	addi %d10,%d10,11520

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
80008d1e:	91 40 0f 60 	movh.a %a6,244
80008d22:	d9 66 41 02 	lea %a6,[%a6]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
    {
      for (
80008d26:	a0 1d       	mov.a %a13,1
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
80008d28:	53 14 40 60 	mul.u %e6,%d4,1
80008d2c:	60 62       	mov.a %a2,%d6
80008d2e:	60 73       	mov.a %a3,%d7

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
80008d30:	91 80 7d f1 	movh.a %a15,6104
80008d34:	d9 ff 41 08 	lea %a15,[%a15]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
        {
          for (
80008d38:	a0 1c       	mov.a %a12,1
80008d3a:	3c 5e       	j 80008df6 <osEE_tc_set_pll_fsource+0x114>
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
80008d3c:	4b ea 11 62 	div.u %e6,%d10,%d14
80008d40:	82 07       	mov %d7,0

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
80008d42:	7b 60 f8 ff 	movh %d15,65414
80008d46:	1b 0f e0 fe 	addi %d15,%d15,-4608
80008d4a:	0b f6 40 60 	addx %d6,%d6,%d15
80008d4e:	8b f7 bf 50 	addc %d5,%d7,-1
80008d52:	ba 05       	eq %d15,%d5,0
80008d54:	80 67       	mov.d %d7,%a6
80008d56:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
80008d5a:	8b 05 00 f5 	or.ne %d15,%d5,0
80008d5e:	ee 4a       	jnz %d15,80008df2 <osEE_tc_set_pll_fsource+0x110>
    {
      for (
80008d60:	df 00 56 00 	jeq %d0,0,80008e0c <osEE_tc_set_pll_fsource+0x12a>
80008d64:	02 e9       	mov %d9,%d14
80008d66:	80 d0       	mov.d %d0,%a13
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
80008d68:	60 e7       	mov.a %a7,%d14
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
80008d6a:	80 2f       	mov.d %d15,%a2
80008d6c:	73 f0 68 60 	mul.u %e6,%d0,%d15
80008d70:	80 3f       	mov.d %d15,%a3
80008d72:	03 f0 0a 77 	madd %d7,%d7,%d0,%d15

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
80008d76:	7b 80 82 fe 	movh %d15,59432
80008d7a:	1b 0f c0 f7 	addi %d15,%d15,31744
80008d7e:	0b f6 40 60 	addx %d6,%d6,%d15
80008d82:	8b f7 bf 50 	addc %d5,%d7,-1
80008d86:	ba 05       	eq %d15,%d5,0
80008d88:	80 f7       	mov.d %d7,%a15
80008d8a:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
80008d8e:	8b 05 00 f5 	or.ne %d15,%d5,0
80008d92:	ee 25       	jnz %d15,80008ddc <osEE_tc_set_pll_fsource+0xfa>
        {
          for (
80008d94:	0f 23 a0 f0 	or %d15,%d3,%d2
80008d98:	6e 2d       	jz %d15,80008df2 <osEE_tc_set_pll_fsource+0x110>
80008d9a:	80 c6       	mov.d %d6,%a12
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
80008d9c:	4b 96 11 22 	div.u %e2,%d6,%d9
80008da0:	02 2f       	mov %d15,%d2
80008da2:	e2 af       	mul %d15,%d10
80008da4:	a2 4f       	sub %d15,%d4
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
80008da6:	53 1f 40 20 	mul.u %e2,%d15,1
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80008daa:	df 0f ac 00 	jeq %d15,0,80008f02 <osEE_tc_set_pll_fsource+0x220>
              bestK2         = k2;
              bestN          = n;
              bestP          = p;
            }

            if (fPllLeastError > fPllError)
80008dae:	0b 13 00 51 	eq %d5,%d3,%d1
80008db2:	0b 8f 50 52 	and.ge.u %d5,%d15,%d8
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
80008db6:	2b f8 40 85 	sel %d8,%d5,%d8,%d15
80008dba:	ab 01 80 15 	sel %d1,%d5,%d1,0
80008dbe:	2b eb 40 b5 	sel %d11,%d5,%d11,%d14
80008dc2:	2b 6d 40 d5 	sel %d13,%d5,%d13,%d6
80008dc6:	2b 0c 40 c5 	sel %d12,%d5,%d12,%d0
        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
80008dca:	c2 16       	add %d6,1
      {
        fVco = ((uint64_t)fpll) * k2;

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
80008dcc:	8b 16 68 52 	lt.u %d5,%d6,129
80008dd0:	8b 0f 20 54 	and.ne %d5,%d15,0
80008dd4:	df 05 e4 ff 	jne %d5,0,80008d9c <osEE_tc_set_pll_fsource+0xba>
80008dd8:	02 d6       	mov %d6,%d13
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80008dda:	02 6d       	mov %d13,%d6
    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
80008ddc:	80 4f       	mov.d %d15,%a4
80008dde:	42 f0       	add %d0,%d15
80008de0:	80 56       	mov.d %d6,%a5
80008de2:	42 69       	add %d9,%d6

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
80008de4:	0f 32 a0 50 	or %d5,%d2,%d3
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
80008de8:	8b d0 61 f2 	lt.u %d15,%d0,29
80008dec:	8b 05 20 f4 	and.ne %d15,%d5,0
80008df0:	ee bd       	jnz %d15,80008d6a <osEE_tc_set_pll_fsource+0x88>
80008df2:	01 45 20 50 	sub.a %a5,%a5,%a4
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
80008df6:	c2 fe       	add %d14,-1
    k2Steps = 1;
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
80008df8:	0f 32 a0 f0 	or %d15,%d2,%d3
80008dfc:	8b 0f 20 02 	ne %d0,%d15,0
  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
  }

  for (
80008e00:	8b 0e 20 52 	ne %d5,%d14,0
80008e04:	8b 0f 20 54 	and.ne %d5,%d15,0
80008e08:	df 05 9a ff 	jne %d5,0,80008d3c <osEE_tc_set_pll_fsource+0x5a>
      }
    }
  }

  /* Percent ALLOWED_DEVIATION error allowed */
  fpll_maxerrorallowed = (fpll * OSEE_TC_DEV_ALLOWED) / ((OsEE_reg)100U);
80008e0c:	06 14       	sh %d4,1
80008e0e:	7b c0 1e f5 	movh %d15,20972
80008e12:	1b ff 51 f8 	addi %d15,%d15,-31457
80008e16:	73 f4 68 40 	mul.u %e4,%d4,%d15
80008e1a:	8f b5 1f 20 	sh %d2,%d5,-5
  if (fPllLeastError < (uint64_t)fpll_maxerrorallowed)
80008e1e:	ba 01       	eq %d15,%d1,0
80008e20:	0b 28 50 f2 	and.ge.u %d15,%d8,%d2
80008e24:	8b 01 00 f5 	or.ne %d15,%d1,0
80008e28:	ee 73       	jnz %d15,80008f0e <osEE_tc_set_pll_fsource+0x22c>
  {
    /* Divide by K2DIV + 1 */
    OSEE_TC_SCU_PLLCON1.bits.k2div = (uint8_t)(bestK2 - 1U);
80008e2a:	c2 fc       	add %d12,-1
80008e2c:	91 30 00 ff 	movh.a %a15,61443
80008e30:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80008e34:	4c f0       	ld.w %d15,[%a15]0
80008e36:	37 cf 07 c0 	insert %d12,%d15,%d12,0,7
80008e3a:	68 0c       	st.w [%a15]0,%d12

    while (OSEE_TC_SCU_PLLSTAT.bits.k2rdy == 0U) {
80008e3c:	91 30 00 ff 	movh.a %a15,61443
80008e40:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80008e44:	4c f0       	ld.w %d15,[%a15]0
80008e46:	6f 5f ff 7f 	jz.t %d15,5,80008e44 <osEE_tc_set_pll_fsource+0x162>
    }

    /* K1 divider default value */

    /* Enabled the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 1U;
80008e4a:	91 30 00 ff 	movh.a %a15,61443
80008e4e:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80008e52:	4c f0       	ld.w %d15,[%a15]0
80008e54:	96 01       	or %d15,1
80008e56:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 0U) {
80008e58:	91 30 00 ff 	movh.a %a15,61443
80008e5c:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80008e60:	4c f0       	ld.w %d15,[%a15]0
80008e62:	6f 0f ff 7f 	jz.t %d15,0,80008e60 <osEE_tc_set_pll_fsource+0x17e>
      ; /* Wait until prescaler mode is entered */
    }

    /* I will use n=80 and p=2. Because I can get al the
       needed values */
    OSEE_TC_SCU_PLLCON0.bits.pdiv = (uint8_t)(bestP - 1U);
80008e66:	9a fb       	add %d15,%d11,-1
80008e68:	91 30 00 ff 	movh.a %a15,61443
80008e6c:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80008e70:	16 0f       	and %d15,15
80008e72:	8f 8f 01 f0 	sh %d15,%d15,24
80008e76:	48 02       	ld.w %d2,[%a15]0
80008e78:	b7 02 04 2c 	insert %d2,%d2,0,24,4
80008e7c:	a6 2f       	or %d15,%d2
80008e7e:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_PLLCON0.bits.ndiv = (uint8_t)(bestN - 1U);
80008e80:	9a fd       	add %d15,%d13,-1
80008e82:	16 7f       	and %d15,127
80008e84:	8f 9f 00 f0 	sh %d15,%d15,9
80008e88:	48 02       	ld.w %d2,[%a15]0
80008e8a:	b7 02 87 24 	insert %d2,%d2,0,9,7
80008e8e:	a6 2f       	or %d15,%d2
80008e90:	68 0f       	st.w [%a15]0,%d15

    /* Power down VCO Normal Behavior */
    OSEE_TC_SCU_PLLCON0.bits.vcopwd = 0U;
80008e92:	4c f0       	ld.w %d15,[%a15]0
80008e94:	8f 2f c0 f1 	andn %d15,%d15,2
80008e98:	68 0f       	st.w [%a15]0,%d15

    /***** Configure PLL normal mode. *****/

    /* Automatic oscillator disconnect disabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 1U;
80008e9a:	4c f0       	ld.w %d15,[%a15]0
80008e9c:	96 40       	or %d15,64
80008e9e:	68 0f       	st.w [%a15]0,%d15
    /* Connect VCO to the oscillator */
    OSEE_TC_SCU_PLLCON0.bits.clrfindis = 1U;
80008ea0:	4c f0       	ld.w %d15,[%a15]0
80008ea2:	96 20       	or %d15,32
80008ea4:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.findis == 1U) {
80008ea6:	91 30 00 ff 	movh.a %a15,61443
80008eaa:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80008eae:	4c f0       	ld.w %d15,[%a15]0
80008eb0:	6f 3f ff ff 	jnz.t %d15,3,80008eae <osEE_tc_set_pll_fsource+0x1cc>
      ; /* Wait until oscillator is connected to the VCO */
    }

    /* Restart VCO lock detection */
    OSEE_TC_SCU_PLLCON0.bits.resld = 1U;
80008eb4:	91 30 00 ff 	movh.a %a15,61443
80008eb8:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80008ebc:	4c f0       	ld.w %d15,[%a15]0
80008ebe:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80008ec2:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcolock == 0U) {
80008ec4:	91 30 00 ff 	movh.a %a15,61443
80008ec8:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80008ecc:	4c f0       	ld.w %d15,[%a15]0
80008ece:	6f 2f ff 7f 	jz.t %d15,2,80008ecc <osEE_tc_set_pll_fsource+0x1ea>
      ; /* Wait until the VCO becomes locked */
    }

    /* Disable the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 0U;
80008ed2:	91 30 00 ff 	movh.a %a15,61443
80008ed6:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80008eda:	4c f0       	ld.w %d15,[%a15]0
80008edc:	8f 1f c0 f1 	andn %d15,%d15,1
80008ee0:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 1U) {
80008ee2:	91 30 00 ff 	movh.a %a15,61443
80008ee6:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80008eea:	4c f0       	ld.w %d15,[%a15]0
80008eec:	6f 0f ff ff 	jnz.t %d15,0,80008eea <osEE_tc_set_pll_fsource+0x208>
      ; /* Wait until normal mode is entered */
    }

    /* Automatic oscillator disconnect enabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
80008ef0:	91 30 00 ff 	movh.a %a15,61443
80008ef4:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80008ef8:	4c f0       	ld.w %d15,[%a15]0
80008efa:	8f 0f c4 f1 	andn %d15,%d15,64
80008efe:	68 0f       	st.w [%a15]0,%d15
80008f00:	00 90       	ret 
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
            {
              fPllLeastError = fPllError;
80008f02:	02 28       	mov %d8,%d2
80008f04:	02 31       	mov %d1,%d3
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
80008f06:	80 7b       	mov.d %d11,%a7
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80008f08:	02 0c       	mov %d12,%d0
80008f0a:	1d ff 68 ff 	j 80008dda <osEE_tc_set_pll_fsource+0xf8>
80008f0e:	00 90       	ret 

80008f10 <osEE_tc_get_fsource>:
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
  }

}

OsEE_reg osEE_tc_get_fsource(void) {
80008f10:	40 ae       	mov.aa %a14,%sp
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
80008f12:	91 30 00 ff 	movh.a %a15,61443
80008f16:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80008f1a:	4c f0       	ld.w %d15,[%a15]0
80008f1c:	37 0f 62 fe 	extr.u %d15,%d15,28,2
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
      }
    }
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
80008f20:	7b 60 5f 20 	movh %d2,1526
80008f24:	1b 02 10 2e 	addi %d2,%d2,-7936

OsEE_reg osEE_tc_get_fsource(void) {
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
80008f28:	6e 45       	jz %d15,80008fb2 <osEE_tc_get_fsource+0xa2>
    /* PLL */
    /* PLL dividers */
    OsEE_reg k1, k2, p, n;
    /* Prescaler mode */
    if (OSEE_TC_SCU_PLLSTAT.bits.vcobyst != 0U)
80008f2a:	91 30 00 ff 	movh.a %a15,61443
80008f2e:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80008f32:	4c f0       	ld.w %d15,[%a15]0
80008f34:	6f 0f 11 00 	jz.t %d15,0,80008f56 <osEE_tc_get_fsource+0x46>
    {
      k1 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k1div + 1U;
80008f38:	91 30 00 ff 	movh.a %a15,61443
80008f3c:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80008f40:	48 02       	ld.w %d2,[%a15]0
80008f42:	37 02 67 28 	extr.u %d2,%d2,16,7
80008f46:	c2 12       	add %d2,1
      fsource = OSEE_TC_BOARD_FOSC / k1;
80008f48:	7b 10 13 f0 	movh %d15,305
80008f4c:	1b 0f d0 f2 	addi %d15,%d15,11520
80008f50:	4b 2f 11 22 	div.u %e2,%d15,%d2
80008f54:	00 90       	ret 
    } else {
      /* Free running mode */
      if (OSEE_TC_SCU_PLLSTAT.bits.findis != 0U)
80008f56:	4c f0       	ld.w %d15,[%a15]0
80008f58:	6f 3f 11 00 	jz.t %d15,3,80008f7a <osEE_tc_get_fsource+0x6a>
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80008f5c:	91 30 00 ff 	movh.a %a15,61443
80008f60:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80008f64:	48 02       	ld.w %d2,[%a15]0
80008f66:	8f f2 07 21 	and %d2,%d2,127
80008f6a:	9a 12       	add %d15,%d2,1
        fsource = OSEE_TC_BOARD_FOSC / k2;
80008f6c:	7b 10 13 20 	movh %d2,305
80008f70:	1b 02 d0 22 	addi %d2,%d2,11520
80008f74:	4b f2 11 22 	div.u %e2,%d2,%d15
80008f78:	00 90       	ret 
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80008f7a:	91 30 00 ff 	movh.a %a15,61443
80008f7e:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80008f82:	4c f0       	ld.w %d15,[%a15]0
80008f84:	8f ff 07 51 	and %d5,%d15,127
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
80008f88:	91 30 00 ff 	movh.a %a15,61443
80008f8c:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80008f90:	4c f0       	ld.w %d15,[%a15]0
80008f92:	37 0f 64 3c 	extr.u %d3,%d15,24,4
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;
80008f96:	48 02       	ld.w %d2,[%a15]0
80008f98:	37 02 e7 44 	extr.u %d4,%d2,9,7
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
        fsource = OSEE_TC_BOARD_FOSC / k2;
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80008f9c:	9a 15       	add %d15,%d5,1
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;

        /* cpu clock value fclk = (fosc * n)/(P * k2) */
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
80008f9e:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80008fa2:	7b 10 13 20 	movh %d2,305
80008fa6:	1b 02 d0 22 	addi %d2,%d2,11520
80008faa:	4b f2 11 22 	div.u %e2,%d2,%d15
80008fae:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
  }
  return fsource;
}
80008fb2:	00 90       	ret 

80008fb4 <osEE_tc_stm_set_clockpersec>:
  return ticks;
}

/* Set inside std time reference  */
void osEE_tc_stm_set_clockpersec(void)
{
80008fb4:	40 ae       	mov.aa %a14,%sp
#if (defined(__TASKING__))
  /* I don't know where is declared */
  extern unsigned long long setfoschz ( unsigned long long );
#endif /* __TASKING__ */
  /* fSOURCE Frequency */
  OsEE_reg const fsource  = osEE_tc_get_fsource();
80008fb6:	6d ff ad ff 	call 80008f10 <osEE_tc_get_fsource>
  /* Standard Timer Module period rounded */
  OsEE_reg const fstm     = (fsource + 1U) / OSEE_SCU_HW_FSTM_DIV;
80008fba:	91 30 00 ff 	movh.a %a15,61443
80008fbe:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80008fc2:	4c f0       	ld.w %d15,[%a15]0
80008fc4:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80008fc8:	c2 12       	add %d2,1
80008fca:	4b f2 11 22 	div.u %e2,%d2,%d15

  /* Set Global variable with freq in Khz value */
  osEE_tc_stm_freq_khz = fstm / OSEE_KILO;
80008fce:	7b 20 06 f1 	movh %d15,4194
80008fd2:	1b 3f dd f4 	addi %d15,%d15,19923
80008fd6:	73 f2 68 20 	mul.u %e2,%d2,%d15
80008fda:	8f a3 1f f0 	sh %d15,%d3,-6
80008fde:	91 00 00 f7 	movh.a %a15,28672
80008fe2:	59 ff 90 f0 	st.w [%a15]3024 <70000bd0 <osEE_tc_stm_freq_khz>>,%d15
80008fe6:	00 90       	ret 

80008fe8 <osEE_tc_stm_set_sr0>:
    that qualifier on pointers.
 */

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0(OsEE_reg usec,
    OsEE_tc_isr_hw_prio intvec)
{
80008fe8:	40 ae       	mov.aa %a14,%sp
80008fea:	02 59       	mov %d9,%d5
80008fec:	4d c0 e1 8f 	mfcr %d8,$core_id
    5U;
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
80008ff0:	6d ff 4f fe 	call 80008c8e <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
80008ff4:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
80008ff8:	8f 38 00 f1 	and %d15,%d8,3
80008ffc:	9b 0f 0f 40 	addih %d4,%d15,240
80009000:	8f 84 00 40 	sh %d4,%d4,8
80009004:	60 4f       	mov.a %a15,%d4
 *  \return The timer lower word value read.
 */
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_tc_stm_get_time_lower_word(OsEE_reg stm_id)
{
  return OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_TIM0_OFF);
80009006:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
80009008:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
8000900a:	68 c2       	st.w [%a15]48,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
8000900c:	df 09 23 00 	jeq %d9,0,80009052 <osEE_tc_stm_set_sr0+0x6a>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
80009010:	48 e2       	ld.w %d2,[%a15]56
80009012:	b7 02 05 24 	insert %d2,%d2,0,8,5
80009016:	68 e2       	st.w [%a15]56,%d2
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
80009018:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize0   = size_of_compare;
8000901c:	48 e2       	ld.w %d2,[%a15]56
8000901e:	37 32 05 30 	insert %d3,%d2,%d3,0,5
80009022:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 0 with Compare Register 0 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0os     = 0U;
80009024:	48 f2       	ld.w %d2,[%a15]60
80009026:	8f 42 c0 21 	andn %d2,%d2,4
8000902a:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en     = 1U;
8000902c:	48 f2       	ld.w %d2,[%a15]60
8000902e:	8f 12 40 21 	or %d2,%d2,1
80009032:	68 f2       	st.w [%a15]60,%d2

/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 0U), intvec);
80009034:	06 3f       	sh %d15,3
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
80009036:	60 f2       	mov.a %a2,%d15
80009038:	d9 2f 50 28 	lea %a15,[%a2]-31600
8000903c:	11 4f 00 ff 	addih.a %a15,%a15,61444
80009040:	b7 89 99 93 	insert %d9,%d9,8,7,25
80009044:	8f 38 00 81 	and %d8,%d8,3
80009048:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
8000904c:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000904e:	68 09       	st.w [%a15]0,%d9
80009050:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en                 = 0U;
80009052:	48 f2       	ld.w %d2,[%a15]60
80009054:	8f 12 c0 21 	andn %d2,%d2,1
80009058:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 0U)) = 0U;
8000905a:	1b 2f 09 f7 	addi %d15,%d15,28818
8000905e:	9b 0f e0 f1 	addih %d15,%d15,7680
80009062:	06 3f       	sh %d15,3
80009064:	82 02       	mov %d2,0
80009066:	60 ff       	mov.a %a15,%d15
80009068:	68 02       	st.w [%a15]0,%d2
8000906a:	00 90       	ret 

8000906c <osEE_tc_stm_set_sr0_next_match>:
  }
}

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0_next_match(OsEE_reg usec)
{
8000906c:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000906e:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP0IRR bit 0 => 0x1 | CMP0IRS bit 1 => 0x2 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x1U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) += osEE_tc_stm_us_ticks(usec);
80009072:	6d ff 0e fe 	call 80008c8e <osEE_tc_stm_us_ticks>
80009076:	16 03       	and %d15,3
80009078:	9b 0f 0f f0 	addih %d15,%d15,240
8000907c:	8f 8f 00 f0 	sh %d15,%d15,8
80009080:	60 ff       	mov.a %a15,%d15
80009082:	4c fc       	ld.w %d15,[%a15]48
80009084:	42 f2       	add %d2,%d15
80009086:	68 c2       	st.w [%a15]48,%d2
80009088:	00 90       	ret 

8000908a <osEE_tc_stm_set_sr1>:
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1(OsEE_reg usec,
  OsEE_tc_isr_hw_prio intvec)
{
8000908a:	40 ae       	mov.aa %a14,%sp
8000908c:	02 59       	mov %d9,%d5
8000908e:	4d c0 e1 8f 	mfcr %d8,$core_id
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
80009092:	6d ff fe fd 	call 80008c8e <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
80009096:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
8000909a:	8f 38 00 f1 	and %d15,%d8,3
8000909e:	9b 0f 0f 40 	addih %d4,%d15,240
800090a2:	8f 84 00 40 	sh %d4,%d4,8
800090a6:	60 4f       	mov.a %a15,%d4
800090a8:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
800090aa:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
800090ac:	68 d2       	st.w [%a15]52,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
800090ae:	df 09 28 00 	jeq %d9,0,800090fe <osEE_tc_stm_set_sr1+0x74>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
800090b2:	48 e2       	ld.w %d2,[%a15]56
800090b4:	b7 02 05 2c 	insert %d2,%d2,0,24,5
800090b8:	68 e2       	st.w [%a15]56,%d2
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
800090ba:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize1   = size_of_compare;
800090be:	8f f3 01 31 	and %d3,%d3,31
800090c2:	8f 03 01 30 	sh %d3,%d3,16
800090c6:	48 e2       	ld.w %d2,[%a15]56
800090c8:	b7 02 05 28 	insert %d2,%d2,0,16,5
800090cc:	a6 23       	or %d3,%d2
800090ce:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 1 with Compare Register 1 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1os     = 1U;
800090d0:	48 f2       	ld.w %d2,[%a15]60
800090d2:	8f 02 44 21 	or %d2,%d2,64
800090d6:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en     = 1U;
800090d8:	48 f2       	ld.w %d2,[%a15]60
800090da:	8f 02 41 21 	or %d2,%d2,16
800090de:	68 f2       	st.w [%a15]60,%d2
/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 1U), intvec);
800090e0:	06 3f       	sh %d15,3
800090e2:	60 f2       	mov.a %a2,%d15
800090e4:	d9 2f 54 28 	lea %a15,[%a2]-31596
800090e8:	11 4f 00 ff 	addih.a %a15,%a15,61444
800090ec:	b7 89 99 93 	insert %d9,%d9,8,7,25
800090f0:	8f 38 00 81 	and %d8,%d8,3
800090f4:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
800090f8:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
800090fa:	68 09       	st.w [%a15]0,%d9
800090fc:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en                 = 0U;
800090fe:	48 f2       	ld.w %d2,[%a15]60
80009100:	8f 02 c1 21 	andn %d2,%d2,16
80009104:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 1U)) = 0U;
80009106:	06 3f       	sh %d15,3
80009108:	60 f2       	mov.a %a2,%d15
8000910a:	d9 2f 54 28 	lea %a15,[%a2]-31596
8000910e:	11 4f 00 ff 	addih.a %a15,%a15,61444
80009112:	82 0f       	mov %d15,0
80009114:	68 0f       	st.w [%a15]0,%d15
80009116:	00 90       	ret 

80009118 <osEE_tc_stm_set_sr1_next_match>:
  }
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1_next_match(OsEE_reg usec)
{
80009118:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000911a:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP1IRR bit 2 => 0x4 | CMP1IRS bit 3 => 0x8 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x4U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) += osEE_tc_stm_us_ticks(usec);
8000911e:	6d ff b8 fd 	call 80008c8e <osEE_tc_stm_us_ticks>
80009122:	16 03       	and %d15,3
80009124:	9b 0f 0f f0 	addih %d15,%d15,240
80009128:	8f 8f 00 f0 	sh %d15,%d15,8
8000912c:	60 ff       	mov.a %a15,%d15
8000912e:	4c fd       	ld.w %d15,[%a15]52
80009130:	42 f2       	add %d2,%d15
80009132:	68 d2       	st.w [%a15]52,%d2
80009134:	00 90       	ret 

80009136 <osEE_tc_delay>:
}

void osEE_tc_delay(OsEE_reg usec)
{
80009136:	40 ae       	mov.aa %a14,%sp
80009138:	4d c0 e1 ff 	mfcr %d15,$core_id
8000913c:	16 03       	and %d15,3
8000913e:	9b 0f 0f f0 	addih %d15,%d15,240
80009142:	8f 8f 00 f0 	sh %d15,%d15,8
80009146:	60 f2       	mov.a %a2,%d15
80009148:	d9 2f 10 00 	lea %a15,[%a2]16
8000914c:	19 28 10 00 	ld.w %d8,[%a2]16
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
  /* Read Start Point */
  OsEE_reg    const start = osEE_tc_stm_get_time_lower_word(stm_id);
  /* Evaluate End Point */
  OsEE_reg    const ticks = osEE_tc_stm_us_ticks(usec);
80009150:	6d ff 9f fd 	call 80008c8e <osEE_tc_stm_us_ticks>
80009154:	4c f0       	ld.w %d15,[%a15]0

  while (ticks > (osEE_tc_stm_get_time_lower_word(stm_id) - start)) {
80009156:	a2 8f       	sub %d15,%d8
80009158:	3f 2f fe ff 	jlt.u %d15,%d2,80009154 <osEE_tc_delay+0x1e>
    ; /* Wait */
  }
}
8000915c:	00 90       	ret 

8000915e <osEE_tc_isr2_wrapper>:

#if (defined(__GNUC__))
#pragma section
#endif /* __GNUC__ */

static void OSEE_COMPILER_KEEP osEE_tc_isr2_wrapper(TaskType isr2_tid) {
8000915e:	40 ae       	mov.aa %a14,%sp
    }
    /* TODO: handle other internal priorities? System Timer? */
  } else
#endif /* !OSEE_SINGLECORE */
  {
    osEE_activate_isr2(isr2_tid);
80009160:	6d 00 86 05 	call 80009c6c <osEE_activate_isr2>
  __asm__ volatile ("svlcx" : : : "memory");
}

/** The rslcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rslcx(void) {
  __asm__ volatile ("rslcx" : : : "memory");
80009164:	0d 00 40 02 	rslcx 
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
80009168:	00 80       	rfe 
8000916a:	00 90       	ret 

8000916c <osEE_shutdown_os>:
  osEE_shutdown_os
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST) p_cdb,
  VAR(StatusType, AUTOMATIC)                Error
)
{
8000916c:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000916e:	cc 40       	ld.a %a15,[%a4]0
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009170:	39 ff 10 00 	ld.bu %d15,[%a15]16

  p_ccb->os_status = OSEE_KERNEL_SHUTDOWN;
80009174:	82 32       	mov %d2,3
80009176:	e9 f2 10 00 	st.b [%a15]16,%d2
  /* Used to propagate the error to the ShutdownHook */
  p_ccb->last_error = Error;
8000917a:	e9 f4 12 00 	st.b [%a15]18,%d4

  if (os_status == OSEE_KERNEL_STARTED) {
8000917e:	5e 25       	jne %d15,2,80009188 <osEE_shutdown_os+0x1c>
    osEE_idle_task_terminate(p_cdb->p_idle_task);
80009180:	99 44 04 00 	ld.a %a4,[%a4]4
80009184:	6d 00 89 06 	call 80009e96 <osEE_idle_task_terminate>
  } else {
    osEE_call_shutdown_hook(p_ccb, Error);
  }
  for (;;) {
    ; /* Endless Loop (entered only if Kernel Not Started) */
  }
80009188:	3c 00       	j 80009188 <osEE_shutdown_os+0x1c>

8000918a <DisableAllInterrupts>:
FUNC(void, OS_CODE)
  DisableAllInterrupts
(
  void
)
{
8000918a:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000918c:	91 00 00 f8 	movh.a %a15,32768
80009190:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
80009194:	0d 00 40 03 	disable 
  osEE_hal_disableIRQ();

  osEE_stack_monitoring(p_cdb);

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_DisableAllInterrupts);
  p_ccb->d_isr_all_cnt = 1U;
80009198:	82 1f       	mov %d15,1
8000919a:	e9 ff 1e 00 	st.b [%a15]30,%d15
8000919e:	00 90       	ret 

800091a0 <EnableAllInterrupts>:
FUNC(void, OS_CODE)
  EnableAllInterrupts
(
  void
)
{
800091a0:	40 ae       	mov.aa %a14,%sp
   * ResumeOSInterrupts() are called and no corresponding DisableAllInterupts()
   * /SuspendAllInterrupts()/SuspendOSInterrupts() was done before, the
   * Operating System module shall not perform this Operating System service.
   * (SRS_Os_11009) */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800091a2:	91 00 00 f8 	movh.a %a15,32768
800091a6:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_EnableAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->d_isr_all_cnt > 0U) {
800091aa:	39 ff 1e 00 	ld.bu %d15,[%a15]30 <800000d0 <osEE_cdb_var>>
800091ae:	6e 06       	jz %d15,800091ba <EnableAllInterrupts+0x1a>
    p_ccb->d_isr_all_cnt = 0U;
800091b0:	82 0f       	mov %d15,0
800091b2:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
800091b6:	0d 00 00 03 	enable 
800091ba:	00 90       	ret 

800091bc <SuspendAllInterrupts>:
FUNC(void, OS_CODE)
  SuspendAllInterrupts
(
  void
)
{
800091bc:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800091be:	91 00 00 f8 	movh.a %a15,32768
800091c2:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
(
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb,
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb
)
{
  if (p_ccb->s_isr_all_cnt == 0U) {
800091c6:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <800000d0 <osEE_cdb_var>>
800091ca:	ee 0c       	jnz %d15,800091e2 <SuspendAllInterrupts+0x26>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800091cc:	4d c0 e2 ff 	mfcr %d15,$icr
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
800091d0:	0d 00 40 03 	disable 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_suspendIRQ();
    p_ccb->prev_s_isr_all_status = flags;
800091d4:	68 5f       	st.w [%a15]20,%d15
    ++p_ccb->s_isr_all_cnt;
800091d6:	39 ff 1c 00 	ld.bu %d15,[%a15]28
800091da:	c2 1f       	add %d15,1
800091dc:	e9 ff 1c 00 	st.b [%a15]28,%d15
800091e0:	00 90       	ret 
  } else if (p_ccb->s_isr_all_cnt < OSEE_MAX_BYTE) {
800091e2:	8b ff 0f 22 	eq %d2,%d15,255
800091e6:	f6 25       	jnz %d2,800091f0 <SuspendAllInterrupts+0x34>
    ++p_ccb->s_isr_all_cnt;
800091e8:	c2 1f       	add %d15,1
800091ea:	e9 ff 1c 00 	st.b [%a15]28,%d15
800091ee:	00 90       	ret 
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
800091f0:	91 00 00 48 	movh.a %a4,32768
800091f4:	d9 44 10 30 	lea %a4,[%a4]208 <800000d0 <osEE_cdb_var>>
800091f8:	3b 90 01 40 	mov %d4,25
800091fc:	3c b8       	j 8000916c <osEE_shutdown_os>

800091fe <ResumeAllInterrupts>:
FUNC(void, OS_CODE)
  ResumeAllInterrupts
(
  void
)
{
800091fe:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009200:	91 00 00 f8 	movh.a %a15,32768
80009204:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_all_cnt > 0U) {
80009208:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <800000d0 <osEE_cdb_var>>
8000920c:	6e 0b       	jz %d15,80009222 <ResumeAllInterrupts+0x24>
    --p_ccb->s_isr_all_cnt;
8000920e:	c2 ff       	add %d15,-1
80009210:	16 ff       	and %d15,255
80009212:	e9 ff 1c 00 	st.b [%a15]28,%d15

    if (p_ccb->s_isr_all_cnt == 0U) {
80009216:	ee 06       	jnz %d15,80009222 <ResumeAllInterrupts+0x24>
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009218:	4c f5       	ld.w %d15,[%a15]20
8000921a:	cd cf e2 0f 	mtcr $icr,%d15
8000921e:	0d 00 c0 04 	isync 
80009222:	00 90       	ret 

80009224 <SuspendOSInterrupts>:
FUNC(void, OS_CODE)
  SuspendOSInterrupts
(
  void
)
{
80009224:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009226:	91 00 00 f8 	movh.a %a15,32768
8000922a:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_SuspendOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt == 0U) {
8000922e:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <800000d0 <osEE_cdb_var>>
80009232:	ee 18       	jnz %d15,80009262 <SuspendOSInterrupts+0x3e>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009234:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009238:	8f f2 0f f1 	and %d15,%d2,255
8000923c:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009240:	ee 0a       	jnz %d15,80009254 <SuspendOSInterrupts+0x30>
    OsEE_icr icr_temp = icr;
80009242:	02 2f       	mov %d15,%d2
80009244:	3b 30 01 30 	mov %d3,19
80009248:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000924c:	cd cf e2 0f 	mtcr $icr,%d15
80009250:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_begin_nested_primitive();
    p_ccb->prev_s_isr_os_status = flags;
80009254:	68 62       	st.w [%a15]24,%d2
    ++p_ccb->s_isr_os_cnt;
80009256:	39 ff 1d 00 	ld.bu %d15,[%a15]29
8000925a:	c2 1f       	add %d15,1
8000925c:	e9 ff 1d 00 	st.b [%a15]29,%d15
80009260:	00 90       	ret 
  } else if (p_ccb->s_isr_os_cnt < OSEE_MAX_BYTE) {
80009262:	8b ff 0f 22 	eq %d2,%d15,255
80009266:	f6 25       	jnz %d2,80009270 <SuspendOSInterrupts+0x4c>
    ++p_ccb->s_isr_os_cnt;
80009268:	c2 1f       	add %d15,1
8000926a:	e9 ff 1d 00 	st.b [%a15]29,%d15
8000926e:	00 90       	ret 
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
80009270:	91 00 00 48 	movh.a %a4,32768
80009274:	d9 44 10 30 	lea %a4,[%a4]208 <800000d0 <osEE_cdb_var>>
80009278:	3b 90 01 40 	mov %d4,25
8000927c:	1d ff 78 ff 	j 8000916c <osEE_shutdown_os>

80009280 <ResumeOSInterrupts>:
FUNC(void, OS_CODE)
  ResumeOSInterrupts
(
  void
)
{
80009280:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009282:	91 00 00 f8 	movh.a %a15,32768
80009286:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt > 0U) {
8000928a:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <800000d0 <osEE_cdb_var>>
8000928e:	6e 16       	jz %d15,800092ba <ResumeOSInterrupts+0x3a>
    --p_ccb->s_isr_os_cnt;
80009290:	c2 ff       	add %d15,-1
80009292:	16 ff       	and %d15,255
80009294:	e9 ff 1d 00 	st.b [%a15]29,%d15

    if (p_ccb->s_isr_os_cnt == 0U) {
80009298:	ee 11       	jnz %d15,800092ba <ResumeOSInterrupts+0x3a>
      osEE_hal_end_nested_primitive(p_ccb->prev_s_isr_os_status);
8000929a:	48 62       	ld.w %d2,[%a15]24
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000929c:	4d c0 e2 3f 	mfcr %d3,$icr
800092a0:	02 3f       	mov %d15,%d3
800092a2:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
800092a6:	8f f2 0f 21 	and %d2,%d2,255
800092aa:	5f 23 08 00 	jeq %d3,%d2,800092ba <ResumeOSInterrupts+0x3a>
800092ae:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800092b2:	cd cf e2 0f 	mtcr $icr,%d15
800092b6:	0d 00 c0 04 	isync 
800092ba:	00 90       	ret 

800092bc <StartOS>:
FUNC(StatusType, OS_CODE)
  StartOS
(
  VAR(AppModeType, AUTOMATIC) Mode
)
{
800092bc:	40 ae       	mov.aa %a14,%sp
800092be:	02 49       	mov %d9,%d4
  CONST(CoreIdType, AUTOMATIC)           curr_core_id = osEE_get_curr_core_id();
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)  p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)   p_kcb = p_kdb->p_kcb;
#endif /* !OSEE_SINGLECORE */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800092c0:	91 00 00 f8 	movh.a %a15,32768
800092c4:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800092c8:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800092cc:	8f f8 0f f1 	and %d15,%d8,255
800092d0:	8b 3f a1 f2 	ge.u %d15,%d15,19
800092d4:	ee 0a       	jnz %d15,800092e8 <StartOS+0x2c>
    OsEE_icr icr_temp = icr;
800092d6:	02 8f       	mov %d15,%d8
800092d8:	3b 30 01 20 	mov %d2,19
800092dc:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800092e0:	cd cf e2 0f 	mtcr $icr,%d15
800092e4:	0d 00 c0 04 	isync 
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
800092e8:	39 ff 10 00 	ld.bu %d15,[%a15]16
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
    ev = E_OS_ACCESS;
800092ec:	82 15       	mov %d5,1
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
800092ee:	ee 21       	jnz %d15,80009330 <StartOS+0x74>
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
800092f0:	6d 00 e6 05 	call 80009ebc <osEE_cpu_startos>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
      osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
      ev = E_OS_SYS_INIT;
800092f4:	3b 80 01 50 	mov %d5,24
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
800092f8:	df 02 1c 00 	jeq %d2,0,80009330 <StartOS+0x74>
800092fc:	3c 24       	j 80009344 <StartOS+0x88>
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
      p_ccb->os_status = OSEE_KERNEL_STARTED;
800092fe:	82 2f       	mov %d15,2
80009300:	e9 ff 10 00 	st.b [%a15]16,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */

    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);

#if (!defined(OSEE_STARTOS_RETURN)) && (!defined(OSEE_API_DYNAMIC))
    if (p_ccb->os_status == OSEE_KERNEL_STARTED) {
80009304:	39 ff 10 00 	ld.bu %d15,[%a15]16
80009308:	5e 2a       	jne %d15,2,8000931c <StartOS+0x60>
  osEE_idle_task_start
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_idle_tdb
)
{
  osEE_hal_save_ctx_and_ready2stacked(p_idle_tdb, p_idle_tdb->hdb.p_scb,
8000930a:	40 c4       	mov.aa %a4,%a12
8000930c:	99 c5 04 00 	ld.a %a5,[%a12]4
80009310:	40 56       	mov.aa %a6,%a5
80009312:	6d 00 3a 06 	call 80009f86 <osEE_hal_save_ctx_and_ready2stacked>
      osEE_idle_task_start(p_idle_tdb);
      osEE_task_end(p_idle_tdb);
80009316:	40 c4       	mov.aa %a4,%a12
80009318:	6d 00 8a 04 	call 80009c2c <osEE_task_end>
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
8000931c:	0d 00 40 03 	disable 
    }
#if (!defined(OSEE_SHUTDOWN_DO_NOT_RETURN_ON_MAIN))
    osEE_hal_disableIRQ();
    osEE_shutdown_os_extra();
    osEE_call_shutdown_hook(p_ccb, p_ccb->last_error);
    for(;;) {} /* Endless Loop */
80009320:	3c 00       	j 80009320 <StartOS+0x64>
80009322:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009326:	cd cf e2 0f 	mtcr $icr,%d15
8000932a:	0d 00 c0 04 	isync 
8000932e:	3c 1b       	j 80009364 <StartOS+0xa8>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009330:	4d c0 e2 4f 	mfcr %d4,$icr
80009334:	02 4f       	mov %d15,%d4
80009336:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000933a:	8f f8 0f 31 	and %d3,%d8,255
8000933e:	5f 34 f2 ff 	jne %d4,%d3,80009322 <StartOS+0x66>
80009342:	3c 11       	j 80009364 <StartOS+0xa8>
  }
#endif /* !OSEE_SINGLECORE */
  if (ev == E_OK) {
#if (!defined(OSEE_STARTOS_RETURN)) || (defined(OSEE_API_DYNAMIC))
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_idle_tdb = p_cdb->p_idle_task;
80009344:	91 00 00 28 	movh.a %a2,32768
80009348:	d9 22 10 30 	lea %a2,[%a2]208 <800000d0 <osEE_cdb_var>>
8000934c:	99 2c 04 00 	ld.a %a12,[%a2]4 <80000004 <BootModeHeader0+0x4>>
    /* Fill CCB */
    p_ccb->p_curr                   = p_idle_tdb;
#endif /* OSEE_API_DYNAMIC */

    /* GetActiveApplicationMode can be called inside StartupHook */
    p_ccb->os_status                = OSEE_KERNEL_STARTING;
80009350:	82 1f       	mov %d15,1
80009352:	e9 ff 10 00 	st.b [%a15]16,%d15
    p_ccb->app_mode                 = real_mode;
80009356:	e9 f9 11 00 	st.b [%a15]17,%d9
    }
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
8000935a:	39 ff 10 00 	ld.bu %d15,[%a15]16
8000935e:	df 1f d3 ff 	jne %d15,1,80009304 <StartOS+0x48>
80009362:	3c ce       	j 800092fe <StartOS+0x42>
    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);
    osEE_end_primitive(flags);
  }

  return ev;
}
80009364:	02 52       	mov %d2,%d5
80009366:	00 90       	ret 

80009368 <GetActiveApplicationMode>:
FUNC(AppModeType, OS_CODE)
  GetActiveApplicationMode
(
  void
)
{
80009368:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI */
    p_ccb = p_cdb->p_ccb;
8000936a:	91 00 00 f8 	movh.a %a15,32768
8000936e:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
80009372:	39 ff 10 00 	ld.bu %d15,[%a15]16 <800000d0 <osEE_cdb_var>>
    app_mode = p_ccb->app_mode;
  } else {
    app_mode = INVALID_APPMODE;
80009376:	3b f0 0f 20 	mov %d2,255

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
8000937a:	6e 03       	jz %d15,80009380 <GetActiveApplicationMode+0x18>
    app_mode = p_ccb->app_mode;
8000937c:	39 f2 11 00 	ld.bu %d2,[%a15]17
  }

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetActiveApplicationMode);

  return app_mode;
}
80009380:	00 90       	ret 

80009382 <ActivateTask>:
FUNC(StatusType, OS_CODE)
  ActivateTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
80009382:	40 ae       	mov.aa %a14,%sp
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
80009384:	91 00 00 f8 	movh.a %a15,32768
80009388:	d9 ff 3c 20 	lea %a15,[%a15]188 <800000bc <osEE_kdb_var>>
8000938c:	4c f2       	ld.w %d15,[%a15]8
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
8000938e:	82 38       	mov %d8,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009390:	7f f4 39 80 	jge.u %d4,%d15,80009402 <ActivateTask+0x80>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009394:	91 00 00 f8 	movh.a %a15,32768
80009398:	d9 ff 3c 20 	lea %a15,[%a15]188 <800000bc <osEE_kdb_var>>
8000939c:	c8 1f       	ld.a %a15,[%a15]4
8000939e:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
800093a2:	c8 0f       	ld.a %a15,[%a15]0

    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
800093a4:	39 ff 14 00 	ld.bu %d15,[%a15]20
800093a8:	ff 2f 2d 80 	jge.u %d15,2,80009402 <ActivateTask+0x80>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800093ac:	4d c0 e2 9f 	mfcr %d9,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800093b0:	8f f9 0f f1 	and %d15,%d9,255
800093b4:	8b 3f a1 f2 	ge.u %d15,%d15,19
800093b8:	ee 0a       	jnz %d15,800093cc <ActivateTask+0x4a>
    OsEE_icr icr_temp = icr;
800093ba:	02 9f       	mov %d15,%d9
800093bc:	3b 30 01 20 	mov %d2,19
800093c0:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800093c4:	cd cf e2 0f 	mtcr $icr,%d15
800093c8:	0d 00 c0 04 	isync 
      CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

      ev = osEE_task_activated(p_tdb_act);
800093cc:	40 f4       	mov.aa %a4,%a15
800093ce:	6d 00 23 04 	call 80009c14 <osEE_task_activated>
800093d2:	02 28       	mov %d8,%d2

      if (ev == E_OK) {
800093d4:	f6 28       	jnz %d2,800093e4 <ActivateTask+0x62>
        (void)osEE_scheduler_task_activated(p_kdb, p_tdb_act);
800093d6:	91 00 00 48 	movh.a %a4,32768
800093da:	d9 44 3c 20 	lea %a4,[%a4]188 <800000bc <osEE_kdb_var>>
800093de:	40 f5       	mov.aa %a5,%a15
800093e0:	6d 00 57 04 	call 80009c8e <osEE_scheduler_task_activated>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800093e4:	4d c0 e2 3f 	mfcr %d3,$icr
800093e8:	02 3f       	mov %d15,%d3
800093ea:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
800093ee:	8f f9 0f 21 	and %d2,%d9,255
800093f2:	5f 23 08 00 	jeq %d3,%d2,80009402 <ActivateTask+0x80>
800093f6:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800093fa:	cd cf e2 0f 	mtcr $icr,%d15
800093fe:	0d 00 c0 04 	isync 
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ActivateTask);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
80009402:	02 82       	mov %d2,%d8
80009404:	00 90       	ret 

80009406 <ChainTask>:
FUNC(StatusType, OS_CODE)
  ChainTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
80009406:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb = p_cdb->p_ccb;
80009408:	91 00 00 f8 	movh.a %a15,32768
8000940c:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
80009410:	48 03       	ld.w %d3,[%a15]0
80009412:	91 00 00 28 	movh.a %a2,32768
80009416:	d9 22 3c 20 	lea %a2,[%a2]188 <800000bc <osEE_kdb_var>>
8000941a:	4c 22       	ld.w %d15,[%a2]8
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
8000941c:	82 32       	mov %d2,3
  )
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
8000941e:	7f f4 5e 80 	jge.u %d4,%d15,800094da <ChainTask+0xd4>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009422:	91 00 00 28 	movh.a %a2,32768
80009426:	d9 22 3c 20 	lea %a2,[%a2]188 <800000bc <osEE_kdb_var>>
8000942a:	99 22 04 00 	ld.a %a2,[%a2]4 <80000004 <BootModeHeader0+0x4>>
8000942e:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80009432:	d4 2c       	ld.a %a12,[%a2]
      ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
    } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009434:	39 cf 14 00 	ld.bu %d15,[%a12]20
80009438:	ff 2f 51 80 	jge.u %d15,2,800094da <ChainTask+0xd4>
      VAR(OsEE_reg, AUTOMATIC)  flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
8000943c:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009440:	6e 09       	jz %d15,80009452 <ChainTask+0x4c>
        p_ccb->s_isr_all_cnt = 0U;
80009442:	82 0f       	mov %d15,0
80009444:	e9 ff 1c 00 	st.b [%a15]28,%d15
80009448:	4c f5       	ld.w %d15,[%a15]20
8000944a:	cd cf e2 0f 	mtcr $icr,%d15
8000944e:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
80009452:	39 ff 1e 00 	ld.bu %d15,[%a15]30
80009456:	6e 06       	jz %d15,80009462 <ChainTask+0x5c>
        p_ccb->d_isr_all_cnt = 0U;
80009458:	82 0f       	mov %d15,0
8000945a:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
8000945e:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009462:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009466:	8f f8 0f f1 	and %d15,%d8,255
8000946a:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000946e:	ee 0a       	jnz %d15,80009482 <ChainTask+0x7c>
    OsEE_icr icr_temp = icr;
80009470:	02 8f       	mov %d15,%d8
80009472:	3b 30 01 20 	mov %d2,19
80009476:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000947a:	cd cf e2 0f 	mtcr $icr,%d15
8000947e:	0d 00 c0 04 	isync 
      }
#endif /* !OSEE_HAS_SERVICE_PROTECTION */

      flags = osEE_begin_primitive();

      if (p_tdb_act == p_curr) {
80009482:	80 cf       	mov.d %d15,%a12
80009484:	7e 35       	jne %d15,%d3,8000948e <ChainTask+0x88>
        /* If the Task chain on it self, flag it. */
        p_tdb_act->p_tcb->status = OSEE_TASK_CHAINED;
80009486:	cc c3       	ld.a %a15,[%a12]12
80009488:	82 5f       	mov %d15,5
8000948a:	28 2f       	st.b [%a15]2,%d15
8000948c:	3c 15       	j 800094b6 <ChainTask+0xb0>
        ev = E_OK;
      } else {
        ev = osEE_task_activated(p_tdb_act);
8000948e:	40 c4       	mov.aa %a4,%a12
80009490:	6d 00 c2 03 	call 80009c14 <osEE_task_activated>
        if (ev == E_OK) {
80009494:	df 02 1a 80 	jne %d2,0,800094c8 <ChainTask+0xc2>
          (void)osEE_scheduler_task_insert(p_kdb, p_tdb_act);
80009498:	91 00 00 48 	movh.a %a4,32768
8000949c:	d9 44 3c 20 	lea %a4,[%a4]188 <800000bc <osEE_kdb_var>>
800094a0:	40 c5       	mov.aa %a5,%a12
800094a2:	6d 00 2a 04 	call 80009cf6 <osEE_scheduler_task_insert>
800094a6:	3c 08       	j 800094b6 <ChainTask+0xb0>
800094a8:	37 8f 08 f0 	insert %d15,%d15,%d8,0,8
800094ac:	cd cf e2 0f 	mtcr $icr,%d15
800094b0:	0d 00 c0 04 	isync 
800094b4:	00 90       	ret 
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
800094b6:	91 00 00 f8 	movh.a %a15,32768
800094ba:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
800094be:	c8 0f       	ld.a %a15,[%a15]0
800094c0:	c8 14       	ld.a %a4,[%a15]4
800094c2:	a0 05       	mov.a %a5,0
800094c4:	1d 00 98 05 	j 80009ff4 <osEE_hal_terminate_ctx>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800094c8:	4d c0 e2 3f 	mfcr %d3,$icr
800094cc:	02 3f       	mov %d15,%d3
800094ce:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
800094d2:	8f f8 0f 81 	and %d8,%d8,255
800094d6:	5f 83 e9 ff 	jne %d3,%d8,800094a8 <ChainTask+0xa2>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ChainTask);

  return ev;
}
800094da:	00 90       	ret 

800094dc <TerminateTask>:
FUNC(StatusType, OS_CODE)
  TerminateTask
(
  void
)
{
800094dc:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb       = p_cdb->p_ccb;
800094de:	91 00 00 f8 	movh.a %a15,32768
800094e2:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
800094e6:	c8 02       	ld.a %a2,[%a15]0
#endif /* OSEE_HAS_CHECKS elif (OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING) */
  {
    VAR(OsEE_reg, AUTOMATIC) flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
800094e8:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <800000d0 <osEE_cdb_var>>
800094ec:	6e 09       	jz %d15,800094fe <TerminateTask+0x22>
        p_ccb->s_isr_all_cnt = 0U;
800094ee:	82 0f       	mov %d15,0
800094f0:	e9 ff 1c 00 	st.b [%a15]28,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800094f4:	4c f5       	ld.w %d15,[%a15]20
800094f6:	cd cf e2 0f 	mtcr $icr,%d15
800094fa:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
800094fe:	39 ff 1e 00 	ld.bu %d15,[%a15]30
80009502:	6e 06       	jz %d15,8000950e <TerminateTask+0x32>
        p_ccb->d_isr_all_cnt = 0U;
80009504:	82 0f       	mov %d15,0
80009506:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
8000950a:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000950e:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009512:	8f ff 0f 21 	and %d2,%d15,255
80009516:	8b 32 a1 22 	ge.u %d2,%d2,19
8000951a:	f6 29       	jnz %d2,8000952c <TerminateTask+0x50>
8000951c:	3b 30 01 20 	mov %d2,19
80009520:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009524:	cd cf e2 0f 	mtcr $icr,%d15
80009528:	0d 00 c0 04 	isync 
8000952c:	99 24 04 00 	ld.a %a4,[%a2]4
80009530:	a0 05       	mov.a %a5,0
80009532:	1d 00 61 05 	j 80009ff4 <osEE_hal_terminate_ctx>

80009536 <Schedule>:
FUNC(StatusType, OS_CODE)
  Schedule
(
  void
)
{
80009536:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb  = p_cdb->p_ccb;
80009538:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_curr = p_ccb->p_curr;
8000953c:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
80009540:	c8 0f       	ld.a %a15,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb  = p_curr->p_tcb;
80009542:	c8 3c       	ld.a %a12,[%a15]12
    ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
  } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
  if (p_tcb->current_prio == p_curr->dispatch_prio)
80009544:	39 c2 01 00 	ld.bu %d2,[%a12]1 <800000d0 <osEE_cdb_var>>
80009548:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <800000d0 <osEE_cdb_var>>
8000954c:	5f f2 2d 80 	jne %d2,%d15,800095a6 <Schedule+0x70>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009550:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009554:	8f f8 0f f1 	and %d15,%d8,255
80009558:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000955c:	ee 0a       	jnz %d15,80009570 <Schedule+0x3a>
    OsEE_icr icr_temp = icr;
8000955e:	02 8f       	mov %d15,%d8
80009560:	3b 30 01 20 	mov %d2,19
80009564:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009568:	cd cf e2 0f 	mtcr $icr,%d15
8000956c:	0d 00 c0 04 	isync 
  {
    /* Begin primitive */
    CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

    /* Release internal resources */
    p_tcb->current_prio = p_curr->ready_prio;
80009570:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009574:	2c c1       	st.b [%a12]1,%d15
    /* Try preemption */
    (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
80009576:	91 00 00 48 	movh.a %a4,32768
8000957a:	d9 44 3c 20 	lea %a4,[%a4]188 <800000bc <osEE_kdb_var>>
8000957e:	6d 00 36 04 	call 80009dea <osEE_scheduler_task_preemption_point>
    /* Restore internal resources */
    p_tcb->current_prio = p_curr->dispatch_prio;
80009582:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80009586:	2c c1       	st.b [%a12]1,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009588:	4d c0 e2 3f 	mfcr %d3,$icr
8000958c:	02 3f       	mov %d15,%d3
8000958e:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009592:	8f f8 0f 21 	and %d2,%d8,255
80009596:	5f 23 08 00 	jeq %d3,%d2,800095a6 <Schedule+0x70>
8000959a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000959e:	cd cf e2 0f 	mtcr $icr,%d15
800095a2:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_Schedule);

  return ev;
}
800095a6:	82 02       	mov %d2,0
800095a8:	00 90       	ret 

800095aa <GetResource>:
FUNC(StatusType, OS_CODE)
  GetResource
(
  VAR(ResourceType, AUTOMATIC) ResID
)
{
800095aa:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
800095ac:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
800095b0:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
800095b4:	c8 04       	ld.a %a4,[%a15]0
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (res_id < p_kdb->p_kcb->free_res_index);
#else
  return (res_id < p_kdb->res_array_size);
800095b6:	91 00 00 f8 	movh.a %a15,32768
800095ba:	d9 ff 3c 20 	lea %a15,[%a15]188 <800000bc <osEE_kdb_var>>
800095be:	4c f4       	ld.w %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
800095c0:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
800095c2:	7f f4 4c 80 	jge.u %d4,%d15,8000965a <GetResource+0xb0>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, OS_APPL_CONST)
      p_reso_db     = (*p_kdb->p_res_ptr_array)[ResID];
800095c6:	91 00 00 f8 	movh.a %a15,32768
800095ca:	d9 ff 3c 20 	lea %a15,[%a15]188 <800000bc <osEE_kdb_var>>
800095ce:	c8 3f       	ld.a %a15,[%a15]12
800095d0:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
800095d4:	c8 03       	ld.a %a3,[%a15]0
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, OS_APPL_DATA)
      p_reso_cb     = p_reso_db->p_cb;
800095d6:	d4 32       	ld.a %a2,[%a3]
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_curr_tcb    = p_curr->p_tcb;
800095d8:	cc 43       	ld.a %a15,[%a4]12
    CONST(TaskPrio, AUTOMATIC)
      reso_prio     = p_reso_db->prio;
800095da:	0c 34       	ld.bu %d15,[%a3]4
    CONST(TaskPrio, AUTOMATIC)
      current_prio  = p_curr_tcb->current_prio;
800095dc:	08 14       	ld.bu %d4,[%a15]1
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800095de:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800095e2:	8f f2 0f 31 	and %d3,%d2,255
800095e6:	8b 33 a1 32 	ge.u %d3,%d3,19
800095ea:	f6 3a       	jnz %d3,800095fe <GetResource+0x54>
    OsEE_icr icr_temp = icr;
800095ec:	02 23       	mov %d3,%d2
800095ee:	3b 30 01 50 	mov %d5,19
800095f2:	37 53 08 30 	insert %d3,%d3,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800095f6:	cd c3 e2 0f 	mtcr $icr,%d3
800095fa:	0d 00 c0 04 	isync 
    /* Set new CCPN value */
    icr_temp.bits.ccpn = OSEE_ISR2_MAX_HW_PRIO;
    osEE_tc_set_icr(icr_temp);
  }

  return icr.reg;
800095fe:	02 23       	mov %d3,%d2
      ev = E_OS_CORE;
    } else
#endif /* !OSEE_SINGLECORE */
#endif /* OSEE_HAS_CHECKS */
    {
      if (current_prio < reso_prio) {
80009600:	7f f4 16 80 	jge.u %d4,%d15,8000962c <GetResource+0x82>
        p_curr_tcb->current_prio = reso_prio;
80009604:	28 1f       	st.b [%a15]1,%d15

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009606:	37 0f 48 50 	extr %d5,%d15,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
8000960a:	8b ff 2f 72 	ne %d7,%d15,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
8000960e:	16 7f       	and %d15,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
80009610:	c2 1f       	add %d15,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
80009612:	8f 02 d0 61 	andn %d6,%d2,256
80009616:	8f f2 cf 31 	andn %d3,%d2,255
8000961a:	a6 f3       	or %d3,%d15
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
8000961c:	8f f2 cf 21 	andn %d2,%d2,255
80009620:	2b 63 40 37 	sel %d3,%d7,%d3,%d6
80009624:	8b 05 40 52 	lt %d5,%d5,0
80009628:	2b 23 40 35 	sel %d3,%d5,%d3,%d2
        flags = osEE_hal_prepare_ipl(flags, reso_prio);
      }

      p_reso_cb->p_owner    = p_curr;
8000962c:	b5 24 08 00 	st.a [%a2]8,%a4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009630:	4d c0 e2 5f 	mfcr %d5,$icr
80009634:	02 5f       	mov %d15,%d5
80009636:	8f f5 0f 51 	and %d5,%d5,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000963a:	8f f3 0f 21 	and %d2,%d3,255
8000963e:	5f 25 08 00 	jeq %d5,%d2,8000964e <GetResource+0xa4>
80009642:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009646:	cd cf e2 0f 	mtcr $icr,%d15
8000964a:	0d 00 c0 04 	isync 

      osEE_end_primitive(flags);

      p_reso_cb->p_next     = p_curr_tcb->p_last_m;
8000964e:	4c f1       	ld.w %d15,[%a15]4
80009650:	6c 20       	st.w [%a2]0,%d15
      p_reso_cb->prev_prio  = current_prio;
80009652:	e9 24 04 00 	st.b [%a2]4,%d4
      p_curr_tcb->p_last_m  = p_reso_db;
80009656:	e8 13       	st.a [%a15]4,%a3

      ev = E_OK;
80009658:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetResource);

  return ev;
}
8000965a:	00 90       	ret 

8000965c <ReleaseResource>:
FUNC(StatusType, OS_CODE)
  ReleaseResource
(
  VAR(ResourceType, AUTOMATIC) ResID
)
{
8000965c:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000965e:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_curr = p_ccb->p_curr;
80009662:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
80009666:	c8 03       	ld.a %a3,[%a15]0
80009668:	91 00 00 f8 	movh.a %a15,32768
8000966c:	d9 ff 3c 20 	lea %a15,[%a15]188 <800000bc <osEE_kdb_var>>
80009670:	4c f4       	ld.w %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
80009672:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
80009674:	7f f4 69 80 	jge.u %d4,%d15,80009746 <ReleaseResource+0xea>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, TYPEDEF)
      p_curr_tcb  = p_curr->p_tcb;
80009678:	cc 33       	ld.a %a15,[%a3]12
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, TYPEDEF)
      p_reso_db   = (*p_kdb->p_res_ptr_array)[ResID];
8000967a:	91 00 00 28 	movh.a %a2,32768
8000967e:	d9 22 3c 20 	lea %a2,[%a2]188 <800000bc <osEE_kdb_var>>
80009682:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
80009686:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, TYPEDEF)
      p_reso_cb   = p_reso_db->p_cb;
8000968a:	d4 22       	ld.a %a2,[%a2]
8000968c:	d4 22       	ld.a %a2,[%a2]
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000968e:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009692:	8f ff 0f 21 	and %d2,%d15,255
80009696:	8b 32 a1 22 	ge.u %d2,%d2,19
8000969a:	f6 2a       	jnz %d2,800096ae <ReleaseResource+0x52>
    OsEE_icr icr_temp = icr;
8000969c:	02 f2       	mov %d2,%d15
8000969e:	3b 30 01 30 	mov %d3,19
800096a2:	37 32 08 20 	insert %d2,%d2,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800096a6:	cd c2 e2 0f 	mtcr $icr,%d2
800096aa:	0d 00 c0 04 	isync 
    {
      VAR(OsEE_reg, AUTOMATIC)
        flags = osEE_begin_primitive();

      /* Pop the Resources head */
      p_curr_tcb->p_last_m = p_curr_tcb->p_last_m->p_cb->p_next;
800096ae:	c8 14       	ld.a %a4,[%a15]4
800096b0:	d4 44       	ld.a %a4,[%a4]
800096b2:	54 42       	ld.w %d2,[%a4]
800096b4:	68 12       	st.w [%a15]4,%d2

      if (p_curr_tcb->p_last_m != NULL) {
800096b6:	df 02 1a 00 	jeq %d2,0,800096ea <ReleaseResource+0x8e>
        CONST(TaskPrio, AUTOMATIC)
          prev_prio = p_reso_cb->prev_prio;
800096ba:	39 23 04 00 	ld.bu %d3,[%a2]4

        p_curr_tcb->current_prio = prev_prio;
800096be:	28 13       	st.b [%a15]1,%d3

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
800096c0:	37 03 48 40 	extr %d4,%d3,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
800096c4:	8b f3 2f 62 	ne %d6,%d3,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
800096c8:	8f f3 07 31 	and %d3,%d3,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
800096cc:	c2 13       	add %d3,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
800096ce:	8f 0f d0 51 	andn %d5,%d15,256
800096d2:	8f ff cf 21 	andn %d2,%d15,255
800096d6:	a6 32       	or %d2,%d3
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
800096d8:	8f ff cf f1 	andn %d15,%d15,255
800096dc:	2b 52 40 26 	sel %d2,%d6,%d2,%d5
800096e0:	8b 04 40 42 	lt %d4,%d4,0
800096e4:	2b f2 40 f4 	sel %d15,%d4,%d2,%d15
800096e8:	3c 17       	j 80009716 <ReleaseResource+0xba>
        flags = osEE_hal_prepare_ipl(flags, prev_prio);
      } else {
        CONST(TaskPrio, AUTOMATIC)
          dispatch_prio = p_curr->dispatch_prio;
800096ea:	39 35 1d 00 	ld.bu %d5,[%a3]29

        p_curr_tcb->current_prio = dispatch_prio;
800096ee:	28 15       	st.b [%a15]1,%d5

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
800096f0:	37 05 48 60 	extr %d6,%d5,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
800096f4:	8b f5 2f 42 	ne %d4,%d5,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
800096f8:	8f f5 07 51 	and %d5,%d5,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
800096fc:	c2 15       	add %d5,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
800096fe:	8f 0f d0 21 	andn %d2,%d15,256
80009702:	8f ff cf 31 	andn %d3,%d15,255
80009706:	a6 53       	or %d3,%d5
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009708:	8f ff cf 51 	andn %d5,%d15,255
8000970c:	2b 23 40 34 	sel %d3,%d4,%d3,%d2
80009710:	fa 06       	lt %d15,%d6,0
80009712:	2b 53 40 ff 	sel %d15,%d15,%d3,%d5
        flags = osEE_hal_prepare_ipl(flags, dispatch_prio);
      }

      p_reso_cb->p_owner = NULL;
80009716:	82 02       	mov %d2,0
80009718:	59 22 08 00 	st.w [%a2]8,%d2

      /* Preemption point */
      (void)osEE_scheduler_task_preemption_point(p_kdb);
8000971c:	91 00 00 48 	movh.a %a4,32768
80009720:	d9 44 3c 20 	lea %a4,[%a4]188 <800000bc <osEE_kdb_var>>
80009724:	6d 00 63 03 	call 80009dea <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009728:	4d c0 e2 5f 	mfcr %d5,$icr
8000972c:	02 53       	mov %d3,%d5
8000972e:	8f f5 0f 51 	and %d5,%d5,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009732:	16 ff       	and %d15,255
80009734:	5f f5 08 00 	jeq %d5,%d15,80009744 <ReleaseResource+0xe8>
80009738:	37 f3 08 30 	insert %d3,%d3,%d15,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000973c:	cd c3 e2 0f 	mtcr $icr,%d3
80009740:	0d 00 c0 04 	isync 

      osEE_end_primitive(flags);

      ev = E_OK;
80009744:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ReleaseResource);

  return ev;
}
80009746:	00 90       	ret 

80009748 <ShutdownOS>:
FUNC(StatusType, OS_CODE)
  ShutdownOS
(
  VAR(StatusType, AUTOMATIC) Error
)
{
80009748:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000974a:	91 00 00 f8 	movh.a %a15,32768
8000974e:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009752:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009756:	8f f2 0f f1 	and %d15,%d2,255
8000975a:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000975e:	ee 0a       	jnz %d15,80009772 <ShutdownOS+0x2a>
    OsEE_icr icr_temp = icr;
80009760:	02 2f       	mov %d15,%d2
80009762:	3b 30 01 30 	mov %d3,19
80009766:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000976a:	cd cf e2 0f 	mtcr $icr,%d15
8000976e:	0d 00 c0 04 	isync 
  CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009772:	39 ff 10 00 	ld.bu %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  {
    if ((os_status == OSEE_KERNEL_STARTED) ||
80009776:	c2 ff       	add %d15,-1
80009778:	16 ff       	and %d15,255
8000977a:	ff 2f 08 80 	jge.u %d15,2,8000978a <ShutdownOS+0x42>
        (os_status == OSEE_KERNEL_STARTING))
    {
      osEE_shutdown_os(p_cdb, Error);
8000977e:	91 00 00 48 	movh.a %a4,32768
80009782:	d9 44 10 30 	lea %a4,[%a4]208 <800000d0 <osEE_cdb_var>>
80009786:	1d ff f3 fc 	j 8000916c <osEE_shutdown_os>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000978a:	4d c0 e2 3f 	mfcr %d3,$icr
8000978e:	02 3f       	mov %d15,%d3
80009790:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009794:	8f f2 0f 21 	and %d2,%d2,255
80009798:	5f 23 08 00 	jeq %d3,%d2,800097a8 <ShutdownOS+0x60>
8000979c:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800097a0:	cd cf e2 0f 	mtcr $icr,%d15
800097a4:	0d 00 c0 04 	isync 

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ShutdownOS);
  osEE_end_primitive(flags);

  return ev;
}
800097a8:	82 72       	mov %d2,7
800097aa:	00 90       	ret 

800097ac <GetTaskID>:
FUNC(StatusType, OS_CODE)
  GetTaskID
(
  VAR(TaskRefType, AUTOMATIC) TaskID
)
{
800097ac:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
800097ae:	91 00 00 f8 	movh.a %a15,32768
800097b2:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
800097b6:	3b e0 00 20 	mov %d2,14
  /* [OS566]: The Operating System API shall check in extended mode all pointer
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
800097ba:	bd 04 24 00 	jz.a %a4,80009802 <GetTaskID+0x56>
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
      p_tdb = p_ccb->p_curr;
800097be:	c8 02       	ld.a %a2,[%a15]0
       value to return. If it its ISR2 we have to follow the chain and
       find the first task in the list (which is the running task
       which was preempted by the ISR, which could be the idle task),
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
800097c0:	39 2f 14 00 	ld.bu %d15,[%a2]20
800097c4:	ff 2f 05 80 	jge.u %d15,2,800097ce <GetTaskID+0x22>
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
800097c8:	19 22 10 00 	ld.w %d2,[%a2]16
800097cc:	3c 19       	j 800097fe <GetTaskID+0x52>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
800097ce:	82 f2       	mov %d2,-1
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
    } else if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
800097d0:	de 27       	jne %d15,2,800097fe <GetTaskID+0x52>
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;
800097d2:	c8 3f       	ld.a %a15,[%a15]12
800097d4:	c8 0f       	ld.a %a15,[%a15]0

      while (p_sn != NULL) {
800097d6:	bd 0f 14 00 	jz.a %a15,800097fe <GetTaskID+0x52>
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
800097da:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
800097dc:	39 2f 14 00 	ld.bu %d15,[%a2]20
800097e0:	ff 2f 0b 80 	jge.u %d15,2,800097f6 <GetTaskID+0x4a>
800097e4:	3c 06       	j 800097f0 <GetTaskID+0x44>
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
800097e6:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
800097e8:	39 2f 14 00 	ld.bu %d15,[%a2]20
800097ec:	ff 2f 05 80 	jge.u %d15,2,800097f6 <GetTaskID+0x4a>
          tid = p_searched_tdb->tid;
800097f0:	19 22 10 00 	ld.w %d2,[%a2]16
          break;
800097f4:	3c 05       	j 800097fe <GetTaskID+0x52>
        } else {
          p_sn = p_sn->p_next;
800097f6:	c8 0f       	ld.a %a15,[%a15]0
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
800097f8:	bd 0f f7 ff 	jnz.a %a15,800097e6 <GetTaskID+0x3a>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
800097fc:	82 f2       	mov %d2,-1
    } else {
      /* This is the case of the IDLE task. we do nothing because tid
         is already initialized */
    }
    /* XXX: This SHALL be atomic. */
    (*TaskID) = tid;
800097fe:	74 42       	st.w [%a4],%d2
    ev = E_OK;
80009800:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskID);

  return ev;
}
80009802:	00 90       	ret 

80009804 <GetTaskState>:
  GetTaskState
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(TaskStateRefType, AUTOMATIC)  State
)
{
80009804:	40 ae       	mov.aa %a14,%sp
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
80009806:	3b e0 00 20 	mov %d2,14
  /* [SWS_Os_00566]: The Operating System API shall check in extended mode all
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
8000980a:	bd 04 38 00 	jz.a %a4,8000987a <GetTaskState+0x76>
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
8000980e:	91 00 00 f8 	movh.a %a15,32768
80009812:	d9 ff 3c 20 	lea %a15,[%a15]188 <800000bc <osEE_kdb_var>>
80009816:	4c f2       	ld.w %d15,[%a15]8
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009818:	82 32       	mov %d2,3
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
8000981a:	7f f4 30 80 	jge.u %d4,%d15,8000987a <GetTaskState+0x76>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000981e:	91 00 00 f8 	movh.a %a15,32768
80009822:	d9 ff 3c 20 	lea %a15,[%a15]188 <800000bc <osEE_kdb_var>>
80009826:	c8 1f       	ld.a %a15,[%a15]4
80009828:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
8000982c:	c8 0f       	ld.a %a15,[%a15]0
8000982e:	c8 3f       	ld.a %a15,[%a15]12
    switch (local_state) {
80009830:	0c f2       	ld.bu %d15,[%a15]2
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009832:	82 02       	mov %d2,0
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
80009834:	ff 6f 23 80 	jge.u %d15,6,8000987a <GetTaskState+0x76>
80009838:	91 10 00 f8 	movh.a %a15,32769
8000983c:	d9 ff 84 19 	lea %a15,[%a15]-26556 <80009844 <GetTaskState+0x40>>
80009840:	90 ff       	addsc.a %a15,%a15,%d15,2
80009842:	dc 0f       	ji %a15
80009844:	1d 00 0c 00 	j 8000985c <GetTaskState+0x58>
80009848:	1d 00 0e 00 	j 80009864 <GetTaskState+0x60>
8000984c:	1d 00 0c 00 	j 80009864 <GetTaskState+0x60>
80009850:	1d 00 0e 00 	j 8000986c <GetTaskState+0x68>
80009854:	1d 00 10 00 	j 80009874 <GetTaskState+0x70>
80009858:	1d 00 0e 00 	j 80009874 <GetTaskState+0x70>
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
8000985c:	82 0f       	mov %d15,0
8000985e:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009860:	82 02       	mov %d2,0
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
        break;
80009862:	00 90       	ret 
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
80009864:	82 1f       	mov %d15,1
80009866:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009868:	82 02       	mov %d2,0
        (*State) = SUSPENDED;
        break;
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
8000986a:	00 90       	ret 
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
8000986c:	82 3f       	mov %d15,3
8000986e:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009870:	82 02       	mov %d2,0
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
        break;
80009872:	00 90       	ret 
      case OSEE_TASK_RUNNING:
      case OSEE_TASK_CHAINED:
        (*State) = RUNNING;
80009874:	82 4f       	mov %d15,4
80009876:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009878:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskState);

  return ev;
}
8000987a:	00 90       	ret 

8000987c <WaitEvent>:
FUNC(StatusType, OS_CODE)
  WaitEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
8000987c:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb       = p_cdb->p_ccb;
8000987e:	91 00 00 f8 	movh.a %a15,32768
80009882:	99 fc 10 30 	ld.a %a12,[%a15]208 <800000d0 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009886:	d4 cd       	ld.a %a13,[%a12]
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
80009888:	cc d3       	ld.a %a15,[%a13]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000988a:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000988e:	8f f8 0f f1 	and %d15,%d8,255
80009892:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009896:	ee 0a       	jnz %d15,800098aa <WaitEvent+0x2e>
    OsEE_icr icr_temp = icr;
80009898:	02 8f       	mov %d15,%d8
8000989a:	3b 30 01 20 	mov %d2,19
8000989e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800098a2:	cd cf e2 0f 	mtcr $icr,%d15
800098a6:	0d 00 c0 04 	isync 
    /* Start Critical Section */
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);

    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
800098aa:	4c f3       	ld.w %d15,[%a15]12
800098ac:	26 4f       	and %d15,%d4
800098ae:	ee 13       	jnz %d15,800098d4 <WaitEvent+0x58>
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;
800098b0:	68 24       	st.w [%a15]8,%d4

      p_curr_tcb->p_own_sn =
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
800098b2:	91 00 00 48 	movh.a %a4,32768
800098b6:	d9 44 10 30 	lea %a4,[%a4]208 <800000d0 <osEE_cdb_var>>
800098ba:	d9 c5 04 00 	lea %a5,[%a12]4 <800000d0 <osEE_cdb_var>>
800098be:	6d 00 98 01 	call 80009bee <osEE_scheduler_core_pop_running>
    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;

      p_curr_tcb->p_own_sn =
800098c2:	e8 42       	st.a [%a15]16,%a2
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);

      p_curr_tcb->status = OSEE_TASK_WAITING;
800098c4:	82 3f       	mov %d15,3
800098c6:	28 2f       	st.b [%a15]2,%d15

      osEE_unlock_core(p_cdb);

      osEE_change_context_from_running(p_curr, p_ccb->p_curr);
800098c8:	40 d4       	mov.aa %a4,%a13
800098ca:	d4 c5       	ld.a %a5,[%a12]
800098cc:	6d 00 c1 02 	call 80009e4e <osEE_change_context_from_running>

      /* Reset the waiting mask when we exit from the wait condition. */
      p_curr_tcb->wait_mask = 0U;
800098d0:	82 0f       	mov %d15,0
800098d2:	68 2f       	st.w [%a15]8,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800098d4:	4d c0 e2 3f 	mfcr %d3,$icr
800098d8:	02 3f       	mov %d15,%d3
800098da:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
800098de:	8f f8 0f 21 	and %d2,%d8,255
800098e2:	5f 23 08 00 	jeq %d3,%d2,800098f2 <WaitEvent+0x76>
800098e6:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800098ea:	cd cf e2 0f 	mtcr $icr,%d15
800098ee:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
}
800098f2:	82 02       	mov %d2,0
800098f4:	00 90       	ret 

800098f6 <SetEvent>:
  SetEvent
(
  VAR(TaskType,      AUTOMATIC) TaskID,
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
800098f6:	40 ae       	mov.aa %a14,%sp
800098f8:	20 08       	sub.a %sp,8
800098fa:	91 00 00 f8 	movh.a %a15,32768
800098fe:	d9 ff 3c 20 	lea %a15,[%a15]188 <800000bc <osEE_kdb_var>>
80009902:	4c f2       	ld.w %d15,[%a15]8
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009904:	3f f4 06 80 	jlt.u %d4,%d15,80009910 <SetEvent+0x1a>
    ev = E_OS_ID;
80009908:	82 3f       	mov %d15,3
8000990a:	e9 ef ff ff 	st.b [%a14]-1,%d15
8000990e:	3c 3c       	j 80009986 <SetEvent+0x90>
  } else {
    P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_sn;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_waking_up = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009910:	91 00 00 f8 	movh.a %a15,32768
80009914:	d9 ff 3c 20 	lea %a15,[%a15]188 <800000bc <osEE_kdb_var>>
80009918:	c8 1f       	ld.a %a15,[%a15]4
8000991a:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000991e:	c8 04       	ld.a %a4,[%a15]0
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009920:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009924:	8f f8 0f f1 	and %d15,%d8,255
80009928:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000992c:	ee 0a       	jnz %d15,80009940 <SetEvent+0x4a>
    OsEE_icr icr_temp = icr;
8000992e:	02 8f       	mov %d15,%d8
80009930:	3b 30 01 20 	mov %d2,19
80009934:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009938:	cd cf e2 0f 	mtcr $icr,%d15
8000993c:	0d 00 c0 04 	isync 
80009940:	02 54       	mov %d4,%d5
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();

    p_sn = osEE_task_event_set_mask(p_tdb_waking_up, Mask, &ev);
80009942:	d9 e5 ff ff 	lea %a5,[%a14]-1
80009946:	6d 00 82 01 	call 80009c4a <osEE_task_event_set_mask>

    if (p_sn != NULL) {
8000994a:	bc 2f       	jz.a %a2,80009968 <SetEvent+0x72>
      /* Release the TASK (and the SN) */
      if (osEE_scheduler_task_unblocked(p_kdb, p_sn))
8000994c:	91 00 00 48 	movh.a %a4,32768
80009950:	d9 44 3c 20 	lea %a4,[%a4]188 <800000bc <osEE_kdb_var>>
80009954:	40 25       	mov.aa %a5,%a2
80009956:	6d 00 e7 01 	call 80009d24 <osEE_scheduler_task_unblocked>
8000995a:	76 27       	jz %d2,80009968 <SetEvent+0x72>
      {
        (void)osEE_scheduler_task_preemption_point(p_kdb);
8000995c:	91 00 00 48 	movh.a %a4,32768
80009960:	d9 44 3c 20 	lea %a4,[%a4]188 <800000bc <osEE_kdb_var>>
80009964:	6d 00 43 02 	call 80009dea <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009968:	4d c0 e2 3f 	mfcr %d3,$icr
8000996c:	02 3f       	mov %d15,%d3
8000996e:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009972:	8f f8 0f 21 	and %d2,%d8,255
80009976:	5f 23 08 00 	jeq %d3,%d2,80009986 <SetEvent+0x90>
8000997a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000997e:	cd cf e2 0f 	mtcr $icr,%d15
80009982:	0d 00 c0 04 	isync 
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
80009986:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
8000998a:	00 90       	ret 

8000998c <GetEvent>:
  GetEvent
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(EventMaskRefType, AUTOMATIC)  Event
)
{
8000998c:	40 ae       	mov.aa %a14,%sp
8000998e:	91 00 00 f8 	movh.a %a15,32768
80009992:	d9 ff 3c 20 	lea %a15,[%a15]188 <800000bc <osEE_kdb_var>>
80009996:	4c f2       	ld.w %d15,[%a15]8
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009998:	82 32       	mov %d2,3
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
8000999a:	7f f4 11 80 	jge.u %d4,%d15,800099bc <GetEvent+0x30>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000999e:	91 00 00 f8 	movh.a %a15,32768
800099a2:	d9 ff 3c 20 	lea %a15,[%a15]188 <800000bc <osEE_kdb_var>>
800099a6:	c8 1f       	ld.a %a15,[%a15]4
800099a8:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
800099ac:	c8 0f       	ld.a %a15,[%a15]0
800099ae:	c8 3f       	ld.a %a15,[%a15]12
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
      ev = E_OS_PARAM_POINTER;
800099b0:	3b e0 00 20 	mov %d2,14
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
800099b4:	bc 44       	jz.a %a4,800099bc <GetEvent+0x30>
      ev = E_OS_PARAM_POINTER;
    } else
    {
      /* N.B. XXX This MUST Be ATOMIC! */
      (*Event) = p_tcb_event->event_mask;
800099b6:	4c f3       	ld.w %d15,[%a15]12
800099b8:	6c 40       	st.w [%a4]0,%d15

      ev = E_OK;
800099ba:	82 02       	mov %d2,0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
800099bc:	00 90       	ret 

800099be <ClearEvent>:
FUNC(StatusType, OS_CODE)
  ClearEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
800099be:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb       = p_cdb->p_ccb;
800099c0:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
800099c4:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
800099c8:	c8 0f       	ld.a %a15,[%a15]0
800099ca:	c8 3f       	ld.a %a15,[%a15]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800099cc:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800099d0:	8f f2 0f f1 	and %d15,%d2,255
800099d4:	8b 3f a1 f2 	ge.u %d15,%d15,19
800099d8:	ee 0a       	jnz %d15,800099ec <ClearEvent+0x2e>
    OsEE_icr icr_temp = icr;
800099da:	02 2f       	mov %d15,%d2
800099dc:	3b 30 01 30 	mov %d3,19
800099e0:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800099e4:	cd cf e2 0f 	mtcr $icr,%d15
800099e8:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);
    /* XXX: Maybe we need to introduce an HAL for atomic Load-Modify-Store
            Operations */
    p_curr_tcb->event_mask &= ~Mask;
800099ec:	4c f3       	ld.w %d15,[%a15]12
800099ee:	0f 4f e0 40 	andn %d4,%d15,%d4
800099f2:	68 34       	st.w [%a15]12,%d4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800099f4:	4d c0 e2 3f 	mfcr %d3,$icr
800099f8:	02 3f       	mov %d15,%d3
800099fa:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
800099fe:	8f f2 0f 21 	and %d2,%d2,255
80009a02:	5f 23 08 00 	jeq %d3,%d2,80009a12 <ClearEvent+0x54>
80009a06:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009a0a:	cd cf e2 0f 	mtcr $icr,%d15
80009a0e:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
80009a12:	82 02       	mov %d2,0
80009a14:	00 90       	ret 

80009a16 <GetISRID>:
FUNC(ISRType, OS_CODE)
  GetISRID
(
  void
)
{
80009a16:	40 ae       	mov.aa %a14,%sp
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
80009a18:	91 00 00 f8 	movh.a %a15,32768
80009a1c:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
80009a20:	c8 0f       	ld.a %a15,[%a15]0
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
80009a22:	39 ff 14 00 	ld.bu %d15,[%a15]20 <800000d0 <osEE_cdb_var>>
    isr_id = p_tdb->tid;
  } else {
    isr_id = INVALID_ISR;
80009a26:	82 f2       	mov %d2,-1
{
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
80009a28:	5e 22       	jne %d15,2,80009a2c <GetISRID+0x16>
    isr_id = p_tdb->tid;
80009a2a:	48 42       	ld.w %d2,[%a15]16
  } else {
    isr_id = INVALID_ISR;
  }

  return isr_id;
}
80009a2c:	00 90       	ret 
	...

80009a30 <osEE_release_all_m>:
static FUNC_P2VAR(OsEE_MDB, OS_APPL_CONST, OS_CODE)
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
80009a30:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
80009a32:	99 43 0c 00 	ld.a %a3,[%a4]12

  while ((p_tcb->p_last_m != NULL)
80009a36:	cc 31       	ld.a %a15,[%a3]4
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
80009a38:	a0 02       	mov.a %a2,0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
80009a3a:	bc fb       	jz.a %a15,80009a50 <osEE_release_all_m+0x20>
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
80009a3c:	82 0f       	mov %d15,0
    && (p_tcb->p_last_m->p_cb->p_owner == p_tdb)
#endif /* OSEE_HAS_SPINLOCKS */
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
80009a3e:	c8 0f       	ld.a %a15,[%a15]0
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
80009a40:	68 2f       	st.w [%a15]8,%d15
    /* Save the first M not realesed */
    if (p_mdb == NULL) {
80009a42:	7c 23       	jnz.a %a2,80009a48 <osEE_release_all_m+0x18>
      p_mdb = p_tcb->p_last_m;
80009a44:	99 32 04 00 	ld.a %a2,[%a3]4
      osEE_hal_spin_unlock(p_tcb->p_last_m->p_spinlock_arch);
    }
#endif /* OSEE_HAS_SPINLOCKS */

    /* Pop the M head */
    p_tcb->p_last_m = p_last_m_cb->p_next;
80009a48:	c8 0f       	ld.a %a15,[%a15]0
80009a4a:	ec 31       	st.a [%a3]4,%a15
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
80009a4c:	bd 0f f9 ff 	jnz.a %a15,80009a3e <osEE_release_all_m+0xe>
    p_tcb->p_last_m = NULL;
  }
#endif /* OSEE_HAS_SPINLOCKS */

  return p_mdb;
}
80009a50:	00 90       	ret 

80009a52 <osEE_scheduler_task_wrapper_restore>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_restore
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
80009a52:	40 ae       	mov.aa %a14,%sp
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
80009a54:	cc 43       	ld.a %a15,[%a4]12
80009a56:	82 4f       	mov %d15,4
80009a58:	28 2f       	st.b [%a15]2,%d15
80009a5a:	00 90       	ret 

80009a5c <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
80009a5c:	40 ae       	mov.aa %a14,%sp
80009a5e:	40 4f       	mov.aa %a15,%a4
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
80009a60:	99 42 0c 00 	ld.a %a2,[%a4]12
80009a64:	39 22 01 00 	ld.bu %d2,[%a2]1
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
80009a68:	82 4f       	mov %d15,4
80009a6a:	2c 22       	st.b [%a2]2,%d15
)
{
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_priority < OSEE_ISR_ALL_PRIO) {
80009a6c:	8b f2 0f f2 	eq %d15,%d2,255
80009a70:	ee 13       	jnz %d15,80009a96 <osEE_scheduler_task_wrapper_run+0x3a>
80009a72:	4d c0 e2 ff 	mfcr %d15,$icr

/* We always use virtual priorities */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_set_ipl(TaskPrio virt_prio)
{
  OsEE_icr icr  = osEE_tc_get_icr();
  icr.bits.ccpn = (virt_prio < OSEE_ISR2_PRIO_BIT)?
80009a76:	37 02 48 40 	extr %d4,%d2,0,8
80009a7a:	82 03       	mov %d3,0
80009a7c:	ce 45       	jgez %d4,80009a86 <osEE_scheduler_task_wrapper_run+0x2a>
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
80009a7e:	8f f2 07 21 	and %d2,%d2,127
80009a82:	1b 12 00 30 	addi %d3,%d2,1
80009a86:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009a8a:	cd cf e2 0f 	mtcr $icr,%d15
80009a8e:	0d 00 c0 04 	isync 
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009a92:	0d 00 00 03 	enable 
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_priority);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
80009a96:	c8 62       	ld.a %a2,[%a15]24
80009a98:	2d 02 00 00 	calli %a2
)
{
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
80009a9c:	91 00 00 28 	movh.a %a2,32768
80009aa0:	99 22 10 30 	ld.a %a2,[%a2]208 <800000d0 <osEE_cdb_var>>

  /* Reset ISR Counters */
/* [SWS_Os_00239] If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and interrupts are still disabled,
    the Operating System module shall enable them. */
  p_ccb->s_isr_os_cnt  = 0U;
80009aa4:	82 0f       	mov %d15,0
80009aa6:	e9 2f 1d 00 	st.b [%a2]29,%d15
  /* I won't re-enable OS Interrupts since I'm going to enter rescheduling
     critical section */
  if (p_ccb->s_isr_all_cnt > 0U) {
80009aaa:	39 2f 1c 00 	ld.bu %d15,[%a2]28
80009aae:	6e 09       	jz %d15,80009ac0 <osEE_scheduler_task_wrapper_run+0x64>
    p_ccb->s_isr_all_cnt = 0U;
80009ab0:	82 0f       	mov %d15,0
80009ab2:	e9 2f 1c 00 	st.b [%a2]28,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009ab6:	4c 25       	ld.w %d15,[%a2]20
80009ab8:	cd cf e2 0f 	mtcr $icr,%d15
80009abc:	0d 00 c0 04 	isync 
    osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
  }
  if (p_ccb->d_isr_all_cnt > 0U) {
80009ac0:	39 2f 1e 00 	ld.bu %d15,[%a2]30
80009ac4:	6e 06       	jz %d15,80009ad0 <osEE_scheduler_task_wrapper_run+0x74>
    p_ccb->d_isr_all_cnt = 0U;
80009ac6:	82 0f       	mov %d15,0
80009ac8:	e9 2f 1e 00 	st.b [%a2]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009acc:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009ad0:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009ad4:	8f ff 0f 21 	and %d2,%d15,255
80009ad8:	8b 32 a1 22 	ge.u %d2,%d2,19
80009adc:	f6 29       	jnz %d2,80009aee <osEE_scheduler_task_wrapper_run+0x92>
80009ade:	3b 30 01 20 	mov %d2,19
80009ae2:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009ae6:	cd cf e2 0f 	mtcr $icr,%d15
80009aea:	0d 00 c0 04 	isync 

  (void)osEE_begin_primitive();

  osEE_stack_monitoring(p_cdb);

  if (p_to_term->task_type == OSEE_TASK_TYPE_ISR2) {
80009aee:	39 ff 14 00 	ld.bu %d15,[%a15]20
80009af2:	5e 24       	jne %d15,2,80009afa <osEE_scheduler_task_wrapper_run+0x9e>
  /* [SWS_Os_00369]: If a Category 2 ISR calls GetResource() and ends (returns)
      without calling the corresponding ReleaseResource(), the Operating System
      module shall perform the ReleaseResource() call and shall call the
      ErrorHook() E_OS_RESOURCE */
    CONSTP2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)
      p_mdb = osEE_release_all_m(p_to_term);
80009af4:	40 f4       	mov.aa %a4,%a15
80009af6:	5c 9d       	call 80009a30 <osEE_release_all_m>
80009af8:	3c 03       	j 80009afe <osEE_scheduler_task_wrapper_run+0xa2>
    osEE_call_error_hook(p_ccb, E_OS_MISSINGEND);
#if (defined(OSEE_HAS_RESOURCES)) || (defined(OSEE_HAS_SPINLOCKS))
/* [SWS_Os_0070]: If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and still holds OSEK Resources,
    the Operating System shall release them. */
    (void)osEE_release_all_m(p_to_term);
80009afa:	40 f4       	mov.aa %a4,%a15
80009afc:	5c 9a       	call 80009a30 <osEE_release_all_m>
80009afe:	c8 14       	ld.a %a4,[%a15]4
80009b00:	a0 05       	mov.a %a5,0
80009b02:	1d 00 79 02 	j 80009ff4 <osEE_hal_terminate_ctx>

80009b06 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
80009b06:	40 ae       	mov.aa %a14,%sp
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
80009b08:	91 00 00 f8 	movh.a %a15,32768
80009b0c:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
80009b10:	39 ff 10 00 	ld.bu %d15,[%a15]16 <800000d0 <osEE_cdb_var>>
80009b14:	df 2f fe 7f 	jeq %d15,2,80009b10 <osEE_idle_hook_wrapper+0xa>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
80009b18:	91 00 00 f8 	movh.a %a15,32768
80009b1c:	d9 ff 10 30 	lea %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
80009b20:	c8 14       	ld.a %a4,[%a15]4
80009b22:	6d 00 ba 01 	call 80009e96 <osEE_idle_task_terminate>
80009b26:	00 90       	ret 

80009b28 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
80009b28:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009b2a:	d4 43       	ld.a %a3,[%a4]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
80009b2c:	cc 50       	ld.a %a15,[%a5]0
  P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)     p_ret_sn = p_ccb->p_stk_sn;
80009b2e:	99 32 0c 00 	ld.a %a2,[%a3]12

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
80009b32:	bd 02 13 00 	jz.a %a2,80009b58 <osEE_scheduler_core_rq_preempt_stk+0x30>
    p_ret_tdb = p_ret_sn->p_tdb;
80009b36:	99 22 04 00 	ld.a %a2,[%a2]4
    if (p_rq_sn != NULL) {
80009b3a:	bd 0f 1b 00 	jz.a %a15,80009b70 <osEE_scheduler_core_rq_preempt_stk+0x48>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
80009b3e:	99 24 0c 00 	ld.a %a4,[%a2]12
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
80009b42:	c8 16       	ld.a %a6,[%a15]4
80009b44:	99 66 0c 00 	ld.a %a6,[%a6]12
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
80009b48:	39 42 01 00 	ld.bu %d2,[%a4]1
80009b4c:	0c 61       	ld.bu %d15,[%a6]1
80009b4e:	7f f2 13 80 	jge.u %d2,%d15,80009b74 <osEE_scheduler_core_rq_preempt_stk+0x4c>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
80009b52:	82 2f       	mov %d15,2
80009b54:	2c 42       	st.b [%a4]2,%d15
80009b56:	3c 11       	j 80009b78 <osEE_scheduler_core_rq_preempt_stk+0x50>
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
80009b58:	a0 02       	mov.a %a2,0

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
80009b5a:	bd 0f 1e 00 	jz.a %a15,80009b96 <osEE_scheduler_core_rq_preempt_stk+0x6e>
    /* Only Idle TASK stacked -> RQ preempt STK. */
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    p_ret_tdb                 = p_cdb->p_idle_task;
80009b5e:	99 42 04 00 	ld.a %a2,[%a4]4
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
80009b62:	99 24 0c 00 	ld.a %a4,[%a2]12
80009b66:	82 2f       	mov %d15,2
80009b68:	2c 42       	st.b [%a4]2,%d15
80009b6a:	3c 07       	j 80009b78 <osEE_scheduler_core_rq_preempt_stk+0x50>
  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    if (p_tcb->current_prio < dispatch_prio) {
      p_tcb->current_prio = dispatch_prio;
80009b6c:	2c 51       	st.b [%a5]1,%d15
80009b6e:	00 90       	ret 
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
80009b70:	a0 02       	mov.a %a2,0
80009b72:	00 90       	ret 
80009b74:	a0 02       	mov.a %a2,0
80009b76:	00 90       	ret 
    p_ret_tdb = NULL;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
80009b78:	4c f0       	ld.w %d15,[%a15]0
80009b7a:	6c 50       	st.w [%a5]0,%d15
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
80009b7c:	c8 14       	ld.a %a4,[%a15]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
80009b7e:	99 45 0c 00 	ld.a %a5,[%a4]12
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
80009b82:	4c 33       	ld.w %d15,[%a3]12
80009b84:	68 0f       	st.w [%a15]0,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
80009b86:	ec 33       	st.a [%a3]12,%a15
  p_ccb->p_curr                 = p_tdb;
80009b88:	f4 34       	st.a [%a3],%a4

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
80009b8a:	39 4f 1d 00 	ld.bu %d15,[%a4]29
    if (p_tcb->current_prio < dispatch_prio) {
80009b8e:	39 52 01 00 	ld.bu %d2,[%a5]1
80009b92:	3f f2 ed ff 	jlt.u %d2,%d15,80009b6c <osEE_scheduler_core_rq_preempt_stk+0x44>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
80009b96:	00 90       	ret 

80009b98 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
80009b98:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
80009b9a:	cc 51       	ld.a %a15,[%a5]4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
80009b9c:	c8 32       	ld.a %a2,[%a15]12
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
80009b9e:	76 44       	jz %d4,80009ba6 <osEE_sn_priority_insert+0xe>
80009ba0:	39 f2 1c 00 	ld.bu %d2,[%a15]28
80009ba4:	3c 03       	j 80009baa <osEE_sn_priority_insert+0x12>
80009ba6:	39 22 01 00 	ld.bu %d2,[%a2]1
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
80009baa:	cc 40       	ld.a %a15,[%a4]0
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
80009bac:	a0 06       	mov.a %a6,0
80009bae:	7c f3       	jnz.a %a15,80009bb4 <osEE_sn_priority_insert+0x1c>
80009bb0:	3c 14       	j 80009bd8 <osEE_sn_priority_insert+0x40>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
80009bb2:	60 ff       	mov.a %a15,%d15
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
80009bb4:	c8 12       	ld.a %a2,[%a15]4
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
80009bb6:	99 23 0c 00 	ld.a %a3,[%a2]12

    if (as_ready) {
80009bba:	76 44       	jz %d4,80009bc2 <osEE_sn_priority_insert+0x2a>
      prio_to_check = p_cur_tdb->ready_prio;
80009bbc:	39 2f 1c 00 	ld.bu %d15,[%a2]28
80009bc0:	3c 02       	j 80009bc4 <osEE_sn_priority_insert+0x2c>
    } else {
      prio_to_check = p_cur_tcb->current_prio;
80009bc2:	0c 31       	ld.bu %d15,[%a3]1
    }

    if (new_task_prio <= prio_to_check)
80009bc4:	3f 2f 06 80 	jlt.u %d15,%d2,80009bd0 <osEE_sn_priority_insert+0x38>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
80009bc8:	4c f0       	ld.w %d15,[%a15]0
80009bca:	40 f6       	mov.aa %a6,%a15
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
80009bcc:	ee f3       	jnz %d15,80009bb2 <osEE_sn_priority_insert+0x1a>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
80009bce:	60 ff       	mov.a %a15,%d15
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
80009bd0:	bc 64       	jz.a %a6,80009bd8 <osEE_sn_priority_insert+0x40>
    p_prev->p_next = p_sn_new;
80009bd2:	f4 65       	st.a [%a6],%a5
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
80009bd4:	82 02       	mov %d2,0
80009bd6:	3c 03       	j 80009bdc <osEE_sn_priority_insert+0x44>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
80009bd8:	f4 45       	st.a [%a4],%a5
    head_changed  = OSEE_TRUE;
80009bda:	82 12       	mov %d2,1
  }

  p_sn_new->p_next = p_curr;
80009bdc:	ec 50       	st.a [%a5]0,%a15

  return head_changed;
}
80009bde:	00 90       	ret 

80009be0 <osEE_scheduler_rq_insert>:
(
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
80009be0:	40 ae       	mov.aa %a14,%sp
  p_sn_new->p_tdb = p_tdb_new;
80009be2:	b5 56 04 00 	st.a [%a5]4,%a6

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
80009be6:	82 14       	mov %d4,1
80009be8:	6d ff d8 ff 	call 80009b98 <osEE_sn_priority_insert>
#else
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_FALSE);
#endif /* !OSEE_SCHEDULER_GLOBAL */
}
80009bec:	00 90       	ret 

80009bee <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
80009bee:	40 ae       	mov.aa %a14,%sp
80009bf0:	40 4d       	mov.aa %a13,%a4
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
80009bf2:	cc 40       	ld.a %a15,[%a4]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
80009bf4:	c8 3c       	ld.a %a12,[%a15]12
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
80009bf6:	4c c0       	ld.w %d15,[%a12]0
80009bf8:	68 3f       	st.w [%a15]12,%d15
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
80009bfa:	6d ff 97 ff 	call 80009b28 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
80009bfe:	4c f3       	ld.w %d15,[%a15]12

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
80009c00:	7c 28       	jnz.a %a2,80009c10 <osEE_scheduler_core_pop_running+0x22>
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if (p_curr_stk_sn != NULL) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
80009c02:	80 d3       	mov.d %d3,%a13
80009c04:	c2 43       	add %d3,4
80009c06:	92 42       	add %d2,%d15,4
80009c08:	6a 32       	cmovn %d2,%d15,%d3
80009c0a:	60 2d       	mov.a %a13,%d2
80009c0c:	4c d0       	ld.w %d15,[%a13]0
80009c0e:	68 0f       	st.w [%a15]0,%d15
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
80009c10:	40 c2       	mov.aa %a2,%a12
80009c12:	00 90       	ret 

80009c14 <osEE_task_activated>:

FUNC(StatusType, OS_CODE) osEE_task_activated
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
80009c14:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act = p_tdb_act->p_tcb;
80009c16:	cc 43       	ld.a %a15,[%a4]12
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
80009c18:	0c f0       	ld.bu %d15,[%a15]0
80009c1a:	39 43 1e 00 	ld.bu %d3,[%a4]30
    ++p_tcb_act->current_num_of_act;
    ev = E_OK;
  } else {
    ev = E_OS_LIMIT;
80009c1e:	82 42       	mov %d2,4
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
80009c20:	7f 3f 05 80 	jge.u %d15,%d3,80009c2a <osEE_task_activated+0x16>
    ++p_tcb_act->current_num_of_act;
80009c24:	c2 1f       	add %d15,1
80009c26:	28 0f       	st.b [%a15]0,%d15
    ev = E_OK;
80009c28:	82 02       	mov %d2,0
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return ev;
}
80009c2a:	00 90       	ret 

80009c2c <osEE_task_end>:
FUNC(void, OS_CODE)
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
80009c2c:	40 ae       	mov.aa %a14,%sp
  /* It has to be called already in Multi-Core critical section */
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
80009c2e:	cc 43       	ld.a %a15,[%a4]12

  p_tcb->current_prio = p_tdb->ready_prio;
80009c30:	39 4f 1c 00 	ld.bu %d15,[%a4]28
80009c34:	28 1f       	st.b [%a15]1,%d15

  --p_tcb->current_num_of_act;
80009c36:	0c f0       	ld.bu %d15,[%a15]0
80009c38:	c2 ff       	add %d15,-1
80009c3a:	16 ff       	and %d15,255
80009c3c:	28 0f       	st.b [%a15]0,%d15

  if (p_tcb->current_num_of_act == 0U) {
80009c3e:	ee 03       	jnz %d15,80009c44 <osEE_task_end+0x18>
    p_tcb->status = OSEE_TASK_SUSPENDED;
80009c40:	28 2f       	st.b [%a15]2,%d15
80009c42:	00 90       	ret 
  } else {
    p_tcb->status = OSEE_TASK_READY;
80009c44:	82 1f       	mov %d15,1
80009c46:	28 2f       	st.b [%a15]2,%d15
80009c48:	00 90       	ret 

80009c4a <osEE_task_event_set_mask>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)    p_tdb_waking_up,
  VAR(EventMaskType, AUTOMATIC)               Mask,
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
80009c4a:	40 ae       	mov.aa %a14,%sp
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_waking_up = p_tdb_waking_up->p_tcb;
80009c4c:	cc 43       	ld.a %a15,[%a4]12
    *p_ev = E_OS_STATE;
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;
80009c4e:	02 42       	mov %d2,%d4
80009c50:	02 43       	mov %d3,%d4
80009c52:	49 f2 4c 08 	ldmst [%a15]12,%e2

    *p_ev = E_OK;
80009c56:	82 0f       	mov %d15,0
80009c58:	2c 50       	st.b [%a5]0,%d15

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
80009c5a:	4c f2       	ld.w %d15,[%a15]8
80009c5c:	26 f4       	and %d4,%d15
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
80009c5e:	a0 02       	mov.a %a2,0
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;

    *p_ev = E_OK;

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
80009c60:	76 45       	jz %d4,80009c6a <osEE_task_event_set_mask+0x20>
      p_own_sn = p_tcb_waking_up->p_own_sn;
80009c62:	c8 42       	ld.a %a2,[%a15]16

      /* Set p_own_sn of waking up task to NULL so it won't be inserted in
         RQ more than once. */
      if (p_own_sn != NULL) {
80009c64:	bc 23       	jz.a %a2,80009c6a <osEE_task_event_set_mask+0x20>
        p_tcb_waking_up->p_own_sn = NULL;
80009c66:	82 0f       	mov %d15,0
80009c68:	68 4f       	st.w [%a15]16,%d15
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return p_own_sn;
}
80009c6a:	00 90       	ret 

80009c6c <osEE_activate_isr2>:
FUNC(void, OS_CODE)
  osEE_activate_isr2
(
  VAR(TaskType, AUTOMATIC) isr2_id
)
{
80009c6c:	40 ae       	mov.aa %a14,%sp
  osEE_stack_monitoring(osEE_get_curr_core());
#endif /* OSEE_HAS_STACK_MONITORING */
  {
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
80009c6e:	91 00 00 48 	movh.a %a4,32768
80009c72:	d9 44 3c 20 	lea %a4,[%a4]188 <800000bc <osEE_kdb_var>>
80009c76:	cc 41       	ld.a %a15,[%a4]4
80009c78:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009c7c:	c8 05       	ld.a %a5,[%a15]0

    /* Mark the TASK as Activated (I don't need to protect this increment
       since ISRs cannot be activated by another core (exception done for
       IPI, that have to be handled in a special way in any case). */
    ++p_act_tdb->p_tcb->current_num_of_act;
80009c7e:	cc 53       	ld.a %a15,[%a5]12
80009c80:	0c f0       	ld.bu %d15,[%a15]0
80009c82:	c2 1f       	add %d15,1
80009c84:	28 0f       	st.b [%a15]0,%d15

    osEE_scheduler_task_set_running(p_kdb, p_act_tdb, NULL);
80009c86:	a0 06       	mov.a %a6,0
80009c88:	6d 00 c4 00 	call 80009e10 <osEE_scheduler_task_set_running>
80009c8c:	00 90       	ret 

80009c8e <osEE_scheduler_task_activated>:
  osEE_scheduler_task_activated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
80009c8e:	40 ae       	mov.aa %a14,%sp
80009c90:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   is_preemption;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act   = p_tdb_act->p_tcb;
80009c92:	99 52 0c 00 	ld.a %a2,[%a5]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
80009c96:	91 00 00 f8 	movh.a %a15,32768
80009c9a:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
80009c9e:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
80009ca0:	99 43 0c 00 	ld.a %a3,[%a4]12 <800000d0 <osEE_cdb_var>>
    }
    is_preemption = OSEE_FALSE;
  } else
#endif /* !OSEE_SINGLECORE */
  /* Preemption Check */
  if (p_curr_tcb->current_prio < p_tcb_act->current_prio) {
80009ca4:	39 32 01 00 	ld.bu %d2,[%a3]1 <800000d0 <osEE_cdb_var>>
80009ca8:	0c 21       	ld.bu %d15,[%a2]1
80009caa:	7f f2 15 80 	jge.u %d2,%d15,80009cd4 <osEE_scheduler_task_activated+0x46>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
80009cae:	c8 22       	ld.a %a2,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
80009cb0:	4c 20       	ld.w %d15,[%a2]0
80009cb2:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
80009cb4:	82 02       	mov %d2,0
80009cb6:	74 22       	st.w [%a2],%d2
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

    /* Set Previous TASK status as Ready but stacked */
    p_curr_tcb->status = OSEE_TASK_READY_STACKED;
80009cb8:	82 2f       	mov %d15,2
80009cba:	2c 32       	st.b [%a3]2,%d15

    /* Set the activated TASK as current */
    p_new_stk->p_tdb            = p_tdb_act;
80009cbc:	b5 25 04 00 	st.a [%a2]4,%a5
    p_new_stk->p_next           = p_ccb->p_stk_sn;
80009cc0:	4c f3       	ld.w %d15,[%a15]12
80009cc2:	6c 20       	st.w [%a2]0,%d15
    p_ccb->p_stk_sn             = p_new_stk;
80009cc4:	e8 32       	st.a [%a15]12,%a2
    p_ccb->p_curr               = p_tdb_act;
80009cc6:	e8 05       	st.a [%a15]0,%a5
    osEE_task_event_reset_mask(p_tdb_act->p_tcb);
80009cc8:	cc 53       	ld.a %a15,[%a5]12
  osEE_task_event_reset_mask
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
  p_tcb->event_mask = 0U;
80009cca:	68 32       	st.w [%a15]12,%d2

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_curr, p_tdb_act);
80009ccc:	6d 00 c1 00 	call 80009e4e <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
80009cd0:	82 12       	mov %d2,1
80009cd2:	00 90       	ret 
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
80009cd4:	0c 22       	ld.bu %d15,[%a2]2
80009cd6:	ee 05       	jnz %d15,80009ce0 <osEE_scheduler_task_activated+0x52>
    p_tcb_act->status = OSEE_TASK_READY;
80009cd8:	82 1f       	mov %d15,1
80009cda:	2c 22       	st.b [%a2]2,%d15
80009cdc:	82 0f       	mov %d15,0
80009cde:	6c 23       	st.w [%a2]12,%d15
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
80009ce0:	c8 25       	ld.a %a5,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
80009ce2:	4c 50       	ld.w %d15,[%a5]0
80009ce4:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
80009ce6:	82 0f       	mov %d15,0
80009ce8:	6c 50       	st.w [%a5]0,%d15
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
80009cea:	d9 f4 04 00 	lea %a4,[%a15]4
80009cee:	6d ff 79 ff 	call 80009be0 <osEE_scheduler_rq_insert>
    /* Actually Insert the activated in READY Queue */
    (void)osEE_scheduler_task_insert_rq(p_ccb, p_tdb_act, p_tcb_act);

    osEE_unlock_core(p_cdb);

    is_preemption = OSEE_FALSE;
80009cf2:	82 02       	mov %d2,0
  }

  return is_preemption;
}
80009cf4:	00 90       	ret 

80009cf6 <osEE_scheduler_task_insert>:
  osEE_scheduler_task_insert
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
80009cf6:	40 ae       	mov.aa %a14,%sp
80009cf8:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   head_changed;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act     = p_tdb_act->p_tcb;
80009cfa:	cc 53       	ld.a %a15,[%a5]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb         = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb         = p_cdb->p_ccb;
80009cfc:	91 00 00 28 	movh.a %a2,32768
80009d00:	99 24 10 30 	ld.a %a4,[%a2]208 <800000d0 <osEE_cdb_var>>
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
80009d04:	0c f2       	ld.bu %d15,[%a15]2
80009d06:	ee 05       	jnz %d15,80009d10 <osEE_scheduler_task_insert+0x1a>
    p_tcb_act->status = OSEE_TASK_READY;
80009d08:	82 1f       	mov %d15,1
80009d0a:	28 2f       	st.b [%a15]2,%d15
80009d0c:	82 0f       	mov %d15,0
80009d0e:	68 3f       	st.w [%a15]12,%d15
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
80009d10:	99 45 08 00 	ld.a %a5,[%a4]8
  (*pp_first)              = p_sn_allocated->p_next;
80009d14:	4c 50       	ld.w %d15,[%a5]0
80009d16:	6c 42       	st.w [%a4]8,%d15
  p_sn_allocated->p_next  = NULL;
80009d18:	82 0f       	mov %d15,0
80009d1a:	6c 50       	st.w [%a5]0,%d15
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
80009d1c:	b0 44       	add.a %a4,4
80009d1e:	6d ff 61 ff 	call 80009be0 <osEE_scheduler_rq_insert>

    osEE_unlock_core(p_cdb);
  }

  return head_changed;
}
80009d22:	00 90       	ret 

80009d24 <osEE_scheduler_task_unblocked>:
  osEE_scheduler_task_unblocked
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
80009d24:	40 ae       	mov.aa %a14,%sp
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
80009d26:	99 56 04 00 	ld.a %a6,[%a5]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
80009d2a:	cc 63       	ld.a %a15,[%a6]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_released);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
80009d2c:	91 00 00 28 	movh.a %a2,32768
80009d30:	99 2c 10 30 	ld.a %a12,[%a2]208 <800000d0 <osEE_cdb_var>>

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
80009d34:	82 2f       	mov %d15,2
80009d36:	28 2f       	st.b [%a15]2,%d15
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
80009d38:	39 6f 1c 00 	ld.bu %d15,[%a6]28
80009d3c:	28 1f       	st.b [%a15]1,%d15
  /* Touch unused parameters */
  (void)p_kdb;

  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
80009d3e:	d9 c4 04 00 	lea %a4,[%a12]4
80009d42:	6d ff 4f ff 	call 80009be0 <osEE_scheduler_rq_insert>
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
80009d46:	82 0f       	mov %d15,0
  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
80009d48:	df 12 0a 80 	jne %d2,1,80009d5c <osEE_scheduler_task_unblocked+0x38>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
80009d4c:	d4 c2       	ld.a %a2,[%a12]
80009d4e:	99 22 0c 00 	ld.a %a2,[%a2]12

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
    is_preemption = (p_tcb_released->current_prio >
80009d52:	0c f1       	ld.bu %d15,[%a15]1
80009d54:	39 22 01 00 	ld.bu %d2,[%a2]1
80009d58:	0b f2 30 f1 	lt.u %d15,%d2,%d15
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
80009d5c:	02 f2       	mov %d2,%d15
80009d5e:	00 90       	ret 

80009d60 <osEE_scheduler_task_terminated>:
  osEE_scheduler_task_terminated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
80009d60:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009d62:	91 00 00 f8 	movh.a %a15,32768
80009d66:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
80009d6a:	c8 0d       	ld.a %a13,[%a15]0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
80009d6c:	99 dc 0c 00 	ld.a %a12,[%a13]12 <800000d0 <osEE_cdb_var>>

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
80009d70:	f4 5d       	st.a [%a5],%a13

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
80009d72:	0c c2       	ld.bu %d15,[%a12]2
80009d74:	de 4a       	jne %d15,4,80009da8 <osEE_scheduler_task_terminated+0x48>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
80009d76:	91 00 00 48 	movh.a %a4,32768
80009d7a:	d9 44 10 30 	lea %a4,[%a4]208 <800000d0 <osEE_cdb_var>>
80009d7e:	d9 f5 04 00 	lea %a5,[%a15]4 <800000d0 <osEE_cdb_var>>
80009d82:	6d ff 36 ff 	call 80009bee <osEE_scheduler_core_pop_running>
80009d86:	80 28       	mov.d %d8,%a2

      p_tdb_to = p_ccb->p_curr;
80009d88:	4c f0       	ld.w %d15,[%a15]0

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
80009d8a:	80 d2       	mov.d %d2,%a13
80009d8c:	5f f2 06 00 	jeq %d2,%d15,80009d98 <osEE_scheduler_task_terminated+0x38>
        osEE_task_end(p_tdb_term);
80009d90:	40 d4       	mov.aa %a4,%a13
80009d92:	6d ff 4d ff 	call 80009c2c <osEE_task_end>
80009d96:	3c 04       	j 80009d9e <osEE_scheduler_task_terminated+0x3e>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
80009d98:	14 c2       	ld.bu %d2,[%a12]
80009d9a:	c2 f2       	add %d2,-1
80009d9c:	34 c2       	st.b [%a12],%d2
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
80009d9e:	48 22       	ld.w %d2,[%a15]8
80009da0:	60 82       	mov.a %a2,%d8
80009da2:	74 22       	st.w [%a2],%d2
  (*pp_first)       = p_to_free;
80009da4:	68 28       	st.w [%a15]8,%d8
80009da6:	3c 20       	j 80009de6 <osEE_scheduler_task_terminated+0x86>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
80009da8:	c8 35       	ld.a %a5,[%a15]12

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
80009daa:	54 52       	ld.w %d2,[%a5]
80009dac:	68 32       	st.w [%a15]12,%d2
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
80009dae:	39 df 1c 00 	ld.bu %d15,[%a13]28
80009db2:	2c c1       	st.b [%a12]1,%d15
      p_tcb_term->status = OSEE_TASK_READY;
80009db4:	82 1f       	mov %d15,1
80009db6:	2c c2       	st.b [%a12]2,%d15
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transition from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
80009db8:	0c c0       	ld.bu %d15,[%a12]0
80009dba:	5e 13       	jne %d15,1,80009dc0 <osEE_scheduler_task_terminated+0x60>
80009dbc:	82 0f       	mov %d15,0
80009dbe:	6c c3       	st.w [%a12]12,%d15
        osEE_task_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
80009dc0:	d9 fc 04 00 	lea %a12,[%a15]4
80009dc4:	40 c4       	mov.aa %a4,%a12
80009dc6:	40 d6       	mov.aa %a6,%a13
80009dc8:	6d ff 0c ff 	call 80009be0 <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
80009dcc:	91 00 00 48 	movh.a %a4,32768
80009dd0:	d9 44 10 30 	lea %a4,[%a4]208 <800000d0 <osEE_cdb_var>>
80009dd4:	40 c5       	mov.aa %a5,%a12
80009dd6:	6d ff a9 fe 	call 80009b28 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
80009dda:	7c 25       	jnz.a %a2,80009de4 <osEE_scheduler_task_terminated+0x84>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
80009ddc:	c8 32       	ld.a %a2,[%a15]12
80009dde:	4c 21       	ld.w %d15,[%a2]4
          p_ccb->p_curr           = p_tdb_to;
80009de0:	68 0f       	st.w [%a15]0,%d15
80009de2:	3c 02       	j 80009de6 <osEE_scheduler_task_terminated+0x86>
        } else {
          p_tdb_to = p_ccb->p_curr;
80009de4:	4c f0       	ld.w %d15,[%a15]0
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
80009de6:	60 f2       	mov.a %a2,%d15
80009de8:	00 90       	ret 

80009dea <osEE_scheduler_task_preemption_point>:
FUNC(OsEE_bool, OS_CODE)
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb
)
{
80009dea:	40 ae       	mov.aa %a14,%sp
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009dec:	91 00 00 48 	movh.a %a4,32768
80009df0:	99 4f 10 30 	ld.a %a15,[%a4]208 <800000d0 <osEE_cdb_var>>
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
80009df4:	d9 44 10 30 	lea %a4,[%a4]208 <800000d0 <osEE_cdb_var>>
80009df8:	d9 f5 04 00 	lea %a5,[%a15]4 <800000d0 <osEE_cdb_var>>
80009dfc:	6d ff 96 fe 	call 80009b28 <osEE_scheduler_core_rq_preempt_stk>

    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    is_preemption = OSEE_FALSE;
80009e00:	82 02       	mov %d2,0
  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);

  /* Unlock the Scheduler (critical section terminated) */
  osEE_unlock_core(p_cdb);

  if (p_prev != NULL) {
80009e02:	bc 26       	jz.a %a2,80009e0e <osEE_scheduler_task_preemption_point+0x24>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_change_context_from_running(p_prev, p_curr);
80009e04:	40 24       	mov.aa %a4,%a2
80009e06:	c8 05       	ld.a %a5,[%a15]0
80009e08:	6d 00 23 00 	call 80009e4e <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
80009e0c:	82 12       	mov %d2,1
  } else {
    is_preemption = OSEE_FALSE;
  }

  return is_preemption;
}
80009e0e:	00 90       	ret 

80009e10 <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn
)
{
80009e10:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009e12:	91 00 00 f8 	movh.a %a15,32768
80009e16:	99 ff 10 30 	ld.a %a15,[%a15]208 <800000d0 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
80009e1a:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
80009e1c:	48 32       	ld.w %d2,[%a15]12

  /* Set previous TASK as stacked only if the activation has been completed */
  if (p_preempted->p_tcb->status == OSEE_TASK_RUNNING) {
80009e1e:	99 42 0c 00 	ld.a %a2,[%a4]12 <800000d0 <osEE_cdb_var>>
80009e22:	0c 22       	ld.bu %d15,[%a2]2
80009e24:	5e 43       	jne %d15,4,80009e2a <osEE_scheduler_task_set_running+0x1a>
    p_preempted->p_tcb->status  = OSEE_TASK_READY_STACKED;
80009e26:	82 2f       	mov %d15,2
80009e28:	2c 22       	st.b [%a2]2,%d15
  }
  p_ccb->p_curr                 = p_tdb;
80009e2a:	e8 05       	st.a [%a15]0,%a5

  /* Touch unused parameters */
  (void)p_kdb;
  if (p_sn == NULL) {
80009e2c:	7c 68       	jnz.a %a6,80009e3c <osEE_scheduler_task_set_running+0x2c>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
80009e2e:	c8 22       	ld.a %a2,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
80009e30:	4c 20       	ld.w %d15,[%a2]0
80009e32:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
80009e34:	82 0f       	mov %d15,0
80009e36:	6c 20       	st.w [%a2]0,%d15
    osEE_lock_core(p_cdb);
    /* Alloc the SN for the new Running TASK */
    p_ccb->p_stk_sn             = osEE_sn_alloc(&p_ccb->p_free_sn);
80009e38:	e8 32       	st.a [%a15]12,%a2
80009e3a:	3c 02       	j 80009e3e <osEE_scheduler_task_set_running+0x2e>
    osEE_unlock_core(p_cdb);
  } else {
    p_ccb->p_stk_sn             = p_sn;
80009e3c:	e8 36       	st.a [%a15]12,%a6
  }

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
80009e3e:	c8 32       	ld.a %a2,[%a15]12
80009e40:	b5 25 04 00 	st.a [%a2]4,%a5
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
80009e44:	c8 3f       	ld.a %a15,[%a15]12
80009e46:	68 02       	st.w [%a15]0,%d2

  osEE_change_context_from_running(p_preempted, p_tdb);
80009e48:	6d 00 03 00 	call 80009e4e <osEE_change_context_from_running>
80009e4c:	00 90       	ret 

80009e4e <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
80009e4e:	40 ae       	mov.aa %a14,%sp
80009e50:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
80009e52:	99 52 0c 00 	ld.a %a2,[%a5]12
80009e56:	0c 22       	ld.bu %d15,[%a2]2
80009e58:	5e 28       	jne %d15,2,80009e68 <osEE_change_context_from_running+0x1a>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
80009e5a:	40 54       	mov.aa %a4,%a5
80009e5c:	99 55 04 00 	ld.a %a5,[%a5]4
80009e60:	c8 16       	ld.a %a6,[%a15]4
80009e62:	6d 00 73 00 	call 80009f48 <osEE_hal_save_ctx_and_restore_ctx>
80009e66:	00 90       	ret 
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
80009e68:	40 54       	mov.aa %a4,%a5
80009e6a:	99 55 04 00 	ld.a %a5,[%a5]4
80009e6e:	c8 16       	ld.a %a6,[%a15]4
80009e70:	6d 00 8b 00 	call 80009f86 <osEE_hal_save_ctx_and_ready2stacked>
80009e74:	00 90       	ret 

80009e76 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
80009e76:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
80009e78:	cc 53       	ld.a %a15,[%a5]12
80009e7a:	0c f2       	ld.bu %d15,[%a15]2
80009e7c:	5e 27       	jne %d15,2,80009e8a <osEE_change_context_from_task_end+0x14>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
80009e7e:	40 54       	mov.aa %a4,%a5
80009e80:	99 55 04 00 	ld.a %a5,[%a5]4
80009e84:	6d 00 74 00 	call 80009f6c <osEE_hal_restore_ctx>
80009e88:	00 90       	ret 
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
80009e8a:	40 54       	mov.aa %a4,%a5
80009e8c:	99 55 04 00 	ld.a %a5,[%a5]4
80009e90:	6d 00 8d 00 	call 80009faa <osEE_hal_ready2stacked>
80009e94:	00 90       	ret 

80009e96 <osEE_idle_task_terminate>:
FUNC(void, OS_CODE)
  osEE_idle_task_terminate
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_idle_tdb
)
{
80009e96:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
80009e98:	99 45 04 00 	ld.a %a5,[%a4]4
  CONSTP2CONST(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos     = p_sdb->p_bos;
80009e9c:	cc 40       	ld.a %a15,[%a4]0
80009e9e:	48 03       	ld.w %d3,[%a15]0
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
80009ea0:	cc 50       	ld.a %a15,[%a5]0
80009ea2:	3c 02       	j 80009ea6 <osEE_idle_task_terminate+0x10>

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
80009ea4:	60 ff       	mov.a %a15,%d15
80009ea6:	4c f0       	ld.w %d15,[%a15]0
  } while ((p_tos != NULL) && (p_tos != p_bos));
80009ea8:	8b 0f 20 22 	ne %d2,%d15,0
80009eac:	0b 3f 10 22 	and.ne %d2,%d15,%d3
80009eb0:	df 02 fa ff 	jne %d2,0,80009ea4 <osEE_idle_task_terminate+0xe>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
80009eb4:	ec 50       	st.a [%a5]0,%a15

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
80009eb6:	6d 00 5b 00 	call 80009f6c <osEE_hal_restore_ctx>
80009eba:	00 90       	ret 

80009ebc <osEE_cpu_startos>:
}
#endif /* OSEE_SINGLECORE */
#endif /* OSEE_TC_HAS_ISR1_TO_CONF */

OsEE_bool osEE_cpu_startos(void)
{
80009ebc:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80009ebe:	4d c0 e1 5f 	mfcr %d5,$core_id
#if (!defined(OSEE_SINGLECORE))
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
80009ec2:	91 00 00 f8 	movh.a %a15,32768
80009ec6:	d9 ff 3c 20 	lea %a15,[%a15]188 <800000bc <osEE_kdb_var>>
80009eca:	c8 2f       	ld.a %a15,[%a15]8
80009ecc:	b0 ff       	add.a %a15,-1
  for (i = 0U; i < tdb_size; ++i) {
80009ece:	bd 0f 2a 00 	jz.a %a15,80009f22 <osEE_cpu_startos+0x66>
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
80009ed2:	91 00 00 28 	movh.a %a2,32768
80009ed6:	d9 22 3c 20 	lea %a2,[%a2]188 <800000bc <osEE_kdb_var>>
80009eda:	19 23 04 00 	ld.w %d3,[%a2]4 <80000004 <BootModeHeader0+0x4>>
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
80009ede:	8f 35 00 51 	and %d5,%d5,3
80009ee2:	8f b5 00 50 	sh %d5,%d5,11
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
80009ee6:	bb f0 ff 4f 	mov.u %d4,65535
80009eea:	82 0f       	mov %d15,0
80009eec:	b0 ff       	add.a %a15,-1
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
80009eee:	60 33       	mov.a %a3,%d3
80009ef0:	90 32       	addsc.a %a2,%a3,%d15,2
80009ef2:	d4 22       	ld.a %a2,[%a2]
#if (!defined(OSEE_SINGLECORE))
    if (p_tdb->orig_core_id == curr_core_id) {
#endif /* !OSEE_SINGLECORE */
      if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
80009ef4:	39 22 14 00 	ld.bu %d2,[%a2]20
80009ef8:	df 22 12 80 	jne %d2,2,80009f1c <osEE_cpu_startos+0x60>
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
80009efc:	b9 22 08 00 	ld.hu %d2,[%a2]8
80009f00:	5f 42 0e 00 	jeq %d2,%d4,80009f1c <osEE_cpu_startos+0x60>
80009f04:	60 24       	mov.a %a4,%d2
80009f06:	d9 43 00 08 	lea %a3,[%a4]-32768
80009f0a:	11 43 00 3f 	addih.a %a3,%a3,61444
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
80009f0e:	39 22 1c 00 	ld.bu %d2,[%a2]28
80009f12:	c2 12       	add %d2,1
80009f14:	b7 82 99 23 	insert %d2,%d2,8,7,25
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
80009f18:	a6 52       	or %d2,%d5
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
80009f1a:	74 32       	st.w [%a3],%d2
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
80009f1c:	c2 1f       	add %d15,1
80009f1e:	fd f0 e8 7f 	loop %a15,80009eee <osEE_cpu_startos+0x32>
    }
  }
#endif /* OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING */

  return osEE_std_cpu_startos();
}
80009f22:	82 12       	mov %d2,1
80009f24:	00 90       	ret 

80009f26 <osEE_tc_change_context_from_task_end>:
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
80009f26:	99 42 0c 00 	ld.a %a2,[%a4]12
static FUNC(void, OS_CODE) OSEE_NEVER_INLINE
  osEE_tc_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
80009f2a:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
80009f2c:	0c 22       	ld.bu %d15,[%a2]2
80009f2e:	1e 27       	jeq %d15,2,80009f3c <osEE_tc_change_context_from_task_end+0x16>
    osEE_tc_setareg(a4, p_to);
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
    osEE_tc_jump(osEE_hal_restore_ctx);
  } else {
    osEE_tc_setareg(a4, p_to);
80009f30:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
80009f32:	c8 1f       	ld.a %a15,[%a15]4
80009f34:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_ready2stacked);
80009f36:	1d 00 3a 00 	j 80009faa <osEE_hal_ready2stacked>
80009f3a:	00 90       	ret 
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
    osEE_tc_setareg(a4, p_to);
80009f3c:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
80009f3e:	c8 1f       	ld.a %a15,[%a15]4
80009f40:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_restore_ctx);
80009f42:	1d 00 15 00 	j 80009f6c <osEE_hal_restore_ctx>
80009f46:	00 90       	ret 

80009f48 <osEE_hal_save_ctx_and_restore_ctx>:
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
80009f48:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
80009f4a:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
80009f4e:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
80009f50:	4c 60       	ld.w %d15,[%a6]0
80009f52:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80009f56:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
80009f5a:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
80009f5e:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
80009f60:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
80009f64:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the restore CTX */
  osEE_tc_jump(osEE_hal_restore_ctx);
80009f66:	1d 00 03 00 	j 80009f6c <osEE_hal_restore_ctx>
80009f6a:	00 90       	ret 

80009f6c <osEE_hal_restore_ctx>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to_tdb,
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_to_scb
)
{
  OsEE_CTX  const * const p_ctx = p_to_scb->p_tos;
80009f6c:	cc 50       	ld.a %a15,[%a5]0
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
80009f6e:	c8 32       	ld.a %a2,[%a15]12
  OsEE_pcxi const         pcxi  = p_ctx->pcxi;
80009f70:	4c f2       	ld.w %d15,[%a15]8
80009f72:	40 2b       	mov.aa %a11,%a2

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
80009f74:	cd 0f e0 0f 	mtcr $pcxi,%d15
80009f78:	0d 00 c0 04 	isync 
/* Set the return address back */
  osEE_tc_set_RA(p_ctx->ra);
/* Set the PCXI back */
  osEE_tc_csa_set_pcxi(pcxi);
/* Restore the previous Top of Stack */
  p_to_scb->p_tos = p_ctx->p_ctx;
80009f7c:	4c f0       	ld.w %d15,[%a15]0
80009f7e:	6c 50       	st.w [%a5]0,%d15
/* Jump to Kernel Wrapper: it will be the "ret" inside
   osEE_scheduler_task_wrapper_restore at:
   1) Restore the CSA so the SP,
   2) Return at RA address, that is the address after change context calling
      site */
  osEE_tc_jump(osEE_scheduler_task_wrapper_restore);
80009f80:	1d ff 69 fd 	j 80009a52 <osEE_scheduler_task_wrapper_restore>
80009f84:	00 90       	ret 

80009f86 <osEE_hal_save_ctx_and_ready2stacked>:
80009f86:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
80009f88:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
80009f8c:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
80009f8e:	4c 60       	ld.w %d15,[%a6]0
80009f90:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80009f94:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
80009f98:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
80009f9c:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
80009f9e:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
80009fa2:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the ready to stacked */
  osEE_tc_jump(osEE_hal_ready2stacked);
80009fa4:	1d 00 03 00 	j 80009faa <osEE_hal_ready2stacked>
80009fa8:	00 90       	ret 

80009faa <osEE_hal_ready2stacked>:
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
80009faa:	cc 50       	ld.a %a15,[%a5]0
80009fac:	40 fa       	mov.aa %sp,%a15
  __asm__ volatile ("isync" : : : "memory");
}

/** The svlcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_svlcx(void) {
  __asm__ volatile ("svlcx" : : : "memory");
80009fae:	0d 00 00 02 	svlcx 
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
80009fb2:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
80009fb4:	d9 f2 f0 ff 	lea %a2,[%a15]-16
80009fb8:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
80009fba:	4c 50       	ld.w %d15,[%a5]0
80009fbc:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80009fc0:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
80009fc4:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
80009fc8:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
80009fca:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
80009fce:	f4 52       	st.a [%a5],%a2
   N.B. The RA saved in this context is not useful, but I prefer to use one
        save ctx code for all the cases for code readability, instead using an
        optimized one for this case */
  osEE_tc_save_ctx(p_to_scb);
/* Jump to Kernel Wrapper */
  osEE_tc_jump(osEE_scheduler_task_wrapper_run);
80009fd0:	1d ff 46 fd 	j 80009a5c <osEE_scheduler_task_wrapper_run>
80009fd4:	00 90       	ret 

80009fd6 <osEE_tc_change_context_from_isr2_end>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
/* Reset PSW Call Depth Counter, so I can force a RFE */
  osEE_tc_set_csfr(OSEE_CSFR_PSW,
80009fd6:	4d 40 e0 ff 	mfcr %d15,$psw
80009fda:	8f ff c7 f1 	andn %d15,%d15,127
80009fde:	cd 4f e0 0f 	mtcr $psw,%d15
80009fe2:	0d 00 c0 04 	isync 
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
80009fe6:	91 10 00 f8 	movh.a %a15,32769
80009fea:	d9 ff e6 c9 	lea %a15,[%a15]-24794 <80009f26 <osEE_tc_change_context_from_task_end>>
80009fee:	40 fb       	mov.aa %a11,%a15
  __asm__ volatile ("rslcx" : : : "memory");
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
80009ff0:	00 80       	rfe 
80009ff2:	00 90       	ret 

80009ff4 <osEE_hal_terminate_ctx>:
  osEE_hal_terminate_ctx
(
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_term_scb,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
80009ff4:	20 08       	sub.a %sp,8

/* Returns the first CSA in the Free Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_fcx(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_FCX);
80009ff6:	4d 80 e3 2f 	mfcr %d2,$fcx

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80009ffa:	4d 00 e0 ff 	mfcr %d15,$pcxi
    OsEE_csa_link fcx                 = osEE_tc_csa_get_fcx();
/* Obtain Previous CSA list head, That is the head of the to_free_queue
   (will be new FCX) */
    OsEE_csa_link to_free_queue_head  = osEE_tc_csa_get_pcxi();
/* Get the the of the CSA list to be freed */
    OsEE_csa_link to_free_queue_tail  = p_term_scb->p_tos->pcxi;
80009ffe:	cc 40       	ld.a %a15,[%a4]0
8000a000:	48 23       	ld.w %d3,[%a15]8
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000a002:	b9 f4 08 00 	ld.hu %d4,[%a15]8
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
8000a006:	37 03 64 38 	extr.u %d3,%d3,16,4
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000a00a:	06 64       	sh %d4,6
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
8000a00c:	8f c3 01 30 	sh %d3,%d3,28
8000a010:	a6 43       	or %d3,%d4
8000a012:	60 3f       	mov.a %a15,%d3
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    l_next = p_csa->l_next;
  } else {
    l_next.reg = 0U;
8000a014:	82 03       	mov %d3,0
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE
  osEE_tc_csa_get_next(OsEE_csa_link l_csa_at)
{
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
8000a016:	bc f3       	jz.a %a15,8000a01c <osEE_hal_terminate_ctx+0x28>
    l_next = p_csa->l_next;
8000a018:	48 03       	ld.w %d3,[%a15]0
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_next(OsEE_csa_link l_csa_at, OsEE_csa_link l_next)
{
  OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    p_csa->l_next = l_next;
8000a01a:	68 02       	st.w [%a15]0,%d2

/* Set the first CSA in the Free Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_fcx(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_FCX, l_csa.reg);
8000a01c:	cd 8f e3 0f 	mtcr $fcx,%d15
8000a020:	0d 00 c0 04 	isync 

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
8000a024:	cd 03 e0 0f 	mtcr $pcxi,%d3
8000a028:	0d 00 c0 04 	isync 
   since a TASK, not yet started with higher priority of the stacked ones,
   could have been activated. */
   osEE_tc_set_RA(p_term_scb->p_tos->ra);
#endif /* 0 */
/* Pop ERIKA's context */
   p_term_scb->p_tos = p_term_scb->p_tos->p_ctx;
8000a02c:	cc 40       	ld.a %a15,[%a4]0
8000a02e:	4c f0       	ld.w %d15,[%a15]0
8000a030:	6c 40       	st.w [%a4]0,%d15
   "osEE_hal_ready2stacked" PCXI. */
  {
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);
8000a032:	91 00 00 48 	movh.a %a4,32768
8000a036:	d9 44 3c 20 	lea %a4,[%a4]188 <800000bc <osEE_kdb_var>>
8000a03a:	d9 a5 04 00 	lea %a5,[%sp]4 <800000bc <osEE_kdb_var>>
8000a03e:	6d ff 91 fe 	call 80009d60 <osEE_scheduler_task_terminated>

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
8000a042:	d8 01       	ld.a %a15,[%sp]4
8000a044:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000a048:	1e 25       	jeq %d15,2,8000a052 <osEE_hal_terminate_ctx+0x5e>
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
    } else {
/* Prepare to jump to osEE_tc_change_context_from_task_end */
      osEE_tc_setareg(a4, p_to);
8000a04a:	40 24       	mov.aa %a4,%a2
      osEE_tc_jump(osEE_tc_change_context_from_task_end);
8000a04c:	1d ff 6d ff 	j 80009f26 <osEE_tc_change_context_from_task_end>
    }
  }
/* Fake infinite loop: to turn off 'noreturn' function does return warning */
  for(;;) {
    ;
  }
8000a050:	3c 00       	j 8000a050 <osEE_hal_terminate_ctx+0x5c>

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
8000a052:	40 24       	mov.aa %a4,%a2
8000a054:	6d ff c1 ff 	call 80009fd6 <osEE_tc_change_context_from_isr2_end>
8000a058:	3c fc       	j 8000a050 <osEE_hal_terminate_ctx+0x5c>

8000a05a <__lshrdi3>:
8000a05a:	6f 56 0c 80 	jnz.t %d6,5,8000a072 <__lshrdi3+0x18>
8000a05e:	8b 06 02 71 	rsub %d7,%d6,32
8000a062:	32 56       	rsub %d6
8000a064:	17 45 80 27 	dextr %d2,%d5,%d4,%d7
8000a068:	0f 65 00 30 	sh %d3,%d5,%d6
8000a06c:	2b 42 40 26 	sel %d2,%d6,%d2,%d4
8000a070:	00 90       	ret 
8000a072:	8b 06 02 60 	add %d6,%d6,32
8000a076:	32 56       	rsub %d6
8000a078:	0f 65 00 20 	sh %d2,%d5,%d6
8000a07c:	82 03       	mov %d3,0
8000a07e:	00 90       	ret 

8000a080 <__floatundisf>:
8000a080:	7b 00 02 20 	movh %d2,32
8000a084:	0b 25 30 f1 	lt.u %d15,%d5,%d2
8000a088:	02 4a       	mov %d10,%d4
8000a08a:	02 54       	mov %d4,%d5
8000a08c:	ee 08       	jnz %d15,8000a09c <__floatundisf+0x1c>
8000a08e:	b7 0a 95 f5 	insert %d15,%d10,0,11,21
8000a092:	6e 05       	jz %d15,8000a09c <__floatundisf+0x1c>
8000a094:	b7 0a 0b a0 	insert %d10,%d10,0,0,11
8000a098:	b7 fa 81 a5 	insert %d10,%d10,15,11,1
8000a09c:	6d 00 ea 02 	call 8000a670 <__floatunsidf>
8000a0a0:	0b 23 10 48 	mov %e4,%d3,%d2
8000a0a4:	82 06       	mov %d6,0
8000a0a6:	7b 00 1f 74 	movh %d7,16880
8000a0aa:	6d 00 34 01 	call 8000a312 <__muldf3>
8000a0ae:	02 a4       	mov %d4,%d10
8000a0b0:	0b 23 10 88 	mov %e8,%d3,%d2
8000a0b4:	6d 00 de 02 	call 8000a670 <__floatunsidf>
8000a0b8:	0b 89 10 48 	mov %e4,%d9,%d8
8000a0bc:	0b 23 10 68 	mov %e6,%d3,%d2
8000a0c0:	6d 00 ed 00 	call 8000a29a <__adddf3>
8000a0c4:	0b 23 10 48 	mov %e4,%d3,%d2
8000a0c8:	1d 00 b6 02 	j 8000a634 <__truncdfsf2>

8000a0cc <__extendsfdf2>:
8000a0cc:	20 20       	sub.a %sp,32
8000a0ce:	d9 a4 20 00 	lea %a4,[%sp]32
8000a0d2:	89 44 2c f5 	st.w [+%a4]-20,%d4
8000a0d6:	d9 a5 10 00 	lea %a5,[%sp]16
8000a0da:	6d 00 f1 02 	call 8000a6bc <__unpack_f>
8000a0de:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000a0e2:	39 a4 10 00 	ld.bu %d4,[%sp]16
8000a0e6:	8f e2 1f f0 	sh %d15,%d2,-2
8000a0ea:	8f e2 01 20 	sh %d2,%d2,30
8000a0ee:	74 a2       	st.w [%sp],%d2
8000a0f0:	78 01       	st.w [%sp]4,%d15
8000a0f2:	19 a5 14 00 	ld.w %d5,[%sp]20
8000a0f6:	19 a6 18 00 	ld.w %d6,[%sp]24
8000a0fa:	1d 00 8e 02 	j 8000a616 <__make_dp>

8000a0fe <_fpadd_parts>:
8000a0fe:	0c 40       	ld.bu %d15,[%a4]0
8000a100:	40 42       	mov.aa %a2,%a4
8000a102:	bf 2f cb 80 	jlt.u %d15,2,8000a298 <_fpadd_parts+0x19a>
8000a106:	14 52       	ld.bu %d2,[%a5]
8000a108:	40 52       	mov.aa %a2,%a5
8000a10a:	bf 22 c7 80 	jlt.u %d2,2,8000a298 <_fpadd_parts+0x19a>
8000a10e:	5e 4e       	jne %d15,4,8000a12a <_fpadd_parts+0x2c>
8000a110:	40 42       	mov.aa %a2,%a4
8000a112:	df 42 c3 80 	jne %d2,4,8000a298 <_fpadd_parts+0x19a>
8000a116:	19 42 04 00 	ld.w %d2,[%a4]4
8000a11a:	4c 51       	ld.w %d15,[%a5]4
8000a11c:	5f f2 be 00 	jeq %d2,%d15,8000a298 <_fpadd_parts+0x19a>
8000a120:	91 00 00 f8 	movh.a %a15,32768
8000a124:	d9 f2 d0 50 	lea %a2,[%a15]3408 <80000d50 <__thenan_df>>
8000a128:	00 90       	ret 
8000a12a:	40 52       	mov.aa %a2,%a5
8000a12c:	df 42 b6 00 	jeq %d2,4,8000a298 <_fpadd_parts+0x19a>
8000a130:	df 22 11 80 	jne %d2,2,8000a152 <_fpadd_parts+0x54>
8000a134:	40 42       	mov.aa %a2,%a4
8000a136:	df 2f b1 80 	jne %d15,2,8000a298 <_fpadd_parts+0x19a>
8000a13a:	40 63       	mov.aa %a3,%a6
8000a13c:	a0 4f       	mov.a %a15,4
8000a13e:	44 4f       	ld.w %d15,[%a4+]
8000a140:	64 3f       	st.w [%a3+],%d15
8000a142:	fc fe       	loop %a15,8000a13e <_fpadd_parts+0x40>
8000a144:	4c 21       	ld.w %d15,[%a2]4
8000a146:	19 52 04 00 	ld.w %d2,[%a5]4
8000a14a:	40 62       	mov.aa %a2,%a6
8000a14c:	26 2f       	and %d15,%d2
8000a14e:	6c 61       	st.w [%a6]4,%d15
8000a150:	00 90       	ret 
8000a152:	40 52       	mov.aa %a2,%a5
8000a154:	df 2f a2 00 	jeq %d15,2,8000a298 <_fpadd_parts+0x19a>
8000a158:	4c 42       	ld.w %d15,[%a4]8
8000a15a:	19 52 08 00 	ld.w %d2,[%a5]8
8000a15e:	40 6f       	mov.aa %a15,%a6
8000a160:	52 23       	sub %d3,%d15,%d2
8000a162:	0b 30 c0 c1 	abs %d12,%d3
8000a166:	8b 0c 84 42 	ge %d4,%d12,64
8000a16a:	40 5c       	mov.aa %a12,%a5
8000a16c:	40 4d       	mov.aa %a13,%a4
8000a16e:	09 4a 4c 09 	ld.d %e10,[%a4]12
8000a172:	09 58 4c 09 	ld.d %e8,[%a5]12
8000a176:	df 04 35 80 	jne %d4,0,8000a1e0 <_fpadd_parts+0xe2>
8000a17a:	bf 13 19 00 	jlt %d3,1,8000a1ac <_fpadd_parts+0xae>
8000a17e:	0b 89 10 48 	mov %e4,%d9,%d8
8000a182:	02 c6       	mov %d6,%d12
8000a184:	6d ff 6b ff 	call 8000a05a <__lshrdi3>
8000a188:	d2 14       	mov %e4,1
8000a18a:	02 c6       	mov %d6,%d12
8000a18c:	02 2e       	mov %d14,%d2
8000a18e:	02 3d       	mov %d13,%d3
8000a190:	6d 00 89 02 	call 8000a6a2 <__ashldi3>
8000a194:	8b f2 9f 20 	addx %d2,%d2,-1
8000a198:	8b f3 bf 30 	addc %d3,%d3,-1
8000a19c:	26 82       	and %d2,%d8
8000a19e:	26 93       	and %d3,%d9
8000a1a0:	a6 23       	or %d3,%d2
8000a1a2:	02 e8       	mov %d8,%d14
8000a1a4:	8b 03 00 85 	or.ne %d8,%d3,0
8000a1a8:	02 d9       	mov %d9,%d13
8000a1aa:	3c 21       	j 8000a1ec <_fpadd_parts+0xee>
8000a1ac:	df 03 20 00 	jeq %d3,0,8000a1ec <_fpadd_parts+0xee>
8000a1b0:	0b ab 10 48 	mov %e4,%d11,%d10
8000a1b4:	02 c6       	mov %d6,%d12
8000a1b6:	6d ff 52 ff 	call 8000a05a <__lshrdi3>
8000a1ba:	d2 14       	mov %e4,1
8000a1bc:	02 c6       	mov %d6,%d12
8000a1be:	02 2e       	mov %d14,%d2
8000a1c0:	02 3d       	mov %d13,%d3
8000a1c2:	6d 00 70 02 	call 8000a6a2 <__ashldi3>
8000a1c6:	8b f2 9f 20 	addx %d2,%d2,-1
8000a1ca:	8b f3 bf 30 	addc %d3,%d3,-1
8000a1ce:	26 a2       	and %d2,%d10
8000a1d0:	26 b3       	and %d3,%d11
8000a1d2:	a6 23       	or %d3,%d2
8000a1d4:	02 ea       	mov %d10,%d14
8000a1d6:	42 cf       	add %d15,%d12
8000a1d8:	8b 03 00 a5 	or.ne %d10,%d3,0
8000a1dc:	02 db       	mov %d11,%d13
8000a1de:	3c 07       	j 8000a1ec <_fpadd_parts+0xee>
8000a1e0:	3f f2 05 00 	jlt %d2,%d15,8000a1ea <_fpadd_parts+0xec>
8000a1e4:	02 2f       	mov %d15,%d2
8000a1e6:	d2 0a       	mov %e10,0
8000a1e8:	3c 02       	j 8000a1ec <_fpadd_parts+0xee>
8000a1ea:	d2 08       	mov %e8,0
8000a1ec:	19 d4 04 00 	ld.w %d4,[%a13]4
8000a1f0:	19 c2 04 00 	ld.w %d2,[%a12]4
8000a1f4:	5f 24 34 00 	jeq %d4,%d2,8000a25c <_fpadd_parts+0x15e>
8000a1f8:	0b 8a c0 20 	subx %d2,%d10,%d8
8000a1fc:	0b 9b d0 30 	subc %d3,%d11,%d9
8000a200:	76 45       	jz %d4,8000a20a <_fpadd_parts+0x10c>
8000a202:	0b a8 c0 20 	subx %d2,%d8,%d10
8000a206:	0b b9 d0 30 	subc %d3,%d9,%d11
8000a20a:	0e 37       	jltz %d3,8000a218 <_fpadd_parts+0x11a>
8000a20c:	82 04       	mov %d4,0
8000a20e:	68 14       	st.w [%a15]4,%d4
8000a210:	68 2f       	st.w [%a15]8,%d15
8000a212:	89 f2 4c 09 	st.d [%a15]12,%e2
8000a216:	3c 0c       	j 8000a22e <_fpadd_parts+0x130>
8000a218:	68 2f       	st.w [%a15]8,%d15
8000a21a:	8b 03 00 f1 	rsub %d15,%d3,0
8000a21e:	82 14       	mov %d4,1
8000a220:	8b 02 00 31 	rsub %d3,%d2,0
8000a224:	ab ff 1f f2 	cadd %d15,%d2,%d15,-1
8000a228:	68 14       	st.w [%a15]4,%d4
8000a22a:	68 33       	st.w [%a15]12,%d3
8000a22c:	68 4f       	st.w [%a15]16,%d15
8000a22e:	82 f5       	mov %d5,-1
8000a230:	06 c5       	sh %d5,-4
8000a232:	48 32       	ld.w %d2,[%a15]12
8000a234:	48 43       	ld.w %d3,[%a15]16
8000a236:	8b f2 9f 60 	addx %d6,%d2,-1
8000a23a:	8b f3 bf 40 	addc %d4,%d3,-1
8000a23e:	3a 54       	eq %d15,%d4,%d5
8000a240:	8b f6 3f f4 	and.ne %d15,%d6,-1
8000a244:	0b 54 a0 f2 	or.lt.u %d15,%d4,%d5
8000a248:	6e 12       	jz %d15,8000a26c <_fpadd_parts+0x16e>
8000a24a:	4c f2       	ld.w %d15,[%a15]8
8000a24c:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a250:	c2 ff       	add %d15,-1
8000a252:	06 12       	sh %d2,1
8000a254:	68 32       	st.w [%a15]12,%d2
8000a256:	68 43       	st.w [%a15]16,%d3
8000a258:	68 2f       	st.w [%a15]8,%d15
8000a25a:	3c ec       	j 8000a232 <_fpadd_parts+0x134>
8000a25c:	0b a8 40 20 	addx %d2,%d8,%d10
8000a260:	68 2f       	st.w [%a15]8,%d15
8000a262:	0b b9 50 f0 	addc %d15,%d9,%d11
8000a266:	68 14       	st.w [%a15]4,%d4
8000a268:	68 32       	st.w [%a15]12,%d2
8000a26a:	68 4f       	st.w [%a15]16,%d15
8000a26c:	82 3f       	mov %d15,3
8000a26e:	28 0f       	st.b [%a15]0,%d15
8000a270:	4c f4       	ld.w %d15,[%a15]16
8000a272:	7b 00 00 42 	movh %d4,8192
8000a276:	0b 4f 30 31 	lt.u %d3,%d15,%d4
8000a27a:	48 32       	ld.w %d2,[%a15]12
8000a27c:	40 f2       	mov.aa %a2,%a15
8000a27e:	f6 3d       	jnz %d3,8000a298 <_fpadd_parts+0x19a>
8000a280:	8f 12 00 31 	and %d3,%d2,1
8000a284:	77 2f 80 2f 	dextr %d2,%d15,%d2,31
8000a288:	06 ff       	sh %d15,-1
8000a28a:	96 00       	or %d15,0
8000a28c:	68 4f       	st.w [%a15]16,%d15
8000a28e:	4c f2       	ld.w %d15,[%a15]8
8000a290:	a6 32       	or %d2,%d3
8000a292:	c2 1f       	add %d15,1
8000a294:	68 32       	st.w [%a15]12,%d2
8000a296:	68 2f       	st.w [%a15]8,%d15
8000a298:	00 90       	ret 

8000a29a <__adddf3>:
8000a29a:	20 50       	sub.a %sp,80
8000a29c:	d9 a4 04 00 	lea %a4,[%sp]4
8000a2a0:	d9 a5 14 00 	lea %a5,[%sp]20
8000a2a4:	89 a4 44 09 	st.d [%sp]4,%e4
8000a2a8:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a2ac:	6d 00 d9 02 	call 8000a85e <__unpack_d>
8000a2b0:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a2b4:	d9 a5 28 00 	lea %a5,[%sp]40
8000a2b8:	6d 00 d3 02 	call 8000a85e <__unpack_d>
8000a2bc:	d9 a4 14 00 	lea %a4,[%sp]20
8000a2c0:	d9 a5 28 00 	lea %a5,[%sp]40
8000a2c4:	d9 a6 3c 00 	lea %a6,[%sp]60
8000a2c8:	6d ff 1b ff 	call 8000a0fe <_fpadd_parts>
8000a2cc:	40 24       	mov.aa %a4,%a2
8000a2ce:	1d 00 3f 02 	j 8000a74c <__pack_d>

8000a2d2 <__subdf3>:
8000a2d2:	20 50       	sub.a %sp,80
8000a2d4:	d9 a4 04 00 	lea %a4,[%sp]4
8000a2d8:	d9 a5 14 00 	lea %a5,[%sp]20
8000a2dc:	89 a4 44 09 	st.d [%sp]4,%e4
8000a2e0:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a2e4:	6d 00 bd 02 	call 8000a85e <__unpack_d>
8000a2e8:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a2ec:	d9 a5 28 00 	lea %a5,[%sp]40
8000a2f0:	6d 00 b7 02 	call 8000a85e <__unpack_d>
8000a2f4:	58 0b       	ld.w %d15,[%sp]44
8000a2f6:	d9 a4 14 00 	lea %a4,[%sp]20
8000a2fa:	8f 1f 80 f1 	xor %d15,%d15,1
8000a2fe:	d9 a5 28 00 	lea %a5,[%sp]40
8000a302:	d9 a6 3c 00 	lea %a6,[%sp]60
8000a306:	78 0b       	st.w [%sp]44,%d15
8000a308:	6d ff fb fe 	call 8000a0fe <_fpadd_parts>
8000a30c:	40 24       	mov.aa %a4,%a2
8000a30e:	1d 00 1f 02 	j 8000a74c <__pack_d>

8000a312 <__muldf3>:
8000a312:	20 50       	sub.a %sp,80
8000a314:	d9 a4 04 00 	lea %a4,[%sp]4
8000a318:	d9 a5 14 00 	lea %a5,[%sp]20
8000a31c:	89 a4 44 09 	st.d [%sp]4,%e4
8000a320:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a324:	6d 00 9d 02 	call 8000a85e <__unpack_d>
8000a328:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a32c:	d9 a5 28 00 	lea %a5,[%sp]40
8000a330:	6d 00 97 02 	call 8000a85e <__unpack_d>
8000a334:	39 a3 14 00 	ld.bu %d3,[%sp]20
8000a338:	ff 23 0c 80 	jge.u %d3,2,8000a350 <__muldf3+0x3e>
8000a33c:	19 a2 18 00 	ld.w %d2,[%sp]24
8000a340:	58 0b       	ld.w %d15,[%sp]44
8000a342:	d9 a4 14 00 	lea %a4,[%sp]20
8000a346:	0b f2 10 f1 	ne %d15,%d2,%d15
8000a34a:	78 06       	st.w [%sp]24,%d15
8000a34c:	1d 00 b3 00 	j 8000a4b2 <__muldf3+0x1a0>
8000a350:	39 af 28 00 	ld.bu %d15,[%sp]40
8000a354:	ff 2f 0c 80 	jge.u %d15,2,8000a36c <__muldf3+0x5a>
8000a358:	58 0b       	ld.w %d15,[%sp]44
8000a35a:	19 a2 18 00 	ld.w %d2,[%sp]24
8000a35e:	d9 a4 28 00 	lea %a4,[%sp]40
8000a362:	0b f2 10 f1 	ne %d15,%d2,%d15
8000a366:	78 0b       	st.w [%sp]44,%d15
8000a368:	1d 00 a5 00 	j 8000a4b2 <__muldf3+0x1a0>
8000a36c:	df 43 09 80 	jne %d3,4,8000a37e <__muldf3+0x6c>
8000a370:	91 00 00 48 	movh.a %a4,32768
8000a374:	d9 44 d0 50 	lea %a4,[%a4]3408 <80000d50 <__thenan_df>>
8000a378:	df 2f 9d 00 	jeq %d15,2,8000a4b2 <__muldf3+0x1a0>
8000a37c:	3c e0       	j 8000a33c <__muldf3+0x2a>
8000a37e:	5e 48       	jne %d15,4,8000a38e <__muldf3+0x7c>
8000a380:	91 00 00 48 	movh.a %a4,32768
8000a384:	d9 44 d0 50 	lea %a4,[%a4]3408 <80000d50 <__thenan_df>>
8000a388:	df 23 95 00 	jeq %d3,2,8000a4b2 <__muldf3+0x1a0>
8000a38c:	3c e6       	j 8000a358 <__muldf3+0x46>
8000a38e:	df 23 d7 7f 	jeq %d3,2,8000a33c <__muldf3+0x2a>
8000a392:	df 2f e3 7f 	jeq %d15,2,8000a358 <__muldf3+0x46>
8000a396:	58 08       	ld.w %d15,[%sp]32
8000a398:	19 ab 38 00 	ld.w %d11,[%sp]56 <80000008 <BootModeHeader0+0x8>>
8000a39c:	d2 00       	mov %e0,0
8000a39e:	19 a0 34 00 	ld.w %d0,[%sp]52
8000a3a2:	73 bf 68 60 	mul.u %e6,%d15,%d11
8000a3a6:	82 0c       	mov %d12,0
8000a3a8:	73 0f 68 40 	mul.u %e4,%d15,%d0
8000a3ac:	19 aa 24 00 	ld.w %d10,[%sp]36
8000a3b0:	82 02       	mov %d2,0
8000a3b2:	03 cf 0a 77 	madd %d7,%d7,%d15,%d12
8000a3b6:	03 b2 0a 77 	madd %d7,%d7,%d2,%d11
8000a3ba:	03 1f 0a 55 	madd %d5,%d5,%d15,%d1
8000a3be:	03 02 0a 55 	madd %d5,%d5,%d2,%d0
8000a3c2:	82 0d       	mov %d13,0
8000a3c4:	03 a0 68 26 	madd.u %e2,%e6,%d0,%d10
8000a3c8:	03 d0 0a 33 	madd %d3,%d3,%d0,%d13
8000a3cc:	03 a1 0a 33 	madd %d3,%d3,%d1,%d10
8000a3d0:	0b 54 10 08 	mov %e0,%d4,%d5
8000a3d4:	42 20       	add %d0,%d2
8000a3d6:	3a 73       	eq %d15,%d3,%d7
8000a3d8:	0b 62 50 f2 	and.ge.u %d15,%d2,%d6
8000a3dc:	0b 37 a0 f2 	or.lt.u %d15,%d7,%d3
8000a3e0:	8b 0f 00 62 	eq %d6,%d15,0
8000a3e4:	3a 50       	eq %d15,%d0,%d5
8000a3e6:	0b 41 50 f2 	and.ge.u %d15,%d1,%d4
8000a3ea:	0b 05 a0 f2 	or.lt.u %d15,%d5,%d0
8000a3ee:	ba 0f       	eq %d15,%d15,0
8000a3f0:	53 1f 40 40 	mul.u %e4,%d15,1
8000a3f4:	02 38       	mov %d8,%d3
8000a3f6:	82 09       	mov %d9,0
8000a3f8:	03 ab 68 28 	madd.u %e2,%e8,%d11,%d10
8000a3fc:	02 5f       	mov %d15,%d5
8000a3fe:	03 db 0a 33 	madd %d3,%d3,%d11,%d13
8000a402:	42 6f       	add %d15,%d6
8000a404:	03 ac 0a 33 	madd %d3,%d3,%d12,%d10
8000a408:	0b 4f 10 68 	mov %e6,%d15,%d4
8000a40c:	0b 62 40 40 	addx %d4,%d2,%d6
8000a410:	0b 73 50 20 	addc %d2,%d3,%d7
8000a414:	58 07       	ld.w %d15,[%sp]28
8000a416:	19 a3 30 00 	ld.w %d3,[%sp]48
8000a41a:	19 a5 18 00 	ld.w %d5,[%sp]24
8000a41e:	42 3f       	add %d15,%d3
8000a420:	19 a3 2c 00 	ld.w %d3,[%sp]44
8000a424:	c2 4f       	add %d15,4
8000a426:	0b 35 10 31 	ne %d3,%d5,%d3
8000a42a:	59 a3 00 10 	st.w [%sp]64,%d3
8000a42e:	7b 00 00 52 	movh %d5,8192
8000a432:	0b 52 50 31 	ge.u %d3,%d2,%d5
8000a436:	df 03 1b 00 	jeq %d3,0,8000a46c <__muldf3+0x15a>
8000a43a:	8f 14 00 31 	and %d3,%d4,1
8000a43e:	76 37       	jz %d3,8000a44c <__muldf3+0x13a>
8000a440:	8f f0 1f 30 	sh %d3,%d0,-1
8000a444:	77 10 80 1f 	dextr %d1,%d0,%d1,31
8000a448:	b7 f3 81 0f 	insert %d0,%d3,15,31,1
8000a44c:	77 42 80 4f 	dextr %d4,%d2,%d4,31
8000a450:	c2 1f       	add %d15,1
8000a452:	06 f2       	sh %d2,-1
8000a454:	3c ed       	j 8000a42e <__muldf3+0x11c>
8000a456:	77 42 80 20 	dextr %d2,%d2,%d4,1
8000a45a:	06 14       	sh %d4,1
8000a45c:	ce 04       	jgez %d0,8000a464 <__muldf3+0x152>
8000a45e:	8f 14 40 51 	or %d5,%d4,1
8000a462:	02 54       	mov %d4,%d5
8000a464:	77 10 80 00 	dextr %d0,%d0,%d1,1
8000a468:	c2 ff       	add %d15,-1
8000a46a:	06 11       	sh %d1,1
8000a46c:	7b 00 00 51 	movh %d5,4096
8000a470:	0b 52 30 31 	lt.u %d3,%d2,%d5
8000a474:	df 03 f1 ff 	jne %d3,0,8000a456 <__muldf3+0x144>
8000a478:	78 11       	st.w [%sp]68,%d15
8000a47a:	02 4f       	mov %d15,%d4
8000a47c:	16 ff       	and %d15,255
8000a47e:	8b 0f 28 f2 	ne %d15,%d15,128
8000a482:	ee 0f       	jnz %d15,8000a4a0 <__muldf3+0x18e>
8000a484:	a6 10       	or %d0,%d1
8000a486:	77 42 00 fc 	dextr %d15,%d2,%d4,24
8000a48a:	8b 00 20 02 	ne %d0,%d0,0
8000a48e:	0f f0 e0 00 	andn %d0,%d0,%d15
8000a492:	76 07       	jz %d0,8000a4a0 <__muldf3+0x18e>
8000a494:	8b 04 88 40 	addx %d4,%d4,128
8000a498:	8b 02 a0 20 	addc %d2,%d2,0
8000a49c:	8f f4 cf 41 	andn %d4,%d4,255
8000a4a0:	d9 a4 10 10 	lea %a4,[%sp]80
8000a4a4:	82 3f       	mov %d15,3
8000a4a6:	59 a4 08 10 	st.w [%sp]72,%d4
8000a4aa:	59 a2 0c 10 	st.w [%sp]76,%d2
8000a4ae:	89 4f 2c f4 	st.b [+%a4]-20 <800003ec <IfxAsclin1_TX_P15_1_OUT+0x4>>,%d15
8000a4b2:	1d 00 4d 01 	j 8000a74c <__pack_d>

8000a4b6 <__divdf3>:
8000a4b6:	20 38       	sub.a %sp,56
8000a4b8:	40 a4       	mov.aa %a4,%sp
8000a4ba:	d9 a5 10 00 	lea %a5,[%sp]16
8000a4be:	89 a4 40 09 	st.d [%sp],%e4
8000a4c2:	89 a6 48 09 	st.d [%sp]8,%e6
8000a4c6:	6d 00 cc 01 	call 8000a85e <__unpack_d>
8000a4ca:	d9 a4 08 00 	lea %a4,[%sp]8
8000a4ce:	d9 a5 24 00 	lea %a5,[%sp]36
8000a4d2:	6d 00 c6 01 	call 8000a85e <__unpack_d>
8000a4d6:	39 a2 10 00 	ld.bu %d2,[%sp]16
8000a4da:	bf 22 76 80 	jlt.u %d2,2,8000a5c6 <__divdf3+0x110>
8000a4de:	39 af 24 00 	ld.bu %d15,[%sp]36
8000a4e2:	d9 a4 24 00 	lea %a4,[%sp]36
8000a4e6:	bf 2f 72 80 	jlt.u %d15,2,8000a5ca <__divdf3+0x114>
8000a4ea:	19 a4 14 00 	ld.w %d4,[%sp]20
8000a4ee:	19 a3 28 00 	ld.w %d3,[%sp]40
8000a4f2:	c6 43       	xor %d3,%d4
8000a4f4:	59 a3 14 00 	st.w [%sp]20,%d3
8000a4f8:	1b e2 ff 3f 	addi %d3,%d2,-2
8000a4fc:	8f d3 0f 31 	and %d3,%d3,253
8000a500:	f6 38       	jnz %d3,8000a510 <__divdf3+0x5a>
8000a502:	91 00 00 48 	movh.a %a4,32768
8000a506:	d9 44 d0 50 	lea %a4,[%a4]3408 <80000d50 <__thenan_df>>
8000a50a:	5f f2 5e 80 	jne %d2,%d15,8000a5c6 <__divdf3+0x110>
8000a50e:	3c 5e       	j 8000a5ca <__divdf3+0x114>
8000a510:	5e 47       	jne %d15,4,8000a51e <__divdf3+0x68>
8000a512:	d2 02       	mov %e2,0
8000a514:	82 0f       	mov %d15,0
8000a516:	89 a2 5c 09 	st.d [%sp]28,%e2
8000a51a:	78 06       	st.w [%sp]24,%d15
8000a51c:	3c 55       	j 8000a5c6 <__divdf3+0x110>
8000a51e:	5e 25       	jne %d15,2,8000a528 <__divdf3+0x72>
8000a520:	82 4f       	mov %d15,4
8000a522:	e9 af 10 00 	st.b [%sp]16,%d15
8000a526:	3c 50       	j 8000a5c6 <__divdf3+0x110>
8000a528:	58 06       	ld.w %d15,[%sp]24
8000a52a:	09 a2 5c 09 	ld.d %e2,[%sp]28
8000a52e:	09 a4 70 09 	ld.d %e4,[%sp]48
8000a532:	19 a6 2c 00 	ld.w %d6,[%sp]44
8000a536:	52 66       	sub %d6,%d15,%d6
8000a538:	3a 53       	eq %d15,%d3,%d5
8000a53a:	0b 42 50 f2 	and.ge.u %d15,%d2,%d4
8000a53e:	59 a6 18 00 	st.w [%sp]24,%d6
8000a542:	0b 35 a0 f2 	or.lt.u %d15,%d5,%d3
8000a546:	ee 07       	jnz %d15,8000a554 <__divdf3+0x9e>
8000a548:	c2 f6       	add %d6,-1
8000a54a:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a54e:	59 a6 18 00 	st.w [%sp]24,%d6
8000a552:	06 12       	sh %d2,1
8000a554:	82 01       	mov %d1,0
8000a556:	7b 00 00 f1 	movh %d15,4096
8000a55a:	82 00       	mov %d0,0
8000a55c:	82 07       	mov %d7,0
8000a55e:	c5 0f 3c 00 	lea %a15,3c <_.+0x3b>
8000a562:	0b 53 00 61 	eq %d6,%d3,%d5
8000a566:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
8000a56a:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
8000a56e:	f6 6b       	jnz %d6,8000a584 <__divdf3+0xce>
8000a570:	0f 10 a0 80 	or %d8,%d0,%d1
8000a574:	0f f7 a0 60 	or %d6,%d7,%d15
8000a578:	0b 42 c0 20 	subx %d2,%d2,%d4
8000a57c:	02 80       	mov %d0,%d8
8000a57e:	02 67       	mov %d7,%d6
8000a580:	0b 53 d0 30 	subc %d3,%d3,%d5
8000a584:	77 1f 80 1f 	dextr %d1,%d15,%d1,31
8000a588:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a58c:	06 ff       	sh %d15,-1
8000a58e:	06 12       	sh %d2,1
8000a590:	fd f0 e9 7f 	loop %a15,8000a562 <__divdf3+0xac>
8000a594:	02 0f       	mov %d15,%d0
8000a596:	16 ff       	and %d15,255
8000a598:	8b 0f 28 f2 	ne %d15,%d15,128
8000a59c:	0b 70 10 48 	mov %e4,%d0,%d7
8000a5a0:	ee 0f       	jnz %d15,8000a5be <__divdf3+0x108>
8000a5a2:	a6 32       	or %d2,%d3
8000a5a4:	77 07 00 fc 	dextr %d15,%d7,%d0,24
8000a5a8:	8b 02 20 22 	ne %d2,%d2,0
8000a5ac:	0f f2 e0 20 	andn %d2,%d2,%d15
8000a5b0:	76 27       	jz %d2,8000a5be <__divdf3+0x108>
8000a5b2:	8b 00 88 00 	addx %d0,%d0,128
8000a5b6:	8b 07 a0 40 	addc %d4,%d7,0
8000a5ba:	8f f0 cf 51 	andn %d5,%d0,255
8000a5be:	59 a5 1c 00 	st.w [%sp]28,%d5
8000a5c2:	59 a4 20 00 	st.w [%sp]32,%d4
8000a5c6:	d9 a4 10 00 	lea %a4,[%sp]16
8000a5ca:	1d 00 c1 00 	j 8000a74c <__pack_d>

8000a5ce <__floatsidf>:
8000a5ce:	20 18       	sub.a %sp,24
8000a5d0:	82 3f       	mov %d15,3
8000a5d2:	2c a4       	st.b [%sp]4,%d15
8000a5d4:	8f 14 1e f0 	sh %d15,%d4,-31
8000a5d8:	78 02       	st.w [%sp]8,%d15
8000a5da:	f6 44       	jnz %d4,8000a5e2 <__floatsidf+0x14>
8000a5dc:	82 2f       	mov %d15,2
8000a5de:	2c a4       	st.b [%sp]4,%d15
8000a5e0:	3c 16       	j 8000a60c <__floatsidf+0x3e>
8000a5e2:	6e 09       	jz %d15,8000a5f4 <__floatsidf+0x26>
8000a5e4:	7b 00 00 f8 	movh %d15,32768
8000a5e8:	82 02       	mov %d2,0
8000a5ea:	7b 00 1e 3c 	movh %d3,49632
8000a5ee:	5f f4 13 00 	jeq %d4,%d15,8000a614 <__floatsidf+0x46>
8000a5f2:	32 54       	rsub %d4
8000a5f4:	0f 04 b0 f1 	clz %d15,%d4
8000a5f8:	1b df 01 60 	addi %d6,%d15,29
8000a5fc:	82 05       	mov %d5,0
8000a5fe:	6d 00 52 00 	call 8000a6a2 <__ashldi3>
8000a602:	8b ff 01 f1 	rsub %d15,%d15,31
8000a606:	89 a2 50 09 	st.d [%sp]16,%e2
8000a60a:	78 03       	st.w [%sp]12,%d15
8000a60c:	d9 a4 04 00 	lea %a4,[%sp]4
8000a610:	6d 00 9e 00 	call 8000a74c <__pack_d>
8000a614:	00 90       	ret 

8000a616 <__make_dp>:
8000a616:	20 18       	sub.a %sp,24
8000a618:	09 a2 58 09 	ld.d %e2,[%sp]24
8000a61c:	d9 a4 04 00 	lea %a4,[%sp]4
8000a620:	e9 a4 04 00 	st.b [%sp]4,%d4
8000a624:	59 a5 08 00 	st.w [%sp]8,%d5
8000a628:	59 a6 0c 00 	st.w [%sp]12,%d6
8000a62c:	89 a2 50 09 	st.d [%sp]16,%e2
8000a630:	1d 00 8e 00 	j 8000a74c <__pack_d>

8000a634 <__truncdfsf2>:
8000a634:	20 20       	sub.a %sp,32
8000a636:	d9 a4 20 00 	lea %a4,[%sp]32
8000a63a:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000a63e:	d9 a5 0c 00 	lea %a5,[%sp]12
8000a642:	6d 00 0e 01 	call 8000a85e <__unpack_d>
8000a646:	19 a7 18 00 	ld.w %d7,[%sp]24
8000a64a:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000a64e:	39 a4 0c 00 	ld.bu %d4,[%sp]12
8000a652:	77 72 00 21 	dextr %d2,%d2,%d7,2
8000a656:	b7 07 02 7f 	insert %d7,%d7,0,30,2
8000a65a:	02 23       	mov %d3,%d2
8000a65c:	8f 12 40 21 	or %d2,%d2,1
8000a660:	19 a5 10 00 	ld.w %d5,[%sp]16
8000a664:	19 a6 14 00 	ld.w %d6,[%sp]20
8000a668:	2b 32 40 77 	sel %d7,%d7,%d2,%d3
8000a66c:	1d 00 65 00 	j 8000a736 <__make_fp>

8000a670 <__floatunsidf>:
8000a670:	20 18       	sub.a %sp,24
8000a672:	82 0f       	mov %d15,0
8000a674:	78 02       	st.w [%sp]8,%d15
8000a676:	f6 44       	jnz %d4,8000a67e <__floatunsidf+0xe>
8000a678:	82 2f       	mov %d15,2
8000a67a:	2c a4       	st.b [%sp]4,%d15
8000a67c:	3c 0f       	j 8000a69a <__floatunsidf+0x2a>
8000a67e:	82 3f       	mov %d15,3
8000a680:	2c a4       	st.b [%sp]4,%d15
8000a682:	0f 04 b0 f1 	clz %d15,%d4
8000a686:	1b df 01 60 	addi %d6,%d15,29
8000a68a:	82 05       	mov %d5,0
8000a68c:	6d 00 0b 00 	call 8000a6a2 <__ashldi3>
8000a690:	8b ff 01 f1 	rsub %d15,%d15,31
8000a694:	89 a2 50 09 	st.d [%sp]16,%e2
8000a698:	78 03       	st.w [%sp]12,%d15
8000a69a:	d9 a4 04 00 	lea %a4,[%sp]4
8000a69e:	1d 00 57 00 	j 8000a74c <__pack_d>

8000a6a2 <__ashldi3>:
8000a6a2:	6f 56 07 80 	jnz.t %d6,5,8000a6b0 <__ashldi3+0xe>
8000a6a6:	0f 64 00 20 	sh %d2,%d4,%d6
8000a6aa:	17 45 80 36 	dextr %d3,%d5,%d4,%d6
8000a6ae:	00 90       	ret 
8000a6b0:	8b 06 1e 60 	add %d6,%d6,-32
8000a6b4:	82 02       	mov %d2,0
8000a6b6:	0f 64 00 30 	sh %d3,%d4,%d6
8000a6ba:	00 90       	ret 

8000a6bc <__unpack_f>:
8000a6bc:	54 43       	ld.w %d3,[%a4]
8000a6be:	37 03 77 f0 	extr.u %d15,%d3,0,23
8000a6c2:	37 03 e8 2b 	extr.u %d2,%d3,23,8
8000a6c6:	8f 13 1e 30 	sh %d3,%d3,-31
8000a6ca:	59 53 04 00 	st.w [%a5]4,%d3
8000a6ce:	df 02 18 80 	jne %d2,0,8000a6fe <__unpack_f+0x42>
8000a6d2:	ee 03       	jnz %d15,8000a6d8 <__unpack_f+0x1c>
8000a6d4:	82 2f       	mov %d15,2
8000a6d6:	3c 19       	j 8000a708 <__unpack_f+0x4c>
8000a6d8:	3b 20 f8 2f 	mov %d2,-126
8000a6dc:	59 52 08 00 	st.w [%a5]8,%d2
8000a6e0:	82 32       	mov %d2,3
8000a6e2:	34 52       	st.b [%a5],%d2
8000a6e4:	06 7f       	sh %d15,7
8000a6e6:	3b 10 f8 2f 	mov %d2,-127
8000a6ea:	7b 00 00 44 	movh %d4,16384
8000a6ee:	06 1f       	sh %d15,1
8000a6f0:	02 23       	mov %d3,%d2
8000a6f2:	c2 f2       	add %d2,-1
8000a6f4:	3f 4f fd ff 	jlt.u %d15,%d4,8000a6ee <__unpack_f+0x32>
8000a6f8:	59 53 08 00 	st.w [%a5]8,%d3
8000a6fc:	3c 1b       	j 8000a732 <__unpack_f+0x76>
8000a6fe:	8b f2 2f 32 	ne %d3,%d2,255
8000a702:	f6 3f       	jnz %d3,8000a720 <__unpack_f+0x64>
8000a704:	ee 04       	jnz %d15,8000a70c <__unpack_f+0x50>
8000a706:	82 4f       	mov %d15,4
8000a708:	2c 50       	st.b [%a5]0,%d15
8000a70a:	00 90       	ret 
8000a70c:	7b 00 04 20 	movh %d2,64
8000a710:	26 f2       	and %d2,%d15
8000a712:	76 22       	jz %d2,8000a716 <__unpack_f+0x5a>
8000a714:	82 12       	mov %d2,1
8000a716:	b7 0f 01 fb 	insert %d15,%d15,0,22,1
8000a71a:	34 52       	st.b [%a5],%d2
8000a71c:	06 7f       	sh %d15,7
8000a71e:	3c 0a       	j 8000a732 <__unpack_f+0x76>
8000a720:	1b 12 f8 2f 	addi %d2,%d2,-127
8000a724:	06 7f       	sh %d15,7
8000a726:	59 52 08 00 	st.w [%a5]8,%d2
8000a72a:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000a72e:	82 32       	mov %d2,3
8000a730:	34 52       	st.b [%a5],%d2
8000a732:	6c 53       	st.w [%a5]12,%d15
8000a734:	00 90       	ret 

8000a736 <__make_fp>:
8000a736:	20 10       	sub.a %sp,16
8000a738:	40 a4       	mov.aa %a4,%sp
8000a73a:	34 a4       	st.b [%sp],%d4
8000a73c:	59 a5 04 00 	st.w [%sp]4,%d5
8000a740:	59 a6 08 00 	st.w [%sp]8,%d6
8000a744:	59 a7 0c 00 	st.w [%sp]12,%d7
8000a748:	1d 00 e1 00 	j 8000a90a <__pack_f>

8000a74c <__pack_d>:
8000a74c:	14 42       	ld.bu %d2,[%a4]
8000a74e:	19 49 0c 00 	ld.w %d9,[%a4]12
8000a752:	19 48 10 00 	ld.w %d8,[%a4]16
8000a756:	19 4c 04 00 	ld.w %d12,[%a4]4
8000a75a:	ff 22 0b 80 	jge.u %d2,2,8000a770 <__pack_d+0x24>
8000a75e:	77 98 00 9c 	dextr %d9,%d8,%d9,24
8000a762:	06 88       	sh %d8,-8
8000a764:	02 95       	mov %d5,%d9
8000a766:	b7 18 8d 49 	insert %d4,%d8,1,19,13
8000a76a:	3b f0 7f f0 	mov %d15,2047
8000a76e:	3c 6f       	j 8000a84c <__pack_d+0x100>
8000a770:	3b f0 7f f0 	mov %d15,2047
8000a774:	d2 04       	mov %e4,0
8000a776:	df 42 6b 00 	jeq %d2,4,8000a84c <__pack_d+0x100>
8000a77a:	0f 89 a0 f0 	or %d15,%d9,%d8
8000a77e:	8b 22 00 32 	eq %d3,%d2,2
8000a782:	8b 0f e0 34 	or.eq %d3,%d15,0
8000a786:	82 0f       	mov %d15,0
8000a788:	df 03 62 80 	jne %d3,0,8000a84c <__pack_d+0x100>
8000a78c:	19 42 08 00 	ld.w %d2,[%a4]8
8000a790:	3b 20 c0 ff 	mov %d15,-1022
8000a794:	7f f2 36 00 	jge %d2,%d15,8000a800 <__pack_d+0xb4>
8000a798:	a2 2f       	sub %d15,%d2
8000a79a:	8b 9f 83 42 	ge %d4,%d15,57
8000a79e:	82 02       	mov %d2,0
8000a7a0:	df 04 18 80 	jne %d4,0,8000a7d0 <__pack_d+0x84>
8000a7a4:	0b 98 10 48 	mov %e4,%d8,%d9
8000a7a8:	02 f6       	mov %d6,%d15
8000a7aa:	6d ff 58 fc 	call 8000a05a <__lshrdi3>
8000a7ae:	d2 14       	mov %e4,1
8000a7b0:	02 f6       	mov %d6,%d15
8000a7b2:	0b 32 10 a8 	mov %e10,%d2,%d3
8000a7b6:	6d ff 76 ff 	call 8000a6a2 <__ashldi3>
8000a7ba:	8b f2 9f 20 	addx %d2,%d2,-1
8000a7be:	8b f3 bf 30 	addc %d3,%d3,-1
8000a7c2:	26 29       	and %d9,%d2
8000a7c4:	26 38       	and %d8,%d3
8000a7c6:	a6 98       	or %d8,%d9
8000a7c8:	02 b2       	mov %d2,%d11
8000a7ca:	8b 08 00 25 	or.ne %d2,%d8,0
8000a7ce:	02 a3       	mov %d3,%d10
8000a7d0:	02 2f       	mov %d15,%d2
8000a7d2:	16 ff       	and %d15,255
8000a7d4:	8b 0f 28 f2 	ne %d15,%d15,128
8000a7d8:	ee 07       	jnz %d15,8000a7e6 <__pack_d+0x9a>
8000a7da:	8f 02 10 f1 	and %d15,%d2,256
8000a7de:	6e 08       	jz %d15,8000a7ee <__pack_d+0xa2>
8000a7e0:	8b 02 88 20 	addx %d2,%d2,128
8000a7e4:	3c 03       	j 8000a7ea <__pack_d+0x9e>
8000a7e6:	8b f2 87 20 	addx %d2,%d2,127
8000a7ea:	8b 03 a0 30 	addc %d3,%d3,0
8000a7ee:	7b 00 00 41 	movh %d4,4096
8000a7f2:	0b 43 50 f1 	ge.u %d15,%d3,%d4
8000a7f6:	77 23 00 5c 	dextr %d5,%d3,%d2,24
8000a7fa:	8f 83 1f 40 	sh %d4,%d3,-8
8000a7fe:	3c 27       	j 8000a84c <__pack_d+0x100>
8000a800:	3b 00 40 30 	mov %d3,1024
8000a804:	3b f0 7f f0 	mov %d15,2047
8000a808:	7f 32 22 00 	jge %d2,%d3,8000a84c <__pack_d+0x100>
8000a80c:	02 9f       	mov %d15,%d9
8000a80e:	16 ff       	and %d15,255
8000a810:	8b 0f 28 f2 	ne %d15,%d15,128
8000a814:	ee 07       	jnz %d15,8000a822 <__pack_d+0xd6>
8000a816:	8f 09 10 f1 	and %d15,%d9,256
8000a81a:	6e 08       	jz %d15,8000a82a <__pack_d+0xde>
8000a81c:	8b 09 88 90 	addx %d9,%d9,128
8000a820:	3c 03       	j 8000a826 <__pack_d+0xda>
8000a822:	8b f9 87 90 	addx %d9,%d9,127
8000a826:	8b 08 a0 80 	addc %d8,%d8,0
8000a82a:	7b 00 00 32 	movh %d3,8192
8000a82e:	0b 38 50 f1 	ge.u %d15,%d8,%d3
8000a832:	ee 04       	jnz %d15,8000a83a <__pack_d+0xee>
8000a834:	1b f2 3f f0 	addi %d15,%d2,1023
8000a838:	3c 06       	j 8000a844 <__pack_d+0xf8>
8000a83a:	77 98 80 9f 	dextr %d9,%d8,%d9,31
8000a83e:	1b 02 40 f0 	addi %d15,%d2,1024
8000a842:	06 f8       	sh %d8,-1
8000a844:	77 98 00 5c 	dextr %d5,%d8,%d9,24
8000a848:	8f 88 1f 40 	sh %d4,%d8,-8
8000a84c:	d2 02       	mov %e2,0
8000a84e:	37 43 14 40 	insert %d4,%d3,%d4,0,20
8000a852:	37 f4 0b fa 	insert %d15,%d4,%d15,20,11
8000a856:	02 52       	mov %d2,%d5
8000a858:	37 cf 81 3f 	insert %d3,%d15,%d12,31,1
8000a85c:	00 90       	ret 

8000a85e <__unpack_d>:
8000a85e:	19 44 04 00 	ld.w %d4,[%a4]4
8000a862:	54 42       	ld.w %d2,[%a4]
8000a864:	37 04 74 50 	extr.u %d5,%d4,0,20
8000a868:	37 04 6b fa 	extr.u %d15,%d4,20,11
8000a86c:	8f 14 1e 40 	sh %d4,%d4,-31
8000a870:	59 54 04 00 	st.w [%a5]4,%d4
8000a874:	02 53       	mov %d3,%d5
8000a876:	ee 21       	jnz %d15,8000a8b8 <__unpack_d+0x5a>
8000a878:	0f 25 a0 f0 	or %d15,%d5,%d2
8000a87c:	ee 03       	jnz %d15,8000a882 <__unpack_d+0x24>
8000a87e:	82 2f       	mov %d15,2
8000a880:	3c 23       	j 8000a8c6 <__unpack_d+0x68>
8000a882:	3b 20 c0 ff 	mov %d15,-1022
8000a886:	6c 52       	st.w [%a5]8,%d15
8000a888:	82 3f       	mov %d15,3
8000a88a:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000a88e:	2c 50       	st.b [%a5]0,%d15
8000a890:	8f 82 00 20 	sh %d2,%d2,8
8000a894:	3b 10 c0 ff 	mov %d15,-1023
8000a898:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a89c:	7b 00 00 61 	movh %d6,4096
8000a8a0:	0b 63 30 51 	lt.u %d5,%d3,%d6
8000a8a4:	02 f4       	mov %d4,%d15
8000a8a6:	06 12       	sh %d2,1
8000a8a8:	c2 ff       	add %d15,-1
8000a8aa:	df 05 f7 ff 	jne %d5,0,8000a898 <__unpack_d+0x3a>
8000a8ae:	59 54 08 00 	st.w [%a5]8,%d4
8000a8b2:	59 52 0c 00 	st.w [%a5]12,%d2
8000a8b6:	3c 27       	j 8000a904 <__unpack_d+0xa6>
8000a8b8:	3b f0 7f 40 	mov %d4,2047
8000a8bc:	fe 47       	jne %d15,%d4,8000a8ea <__unpack_d+0x8c>
8000a8be:	0f 25 a0 f0 	or %d15,%d5,%d2
8000a8c2:	ee 04       	jnz %d15,8000a8ca <__unpack_d+0x6c>
8000a8c4:	82 4f       	mov %d15,4
8000a8c6:	2c 50       	st.b [%a5]0,%d15
8000a8c8:	00 90       	ret 
8000a8ca:	7b 80 00 f0 	movh %d15,8
8000a8ce:	26 5f       	and %d15,%d5
8000a8d0:	6e 02       	jz %d15,8000a8d4 <__unpack_d+0x76>
8000a8d2:	82 1f       	mov %d15,1
8000a8d4:	2c 50       	st.b [%a5]0,%d15
8000a8d6:	b7 03 81 f9 	insert %d15,%d3,0,19,1
8000a8da:	77 2f 00 f4 	dextr %d15,%d15,%d2,8
8000a8de:	8f 82 00 40 	sh %d4,%d2,8
8000a8e2:	59 54 0c 00 	st.w [%a5]12,%d4
8000a8e6:	6c 54       	st.w [%a5]16,%d15
8000a8e8:	00 90       	ret 
8000a8ea:	1b 1f c0 ff 	addi %d15,%d15,-1023
8000a8ee:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000a8f2:	6c 52       	st.w [%a5]8,%d15
8000a8f4:	8f 82 00 20 	sh %d2,%d2,8
8000a8f8:	82 3f       	mov %d15,3
8000a8fa:	b7 f3 01 3e 	insert %d3,%d3,15,28,1
8000a8fe:	2c 50       	st.b [%a5]0,%d15
8000a900:	59 52 0c 00 	st.w [%a5]12,%d2
8000a904:	59 53 10 00 	st.w [%a5]16,%d3
8000a908:	00 90       	ret 

8000a90a <__pack_f>:
8000a90a:	14 45       	ld.bu %d5,[%a4]
8000a90c:	4c 43       	ld.w %d15,[%a4]12
8000a90e:	19 47 04 00 	ld.w %d7,[%a4]4
8000a912:	ff 25 09 80 	jge.u %d5,2,8000a924 <__pack_f+0x1a>
8000a916:	37 0f f6 33 	extr.u %d3,%d15,7,22
8000a91a:	b7 f3 01 3b 	insert %d3,%d3,15,22,1
8000a91e:	3b f0 0f 40 	mov %d4,255
8000a922:	3c 4f       	j 8000a9c0 <__pack_f+0xb6>
8000a924:	3b f0 0f 40 	mov %d4,255
8000a928:	82 03       	mov %d3,0
8000a92a:	df 45 4b 00 	jeq %d5,4,8000a9c0 <__pack_f+0xb6>
8000a92e:	8b 25 00 62 	eq %d6,%d5,2
8000a932:	8b 0f e0 64 	or.eq %d6,%d15,0
8000a936:	82 04       	mov %d4,0
8000a938:	df 06 44 80 	jne %d6,0,8000a9c0 <__pack_f+0xb6>
8000a93c:	19 45 08 00 	ld.w %d5,[%a4]8
8000a940:	8b 25 98 42 	ge %d4,%d5,-126
8000a944:	df 04 24 80 	jne %d4,0,8000a98c <__pack_f+0x82>
8000a948:	8b 25 18 51 	rsub %d5,%d5,-126
8000a94c:	8b a5 81 42 	ge %d4,%d5,26
8000a950:	f6 4c       	jnz %d4,8000a968 <__pack_f+0x5e>
8000a952:	82 12       	mov %d2,1
8000a954:	0f 52 00 20 	sh %d2,%d2,%d5
8000a958:	8b 05 00 31 	rsub %d3,%d5,0
8000a95c:	c2 f2       	add %d2,-1
8000a95e:	0f 3f 00 30 	sh %d3,%d15,%d3
8000a962:	26 2f       	and %d15,%d2
8000a964:	8b 0f 00 35 	or.ne %d3,%d15,0
8000a968:	8f f3 07 f1 	and %d15,%d3,127
8000a96c:	8b 0f 24 f2 	ne %d15,%d15,64
8000a970:	ee 06       	jnz %d15,8000a97c <__pack_f+0x72>
8000a972:	8f 03 08 f1 	and %d15,%d3,128
8000a976:	ab 03 04 3f 	cadd %d3,%d15,%d3,64
8000a97a:	3c 03       	j 8000a980 <__pack_f+0x76>
8000a97c:	1b f3 03 30 	addi %d3,%d3,63
8000a980:	7b 00 00 f4 	movh %d15,16384
8000a984:	0b f3 50 41 	ge.u %d4,%d3,%d15
8000a988:	06 93       	sh %d3,-7
8000a98a:	3c 1b       	j 8000a9c0 <__pack_f+0xb6>
8000a98c:	8b 05 88 62 	ge %d6,%d5,128
8000a990:	3b f0 0f 40 	mov %d4,255
8000a994:	df 06 16 80 	jne %d6,0,8000a9c0 <__pack_f+0xb6>
8000a998:	8f ff 07 31 	and %d3,%d15,127
8000a99c:	8b 03 24 32 	ne %d3,%d3,64
8000a9a0:	f6 36       	jnz %d3,8000a9ac <__pack_f+0xa2>
8000a9a2:	8f 0f 08 31 	and %d3,%d15,128
8000a9a6:	ab 0f 04 f3 	cadd %d15,%d3,%d15,64
8000a9aa:	3c 03       	j 8000a9b0 <__pack_f+0xa6>
8000a9ac:	1b ff 03 f0 	addi %d15,%d15,63
8000a9b0:	1b f5 07 40 	addi %d4,%d5,127
8000a9b4:	ce f4       	jgez %d15,8000a9bc <__pack_f+0xb2>
8000a9b6:	06 ff       	sh %d15,-1
8000a9b8:	1b 05 08 40 	addi %d4,%d5,128
8000a9bc:	8f 9f 1f 30 	sh %d3,%d15,-7
8000a9c0:	82 02       	mov %d2,0
8000a9c2:	37 32 17 20 	insert %d2,%d2,%d3,0,23
8000a9c6:	37 42 88 2b 	insert %d2,%d2,%d4,23,8
8000a9ca:	37 72 81 2f 	insert %d2,%d2,%d7,31,1
8000a9ce:	00 90       	ret 

8000a9d0 <malloc>:
8000a9d0:	91 00 00 f7 	movh.a %a15,28672
8000a9d4:	99 f4 50 30 	ld.a %a4,[%a15]1232 <700004d0 <_impure_ptr>>
8000a9d8:	1d 00 09 00 	j 8000a9ea <_malloc_r>

8000a9dc <free>:
8000a9dc:	91 00 00 f7 	movh.a %a15,28672
8000a9e0:	40 45       	mov.aa %a5,%a4
8000a9e2:	99 f4 50 30 	ld.a %a4,[%a15]1232 <700004d0 <_impure_ptr>>
8000a9e6:	1d 00 dc 12 	j 8000cf9e <_free_r>

8000a9ea <_malloc_r>:
8000a9ea:	1b b4 00 f0 	addi %d15,%d4,11
8000a9ee:	8b 7f 61 82 	lt.u %d8,%d15,23
8000a9f2:	8f 7f c0 f1 	andn %d15,%d15,7
8000a9f6:	ab 0f a1 88 	seln %d8,%d8,%d15,16
8000a9fa:	0b 48 30 41 	lt.u %d4,%d8,%d4
8000a9fe:	8b 08 20 45 	or.lt %d4,%d8,0
8000aa02:	40 4d       	mov.aa %a13,%a4
8000aa04:	76 45       	jz %d4,8000aa0e <_malloc_r+0x24>
8000aa06:	da 0c       	mov %d15,12
8000aa08:	6c 40       	st.w [%a4]0,%d15
8000aa0a:	1d 00 2a 02 	j 8000ae5e <_malloc_r+0x474>
8000aa0e:	91 00 00 f7 	movh.a %a15,28672
8000aa12:	8b 88 bf f2 	ge.u %d15,%d8,504
8000aa16:	6d 00 37 02 	call 8000ae84 <__malloc_lock>
8000aa1a:	d9 ff 08 30 	lea %a15,[%a15]200 <700000c8 <__malloc_av_>>
8000aa1e:	ee 19       	jnz %d15,8000aa50 <_malloc_r+0x66>
8000aa20:	8f d8 1f 20 	sh %d2,%d8,-3
8000aa24:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000aa28:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000aa2c:	7d 2c 09 80 	jne.a %a12,%a2,8000aa3e <_malloc_r+0x54>
8000aa30:	d9 c2 08 00 	lea %a2,[%a12]8
8000aa34:	99 cc 14 00 	ld.a %a12,[%a12]20
8000aa38:	c2 22       	add %d2,2
8000aa3a:	7d 2c 58 00 	jeq.a %a12,%a2,8000aaea <_malloc_r+0x100>
8000aa3e:	cc c3       	ld.a %a15,[%a12]12
8000aa40:	99 c2 08 00 	ld.a %a2,[%a12]8
8000aa44:	4c c1       	ld.w %d15,[%a12]4
8000aa46:	ec 23       	st.a [%a2]12,%a15
8000aa48:	8f 3f c0 f1 	andn %d15,%d15,3
8000aa4c:	e8 22       	st.a [%a15]8,%a2
8000aa4e:	3c 74       	j 8000ab36 <_malloc_r+0x14c>
8000aa50:	8f 78 1f f0 	sh %d15,%d8,-9
8000aa54:	3b f0 03 20 	mov %d2,63
8000aa58:	6e 27       	jz %d15,8000aaa6 <_malloc_r+0xbc>
8000aa5a:	8f a8 1f 20 	sh %d2,%d8,-6
8000aa5e:	1b 82 03 20 	addi %d2,%d2,56
8000aa62:	bf 5f 22 80 	jlt.u %d15,5,8000aaa6 <_malloc_r+0xbc>
8000aa66:	8b 5f a1 22 	ge.u %d2,%d15,21
8000aa6a:	f6 24       	jnz %d2,8000aa72 <_malloc_r+0x88>
8000aa6c:	1b bf 05 20 	addi %d2,%d15,91
8000aa70:	3c 1b       	j 8000aaa6 <_malloc_r+0xbc>
8000aa72:	8b 5f a5 22 	ge.u %d2,%d15,85
8000aa76:	f6 26       	jnz %d2,8000aa82 <_malloc_r+0x98>
8000aa78:	8f 48 1f 20 	sh %d2,%d8,-12
8000aa7c:	1b e2 06 20 	addi %d2,%d2,110
8000aa80:	3c 13       	j 8000aaa6 <_malloc_r+0xbc>
8000aa82:	8b 5f b5 22 	ge.u %d2,%d15,341
8000aa86:	f6 26       	jnz %d2,8000aa92 <_malloc_r+0xa8>
8000aa88:	8f 18 1f 20 	sh %d2,%d8,-15
8000aa8c:	1b 72 07 20 	addi %d2,%d2,119
8000aa90:	3c 0b       	j 8000aaa6 <_malloc_r+0xbc>
8000aa92:	3b 50 55 30 	mov %d3,1365
8000aa96:	3b e0 07 20 	mov %d2,126
8000aa9a:	7f 3f 06 80 	jge.u %d15,%d3,8000aaa6 <_malloc_r+0xbc>
8000aa9e:	8f e8 1e 20 	sh %d2,%d8,-18
8000aaa2:	1b c2 07 20 	addi %d2,%d2,124
8000aaa6:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000aaaa:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000aaae:	7d 2c 1d 00 	jeq.a %a12,%a2,8000aae8 <_malloc_r+0xfe>
8000aab2:	19 c4 04 00 	ld.w %d4,[%a12]4
8000aab6:	8f 34 c0 41 	andn %d4,%d4,3
8000aaba:	5a 84       	sub %d15,%d4,%d8
8000aabc:	8b 0f 41 32 	lt %d3,%d15,16
8000aac0:	f6 33       	jnz %d3,8000aac6 <_malloc_r+0xdc>
8000aac2:	c2 f2       	add %d2,-1
8000aac4:	3c 12       	j 8000aae8 <_malloc_r+0xfe>
8000aac6:	0e fe       	jltz %d15,8000aae2 <_malloc_r+0xf8>
8000aac8:	cc c3       	ld.a %a15,[%a12]12
8000aaca:	99 c2 08 00 	ld.a %a2,[%a12]8
8000aace:	ec 23       	st.a [%a2]12,%a15
8000aad0:	e8 22       	st.a [%a15]8,%a2
8000aad2:	01 c4 00 f6 	addsc.a %a15,%a12,%d4,0
8000aad6:	b7 10 21 20 	imask %e2,1,0,1
8000aada:	49 f2 44 08 	ldmst [%a15]4,%e2
8000aade:	1d 00 cc 01 	j 8000ae76 <_malloc_r+0x48c>
8000aae2:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000aae6:	3c e4       	j 8000aaae <_malloc_r+0xc4>
8000aae8:	c2 12       	add %d2,1
8000aaea:	c8 4c       	ld.a %a12,[%a15]16
8000aaec:	91 00 00 37 	movh.a %a3,28672
8000aaf0:	d9 33 10 30 	lea %a3,[%a3]208 <700000d0 <__malloc_av_+0x8>>
8000aaf4:	7d 3c 83 00 	jeq.a %a12,%a3,8000abfa <_malloc_r+0x210>
8000aaf8:	4c c1       	ld.w %d15,[%a12]4
8000aafa:	8f 3f c0 f1 	andn %d15,%d15,3
8000aafe:	52 83       	sub %d3,%d15,%d8
8000ab00:	8b 03 41 42 	lt %d4,%d3,16
8000ab04:	df 04 16 80 	jne %d4,0,8000ab30 <_malloc_r+0x146>
8000ab08:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000ab0c:	8f 18 40 81 	or %d8,%d8,1
8000ab10:	59 c8 04 00 	st.w [%a12]4,%d8
8000ab14:	e8 52       	st.a [%a15]20,%a2
8000ab16:	e8 42       	st.a [%a15]16,%a2
8000ab18:	8f 13 40 f1 	or %d15,%d3,1
8000ab1c:	b5 23 0c 00 	st.a [%a2]12,%a3
8000ab20:	b5 23 08 00 	st.a [%a2]8,%a3
8000ab24:	6c 21       	st.w [%a2]4,%d15
8000ab26:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000ab2a:	74 23       	st.w [%a2],%d3
8000ab2c:	1d 00 a5 01 	j 8000ae76 <_malloc_r+0x48c>
8000ab30:	e8 53       	st.a [%a15]20,%a3
8000ab32:	e8 43       	st.a [%a15]16,%a3
8000ab34:	0e 33       	jltz %d3,8000ab3a <_malloc_r+0x150>
8000ab36:	10 cf       	addsc.a %a15,%a12,%d15,0
8000ab38:	3c cf       	j 8000aad6 <_malloc_r+0xec>
8000ab3a:	3b 00 20 30 	mov %d3,512
8000ab3e:	7f 3f 15 80 	jge.u %d15,%d3,8000ab68 <_malloc_r+0x17e>
8000ab42:	06 df       	sh %d15,-3
8000ab44:	d0 f2       	addsc.a %a2,%a15,%d15,3
8000ab46:	48 14       	ld.w %d4,[%a15]4
8000ab48:	99 24 08 00 	ld.a %a4,[%a2]8
8000ab4c:	8f ef 3f 30 	sha %d3,%d15,-2
8000ab50:	b5 c2 0c 00 	st.a [%a12]12,%a2
8000ab54:	b5 c4 08 00 	st.a [%a12]8,%a4
8000ab58:	d7 14 01 33 	insert %d3,%d4,1,%d3,1
8000ab5c:	b5 2c 08 00 	st.a [%a2]8,%a12
8000ab60:	68 13       	st.w [%a15]4,%d3
8000ab62:	b5 4c 0c 00 	st.a [%a4]12,%a12
8000ab66:	3c 4a       	j 8000abfa <_malloc_r+0x210>
8000ab68:	8f af 1f 40 	sh %d4,%d15,-6
8000ab6c:	8f 7f 1f 30 	sh %d3,%d15,-9
8000ab70:	1b 84 03 40 	addi %d4,%d4,56
8000ab74:	bf 53 22 80 	jlt.u %d3,5,8000abb8 <_malloc_r+0x1ce>
8000ab78:	8b 53 a1 42 	ge.u %d4,%d3,21
8000ab7c:	f6 44       	jnz %d4,8000ab84 <_malloc_r+0x19a>
8000ab7e:	1b b3 05 40 	addi %d4,%d3,91
8000ab82:	3c 1b       	j 8000abb8 <_malloc_r+0x1ce>
8000ab84:	8b 53 a5 42 	ge.u %d4,%d3,85
8000ab88:	f6 46       	jnz %d4,8000ab94 <_malloc_r+0x1aa>
8000ab8a:	8f 4f 1f 40 	sh %d4,%d15,-12
8000ab8e:	1b e4 06 40 	addi %d4,%d4,110
8000ab92:	3c 13       	j 8000abb8 <_malloc_r+0x1ce>
8000ab94:	8b 53 b5 42 	ge.u %d4,%d3,341
8000ab98:	f6 46       	jnz %d4,8000aba4 <_malloc_r+0x1ba>
8000ab9a:	8f 1f 1f 40 	sh %d4,%d15,-15
8000ab9e:	1b 74 07 40 	addi %d4,%d4,119
8000aba2:	3c 0b       	j 8000abb8 <_malloc_r+0x1ce>
8000aba4:	3b 50 55 50 	mov %d5,1365
8000aba8:	3b e0 07 40 	mov %d4,126
8000abac:	7f 53 06 80 	jge.u %d3,%d5,8000abb8 <_malloc_r+0x1ce>
8000abb0:	8f ef 1e 40 	sh %d4,%d15,-18
8000abb4:	1b c4 07 40 	addi %d4,%d4,124
8000abb8:	01 f4 03 46 	addsc.a %a4,%a15,%d4,3
8000abbc:	99 42 08 00 	ld.a %a2,[%a4]8
8000abc0:	7d 42 0d 80 	jne.a %a2,%a4,8000abda <_malloc_r+0x1f0>
8000abc4:	4c f1       	ld.w %d15,[%a15]4
8000abc6:	86 e4       	sha %d4,-2
8000abc8:	d7 1f 01 44 	insert %d4,%d15,1,%d4,1
8000abcc:	40 24       	mov.aa %a4,%a2
8000abce:	68 14       	st.w [%a15]4,%d4
8000abd0:	3c 0d       	j 8000abea <_malloc_r+0x200>
8000abd2:	99 22 08 00 	ld.a %a2,[%a2]8
8000abd6:	7d 42 08 00 	jeq.a %a2,%a4,8000abe6 <_malloc_r+0x1fc>
8000abda:	19 23 04 00 	ld.w %d3,[%a2]4
8000abde:	8f 33 c0 31 	andn %d3,%d3,3
8000abe2:	3f 3f f8 ff 	jlt.u %d15,%d3,8000abd2 <_malloc_r+0x1e8>
8000abe6:	99 24 0c 00 	ld.a %a4,[%a2]12
8000abea:	b5 c4 0c 00 	st.a [%a12]12,%a4
8000abee:	b5 c2 08 00 	st.a [%a12]8,%a2
8000abf2:	b5 4c 08 00 	st.a [%a4]8,%a12
8000abf6:	b5 2c 0c 00 	st.a [%a2]12,%a12
8000abfa:	8f e2 3f 30 	sha %d3,%d2,-2
8000abfe:	82 1f       	mov %d15,1
8000ac00:	0f 3f 00 f0 	sh %d15,%d15,%d3
8000ac04:	48 13       	ld.w %d3,[%a15]4
8000ac06:	3f f3 73 80 	jlt.u %d3,%d15,8000acec <_malloc_r+0x302>
8000ac0a:	0f 3f 80 40 	and %d4,%d15,%d3
8000ac0e:	f6 49       	jnz %d4,8000ac20 <_malloc_r+0x236>
8000ac10:	8f 32 c0 21 	andn %d2,%d2,3
8000ac14:	06 1f       	sh %d15,1
8000ac16:	0f 3f 80 40 	and %d4,%d15,%d3
8000ac1a:	c2 42       	add %d2,4
8000ac1c:	df 04 fc 7f 	jeq %d4,0,8000ac14 <_malloc_r+0x22a>
8000ac20:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000ac24:	02 24       	mov %d4,%d2
8000ac26:	40 24       	mov.aa %a4,%a2
8000ac28:	99 4c 0c 00 	ld.a %a12,[%a4]12
8000ac2c:	7d 4c 3c 00 	jeq.a %a12,%a4,8000aca4 <_malloc_r+0x2ba>
8000ac30:	19 c6 04 00 	ld.w %d6,[%a12]4
8000ac34:	8f 36 c0 61 	andn %d6,%d6,3
8000ac38:	0b 86 80 30 	sub %d3,%d6,%d8
8000ac3c:	8b 03 41 52 	lt %d5,%d3,16
8000ac40:	df 05 1d 80 	jne %d5,0,8000ac7a <_malloc_r+0x290>
8000ac44:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000ac48:	8f 18 40 81 	or %d8,%d8,1
8000ac4c:	59 c8 04 00 	st.w [%a12]4,%d8
8000ac50:	99 c4 0c 00 	ld.a %a4,[%a12]12
8000ac54:	09 c5 88 05 	ld.a %a5,[+%a12]8
8000ac58:	8f 13 40 f1 	or %d15,%d3,1
8000ac5c:	b5 54 0c 00 	st.a [%a5]12,%a4
8000ac60:	b5 45 08 00 	st.a [%a4]8,%a5
8000ac64:	e8 52       	st.a [%a15]20,%a2
8000ac66:	e8 42       	st.a [%a15]16,%a2
8000ac68:	b5 23 0c 00 	st.a [%a2]12,%a3
8000ac6c:	b5 23 08 00 	st.a [%a2]8,%a3
8000ac70:	6c 21       	st.w [%a2]4,%d15
8000ac72:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000ac76:	74 23       	st.w [%a2],%d3
8000ac78:	3c 0e       	j 8000ac94 <_malloc_r+0x2aa>
8000ac7a:	bf 03 12 00 	jlt %d3,0,8000ac9e <_malloc_r+0x2b4>
8000ac7e:	01 c6 00 f6 	addsc.a %a15,%a12,%d6,0
8000ac82:	b7 10 21 20 	imask %e2,1,0,1
8000ac86:	49 f2 44 08 	ldmst [%a15]4,%e2
8000ac8a:	cc c3       	ld.a %a15,[%a12]12
8000ac8c:	09 c2 88 05 	ld.a %a2,[+%a12]8
8000ac90:	ec 23       	st.a [%a2]12,%a15
8000ac92:	e8 22       	st.a [%a15]8,%a2
8000ac94:	40 d4       	mov.aa %a4,%a13
8000ac96:	6d 00 f8 00 	call 8000ae86 <__malloc_unlock>
8000ac9a:	1d 00 f3 00 	j 8000ae80 <_malloc_r+0x496>
8000ac9e:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000aca2:	3c c5       	j 8000ac2c <_malloc_r+0x242>
8000aca4:	c2 14       	add %d4,1
8000aca6:	8f 34 00 31 	and %d3,%d4,3
8000acaa:	d9 44 08 00 	lea %a4,[%a4]8
8000acae:	df 03 bd ff 	jne %d3,0,8000ac28 <_malloc_r+0x23e>
8000acb2:	8f 32 00 31 	and %d3,%d2,3
8000acb6:	f6 36       	jnz %d3,8000acc2 <_malloc_r+0x2d8>
8000acb8:	48 12       	ld.w %d2,[%a15]4
8000acba:	0f f2 e0 20 	andn %d2,%d2,%d15
8000acbe:	68 12       	st.w [%a15]4,%d2
8000acc0:	3c 07       	j 8000acce <_malloc_r+0x2e4>
8000acc2:	d9 24 f8 ff 	lea %a4,[%a2]-8
8000acc6:	d4 22       	ld.a %a2,[%a2]
8000acc8:	c2 f2       	add %d2,-1
8000acca:	7d 42 f4 7f 	jeq.a %a2,%a4,8000acb2 <_malloc_r+0x2c8>
8000acce:	06 1f       	sh %d15,1
8000acd0:	48 12       	ld.w %d2,[%a15]4
8000acd2:	8b 0f 20 32 	ne %d3,%d15,0
8000acd6:	0b f2 50 32 	and.ge.u %d3,%d2,%d15
8000acda:	76 39       	jz %d3,8000acec <_malloc_r+0x302>
8000acdc:	0f 2f 80 30 	and %d3,%d15,%d2
8000ace0:	f6 34       	jnz %d3,8000ace8 <_malloc_r+0x2fe>
8000ace2:	c2 44       	add %d4,4
8000ace4:	06 1f       	sh %d15,1
8000ace6:	3c fb       	j 8000acdc <_malloc_r+0x2f2>
8000ace8:	02 42       	mov %d2,%d4
8000acea:	3c 9b       	j 8000ac20 <_malloc_r+0x236>
8000acec:	c8 2c       	ld.a %a12,[%a15]8
8000acee:	19 ca 04 00 	ld.w %d10,[%a12]4
8000acf2:	8f 3a c0 a1 	andn %d10,%d10,3
8000acf6:	5a 8a       	sub %d15,%d10,%d8
8000acf8:	8b 0f 41 22 	lt %d2,%d15,16
8000acfc:	0b 8a a0 22 	or.lt.u %d2,%d10,%d8
8000ad00:	df 02 b1 00 	jeq %d2,0,8000ae62 <_malloc_r+0x478>
8000ad04:	91 00 00 27 	movh.a %a2,28672
8000ad08:	19 2b c8 00 	ld.w %d11,[%a2]3080 <70000c08 <__malloc_top_pad>>
8000ad0c:	91 00 00 27 	movh.a %a2,28672
8000ad10:	42 8b       	add %d11,%d8
8000ad12:	19 23 00 30 	ld.w %d3,[%a2]192 <700000c0 <__malloc_sbrk_base>>
8000ad16:	1b fb 00 f1 	addi %d15,%d11,4111
8000ad1a:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000ad1e:	1b 0b 01 20 	addi %d2,%d11,16
8000ad22:	8b f3 3f b2 	ne %d11,%d3,-1
8000ad26:	2b 2f 40 bb 	sel %d11,%d11,%d15,%d2
8000ad2a:	40 d4       	mov.aa %a4,%a13
8000ad2c:	02 b4       	mov %d4,%d11
8000ad2e:	80 2c       	mov.d %d12,%a2
8000ad30:	6d 00 ac 00 	call 8000ae88 <_sbrk_r>
8000ad34:	80 29       	mov.d %d9,%a2
8000ad36:	df f9 86 00 	jeq %d9,-1,8000ae42 <_malloc_r+0x458>
8000ad3a:	80 c2       	mov.d %d2,%a12
8000ad3c:	80 c3       	mov.d %d3,%a12
8000ad3e:	42 a2       	add %d2,%d10
8000ad40:	80 f4       	mov.d %d4,%a15
8000ad42:	0b 29 30 f1 	lt.u %d15,%d9,%d2
8000ad46:	0b 43 10 f2 	and.ne %d15,%d3,%d4
8000ad4a:	01 fc 10 d4 	ne.a %d13,%a12,%a15
8000ad4e:	ee 7a       	jnz %d15,8000ae42 <_malloc_r+0x458>
8000ad50:	91 00 00 e7 	movh.a %a14,28672
8000ad54:	19 e3 98 f0 	ld.w %d3,[%a14]3032 <70000bd8 <__malloc_current_mallinfo>>
8000ad58:	42 b3       	add %d3,%d11
8000ad5a:	59 e3 98 f0 	st.w [%a14]3032 <70000bd8 <__malloc_current_mallinfo>>,%d3
8000ad5e:	5f 29 0c 80 	jne %d9,%d2,8000ad76 <_malloc_r+0x38c>
8000ad62:	b7 09 14 f6 	insert %d15,%d9,0,12,20
8000ad66:	ee 08       	jnz %d15,8000ad76 <_malloc_r+0x38c>
8000ad68:	c8 22       	ld.a %a2,[%a15]8
8000ad6a:	42 ba       	add %d10,%d11
8000ad6c:	8f 1a 40 a1 	or %d10,%d10,1
8000ad70:	59 2a 04 00 	st.w [%a2]4,%d10
8000ad74:	3c 55       	j 8000ae1e <_malloc_r+0x434>
8000ad76:	60 c2       	mov.a %a2,%d12
8000ad78:	19 2f 00 30 	ld.w %d15,[%a2]192
8000ad7c:	5e f6       	jne %d15,-1,8000ad88 <_malloc_r+0x39e>
8000ad7e:	91 00 00 27 	movh.a %a2,28672
8000ad82:	59 29 00 30 	st.w [%a2]192 <700000c0 <__malloc_sbrk_base>>,%d9
8000ad86:	3c 06       	j 8000ad92 <_malloc_r+0x3a8>
8000ad88:	0b 29 80 20 	sub %d2,%d9,%d2
8000ad8c:	42 23       	add %d3,%d2
8000ad8e:	59 e3 98 f0 	st.w [%a14]3032 <70000bd8 <__malloc_current_mallinfo>>,%d3
8000ad92:	8f 79 00 21 	and %d2,%d9,7
8000ad96:	82 0f       	mov %d15,0
8000ad98:	76 24       	jz %d2,8000ada0 <_malloc_r+0x3b6>
8000ad9a:	8b 82 00 f1 	rsub %d15,%d2,8
8000ad9e:	42 f9       	add %d9,%d15
8000ada0:	42 9b       	add %d11,%d9
8000ada2:	b7 0b 14 b6 	insert %d11,%d11,0,12,20
8000ada6:	1b 0f 00 21 	addi %d2,%d15,4096
8000adaa:	5a b2       	sub %d15,%d2,%d11
8000adac:	40 d4       	mov.aa %a4,%a13
8000adae:	02 f4       	mov %d4,%d15
8000adb0:	6d 00 6c 00 	call 8000ae88 <_sbrk_r>
8000adb4:	80 22       	mov.d %d2,%a2
8000adb6:	df f2 04 80 	jne %d2,-1,8000adbe <_malloc_r+0x3d4>
8000adba:	60 92       	mov.a %a2,%d9
8000adbc:	82 0f       	mov %d15,0
8000adbe:	80 2b       	mov.d %d11,%a2
8000adc0:	19 e2 98 f0 	ld.w %d2,[%a14]3032 <70000bd8 <__malloc_current_mallinfo>>
8000adc4:	a2 9b       	sub %d11,%d9
8000adc6:	42 f2       	add %d2,%d15
8000adc8:	60 92       	mov.a %a2,%d9
8000adca:	42 bf       	add %d15,%d11
8000adcc:	68 29       	st.w [%a15]8,%d9
8000adce:	8f 1f 40 31 	or %d3,%d15,1
8000add2:	59 e2 98 f0 	st.w [%a14]3032 <70000bd8 <__malloc_current_mallinfo>>,%d2
8000add6:	59 23 04 00 	st.w [%a2]4 <70000bd8 <__malloc_current_mallinfo>>,%d3
8000adda:	df 0d 22 00 	jeq %d13,0,8000ae1e <_malloc_r+0x434>
8000adde:	8b 0a a1 f2 	ge.u %d15,%d10,16
8000ade2:	ee 05       	jnz %d15,8000adec <_malloc_r+0x402>
8000ade4:	82 12       	mov %d2,1
8000ade6:	59 22 04 00 	st.w [%a2]4,%d2
8000adea:	3c 2c       	j 8000ae42 <_malloc_r+0x458>
8000adec:	1b 4a ff af 	addi %d10,%d10,-12
8000adf0:	8f 7a c0 f1 	andn %d15,%d10,7
8000adf4:	10 c2       	addsc.a %a2,%a12,%d15,0
8000adf6:	82 52       	mov %d2,5
8000adf8:	59 22 04 00 	st.w [%a2]4,%d2
8000adfc:	59 22 08 00 	st.w [%a2]8,%d2
8000ae00:	19 c2 04 00 	ld.w %d2,[%a12]4
8000ae04:	8f 12 00 21 	and %d2,%d2,1
8000ae08:	a6 f2       	or %d2,%d15
8000ae0a:	59 c2 04 00 	st.w [%a12]4,%d2
8000ae0e:	8b 0f 61 f2 	lt.u %d15,%d15,16
8000ae12:	ee 06       	jnz %d15,8000ae1e <_malloc_r+0x434>
8000ae14:	40 d4       	mov.aa %a4,%a13
8000ae16:	d9 c5 08 00 	lea %a5,[%a12]8
8000ae1a:	6d 00 c2 10 	call 8000cf9e <_free_r>
8000ae1e:	91 00 00 27 	movh.a %a2,28672
8000ae22:	19 ef 98 f0 	ld.w %d15,[%a14]3032 <70000bd8 <__malloc_current_mallinfo>>
8000ae26:	19 22 c4 00 	ld.w %d2,[%a2]3076 <70000c04 <__malloc_max_sbrked_mem>>
8000ae2a:	7f f2 04 80 	jge.u %d2,%d15,8000ae32 <_malloc_r+0x448>
8000ae2e:	59 2f c4 00 	st.w [%a2]3076 <70000c04 <__malloc_max_sbrked_mem>>,%d15
8000ae32:	91 00 00 27 	movh.a %a2,28672
8000ae36:	19 22 c0 00 	ld.w %d2,[%a2]3072 <70000c00 <__malloc_max_total_mem>>
8000ae3a:	7f f2 04 80 	jge.u %d2,%d15,8000ae42 <_malloc_r+0x458>
8000ae3e:	59 2f c0 00 	st.w [%a2]3072 <70000c00 <__malloc_max_total_mem>>,%d15
8000ae42:	c8 22       	ld.a %a2,[%a15]8
8000ae44:	19 22 04 00 	ld.w %d2,[%a2]4 <70000c00 <__malloc_max_total_mem>>
8000ae48:	8f 32 c0 21 	andn %d2,%d2,3
8000ae4c:	5a 82       	sub %d15,%d2,%d8
8000ae4e:	8b 0f 41 32 	lt %d3,%d15,16
8000ae52:	0b 82 a0 32 	or.lt.u %d3,%d2,%d8
8000ae56:	76 36       	jz %d3,8000ae62 <_malloc_r+0x478>
8000ae58:	40 d4       	mov.aa %a4,%a13
8000ae5a:	6d 00 16 00 	call 8000ae86 <__malloc_unlock>
8000ae5e:	a0 0c       	mov.a %a12,0
8000ae60:	3c 10       	j 8000ae80 <_malloc_r+0x496>
8000ae62:	c8 2c       	ld.a %a12,[%a15]8
8000ae64:	8f 18 40 21 	or %d2,%d8,1
8000ae68:	96 01       	or %d15,1
8000ae6a:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000ae6e:	59 c2 04 00 	st.w [%a12]4,%d2
8000ae72:	e8 22       	st.a [%a15]8,%a2
8000ae74:	6c 21       	st.w [%a2]4,%d15
8000ae76:	40 d4       	mov.aa %a4,%a13
8000ae78:	6d 00 07 00 	call 8000ae86 <__malloc_unlock>
8000ae7c:	d9 cc 08 00 	lea %a12,[%a12]8
8000ae80:	40 c2       	mov.aa %a2,%a12
8000ae82:	00 90       	ret 

8000ae84 <__malloc_lock>:
8000ae84:	00 90       	ret 

8000ae86 <__malloc_unlock>:
8000ae86:	00 90       	ret 

8000ae88 <_sbrk_r>:
8000ae88:	82 0f       	mov %d15,0
8000ae8a:	91 00 00 c7 	movh.a %a12,28672
8000ae8e:	59 cf d0 00 	st.w [%a12]3088 <70000c10 <errno>>,%d15
8000ae92:	40 4f       	mov.aa %a15,%a4
8000ae94:	6d 00 47 17 	call 8000dd22 <sbrk>
8000ae98:	80 2f       	mov.d %d15,%a2
8000ae9a:	5e f5       	jne %d15,-1,8000aea4 <_sbrk_r+0x1c>
8000ae9c:	19 cf d0 00 	ld.w %d15,[%a12]3088 <70000c10 <errno>>
8000aea0:	6e 02       	jz %d15,8000aea4 <_sbrk_r+0x1c>
8000aea2:	68 0f       	st.w [%a15]0,%d15
8000aea4:	00 90       	ret 

8000aea6 <sprintf>:
8000aea6:	20 68       	sub.a %sp,104
8000aea8:	3b 80 20 f0 	mov %d15,520
8000aeac:	91 00 00 f7 	movh.a %a15,28672
8000aeb0:	ac a6       	st.h [%sp]12,%d15
8000aeb2:	f4 a4       	st.a [%sp],%a4
8000aeb4:	b5 a4 10 00 	st.a [%sp]16,%a4
8000aeb8:	82 ff       	mov %d15,-1
8000aeba:	99 f4 50 30 	ld.a %a4,[%a15]1232 <700004d0 <_impure_ptr>>
8000aebe:	06 ff       	sh %d15,-1
8000aec0:	40 56       	mov.aa %a6,%a5
8000aec2:	78 02       	st.w [%sp]8,%d15
8000aec4:	78 05       	st.w [%sp]20,%d15
8000aec6:	40 a5       	mov.aa %a5,%sp
8000aec8:	82 ff       	mov %d15,-1
8000aeca:	d9 a7 28 10 	lea %a7,[%sp]104
8000aece:	ac a7       	st.h [%sp]14,%d15
8000aed0:	6d 00 10 00 	call 8000aef0 <_svfprintf_r>
8000aed4:	d8 00       	ld.a %a15,[%sp]0
8000aed6:	82 0f       	mov %d15,0
8000aed8:	28 0f       	st.b [%a15]0,%d15
8000aeda:	00 90       	ret 

8000aedc <strlen>:
8000aedc:	80 42       	mov.d %d2,%a4
8000aede:	80 4f       	mov.d %d15,%a4
8000aee0:	60 ff       	mov.a %a15,%d15
8000aee2:	79 f3 00 00 	ld.b %d3,[%a15]0
8000aee6:	76 33       	jz %d3,8000aeec <strlen+0x10>
8000aee8:	c2 1f       	add %d15,1
8000aeea:	3c fb       	j 8000aee0 <strlen+0x4>
8000aeec:	52 22       	sub %d2,%d15,%d2
8000aeee:	00 90       	ret 

8000aef0 <_svfprintf_r>:
8000aef0:	20 d0       	sub.a %sp,208
8000aef2:	80 5b       	mov.d %d11,%a5
8000aef4:	80 4c       	mov.d %d12,%a4
8000aef6:	b5 a6 18 00 	st.a [%sp]24,%a6
8000aefa:	40 7f       	mov.aa %a15,%a7
8000aefc:	6d 00 27 11 	call 8000d14a <_localeconv_r>
8000af00:	d4 22       	ld.a %a2,[%a2]
8000af02:	40 24       	mov.aa %a4,%a2
8000af04:	b5 a2 34 00 	st.a [%sp]52,%a2
8000af08:	6d ff ea ff 	call 8000aedc <strlen>
8000af0c:	60 b2       	mov.a %a2,%d11
8000af0e:	59 a2 20 00 	st.w [%sp]32,%d2
8000af12:	8c 26       	ld.h %d15,[%a2]12
8000af14:	6f 7f 16 00 	jz.t %d15,7,8000af40 <_svfprintf_r+0x50>
8000af18:	4c 24       	ld.w %d15,[%a2]16
8000af1a:	ee 13       	jnz %d15,8000af40 <_svfprintf_r+0x50>
8000af1c:	60 c4       	mov.a %a4,%d12
8000af1e:	3b 00 04 40 	mov %d4,64
8000af22:	6d ff 64 fd 	call 8000a9ea <_malloc_r>
8000af26:	60 b3       	mov.a %a3,%d11
8000af28:	f4 32       	st.a [%a3],%a2
8000af2a:	b5 32 10 00 	st.a [%a3]16,%a2
8000af2e:	7c 26       	jnz.a %a2,8000af3a <_svfprintf_r+0x4a>
8000af30:	60 cf       	mov.a %a15,%d12
8000af32:	da 0c       	mov %d15,12
8000af34:	68 0f       	st.w [%a15]0,%d15
8000af36:	82 f2       	mov %d2,-1
8000af38:	00 90       	ret 
8000af3a:	60 b2       	mov.a %a2,%d11
8000af3c:	da 40       	mov %d15,64
8000af3e:	6c 25       	st.w [%a2]20,%d15
8000af40:	82 0f       	mov %d15,0
8000af42:	d9 a2 10 20 	lea %a2,[%sp]144
8000af46:	a0 03       	mov.a %a3,0
8000af48:	b5 a2 1c 10 	st.a [%sp]92,%a2
8000af4c:	78 19       	st.w [%sp]100,%d15
8000af4e:	78 18       	st.w [%sp]96,%d15
8000af50:	78 05       	st.w [%sp]20,%d15
8000af52:	78 0b       	st.w [%sp]44,%d15
8000af54:	78 0c       	st.w [%sp]48,%d15
8000af56:	b5 a3 3c 00 	st.a [%sp]60,%a3
8000af5a:	78 0e       	st.w [%sp]56,%d15
8000af5c:	78 0a       	st.w [%sp]40,%d15
8000af5e:	40 2e       	mov.aa %a14,%a2
8000af60:	99 ac 18 00 	ld.a %a12,[%sp]24
8000af64:	79 cf 00 00 	ld.b %d15,[%a12]0
8000af68:	8b 0f 20 32 	ne %d3,%d15,0
8000af6c:	8b 5f 22 34 	and.ne %d3,%d15,37
8000af70:	76 33       	jz %d3,8000af76 <_svfprintf_r+0x86>
8000af72:	b0 1c       	add.a %a12,1
8000af74:	3c f8       	j 8000af64 <_svfprintf_r+0x74>
8000af76:	99 a3 18 00 	ld.a %a3,[%sp]24
8000af7a:	01 3c 20 30 	sub.a %a3,%a12,%a3
8000af7e:	80 3f       	mov.d %d15,%a3
8000af80:	6e 23       	jz %d15,8000afc6 <_svfprintf_r+0xd6>
8000af82:	19 a3 24 10 	ld.w %d3,[%sp]100
8000af86:	99 a3 18 00 	ld.a %a3,[%sp]24
8000af8a:	42 f3       	add %d3,%d15
8000af8c:	59 a3 24 10 	st.w [%sp]100,%d3
8000af90:	19 a3 20 10 	ld.w %d3,[%sp]96
8000af94:	f4 e3       	st.a [%a14],%a3
8000af96:	c2 13       	add %d3,1
8000af98:	6c e1       	st.w [%a14]4,%d15
8000af9a:	59 a3 20 10 	st.w [%sp]96,%d3
8000af9e:	8b 83 80 32 	ge %d3,%d3,8
8000afa2:	d9 ee 08 00 	lea %a14,[%a14]8
8000afa6:	76 3b       	jz %d3,8000afbc <_svfprintf_r+0xcc>
8000afa8:	60 c4       	mov.a %a4,%d12
8000afaa:	60 b5       	mov.a %a5,%d11
8000afac:	d9 a6 1c 10 	lea %a6,[%sp]92
8000afb0:	6d 00 e0 13 	call 8000d770 <__ssprint_r>
8000afb4:	df 02 69 88 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000afb8:	d9 ae 10 20 	lea %a14,[%sp]144
8000afbc:	19 a2 28 00 	ld.w %d2,[%sp]40
8000afc0:	42 f2       	add %d2,%d15
8000afc2:	59 a2 28 00 	st.w [%sp]40,%d2
8000afc6:	79 cf 00 00 	ld.b %d15,[%a12]0
8000afca:	df 0f 56 08 	jeq %d15,0,8000c076 <_svfprintf_r+0x1186>
8000afce:	82 0f       	mov %d15,0
8000afd0:	82 02       	mov %d2,0
8000afd2:	e9 af 01 10 	st.b [%sp]65,%d15
8000afd6:	d9 c2 01 00 	lea %a2,[%a12]1
8000afda:	82 0f       	mov %d15,0
8000afdc:	82 fe       	mov %d14,-1
8000afde:	59 a2 1c 00 	st.w [%sp]28,%d2
8000afe2:	82 0a       	mov %d10,0
8000afe4:	79 22 00 00 	ld.b %d2,[%a2]0
8000afe8:	d9 23 01 00 	lea %a3,[%a2]1
8000afec:	b5 a3 18 00 	st.a [%sp]24,%a3
8000aff0:	59 a2 10 00 	st.w [%sp]16,%d2
8000aff4:	19 a2 10 00 	ld.w %d2,[%sp]16
8000aff8:	1b 02 fe 3f 	addi %d3,%d2,-32
8000affc:	8b 93 a5 42 	ge.u %d4,%d3,89
8000b000:	df 04 19 84 	jne %d4,0,8000b832 <_svfprintf_r+0x942>
8000b004:	91 10 00 28 	movh.a %a2,32769
8000b008:	d9 22 14 0b 	lea %a2,[%a2]-20460 <8000b014 <_svfprintf_r+0x124>>
8000b00c:	01 23 02 76 	addsc.a %a7,%a2,%d3,2
8000b010:	dc 07       	ji %a7
8000b012:	00 00       	nop 
8000b014:	1d 00 c3 00 	j 8000b19a <_svfprintf_r+0x2aa>
8000b018:	1d 00 0d 04 	j 8000b832 <_svfprintf_r+0x942>
8000b01c:	1d 00 0b 04 	j 8000b832 <_svfprintf_r+0x942>
8000b020:	1d 00 c0 00 	j 8000b1a0 <_svfprintf_r+0x2b0>
8000b024:	1d 00 07 04 	j 8000b832 <_svfprintf_r+0x942>
8000b028:	1d 00 05 04 	j 8000b832 <_svfprintf_r+0x942>
8000b02c:	1d 00 03 04 	j 8000b832 <_svfprintf_r+0x942>
8000b030:	1d 00 01 04 	j 8000b832 <_svfprintf_r+0x942>
8000b034:	1d 00 ff 03 	j 8000b832 <_svfprintf_r+0x942>
8000b038:	1d 00 fd 03 	j 8000b832 <_svfprintf_r+0x942>
8000b03c:	1d 00 b5 00 	j 8000b1a6 <_svfprintf_r+0x2b6>
8000b040:	1d 00 9c 00 	j 8000b178 <_svfprintf_r+0x288>
8000b044:	1d 00 f7 03 	j 8000b832 <_svfprintf_r+0x942>
8000b048:	1d 00 b8 00 	j 8000b1b8 <_svfprintf_r+0x2c8>
8000b04c:	1d 00 b9 00 	j 8000b1be <_svfprintf_r+0x2ce>
8000b050:	1d 00 f1 03 	j 8000b832 <_svfprintf_r+0x942>
8000b054:	1d 00 de 00 	j 8000b210 <_svfprintf_r+0x320>
8000b058:	1d 00 df 00 	j 8000b216 <_svfprintf_r+0x326>
8000b05c:	1d 00 dd 00 	j 8000b216 <_svfprintf_r+0x326>
8000b060:	1d 00 db 00 	j 8000b216 <_svfprintf_r+0x326>
8000b064:	1d 00 d9 00 	j 8000b216 <_svfprintf_r+0x326>
8000b068:	1d 00 d7 00 	j 8000b216 <_svfprintf_r+0x326>
8000b06c:	1d 00 d5 00 	j 8000b216 <_svfprintf_r+0x326>
8000b070:	1d 00 d3 00 	j 8000b216 <_svfprintf_r+0x326>
8000b074:	1d 00 d1 00 	j 8000b216 <_svfprintf_r+0x326>
8000b078:	1d 00 cf 00 	j 8000b216 <_svfprintf_r+0x326>
8000b07c:	1d 00 db 03 	j 8000b832 <_svfprintf_r+0x942>
8000b080:	1d 00 d9 03 	j 8000b832 <_svfprintf_r+0x942>
8000b084:	1d 00 d7 03 	j 8000b832 <_svfprintf_r+0x942>
8000b088:	1d 00 d5 03 	j 8000b832 <_svfprintf_r+0x942>
8000b08c:	1d 00 d3 03 	j 8000b832 <_svfprintf_r+0x942>
8000b090:	1d 00 d1 03 	j 8000b832 <_svfprintf_r+0x942>
8000b094:	1d 00 cf 03 	j 8000b832 <_svfprintf_r+0x942>
8000b098:	1d 00 cd 03 	j 8000b832 <_svfprintf_r+0x942>
8000b09c:	1d 00 cb 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0a0:	1d 00 c9 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0a4:	1d 00 f9 00 	j 8000b296 <_svfprintf_r+0x3a6>
8000b0a8:	1d 00 21 01 	j 8000b2ea <_svfprintf_r+0x3fa>
8000b0ac:	1d 00 c3 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0b0:	1d 00 1d 01 	j 8000b2ea <_svfprintf_r+0x3fa>
8000b0b4:	1d 00 bf 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0b8:	1d 00 bd 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0bc:	1d 00 bb 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0c0:	1d 00 b9 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0c4:	1d 00 c6 00 	j 8000b250 <_svfprintf_r+0x360>
8000b0c8:	1d 00 b5 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0cc:	1d 00 b3 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0d0:	1d 00 92 02 	j 8000b5f4 <_svfprintf_r+0x704>
8000b0d4:	1d 00 af 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0d8:	1d 00 ad 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0dc:	1d 00 ab 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0e0:	1d 00 a9 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0e4:	1d 00 a7 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0e8:	1d 00 d0 02 	j 8000b688 <_svfprintf_r+0x798>
8000b0ec:	1d 00 a3 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0f0:	1d 00 a1 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0f4:	1d 00 4b 00 	j 8000b18a <_svfprintf_r+0x29a>
8000b0f8:	1d 00 9d 03 	j 8000b832 <_svfprintf_r+0x942>
8000b0fc:	1d 00 9b 03 	j 8000b832 <_svfprintf_r+0x942>
8000b100:	1d 00 99 03 	j 8000b832 <_svfprintf_r+0x942>
8000b104:	1d 00 97 03 	j 8000b832 <_svfprintf_r+0x942>
8000b108:	1d 00 95 03 	j 8000b832 <_svfprintf_r+0x942>
8000b10c:	1d 00 93 03 	j 8000b832 <_svfprintf_r+0x942>
8000b110:	1d 00 91 03 	j 8000b832 <_svfprintf_r+0x942>
8000b114:	1d 00 8f 03 	j 8000b832 <_svfprintf_r+0x942>
8000b118:	1d 00 8d 03 	j 8000b832 <_svfprintf_r+0x942>
8000b11c:	1d 00 8b 03 	j 8000b832 <_svfprintf_r+0x942>
8000b120:	1d 00 b0 00 	j 8000b280 <_svfprintf_r+0x390>
8000b124:	1d 00 2f 00 	j 8000b182 <_svfprintf_r+0x292>
8000b128:	1d 00 e1 00 	j 8000b2ea <_svfprintf_r+0x3fa>
8000b12c:	1d 00 df 00 	j 8000b2ea <_svfprintf_r+0x3fa>
8000b130:	1d 00 dd 00 	j 8000b2ea <_svfprintf_r+0x3fa>
8000b134:	1d 00 91 00 	j 8000b256 <_svfprintf_r+0x366>
8000b138:	1d 00 25 00 	j 8000b182 <_svfprintf_r+0x292>
8000b13c:	1d 00 7b 03 	j 8000b832 <_svfprintf_r+0x942>
8000b140:	1d 00 79 03 	j 8000b832 <_svfprintf_r+0x942>
8000b144:	1d 00 8c 00 	j 8000b25c <_svfprintf_r+0x36c>
8000b148:	1d 00 75 03 	j 8000b832 <_svfprintf_r+0x942>
8000b14c:	1d 00 39 02 	j 8000b5be <_svfprintf_r+0x6ce>
8000b150:	1d 00 54 02 	j 8000b5f8 <_svfprintf_r+0x708>
8000b154:	1d 00 66 02 	j 8000b620 <_svfprintf_r+0x730>
8000b158:	1d 00 90 00 	j 8000b278 <_svfprintf_r+0x388>
8000b15c:	1d 00 6b 03 	j 8000b832 <_svfprintf_r+0x942>
8000b160:	1d 00 77 02 	j 8000b64e <_svfprintf_r+0x75e>
8000b164:	1d 00 67 03 	j 8000b832 <_svfprintf_r+0x942>
8000b168:	1d 00 92 02 	j 8000b68c <_svfprintf_r+0x79c>
8000b16c:	1d 00 63 03 	j 8000b832 <_svfprintf_r+0x942>
8000b170:	1d 00 61 03 	j 8000b832 <_svfprintf_r+0x942>
8000b174:	1d 00 a0 02 	j 8000b6b4 <_svfprintf_r+0x7c4>
8000b178:	da 2b       	mov %d15,43
8000b17a:	99 a2 18 00 	ld.a %a2,[%sp]24
8000b17e:	1d ff 33 ff 	j 8000afe4 <_svfprintf_r+0xf4>
8000b182:	e9 af 01 10 	st.b [%sp]65,%d15
8000b186:	1d 00 8c 00 	j 8000b29e <_svfprintf_r+0x3ae>
8000b18a:	e9 af 01 10 	st.b [%sp]65,%d15
8000b18e:	7b 00 00 f8 	movh %d15,32768
8000b192:	1b 4f d7 f0 	addi %d15,%d15,3444
8000b196:	1d 00 95 02 	j 8000b6c0 <_svfprintf_r+0x7d0>
8000b19a:	ab 0f 82 ff 	sel %d15,%d15,%d15,32
8000b19e:	3c ee       	j 8000b17a <_svfprintf_r+0x28a>
8000b1a0:	8f 1a 40 a1 	or %d10,%d10,1
8000b1a4:	3c eb       	j 8000b17a <_svfprintf_r+0x28a>
8000b1a6:	48 02       	ld.w %d2,[%a15]0
8000b1a8:	b0 4f       	add.a %a15,4
8000b1aa:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b1ae:	ff 02 e6 7f 	jge %d2,0,8000b17a <_svfprintf_r+0x28a>
8000b1b2:	32 52       	rsub %d2
8000b1b4:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b1b8:	8f 4a 40 a1 	or %d10,%d10,4
8000b1bc:	3c df       	j 8000b17a <_svfprintf_r+0x28a>
8000b1be:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b1c2:	99 a2 18 00 	ld.a %a2,[%sp]24
8000b1c6:	79 32 00 00 	ld.b %d2,[%a3]0
8000b1ca:	b0 12       	add.a %a2,1
8000b1cc:	59 a2 10 00 	st.w [%sp]16,%d2
8000b1d0:	8b a2 02 32 	eq %d3,%d2,42
8000b1d4:	f6 33       	jnz %d3,8000b1da <_svfprintf_r+0x2ea>
8000b1d6:	82 05       	mov %d5,0
8000b1d8:	3c 08       	j 8000b1e8 <_svfprintf_r+0x2f8>
8000b1da:	48 0e       	ld.w %d14,[%a15]0
8000b1dc:	b5 a2 18 00 	st.a [%sp]24,%a2
8000b1e0:	b0 4f       	add.a %a15,4
8000b1e2:	8b fe 5f e3 	max %d14,%d14,-1
8000b1e6:	3c ca       	j 8000b17a <_svfprintf_r+0x28a>
8000b1e8:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b1ec:	1b 02 fd 3f 	addi %d3,%d2,-48
8000b1f0:	ff a3 0a 80 	jge.u %d3,10,8000b204 <_svfprintf_r+0x314>
8000b1f4:	79 22 00 00 	ld.b %d2,[%a2]0
8000b1f8:	13 a5 20 53 	madd %d5,%d3,%d5,10
8000b1fc:	59 a2 10 00 	st.w [%sp]16,%d2
8000b200:	b0 12       	add.a %a2,1
8000b202:	3c f3       	j 8000b1e8 <_svfprintf_r+0x2f8>
8000b204:	8b f5 5f e3 	max %d14,%d5,-1
8000b208:	b5 a2 18 00 	st.a [%sp]24,%a2
8000b20c:	1d ff f4 fe 	j 8000aff4 <_svfprintf_r+0x104>
8000b210:	8f 0a 48 a1 	or %d10,%d10,128
8000b214:	3c b3       	j 8000b17a <_svfprintf_r+0x28a>
8000b216:	82 02       	mov %d2,0
8000b218:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b21c:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b220:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b224:	1b 02 fd 4f 	addi %d4,%d2,-48
8000b228:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000b22c:	99 a2 18 00 	ld.a %a2,[%sp]24
8000b230:	13 a2 20 24 	madd %d2,%d4,%d2,10
8000b234:	b0 12       	add.a %a2,1
8000b236:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b23a:	79 32 00 00 	ld.b %d2,[%a3]0
8000b23e:	b5 a2 18 00 	st.a [%sp]24,%a2
8000b242:	59 a2 10 00 	st.w [%sp]16,%d2
8000b246:	1b 02 fd 4f 	addi %d4,%d2,-48
8000b24a:	bf a4 e9 ff 	jlt.u %d4,10,8000b21c <_svfprintf_r+0x32c>
8000b24e:	3c dd       	j 8000b208 <_svfprintf_r+0x318>
8000b250:	8f 8a 40 a1 	or %d10,%d10,8
8000b254:	3c 93       	j 8000b17a <_svfprintf_r+0x28a>
8000b256:	8f 0a 44 a1 	or %d10,%d10,64
8000b25a:	3c 90       	j 8000b17a <_svfprintf_r+0x28a>
8000b25c:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b260:	79 33 00 00 	ld.b %d3,[%a3]0
8000b264:	8b c3 26 32 	ne %d3,%d3,108
8000b268:	f6 35       	jnz %d3,8000b272 <_svfprintf_r+0x382>
8000b26a:	b0 13       	add.a %a3,1
8000b26c:	b5 a3 18 00 	st.a [%sp]24,%a3
8000b270:	3c 04       	j 8000b278 <_svfprintf_r+0x388>
8000b272:	8f 0a 41 a1 	or %d10,%d10,16
8000b276:	3c 82       	j 8000b17a <_svfprintf_r+0x28a>
8000b278:	8f 0a 42 a1 	or %d10,%d10,32
8000b27c:	1d ff 7f ff 	j 8000b17a <_svfprintf_r+0x28a>
8000b280:	48 03       	ld.w %d3,[%a15]0
8000b282:	d9 fc 04 00 	lea %a12,[%a15]4
8000b286:	e9 a3 28 10 	st.b [%sp]104,%d3
8000b28a:	82 03       	mov %d3,0
8000b28c:	e9 a3 01 10 	st.b [%sp]65,%d3
8000b290:	60 ad       	mov.a %a13,%d10
8000b292:	1d 00 dc 02 	j 8000b84a <_svfprintf_r+0x95a>
8000b296:	e9 af 01 10 	st.b [%sp]65,%d15
8000b29a:	8f 0a 41 a1 	or %d10,%d10,16
8000b29e:	60 ad       	mov.a %a13,%d10
8000b2a0:	6f 5a 07 00 	jz.t %d10,5,8000b2ae <_svfprintf_r+0x3be>
8000b2a4:	d9 fc 08 00 	lea %a12,[%a15]8
8000b2a8:	09 f8 40 09 	ld.d %e8,[%a15]
8000b2ac:	3c 12       	j 8000b2d0 <_svfprintf_r+0x3e0>
8000b2ae:	d9 f2 04 00 	lea %a2,[%a15]4
8000b2b2:	6f 4a 05 00 	jz.t %d10,4,8000b2bc <_svfprintf_r+0x3cc>
8000b2b6:	40 2c       	mov.aa %a12,%a2
8000b2b8:	48 08       	ld.w %d8,[%a15]0
8000b2ba:	3c 09       	j 8000b2cc <_svfprintf_r+0x3dc>
8000b2bc:	48 03       	ld.w %d3,[%a15]0
8000b2be:	40 2c       	mov.aa %a12,%a2
8000b2c0:	0b 30 00 88 	mov %e8,%d3
8000b2c4:	6f 6a 06 00 	jz.t %d10,6,8000b2d0 <_svfprintf_r+0x3e0>
8000b2c8:	37 03 50 80 	extr %d8,%d3,0,16
8000b2cc:	0b 80 00 88 	mov %e8,%d8
8000b2d0:	82 13       	mov %d3,1
8000b2d2:	ff 09 1d 02 	jge %d9,0,8000b70c <_svfprintf_r+0x81c>
8000b2d6:	32 59       	rsub %d9
8000b2d8:	32 58       	rsub %d8
8000b2da:	3b d0 02 70 	mov %d7,45
8000b2de:	ab f9 1f 98 	cadd %d9,%d8,%d9,-1
8000b2e2:	e9 a7 01 10 	st.b [%sp]65,%d7
8000b2e6:	1d 00 13 02 	j 8000b70c <_svfprintf_r+0x81c>
8000b2ea:	e9 af 01 10 	st.b [%sp]65,%d15
8000b2ee:	4c f0       	ld.w %d15,[%a15]0
8000b2f0:	d9 fc 08 00 	lea %a12,[%a15]8
8000b2f4:	78 0b       	st.w [%sp]44,%d15
8000b2f6:	4c f1       	ld.w %d15,[%a15]4
8000b2f8:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000b2fc:	78 0c       	st.w [%sp]48,%d15
8000b2fe:	19 a5 30 00 	ld.w %d5,[%sp]48
8000b302:	6d 00 16 12 	call 8000d72e <__fpclassifyd>
8000b306:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000b30a:	19 a5 30 00 	ld.w %d5,[%sp]48
8000b30e:	df 12 18 80 	jne %d2,1,8000b33e <_svfprintf_r+0x44e>
8000b312:	d2 06       	mov %e6,0
8000b314:	6d 00 b3 15 	call 8000de7a <__ltdf2>
8000b318:	ce 25       	jgez %d2,8000b322 <_svfprintf_r+0x432>
8000b31a:	3b d0 02 30 	mov %d3,45
8000b31e:	e9 a3 01 10 	st.b [%sp]65,%d3
8000b322:	58 04       	ld.w %d15,[%sp]16
8000b324:	7b 00 00 78 	movh %d7,32768
8000b328:	8b 8f 84 32 	ge %d3,%d15,72
8000b32c:	1b 87 d6 d0 	addi %d13,%d7,3432
8000b330:	df 03 17 80 	jne %d3,0,8000b35e <_svfprintf_r+0x46e>
8000b334:	7b 00 00 78 	movh %d7,32768
8000b338:	1b 47 d6 d0 	addi %d13,%d7,3428
8000b33c:	3c 11       	j 8000b35e <_svfprintf_r+0x46e>
8000b33e:	6d 00 f8 11 	call 8000d72e <__fpclassifyd>
8000b342:	58 04       	ld.w %d15,[%sp]16
8000b344:	df 02 13 80 	jne %d2,0,8000b36a <_svfprintf_r+0x47a>
8000b348:	7b 00 00 78 	movh %d7,32768
8000b34c:	8b 8f 84 32 	ge %d3,%d15,72
8000b350:	1b 07 d7 d0 	addi %d13,%d7,3440
8000b354:	f6 35       	jnz %d3,8000b35e <_svfprintf_r+0x46e>
8000b356:	7b 00 00 78 	movh %d7,32768
8000b35a:	1b c7 d6 d0 	addi %d13,%d7,3436
8000b35e:	8f 0a c8 a1 	andn %d10,%d10,128
8000b362:	60 ad       	mov.a %a13,%d10
8000b364:	82 39       	mov %d9,3
8000b366:	1d 00 78 02 	j 8000b856 <_svfprintf_r+0x966>
8000b36a:	8f 0f c2 f1 	andn %d15,%d15,32
8000b36e:	78 01       	st.w [%sp]4,%d15
8000b370:	df fe 09 00 	jeq %d14,-1,8000b382 <_svfprintf_r+0x492>
8000b374:	8b 0e 00 72 	eq %d7,%d14,0
8000b378:	8b 7f 04 74 	and.eq %d7,%d15,71
8000b37c:	ab 1e a0 e7 	seln %d14,%d7,%d14,1
8000b380:	3c 02       	j 8000b384 <_svfprintf_r+0x494>
8000b382:	82 6e       	mov %d14,6
8000b384:	19 a3 30 00 	ld.w %d3,[%sp]48
8000b388:	8f 0a 50 21 	or %d2,%d10,256
8000b38c:	60 2d       	mov.a %a13,%d2
8000b38e:	d8 0b       	ld.a %a15,[%sp]44
8000b390:	82 0f       	mov %d15,0
8000b392:	ce 34       	jgez %d3,8000b39a <_svfprintf_r+0x4aa>
8000b394:	9b 03 00 38 	addih %d3,%d3,32768
8000b398:	da 2d       	mov %d15,45
8000b39a:	78 09       	st.w [%sp]36,%d15
8000b39c:	58 01       	ld.w %d15,[%sp]4
8000b39e:	02 e9       	mov %d9,%d14
8000b3a0:	8b 6f 04 22 	eq %d2,%d15,70
8000b3a4:	82 36       	mov %d6,3
8000b3a6:	f6 28       	jnz %d2,8000b3b6 <_svfprintf_r+0x4c6>
8000b3a8:	8b 5f 24 12 	ne %d1,%d15,69
8000b3ac:	1b 1e 00 50 	addi %d5,%d14,1
8000b3b0:	82 26       	mov %d6,2
8000b3b2:	2b e5 50 91 	seln %d9,%d1,%d5,%d14
8000b3b6:	60 c4       	mov.a %a4,%d12
8000b3b8:	80 f4       	mov.d %d4,%a15
8000b3ba:	02 35       	mov %d5,%d3
8000b3bc:	02 97       	mov %d7,%d9
8000b3be:	d9 a5 04 10 	lea %a5,[%sp]68
8000b3c2:	d9 a6 08 10 	lea %a6,[%sp]72
8000b3c6:	d9 a7 14 10 	lea %a7,[%sp]84
8000b3ca:	59 a2 0c 00 	st.w [%sp]12,%d2
8000b3ce:	59 a3 08 00 	st.w [%sp]8,%d3
8000b3d2:	6d 00 1f 07 	call 8000c210 <_dtoa_r>
8000b3d6:	58 01       	ld.w %d15,[%sp]4
8000b3d8:	80 2d       	mov.d %d13,%a2
8000b3da:	8b 7f 24 12 	ne %d1,%d15,71
8000b3de:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000b3e2:	19 a3 08 00 	ld.w %d3,[%sp]8
8000b3e6:	df 01 11 80 	jne %d1,0,8000b408 <_svfprintf_r+0x518>
8000b3ea:	6f 0a 0f 80 	jnz.t %d10,0,8000b408 <_svfprintf_r+0x518>
8000b3ee:	19 a2 14 10 	ld.w %d2,[%sp]84
8000b3f2:	58 01       	ld.w %d15,[%sp]4
8000b3f4:	a2 d2       	sub %d2,%d13
8000b3f6:	59 a2 14 00 	st.w [%sp]20,%d2
8000b3fa:	8b 7f 04 42 	eq %d4,%d15,71
8000b3fe:	19 a5 04 10 	ld.w %d5,[%sp]68
8000b402:	df 04 36 80 	jne %d4,0,8000b46e <_svfprintf_r+0x57e>
8000b406:	3c 3e       	j 8000b482 <_svfprintf_r+0x592>
8000b408:	0b 9d 00 80 	add %d8,%d13,%d9
8000b40c:	df 02 1c 00 	jeq %d2,0,8000b444 <_svfprintf_r+0x554>
8000b410:	60 d2       	mov.a %a2,%d13
8000b412:	80 f4       	mov.d %d4,%a15
8000b414:	79 20 00 00 	ld.b %d0,[%a2]0
8000b418:	d2 06       	mov %e6,0
8000b41a:	02 35       	mov %d5,%d3
8000b41c:	8b 00 03 f2 	eq %d15,%d0,48
8000b420:	59 a3 08 00 	st.w [%sp]8,%d3
8000b424:	6d 00 cb 14 	call 8000ddba <__nedf2>
8000b428:	8b 02 20 22 	ne %d2,%d2,0
8000b42c:	0f 2f 80 00 	and %d0,%d15,%d2
8000b430:	19 a3 08 00 	ld.w %d3,[%sp]8
8000b434:	76 05       	jz %d0,8000b43e <_svfprintf_r+0x54e>
8000b436:	8b 19 00 01 	rsub %d0,%d9,1
8000b43a:	59 a0 04 10 	st.w [%sp]68,%d0
8000b43e:	19 a2 04 10 	ld.w %d2,[%sp]68
8000b442:	42 28       	add %d8,%d2
8000b444:	80 f4       	mov.d %d4,%a15
8000b446:	d2 06       	mov %e6,0
8000b448:	02 35       	mov %d5,%d3
8000b44a:	6d 00 98 14 	call 8000dd7a <__eqdf2>
8000b44e:	f6 23       	jnz %d2,8000b454 <_svfprintf_r+0x564>
8000b450:	59 a8 14 10 	st.w [%sp]84,%d8
8000b454:	3b 00 03 00 	mov %d0,48
8000b458:	19 a3 14 10 	ld.w %d3,[%sp]84
8000b45c:	7f 83 c9 ff 	jge.u %d3,%d8,8000b3ee <_svfprintf_r+0x4fe>
8000b460:	1b 13 00 10 	addi %d1,%d3,1
8000b464:	60 32       	mov.a %a2,%d3
8000b466:	59 a1 14 10 	st.w [%sp]84,%d1
8000b46a:	34 20       	st.b [%a2],%d0
8000b46c:	3c f6       	j 8000b458 <_svfprintf_r+0x568>
8000b46e:	0b 5e 20 31 	lt %d3,%d14,%d5
8000b472:	8b d5 3f 35 	or.lt %d3,%d5,-3
8000b476:	df 03 88 00 	jeq %d3,0,8000b586 <_svfprintf_r+0x696>
8000b47a:	58 04       	ld.w %d15,[%sp]16
8000b47c:	c2 ef       	add %d15,-2
8000b47e:	78 04       	st.w [%sp]16,%d15
8000b480:	3c 06       	j 8000b48c <_svfprintf_r+0x59c>
8000b482:	58 04       	ld.w %d15,[%sp]16
8000b484:	8b 6f 86 32 	ge %d3,%d15,102
8000b488:	df 03 69 80 	jne %d3,0,8000b55a <_svfprintf_r+0x66a>
8000b48c:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b490:	9a f5       	add %d15,%d5,-1
8000b492:	78 11       	st.w [%sp]68,%d15
8000b494:	e9 a2 0d 10 	st.b [%sp]77,%d2
8000b498:	3b b0 02 30 	mov %d3,43
8000b49c:	ce f4       	jgez %d15,8000b4a4 <_svfprintf_r+0x5b4>
8000b49e:	32 5f       	rsub %d15
8000b4a0:	3b d0 02 30 	mov %d3,45
8000b4a4:	e9 a3 0e 10 	st.b [%sp]78,%d3
8000b4a8:	8b af 40 32 	lt %d3,%d15,10
8000b4ac:	df 03 3e 80 	jne %d3,0,8000b528 <_svfprintf_r+0x638>
8000b4b0:	82 06       	mov %d6,0
8000b4b2:	3b a0 00 00 	mov %d0,10
8000b4b6:	4b 0f 01 42 	div %e4,%d15,%d0
8000b4ba:	8b 66 00 71 	rsub %d7,%d6,6
8000b4be:	60 72       	mov.a %a2,%d7
8000b4c0:	d9 af 14 10 	lea %a15,[%sp]84
8000b4c4:	1b 05 03 30 	addi %d3,%d5,48
8000b4c8:	30 2f       	add.a %a15,%a2
8000b4ca:	28 03       	st.b [%a15]0,%d3
8000b4cc:	8b a4 80 32 	ge %d3,%d4,10
8000b4d0:	02 4f       	mov %d15,%d4
8000b4d2:	c2 16       	add %d6,1
8000b4d4:	df 03 f1 ff 	jne %d3,0,8000b4b6 <_svfprintf_r+0x5c6>
8000b4d8:	60 74       	mov.a %a4,%d7
8000b4da:	d9 a2 10 30 	lea %a2,[%sp]208
8000b4de:	1b 04 03 f0 	addi %d15,%d4,48
8000b4e2:	30 42       	add.a %a2,%a4
8000b4e4:	d9 f7 ff ff 	lea %a7,[%a15]-1
8000b4e8:	e9 ff ff ff 	st.b [%a15]-1,%d15
8000b4ec:	80 22       	mov.d %d2,%a2
8000b4ee:	d9 af 1b 10 	lea %a15,[%sp]91
8000b4f2:	80 ff       	mov.d %d15,%a15
8000b4f4:	1b 32 f8 4f 	addi %d4,%d2,-125
8000b4f8:	82 03       	mov %d3,0
8000b4fa:	01 7f 20 30 	sub.a %a3,%a15,%a7
8000b4fe:	3f 4f 08 80 	jlt.u %d15,%d4,8000b50e <_svfprintf_r+0x61e>
8000b502:	80 a2       	mov.d %d2,%sp
8000b504:	1b 02 0d 20 	addi %d2,%d2,208
8000b508:	8b 52 07 42 	eq %d4,%d2,117
8000b50c:	76 46       	jz %d4,8000b518 <_svfprintf_r+0x628>
8000b50e:	a0 03       	mov.a %a3,0
8000b510:	3c 04       	j 8000b518 <_svfprintf_r+0x628>
8000b512:	0c 70       	ld.bu %d15,[%a7]0
8000b514:	b0 17       	add.a %a7,1
8000b516:	28 0f       	st.b [%a15]0,%d15
8000b518:	60 3f       	mov.a %a15,%d3
8000b51a:	d9 a2 0d 10 	lea %a2,[%sp]77
8000b51e:	b0 2f       	add.a %a15,2
8000b520:	30 2f       	add.a %a15,%a2
8000b522:	c2 13       	add %d3,1
8000b524:	fc 37       	loop %a3,8000b512 <_svfprintf_r+0x622>
8000b526:	3c 0b       	j 8000b53c <_svfprintf_r+0x64c>
8000b528:	3b 00 03 30 	mov %d3,48
8000b52c:	1b 0f 03 f0 	addi %d15,%d15,48
8000b530:	e9 a3 0f 10 	st.b [%sp]79,%d3
8000b534:	e9 af 10 10 	st.b [%sp]80,%d15
8000b538:	d9 af 11 10 	lea %a15,[%sp]81
8000b53c:	d9 a7 0d 10 	lea %a7,[%sp]77
8000b540:	01 7f 20 70 	sub.a %a7,%a15,%a7
8000b544:	80 79       	mov.d %d9,%a7
8000b546:	58 05       	ld.w %d15,[%sp]20
8000b548:	b5 a7 38 00 	st.a [%sp]56,%a7
8000b54c:	42 f9       	add %d9,%d15
8000b54e:	ff 2f 04 00 	jge %d15,2,8000b556 <_svfprintf_r+0x666>
8000b552:	6f 0a 2c 00 	jz.t %d10,0,8000b5aa <_svfprintf_r+0x6ba>
8000b556:	c2 19       	add %d9,1
8000b558:	3c 29       	j 8000b5aa <_svfprintf_r+0x6ba>
8000b55a:	58 04       	ld.w %d15,[%sp]16
8000b55c:	8b 6f 26 42 	ne %d4,%d15,102
8000b560:	df 04 15 80 	jne %d4,0,8000b58a <_svfprintf_r+0x69a>
8000b564:	02 59       	mov %d9,%d5
8000b566:	8e 59       	jlez %d5,8000b578 <_svfprintf_r+0x688>
8000b568:	f6 e3       	jnz %d14,8000b56e <_svfprintf_r+0x67e>
8000b56a:	6f 0a 20 00 	jz.t %d10,0,8000b5aa <_svfprintf_r+0x6ba>
8000b56e:	1b 1e 00 30 	addi %d3,%d14,1
8000b572:	0b 35 00 90 	add %d9,%d5,%d3
8000b576:	3c 1a       	j 8000b5aa <_svfprintf_r+0x6ba>
8000b578:	f6 e4       	jnz %d14,8000b580 <_svfprintf_r+0x690>
8000b57a:	82 19       	mov %d9,1
8000b57c:	6f 0a 17 00 	jz.t %d10,0,8000b5aa <_svfprintf_r+0x6ba>
8000b580:	1b 2e 00 90 	addi %d9,%d14,2
8000b584:	3c 13       	j 8000b5aa <_svfprintf_r+0x6ba>
8000b586:	da 67       	mov %d15,103
8000b588:	78 04       	st.w [%sp]16,%d15
8000b58a:	58 05       	ld.w %d15,[%sp]20
8000b58c:	8f 1a 00 a1 	and %d10,%d10,1
8000b590:	0b a5 00 90 	add %d9,%d5,%d10
8000b594:	7f f5 0b 00 	jge %d5,%d15,8000b5aa <_svfprintf_r+0x6ba>
8000b598:	8b 15 40 92 	lt %d9,%d5,1
8000b59c:	8b 25 00 31 	rsub %d3,%d5,2
8000b5a0:	ab 13 80 39 	sel %d3,%d9,%d3,1
8000b5a4:	19 a9 14 00 	ld.w %d9,[%sp]20
8000b5a8:	42 39       	add %d9,%d3
8000b5aa:	58 09       	ld.w %d15,[%sp]36
8000b5ac:	82 0e       	mov %d14,0
8000b5ae:	df 0f 55 01 	jeq %d15,0,8000b858 <_svfprintf_r+0x968>
8000b5b2:	3b d0 02 70 	mov %d7,45
8000b5b6:	e9 a7 01 10 	st.b [%sp]65,%d7
8000b5ba:	1d 00 4f 01 	j 8000b858 <_svfprintf_r+0x968>
8000b5be:	e9 af 01 10 	st.b [%sp]65,%d15
8000b5c2:	d9 f2 04 00 	lea %a2,[%a15]4
8000b5c6:	6f 5a 09 00 	jz.t %d10,5,8000b5d8 <_svfprintf_r+0x6e8>
8000b5ca:	58 0a       	ld.w %d15,[%sp]40
8000b5cc:	c8 03       	ld.a %a3,[%a15]0
8000b5ce:	0b f0 00 48 	mov %e4,%d15
8000b5d2:	89 34 40 09 	st.d [%a3],%e4
8000b5d6:	3c 0c       	j 8000b5ee <_svfprintf_r+0x6fe>
8000b5d8:	6f 4a 08 80 	jnz.t %d10,4,8000b5e8 <_svfprintf_r+0x6f8>
8000b5dc:	6f 6a 06 00 	jz.t %d10,6,8000b5e8 <_svfprintf_r+0x6f8>
8000b5e0:	c8 03       	ld.a %a3,[%a15]0
8000b5e2:	58 0a       	ld.w %d15,[%sp]40
8000b5e4:	ac 30       	st.h [%a3]0,%d15
8000b5e6:	3c 04       	j 8000b5ee <_svfprintf_r+0x6fe>
8000b5e8:	c8 03       	ld.a %a3,[%a15]0
8000b5ea:	58 0a       	ld.w %d15,[%sp]40
8000b5ec:	6c 30       	st.w [%a3]0,%d15
8000b5ee:	40 2f       	mov.aa %a15,%a2
8000b5f0:	1d ff b8 fc 	j 8000af60 <_svfprintf_r+0x70>
8000b5f4:	8f 0a 41 a1 	or %d10,%d10,16
8000b5f8:	6f 5a 07 00 	jz.t %d10,5,8000b606 <_svfprintf_r+0x716>
8000b5fc:	d9 fc 08 00 	lea %a12,[%a15]8
8000b600:	09 f8 40 09 	ld.d %e8,[%a15]
8000b604:	3c 0c       	j 8000b61c <_svfprintf_r+0x72c>
8000b606:	d9 fc 04 00 	lea %a12,[%a15]4
8000b60a:	6f 4a 07 80 	jnz.t %d10,4,8000b618 <_svfprintf_r+0x728>
8000b60e:	6f 6a 05 00 	jz.t %d10,6,8000b618 <_svfprintf_r+0x728>
8000b612:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000b616:	3c 02       	j 8000b61a <_svfprintf_r+0x72a>
8000b618:	48 08       	ld.w %d8,[%a15]0
8000b61a:	82 09       	mov %d9,0
8000b61c:	82 03       	mov %d3,0
8000b61e:	3c 73       	j 8000b704 <_svfprintf_r+0x814>
8000b620:	3b 00 03 40 	mov %d4,48
8000b624:	7b 00 00 f8 	movh %d15,32768
8000b628:	1b 5f d8 f0 	addi %d15,%d15,3461
8000b62c:	e9 a4 02 10 	st.b [%sp]66,%d4
8000b630:	3b 80 07 40 	mov %d4,120
8000b634:	78 0f       	st.w [%sp]60,%d15
8000b636:	02 4f       	mov %d15,%d4
8000b638:	d9 fc 04 00 	lea %a12,[%a15]4
8000b63c:	48 08       	ld.w %d8,[%a15]0
8000b63e:	82 09       	mov %d9,0
8000b640:	8f 2a 40 a1 	or %d10,%d10,2
8000b644:	e9 a4 03 10 	st.b [%sp]67,%d4
8000b648:	82 23       	mov %d3,2
8000b64a:	78 04       	st.w [%sp]16,%d15
8000b64c:	3c 5c       	j 8000b704 <_svfprintf_r+0x814>
8000b64e:	82 07       	mov %d7,0
8000b650:	48 0d       	ld.w %d13,[%a15]0
8000b652:	e9 a7 01 10 	st.b [%sp]65,%d7
8000b656:	02 e9       	mov %d9,%d14
8000b658:	60 ad       	mov.a %a13,%d10
8000b65a:	d9 fc 04 00 	lea %a12,[%a15]4
8000b65e:	60 d4       	mov.a %a4,%d13
8000b660:	0e ef       	jltz %d14,8000b67e <_svfprintf_r+0x78e>
8000b662:	82 04       	mov %d4,0
8000b664:	02 e5       	mov %d5,%d14
8000b666:	6d 00 77 0d 	call 8000d154 <memchr>
8000b66a:	bd 02 f6 00 	jz.a %a2,8000b856 <_svfprintf_r+0x966>
8000b66e:	60 d4       	mov.a %a4,%d13
8000b670:	01 42 20 30 	sub.a %a3,%a2,%a4
8000b674:	80 32       	mov.d %d2,%a3
8000b676:	0b e2 80 91 	min %d9,%d2,%d14
8000b67a:	1d 00 ee 00 	j 8000b856 <_svfprintf_r+0x966>
8000b67e:	6d ff 2f fc 	call 8000aedc <strlen>
8000b682:	02 29       	mov %d9,%d2
8000b684:	1d 00 e9 00 	j 8000b856 <_svfprintf_r+0x966>
8000b688:	8f 0a 41 a1 	or %d10,%d10,16
8000b68c:	6f 5a 07 00 	jz.t %d10,5,8000b69a <_svfprintf_r+0x7aa>
8000b690:	d9 fc 08 00 	lea %a12,[%a15]8
8000b694:	09 f8 40 09 	ld.d %e8,[%a15]
8000b698:	3c 0c       	j 8000b6b0 <_svfprintf_r+0x7c0>
8000b69a:	d9 fc 04 00 	lea %a12,[%a15]4
8000b69e:	6f 4a 07 80 	jnz.t %d10,4,8000b6ac <_svfprintf_r+0x7bc>
8000b6a2:	6f 6a 05 00 	jz.t %d10,6,8000b6ac <_svfprintf_r+0x7bc>
8000b6a6:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000b6aa:	3c 02       	j 8000b6ae <_svfprintf_r+0x7be>
8000b6ac:	48 08       	ld.w %d8,[%a15]0
8000b6ae:	82 09       	mov %d9,0
8000b6b0:	82 13       	mov %d3,1
8000b6b2:	3c 29       	j 8000b704 <_svfprintf_r+0x814>
8000b6b4:	e9 af 01 10 	st.b [%sp]65,%d15
8000b6b8:	7b 00 00 f8 	movh %d15,32768
8000b6bc:	1b 5f d8 f0 	addi %d15,%d15,3461
8000b6c0:	78 0f       	st.w [%sp]60,%d15
8000b6c2:	6f 5a 07 00 	jz.t %d10,5,8000b6d0 <_svfprintf_r+0x7e0>
8000b6c6:	d9 fc 08 00 	lea %a12,[%a15]8
8000b6ca:	09 f8 40 09 	ld.d %e8,[%a15]
8000b6ce:	3c 0c       	j 8000b6e6 <_svfprintf_r+0x7f6>
8000b6d0:	d9 fc 04 00 	lea %a12,[%a15]4
8000b6d4:	6f 4a 07 80 	jnz.t %d10,4,8000b6e2 <_svfprintf_r+0x7f2>
8000b6d8:	6f 6a 05 00 	jz.t %d10,6,8000b6e2 <_svfprintf_r+0x7f2>
8000b6dc:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000b6e0:	3c 02       	j 8000b6e4 <_svfprintf_r+0x7f4>
8000b6e2:	48 08       	ld.w %d8,[%a15]0
8000b6e4:	82 09       	mov %d9,0
8000b6e6:	82 23       	mov %d3,2
8000b6e8:	6f 0a 0e 00 	jz.t %d10,0,8000b704 <_svfprintf_r+0x814>
8000b6ec:	0f 89 a0 40 	or %d4,%d9,%d8
8000b6f0:	76 4a       	jz %d4,8000b704 <_svfprintf_r+0x814>
8000b6f2:	58 04       	ld.w %d15,[%sp]16
8000b6f4:	3b 00 03 70 	mov %d7,48
8000b6f8:	e9 a7 02 10 	st.b [%sp]66,%d7
8000b6fc:	e9 af 03 10 	st.b [%sp]67,%d15
8000b700:	8f 2a 40 a1 	or %d10,%d10,2
8000b704:	82 07       	mov %d7,0
8000b706:	60 ad       	mov.a %a13,%d10
8000b708:	e9 a7 01 10 	st.b [%sp]65,%d7
8000b70c:	80 d2       	mov.d %d2,%a13
8000b70e:	8b 0e 80 72 	ge %d7,%d14,0
8000b712:	8f 02 c8 41 	andn %d4,%d2,128
8000b716:	2b 24 40 27 	sel %d2,%d7,%d4,%d2
8000b71a:	0f 98 a0 60 	or %d6,%d8,%d9
8000b71e:	8b 0e 20 42 	ne %d4,%d14,0
8000b722:	8b 06 00 45 	or.ne %d4,%d6,0
8000b726:	60 2d       	mov.a %a13,%d2
8000b728:	df 04 72 00 	jeq %d4,0,8000b80c <_svfprintf_r+0x91c>
8000b72c:	df 13 06 00 	jeq %d3,1,8000b738 <_svfprintf_r+0x848>
8000b730:	df 23 57 00 	jeq %d3,2,8000b7de <_svfprintf_r+0x8ee>
8000b734:	82 03       	mov %d3,0
8000b736:	3c 03       	j 8000b73c <_svfprintf_r+0x84c>
8000b738:	82 04       	mov %d4,0
8000b73a:	3c 22       	j 8000b77e <_svfprintf_r+0x88e>
8000b73c:	8b 73 02 71 	rsub %d7,%d3,39
8000b740:	60 72       	mov.a %a2,%d7
8000b742:	8f 78 00 41 	and %d4,%d8,7
8000b746:	d9 a3 28 10 	lea %a3,[%sp]104
8000b74a:	77 89 80 8e 	dextr %d8,%d9,%d8,29
8000b74e:	30 23       	add.a %a3,%a2
8000b750:	1b 04 03 40 	addi %d4,%d4,48
8000b754:	06 d9       	sh %d9,-3
8000b756:	34 34       	st.b [%a3],%d4
8000b758:	0f 89 a0 60 	or %d6,%d9,%d8
8000b75c:	c2 13       	add %d3,1
8000b75e:	df 06 ef ff 	jne %d6,0,8000b73c <_svfprintf_r+0x84c>
8000b762:	80 d2       	mov.d %d2,%a13
8000b764:	80 3d       	mov.d %d13,%a3
8000b766:	6f 02 61 00 	jz.t %d2,0,8000b828 <_svfprintf_r+0x938>
8000b76a:	8b 04 03 42 	eq %d4,%d4,48
8000b76e:	df 04 5d 80 	jne %d4,0,8000b828 <_svfprintf_r+0x938>
8000b772:	3b 00 03 70 	mov %d7,48
8000b776:	c2 fd       	add %d13,-1
8000b778:	e9 37 ff ff 	st.b [%a3]-1,%d7
8000b77c:	3c 56       	j 8000b828 <_svfprintf_r+0x938>
8000b77e:	8b 84 02 71 	rsub %d7,%d4,40
8000b782:	8b 09 00 32 	eq %d3,%d9,0
8000b786:	60 73       	mov.a %a3,%d7
8000b788:	8b a8 a0 34 	and.ge.u %d3,%d8,10
8000b78c:	d9 a7 28 10 	lea %a7,[%sp]104
8000b790:	8b 09 00 35 	or.ne %d3,%d9,0
8000b794:	30 37       	add.a %a7,%a3
8000b796:	1b 14 00 d0 	addi %d13,%d4,1
8000b79a:	df 03 1b 00 	jeq %d3,0,8000b7d0 <_svfprintf_r+0x8e0>
8000b79e:	8b 74 02 41 	rsub %d4,%d4,39
8000b7a2:	60 42       	mov.a %a2,%d4
8000b7a4:	fb a0 00 60 	mov %e6,10
8000b7a8:	0b 89 10 48 	mov %e4,%d9,%d8
8000b7ac:	d9 af 28 10 	lea %a15,[%sp]104
8000b7b0:	30 2f       	add.a %a15,%a2
8000b7b2:	6d 00 fb 13 	call 8000dfa8 <__umoddi3>
8000b7b6:	0b 89 10 48 	mov %e4,%d9,%d8
8000b7ba:	1b 02 03 20 	addi %d2,%d2,48
8000b7be:	fb a0 00 60 	mov %e6,10
8000b7c2:	28 02       	st.b [%a15]0,%d2
8000b7c4:	6d 00 a2 13 	call 8000df08 <__udivdi3>
8000b7c8:	02 d4       	mov %d4,%d13
8000b7ca:	0b 23 10 88 	mov %e8,%d3,%d2
8000b7ce:	3c d8       	j 8000b77e <_svfprintf_r+0x88e>
8000b7d0:	80 7d       	mov.d %d13,%a7
8000b7d2:	1b 08 03 80 	addi %d8,%d8,48
8000b7d6:	c2 fd       	add %d13,-1
8000b7d8:	e9 78 ff ff 	st.b [%a7]-1,%d8
8000b7dc:	3c 26       	j 8000b828 <_svfprintf_r+0x938>
8000b7de:	82 03       	mov %d3,0
8000b7e0:	d8 0f       	ld.a %a15,[%sp]60
8000b7e2:	80 ad       	mov.d %d13,%sp
8000b7e4:	8f f8 00 f1 	and %d15,%d8,15
8000b7e8:	8b 73 02 71 	rsub %d7,%d3,39
8000b7ec:	1b 8d 06 d0 	addi %d13,%d13,104
8000b7f0:	10 f7       	addsc.a %a7,%a15,%d15,0
8000b7f2:	42 7d       	add %d13,%d7
8000b7f4:	77 89 00 8e 	dextr %d8,%d9,%d8,28
8000b7f8:	0c 70       	ld.bu %d15,[%a7]0
8000b7fa:	60 d2       	mov.a %a2,%d13
8000b7fc:	06 c9       	sh %d9,-4
8000b7fe:	2c 20       	st.b [%a2]0,%d15
8000b800:	0f 89 a0 40 	or %d4,%d9,%d8
8000b804:	c2 13       	add %d3,1
8000b806:	df 04 ed ff 	jne %d4,0,8000b7e0 <_svfprintf_r+0x8f0>
8000b80a:	3c 0f       	j 8000b828 <_svfprintf_r+0x938>
8000b80c:	80 a2       	mov.d %d2,%sp
8000b80e:	1b 02 09 d0 	addi %d13,%d2,144
8000b812:	f6 3b       	jnz %d3,8000b828 <_svfprintf_r+0x938>
8000b814:	80 df       	mov.d %d15,%a13
8000b816:	2e 09       	jz.t %d15,0,8000b828 <_svfprintf_r+0x938>
8000b818:	1b 02 0d d0 	addi %d13,%d2,208
8000b81c:	60 d2       	mov.a %a2,%d13
8000b81e:	3b 00 03 70 	mov %d7,48
8000b822:	89 27 3f e4 	st.b [+%a2]-65,%d7
8000b826:	80 2d       	mov.d %d13,%a2
8000b828:	d9 a3 10 20 	lea %a3,[%sp]144
8000b82c:	80 39       	mov.d %d9,%a3
8000b82e:	a2 d9       	sub %d9,%d13
8000b830:	3c 14       	j 8000b858 <_svfprintf_r+0x968>
8000b832:	e9 af 01 10 	st.b [%sp]65,%d15
8000b836:	58 04       	ld.w %d15,[%sp]16
8000b838:	df 0f 1f 04 	jeq %d15,0,8000c076 <_svfprintf_r+0x1186>
8000b83c:	82 03       	mov %d3,0
8000b83e:	60 ad       	mov.a %a13,%d10
8000b840:	e9 af 28 10 	st.b [%sp]104,%d15
8000b844:	e9 a3 01 10 	st.b [%sp]65,%d3
8000b848:	40 fc       	mov.aa %a12,%a15
8000b84a:	80 a2       	mov.d %d2,%sp
8000b84c:	82 19       	mov %d9,1
8000b84e:	82 0e       	mov %d14,0
8000b850:	1b 82 06 d0 	addi %d13,%d2,104
8000b854:	3c 02       	j 8000b858 <_svfprintf_r+0x968>
8000b856:	82 0e       	mov %d14,0
8000b858:	79 a7 01 10 	ld.b %d7,[%sp]65
8000b85c:	80 df       	mov.d %d15,%a13
8000b85e:	0b e9 a0 a1 	max %d10,%d9,%d14
8000b862:	80 d2       	mov.d %d2,%a13
8000b864:	16 02       	and %d15,2
8000b866:	ab 1a 00 a7 	cadd %d10,%d7,%d10,1
8000b86a:	60 ff       	mov.a %a15,%d15
8000b86c:	8a 2a       	cadd %d10,%d15,2
8000b86e:	8f 42 08 f1 	and %d15,%d2,132
8000b872:	ee 48       	jnz %d15,8000b902 <_svfprintf_r+0xa12>
8000b874:	19 a8 1c 00 	ld.w %d8,[%sp]28
8000b878:	a2 a8       	sub %d8,%d10
8000b87a:	bf 18 44 00 	jlt %d8,1,8000b902 <_svfprintf_r+0xa12>
8000b87e:	91 00 00 28 	movh.a %a2,32768
8000b882:	d9 22 e8 60 	lea %a2,[%a2]3496 <80000da8 <blanks.4035>>
8000b886:	19 a1 24 10 	ld.w %d1,[%sp]100 <80000da8 <blanks.4035>>
8000b88a:	19 a4 20 10 	ld.w %d4,[%sp]96 <80000da8 <blanks.4035>>
8000b88e:	8b 18 81 72 	ge %d7,%d8,17
8000b892:	f4 e2       	st.a [%a14],%a2
8000b894:	df 07 20 00 	jeq %d7,0,8000b8d4 <_svfprintf_r+0x9e4>
8000b898:	1b 14 00 00 	addi %d0,%d4,1
8000b89c:	3b 00 01 20 	mov %d2,16
8000b8a0:	1b 01 01 10 	addi %d1,%d1,16
8000b8a4:	59 e2 04 00 	st.w [%a14]4,%d2
8000b8a8:	59 a0 20 10 	st.w [%sp]96,%d0
8000b8ac:	59 a1 24 10 	st.w [%sp]100,%d1
8000b8b0:	8b 80 80 02 	ge %d0,%d0,8
8000b8b4:	d9 ee 08 00 	lea %a14,[%a14]8
8000b8b8:	76 0b       	jz %d0,8000b8ce <_svfprintf_r+0x9de>
8000b8ba:	60 c4       	mov.a %a4,%d12
8000b8bc:	60 b5       	mov.a %a5,%d11
8000b8be:	d9 a6 1c 10 	lea %a6,[%sp]92
8000b8c2:	6d 00 57 0f 	call 8000d770 <__ssprint_r>
8000b8c6:	df 02 e0 83 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000b8ca:	d9 ae 10 20 	lea %a14,[%sp]144
8000b8ce:	1b 08 ff 8f 	addi %d8,%d8,-16
8000b8d2:	3c d6       	j 8000b87e <_svfprintf_r+0x98e>
8000b8d4:	c2 14       	add %d4,1
8000b8d6:	42 81       	add %d1,%d8
8000b8d8:	59 e8 04 00 	st.w [%a14]4,%d8
8000b8dc:	59 a4 20 10 	st.w [%sp]96,%d4
8000b8e0:	59 a1 24 10 	st.w [%sp]100,%d1
8000b8e4:	8b 84 80 42 	ge %d4,%d4,8
8000b8e8:	d9 ee 08 00 	lea %a14,[%a14]8
8000b8ec:	76 4b       	jz %d4,8000b902 <_svfprintf_r+0xa12>
8000b8ee:	60 c4       	mov.a %a4,%d12
8000b8f0:	60 b5       	mov.a %a5,%d11
8000b8f2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000b8f6:	6d 00 3d 0f 	call 8000d770 <__ssprint_r>
8000b8fa:	df 02 c6 83 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000b8fe:	d9 ae 10 20 	lea %a14,[%sp]144
8000b902:	79 a4 01 10 	ld.b %d4,[%sp]65
8000b906:	df 04 21 00 	jeq %d4,0,8000b948 <_svfprintf_r+0xa58>
8000b90a:	19 a4 24 10 	ld.w %d4,[%sp]100
8000b90e:	d9 a7 01 10 	lea %a7,[%sp]65
8000b912:	c2 14       	add %d4,1
8000b914:	59 a4 24 10 	st.w [%sp]100,%d4
8000b918:	19 a4 20 10 	ld.w %d4,[%sp]96
8000b91c:	82 17       	mov %d7,1
8000b91e:	c2 14       	add %d4,1
8000b920:	f4 e7       	st.a [%a14],%a7
8000b922:	59 e7 04 00 	st.w [%a14]4,%d7
8000b926:	59 a4 20 10 	st.w [%sp]96,%d4
8000b92a:	8b 84 80 42 	ge %d4,%d4,8
8000b92e:	d9 ee 08 00 	lea %a14,[%a14]8
8000b932:	76 4b       	jz %d4,8000b948 <_svfprintf_r+0xa58>
8000b934:	60 c4       	mov.a %a4,%d12
8000b936:	60 b5       	mov.a %a5,%d11
8000b938:	d9 a6 1c 10 	lea %a6,[%sp]92
8000b93c:	6d 00 1a 0f 	call 8000d770 <__ssprint_r>
8000b940:	df 02 a3 83 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000b944:	d9 ae 10 20 	lea %a14,[%sp]144
8000b948:	bd 0f 21 00 	jz.a %a15,8000b98a <_svfprintf_r+0xa9a>
8000b94c:	19 a4 24 10 	ld.w %d4,[%sp]100
8000b950:	d9 a7 02 10 	lea %a7,[%sp]66
8000b954:	c2 24       	add %d4,2
8000b956:	59 a4 24 10 	st.w [%sp]100,%d4
8000b95a:	19 a4 20 10 	ld.w %d4,[%sp]96
8000b95e:	82 27       	mov %d7,2
8000b960:	c2 14       	add %d4,1
8000b962:	f4 e7       	st.a [%a14],%a7
8000b964:	59 e7 04 00 	st.w [%a14]4,%d7
8000b968:	59 a4 20 10 	st.w [%sp]96,%d4
8000b96c:	8b 84 80 42 	ge %d4,%d4,8
8000b970:	d9 ee 08 00 	lea %a14,[%a14]8
8000b974:	76 4b       	jz %d4,8000b98a <_svfprintf_r+0xa9a>
8000b976:	60 c4       	mov.a %a4,%d12
8000b978:	60 b5       	mov.a %a5,%d11
8000b97a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000b97e:	6d 00 f9 0e 	call 8000d770 <__ssprint_r>
8000b982:	df 02 82 83 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000b986:	d9 ae 10 20 	lea %a14,[%sp]144
8000b98a:	8b 0f 28 42 	ne %d4,%d15,128
8000b98e:	df 04 48 80 	jne %d4,0,8000ba1e <_svfprintf_r+0xb2e>
8000b992:	58 07       	ld.w %d15,[%sp]28
8000b994:	7b 00 00 28 	movh %d2,32768
8000b998:	60 23       	mov.a %a3,%d2
8000b99a:	a2 af       	sub %d15,%d10
8000b99c:	d9 3f d8 60 	lea %a15,[%a3]3480
8000b9a0:	bf 1f 3f 00 	jlt %d15,1,8000ba1e <_svfprintf_r+0xb2e>
8000b9a4:	19 a7 24 10 	ld.w %d7,[%sp]100
8000b9a8:	19 a4 20 10 	ld.w %d4,[%sp]96
8000b9ac:	8b 1f 81 82 	ge %d8,%d15,17
8000b9b0:	ec e0       	st.a [%a14]0,%a15
8000b9b2:	df 08 20 00 	jeq %d8,0,8000b9f2 <_svfprintf_r+0xb02>
8000b9b6:	1b 14 00 00 	addi %d0,%d4,1
8000b9ba:	3b 00 01 20 	mov %d2,16
8000b9be:	1b 07 01 10 	addi %d1,%d7,16
8000b9c2:	59 e2 04 00 	st.w [%a14]4,%d2
8000b9c6:	59 a0 20 10 	st.w [%sp]96,%d0
8000b9ca:	59 a1 24 10 	st.w [%sp]100,%d1
8000b9ce:	8b 80 80 02 	ge %d0,%d0,8
8000b9d2:	d9 ee 08 00 	lea %a14,[%a14]8
8000b9d6:	76 0b       	jz %d0,8000b9ec <_svfprintf_r+0xafc>
8000b9d8:	60 c4       	mov.a %a4,%d12
8000b9da:	60 b5       	mov.a %a5,%d11
8000b9dc:	d9 a6 1c 10 	lea %a6,[%sp]92
8000b9e0:	6d 00 c8 0e 	call 8000d770 <__ssprint_r>
8000b9e4:	df 02 51 83 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000b9e8:	d9 ae 10 20 	lea %a14,[%sp]144
8000b9ec:	1b 0f ff ff 	addi %d15,%d15,-16
8000b9f0:	3c da       	j 8000b9a4 <_svfprintf_r+0xab4>
8000b9f2:	c2 14       	add %d4,1
8000b9f4:	42 f7       	add %d7,%d15
8000b9f6:	6c e1       	st.w [%a14]4,%d15
8000b9f8:	59 a4 20 10 	st.w [%sp]96,%d4
8000b9fc:	59 a7 24 10 	st.w [%sp]100,%d7
8000ba00:	8b 84 80 42 	ge %d4,%d4,8
8000ba04:	d9 ee 08 00 	lea %a14,[%a14]8
8000ba08:	76 4b       	jz %d4,8000ba1e <_svfprintf_r+0xb2e>
8000ba0a:	60 c4       	mov.a %a4,%d12
8000ba0c:	60 b5       	mov.a %a5,%d11
8000ba0e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000ba12:	6d 00 af 0e 	call 8000d770 <__ssprint_r>
8000ba16:	df 02 38 83 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000ba1a:	d9 ae 10 20 	lea %a14,[%sp]144
8000ba1e:	7b 00 00 88 	movh %d8,32768
8000ba22:	a2 9e       	sub %d14,%d9
8000ba24:	1b 88 d9 80 	addi %d8,%d8,3480
8000ba28:	c5 0f 10 00 	lea %a15,10 <_.+0xf>
8000ba2c:	bf 1e 3c 00 	jlt %d14,1,8000baa4 <_svfprintf_r+0xbb4>
8000ba30:	19 a6 24 10 	ld.w %d6,[%sp]100
8000ba34:	19 a4 20 10 	ld.w %d4,[%sp]96
8000ba38:	8b 1e 81 02 	ge %d0,%d14,17
8000ba3c:	74 e8       	st.w [%a14],%d8
8000ba3e:	df 00 1c 00 	jeq %d0,0,8000ba76 <_svfprintf_r+0xb86>
8000ba42:	c2 14       	add %d4,1
8000ba44:	1b 06 01 00 	addi %d0,%d6,16
8000ba48:	ec e1       	st.a [%a14]4,%a15
8000ba4a:	59 a4 20 10 	st.w [%sp]96,%d4
8000ba4e:	59 a0 24 10 	st.w [%sp]100,%d0
8000ba52:	8b 84 80 42 	ge %d4,%d4,8
8000ba56:	d9 ee 08 00 	lea %a14,[%a14]8
8000ba5a:	76 4b       	jz %d4,8000ba70 <_svfprintf_r+0xb80>
8000ba5c:	60 c4       	mov.a %a4,%d12
8000ba5e:	60 b5       	mov.a %a5,%d11
8000ba60:	d9 a6 1c 10 	lea %a6,[%sp]92
8000ba64:	6d 00 86 0e 	call 8000d770 <__ssprint_r>
8000ba68:	df 02 0f 83 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000ba6c:	d9 ae 10 20 	lea %a14,[%sp]144
8000ba70:	1b 0e ff ef 	addi %d14,%d14,-16
8000ba74:	3c de       	j 8000ba30 <_svfprintf_r+0xb40>
8000ba76:	c2 14       	add %d4,1
8000ba78:	42 e6       	add %d6,%d14
8000ba7a:	59 ee 04 00 	st.w [%a14]4,%d14
8000ba7e:	59 a4 20 10 	st.w [%sp]96,%d4
8000ba82:	59 a6 24 10 	st.w [%sp]100,%d6
8000ba86:	8b 84 80 42 	ge %d4,%d4,8
8000ba8a:	d9 ee 08 00 	lea %a14,[%a14]8
8000ba8e:	76 4b       	jz %d4,8000baa4 <_svfprintf_r+0xbb4>
8000ba90:	60 c4       	mov.a %a4,%d12
8000ba92:	60 b5       	mov.a %a5,%d11
8000ba94:	d9 a6 1c 10 	lea %a6,[%sp]92
8000ba98:	6d 00 6c 0e 	call 8000d770 <__ssprint_r>
8000ba9c:	df 02 f5 82 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000baa0:	d9 ae 10 20 	lea %a14,[%sp]144
8000baa4:	80 df       	mov.d %d15,%a13
8000baa6:	19 ae 24 10 	ld.w %d14,[%sp]100
8000baaa:	19 a8 20 10 	ld.w %d8,[%sp]96
8000baae:	6f 8f 1d 80 	jnz.t %d15,8,8000bae8 <_svfprintf_r+0xbf8>
8000bab2:	c2 18       	add %d8,1
8000bab4:	59 e9 04 00 	st.w [%a14]4,%d9
8000bab8:	42 e9       	add %d9,%d14
8000baba:	59 a8 20 10 	st.w [%sp]96,%d8
8000babe:	74 ed       	st.w [%a14],%d13
8000bac0:	59 a9 24 10 	st.w [%sp]100,%d9
8000bac4:	8b 88 80 82 	ge %d8,%d8,8
8000bac8:	d9 ef 08 00 	lea %a15,[%a14]8
8000bacc:	df 08 79 02 	jeq %d8,0,8000bfbe <_svfprintf_r+0x10ce>
8000bad0:	60 c4       	mov.a %a4,%d12
8000bad2:	60 b5       	mov.a %a5,%d11
8000bad4:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bad8:	6d 00 4c 0e 	call 8000d770 <__ssprint_r>
8000badc:	df 02 d5 82 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000bae0:	d9 af 10 20 	lea %a15,[%sp]144
8000bae4:	1d 00 6d 02 	j 8000bfbe <_svfprintf_r+0x10ce>
8000bae8:	19 a2 10 00 	ld.w %d2,[%sp]16
8000baec:	8b 62 46 f2 	lt %d15,%d2,102
8000baf0:	df 0f be 81 	jne %d15,0,8000be6c <_svfprintf_r+0xf7c>
8000baf4:	d2 06       	mov %e6,0
8000baf6:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000bafa:	19 a5 30 00 	ld.w %d5,[%sp]48
8000bafe:	6d 00 3e 11 	call 8000dd7a <__eqdf2>
8000bb02:	df 02 78 80 	jne %d2,0,8000bbf2 <_svfprintf_r+0xd02>
8000bb06:	7b 00 00 38 	movh %d3,32768
8000bb0a:	1b 63 d9 30 	addi %d3,%d3,3478
8000bb0e:	c2 18       	add %d8,1
8000bb10:	74 e3       	st.w [%a14],%d3
8000bb12:	1b 1e 00 90 	addi %d9,%d14,1
8000bb16:	82 13       	mov %d3,1
8000bb18:	59 a8 20 10 	st.w [%sp]96,%d8
8000bb1c:	59 e3 04 00 	st.w [%a14]4,%d3
8000bb20:	59 a9 24 10 	st.w [%sp]100,%d9
8000bb24:	8b 88 80 82 	ge %d8,%d8,8
8000bb28:	d9 ef 08 00 	lea %a15,[%a14]8
8000bb2c:	76 8b       	jz %d8,8000bb42 <_svfprintf_r+0xc52>
8000bb2e:	60 c4       	mov.a %a4,%d12
8000bb30:	60 b5       	mov.a %a5,%d11
8000bb32:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bb36:	6d 00 1d 0e 	call 8000d770 <__ssprint_r>
8000bb3a:	df 02 a6 82 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000bb3e:	d9 af 10 20 	lea %a15,[%sp]144
8000bb42:	58 11       	ld.w %d15,[%sp]68
8000bb44:	19 a2 14 00 	ld.w %d2,[%sp]20
8000bb48:	3f 2f 05 00 	jlt %d15,%d2,8000bb52 <_svfprintf_r+0xc62>
8000bb4c:	80 df       	mov.d %d15,%a13
8000bb4e:	6f 0f 38 02 	jz.t %d15,0,8000bfbe <_svfprintf_r+0x10ce>
8000bb52:	58 08       	ld.w %d15,[%sp]32
8000bb54:	19 a2 20 00 	ld.w %d2,[%sp]32
8000bb58:	68 1f       	st.w [%a15]4,%d15
8000bb5a:	58 19       	ld.w %d15,[%sp]100
8000bb5c:	99 a3 34 00 	ld.a %a3,[%sp]52
8000bb60:	42 2f       	add %d15,%d2
8000bb62:	78 19       	st.w [%sp]100,%d15
8000bb64:	58 18       	ld.w %d15,[%sp]96
8000bb66:	e8 03       	st.a [%a15]0,%a3
8000bb68:	c2 1f       	add %d15,1
8000bb6a:	78 18       	st.w [%sp]96,%d15
8000bb6c:	8b 8f 80 f2 	ge %d15,%d15,8
8000bb70:	d9 ff 08 00 	lea %a15,[%a15]8
8000bb74:	6e 0b       	jz %d15,8000bb8a <_svfprintf_r+0xc9a>
8000bb76:	60 c4       	mov.a %a4,%d12
8000bb78:	60 b5       	mov.a %a5,%d11
8000bb7a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bb7e:	6d 00 f9 0d 	call 8000d770 <__ssprint_r>
8000bb82:	df 02 82 82 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000bb86:	d9 af 10 20 	lea %a15,[%sp]144
8000bb8a:	58 05       	ld.w %d15,[%sp]20
8000bb8c:	7b 00 00 88 	movh %d8,32768
8000bb90:	c2 ff       	add %d15,-1
8000bb92:	1b 88 d9 80 	addi %d8,%d8,3480
8000bb96:	3b 00 01 90 	mov %d9,16
8000bb9a:	bf 1f 12 02 	jlt %d15,1,8000bfbe <_svfprintf_r+0x10ce>
8000bb9e:	19 a5 24 10 	ld.w %d5,[%sp]100
8000bba2:	19 a3 20 10 	ld.w %d3,[%sp]96
8000bba6:	8b 1f 81 42 	ge %d4,%d15,17
8000bbaa:	68 08       	st.w [%a15]0,%d8
8000bbac:	df 04 1c 00 	jeq %d4,0,8000bbe4 <_svfprintf_r+0xcf4>
8000bbb0:	c2 13       	add %d3,1
8000bbb2:	1b 05 01 40 	addi %d4,%d5,16
8000bbb6:	68 19       	st.w [%a15]4,%d9
8000bbb8:	59 a3 20 10 	st.w [%sp]96,%d3
8000bbbc:	59 a4 24 10 	st.w [%sp]100,%d4
8000bbc0:	8b 83 80 32 	ge %d3,%d3,8
8000bbc4:	d9 ff 08 00 	lea %a15,[%a15]8
8000bbc8:	76 3b       	jz %d3,8000bbde <_svfprintf_r+0xcee>
8000bbca:	60 c4       	mov.a %a4,%d12
8000bbcc:	60 b5       	mov.a %a5,%d11
8000bbce:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bbd2:	6d 00 cf 0d 	call 8000d770 <__ssprint_r>
8000bbd6:	df 02 58 82 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000bbda:	d9 af 10 20 	lea %a15,[%sp]144
8000bbde:	1b 0f ff ff 	addi %d15,%d15,-16
8000bbe2:	3c de       	j 8000bb9e <_svfprintf_r+0xcae>
8000bbe4:	12 54       	add %d4,%d15,%d5
8000bbe6:	68 1f       	st.w [%a15]4,%d15
8000bbe8:	59 a4 24 10 	st.w [%sp]100,%d4
8000bbec:	9a 13       	add %d15,%d3,1
8000bbee:	1d 00 e1 01 	j 8000bfb0 <_svfprintf_r+0x10c0>
8000bbf2:	19 a3 04 10 	ld.w %d3,[%sp]68
8000bbf6:	ff 13 8e 00 	jge %d3,1,8000bd12 <_svfprintf_r+0xe22>
8000bbfa:	7b 00 00 38 	movh %d3,32768
8000bbfe:	1b 63 d9 30 	addi %d3,%d3,3478
8000bc02:	c2 18       	add %d8,1
8000bc04:	74 e3       	st.w [%a14],%d3
8000bc06:	1b 1e 00 90 	addi %d9,%d14,1
8000bc0a:	82 13       	mov %d3,1
8000bc0c:	59 a8 20 10 	st.w [%sp]96,%d8
8000bc10:	59 e3 04 00 	st.w [%a14]4,%d3
8000bc14:	59 a9 24 10 	st.w [%sp]100,%d9
8000bc18:	8b 88 80 82 	ge %d8,%d8,8
8000bc1c:	d9 ef 08 00 	lea %a15,[%a14]8
8000bc20:	76 8b       	jz %d8,8000bc36 <_svfprintf_r+0xd46>
8000bc22:	60 c4       	mov.a %a4,%d12
8000bc24:	60 b5       	mov.a %a5,%d11
8000bc26:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bc2a:	6d 00 a3 0d 	call 8000d770 <__ssprint_r>
8000bc2e:	df 02 2c 82 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000bc32:	d9 af 10 20 	lea %a15,[%sp]144
8000bc36:	58 11       	ld.w %d15,[%sp]68
8000bc38:	19 a2 14 00 	ld.w %d2,[%sp]20
8000bc3c:	a6 2f       	or %d15,%d2
8000bc3e:	ee 04       	jnz %d15,8000bc46 <_svfprintf_r+0xd56>
8000bc40:	80 df       	mov.d %d15,%a13
8000bc42:	6f 0f be 01 	jz.t %d15,0,8000bfbe <_svfprintf_r+0x10ce>
8000bc46:	58 08       	ld.w %d15,[%sp]32
8000bc48:	19 a2 20 00 	ld.w %d2,[%sp]32
8000bc4c:	68 1f       	st.w [%a15]4,%d15
8000bc4e:	58 19       	ld.w %d15,[%sp]100
8000bc50:	99 a3 34 00 	ld.a %a3,[%sp]52
8000bc54:	42 2f       	add %d15,%d2
8000bc56:	78 19       	st.w [%sp]100,%d15
8000bc58:	58 18       	ld.w %d15,[%sp]96
8000bc5a:	e8 03       	st.a [%a15]0,%a3
8000bc5c:	c2 1f       	add %d15,1
8000bc5e:	78 18       	st.w [%sp]96,%d15
8000bc60:	8b 8f 80 f2 	ge %d15,%d15,8
8000bc64:	d9 ff 08 00 	lea %a15,[%a15]8
8000bc68:	6e 0b       	jz %d15,8000bc7e <_svfprintf_r+0xd8e>
8000bc6a:	60 c4       	mov.a %a4,%d12
8000bc6c:	60 b5       	mov.a %a5,%d11
8000bc6e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bc72:	6d 00 7f 0d 	call 8000d770 <__ssprint_r>
8000bc76:	df 02 08 82 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000bc7a:	d9 af 10 20 	lea %a15,[%sp]144
8000bc7e:	58 11       	ld.w %d15,[%sp]68
8000bc80:	7b 00 00 88 	movh %d8,32768
8000bc84:	32 5f       	rsub %d15
8000bc86:	1b 88 d9 80 	addi %d8,%d8,3480
8000bc8a:	3b 00 01 90 	mov %d9,16
8000bc8e:	bf 1f 3a 00 	jlt %d15,1,8000bd02 <_svfprintf_r+0xe12>
8000bc92:	19 a5 24 10 	ld.w %d5,[%sp]100
8000bc96:	19 a3 20 10 	ld.w %d3,[%sp]96
8000bc9a:	8b 1f 81 42 	ge %d4,%d15,17
8000bc9e:	68 08       	st.w [%a15]0,%d8
8000bca0:	df 04 1c 00 	jeq %d4,0,8000bcd8 <_svfprintf_r+0xde8>
8000bca4:	c2 13       	add %d3,1
8000bca6:	1b 05 01 40 	addi %d4,%d5,16
8000bcaa:	68 19       	st.w [%a15]4,%d9
8000bcac:	59 a3 20 10 	st.w [%sp]96,%d3
8000bcb0:	59 a4 24 10 	st.w [%sp]100,%d4
8000bcb4:	8b 83 80 32 	ge %d3,%d3,8
8000bcb8:	d9 ff 08 00 	lea %a15,[%a15]8
8000bcbc:	76 3b       	jz %d3,8000bcd2 <_svfprintf_r+0xde2>
8000bcbe:	60 c4       	mov.a %a4,%d12
8000bcc0:	60 b5       	mov.a %a5,%d11
8000bcc2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bcc6:	6d 00 55 0d 	call 8000d770 <__ssprint_r>
8000bcca:	df 02 de 81 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000bcce:	d9 af 10 20 	lea %a15,[%sp]144
8000bcd2:	1b 0f ff ff 	addi %d15,%d15,-16
8000bcd6:	3c de       	j 8000bc92 <_svfprintf_r+0xda2>
8000bcd8:	68 1f       	st.w [%a15]4,%d15
8000bcda:	12 54       	add %d4,%d15,%d5
8000bcdc:	9a 13       	add %d15,%d3,1
8000bcde:	78 18       	st.w [%sp]96,%d15
8000bce0:	59 a4 24 10 	st.w [%sp]100,%d4
8000bce4:	8b 8f 80 f2 	ge %d15,%d15,8
8000bce8:	d9 ff 08 00 	lea %a15,[%a15]8
8000bcec:	6e 0b       	jz %d15,8000bd02 <_svfprintf_r+0xe12>
8000bcee:	60 c4       	mov.a %a4,%d12
8000bcf0:	60 b5       	mov.a %a5,%d11
8000bcf2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bcf6:	6d 00 3d 0d 	call 8000d770 <__ssprint_r>
8000bcfa:	df 02 c6 81 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000bcfe:	d9 af 10 20 	lea %a15,[%sp]144
8000bd02:	58 05       	ld.w %d15,[%sp]20
8000bd04:	68 0d       	st.w [%a15]0,%d13
8000bd06:	68 1f       	st.w [%a15]4,%d15
8000bd08:	19 a2 14 00 	ld.w %d2,[%sp]20
8000bd0c:	58 19       	ld.w %d15,[%sp]100
8000bd0e:	1d 00 4d 01 	j 8000bfa8 <_svfprintf_r+0x10b8>
8000bd12:	58 05       	ld.w %d15,[%sp]20
8000bd14:	74 ed       	st.w [%a14],%d13
8000bd16:	3f f3 6a 00 	jlt %d3,%d15,8000bdea <_svfprintf_r+0xefa>
8000bd1a:	02 f9       	mov %d9,%d15
8000bd1c:	c2 18       	add %d8,1
8000bd1e:	42 e9       	add %d9,%d14
8000bd20:	59 a8 20 10 	st.w [%sp]96,%d8
8000bd24:	6c e1       	st.w [%a14]4,%d15
8000bd26:	59 a9 24 10 	st.w [%sp]100,%d9
8000bd2a:	8b 88 80 82 	ge %d8,%d8,8
8000bd2e:	d9 ef 08 00 	lea %a15,[%a14]8
8000bd32:	76 8b       	jz %d8,8000bd48 <_svfprintf_r+0xe58>
8000bd34:	60 c4       	mov.a %a4,%d12
8000bd36:	60 b5       	mov.a %a5,%d11
8000bd38:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bd3c:	6d 00 1a 0d 	call 8000d770 <__ssprint_r>
8000bd40:	df 02 a3 81 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000bd44:	d9 af 10 20 	lea %a15,[%sp]144
8000bd48:	58 11       	ld.w %d15,[%sp]68
8000bd4a:	19 a2 14 00 	ld.w %d2,[%sp]20
8000bd4e:	7b 00 00 88 	movh %d8,32768
8000bd52:	a2 2f       	sub %d15,%d2
8000bd54:	1b 88 d9 80 	addi %d8,%d8,3480
8000bd58:	3b 00 01 90 	mov %d9,16
8000bd5c:	bf 1f 3a 00 	jlt %d15,1,8000bdd0 <_svfprintf_r+0xee0>
8000bd60:	19 a5 24 10 	ld.w %d5,[%sp]100
8000bd64:	19 a3 20 10 	ld.w %d3,[%sp]96
8000bd68:	8b 1f 81 42 	ge %d4,%d15,17
8000bd6c:	68 08       	st.w [%a15]0,%d8
8000bd6e:	df 04 1c 00 	jeq %d4,0,8000bda6 <_svfprintf_r+0xeb6>
8000bd72:	c2 13       	add %d3,1
8000bd74:	1b 05 01 40 	addi %d4,%d5,16
8000bd78:	68 19       	st.w [%a15]4,%d9
8000bd7a:	59 a3 20 10 	st.w [%sp]96,%d3
8000bd7e:	59 a4 24 10 	st.w [%sp]100,%d4
8000bd82:	8b 83 80 32 	ge %d3,%d3,8
8000bd86:	d9 ff 08 00 	lea %a15,[%a15]8
8000bd8a:	76 3b       	jz %d3,8000bda0 <_svfprintf_r+0xeb0>
8000bd8c:	60 c4       	mov.a %a4,%d12
8000bd8e:	60 b5       	mov.a %a5,%d11
8000bd90:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bd94:	6d 00 ee 0c 	call 8000d770 <__ssprint_r>
8000bd98:	df 02 77 81 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000bd9c:	d9 af 10 20 	lea %a15,[%sp]144
8000bda0:	1b 0f ff ff 	addi %d15,%d15,-16
8000bda4:	3c de       	j 8000bd60 <_svfprintf_r+0xe70>
8000bda6:	68 1f       	st.w [%a15]4,%d15
8000bda8:	12 54       	add %d4,%d15,%d5
8000bdaa:	9a 13       	add %d15,%d3,1
8000bdac:	78 18       	st.w [%sp]96,%d15
8000bdae:	59 a4 24 10 	st.w [%sp]100,%d4
8000bdb2:	8b 8f 80 f2 	ge %d15,%d15,8
8000bdb6:	d9 ff 08 00 	lea %a15,[%a15]8
8000bdba:	6e 0b       	jz %d15,8000bdd0 <_svfprintf_r+0xee0>
8000bdbc:	60 c4       	mov.a %a4,%d12
8000bdbe:	60 b5       	mov.a %a5,%d11
8000bdc0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bdc4:	6d 00 d6 0c 	call 8000d770 <__ssprint_r>
8000bdc8:	df 02 5f 81 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000bdcc:	d9 af 10 20 	lea %a15,[%sp]144
8000bdd0:	80 df       	mov.d %d15,%a13
8000bdd2:	6f 0f f6 00 	jz.t %d15,0,8000bfbe <_svfprintf_r+0x10ce>
8000bdd6:	99 a3 34 00 	ld.a %a3,[%sp]52
8000bdda:	58 08       	ld.w %d15,[%sp]32
8000bddc:	19 a2 20 00 	ld.w %d2,[%sp]32
8000bde0:	68 1f       	st.w [%a15]4,%d15
8000bde2:	e8 03       	st.a [%a15]0,%a3
8000bde4:	58 19       	ld.w %d15,[%sp]100
8000bde6:	1d 00 e1 00 	j 8000bfa8 <_svfprintf_r+0x10b8>
8000bdea:	c2 18       	add %d8,1
8000bdec:	59 e3 04 00 	st.w [%a14]4,%d3
8000bdf0:	42 e3       	add %d3,%d14
8000bdf2:	59 a8 20 10 	st.w [%sp]96,%d8
8000bdf6:	59 a3 24 10 	st.w [%sp]100,%d3
8000bdfa:	8b 88 80 82 	ge %d8,%d8,8
8000bdfe:	d9 ef 08 00 	lea %a15,[%a14]8
8000be02:	76 8b       	jz %d8,8000be18 <_svfprintf_r+0xf28>
8000be04:	60 c4       	mov.a %a4,%d12
8000be06:	60 b5       	mov.a %a5,%d11
8000be08:	d9 a6 1c 10 	lea %a6,[%sp]92
8000be0c:	6d 00 b2 0c 	call 8000d770 <__ssprint_r>
8000be10:	df 02 3b 81 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000be14:	d9 af 10 20 	lea %a15,[%sp]144
8000be18:	58 08       	ld.w %d15,[%sp]32
8000be1a:	19 a2 20 00 	ld.w %d2,[%sp]32
8000be1e:	68 1f       	st.w [%a15]4,%d15
8000be20:	58 19       	ld.w %d15,[%sp]100
8000be22:	99 a3 34 00 	ld.a %a3,[%sp]52
8000be26:	42 2f       	add %d15,%d2
8000be28:	78 19       	st.w [%sp]100,%d15
8000be2a:	58 18       	ld.w %d15,[%sp]96
8000be2c:	99 ae 04 10 	ld.a %a14,[%sp]68
8000be30:	c2 1f       	add %d15,1
8000be32:	60 d2       	mov.a %a2,%d13
8000be34:	e8 03       	st.a [%a15]0,%a3
8000be36:	78 18       	st.w [%sp]96,%d15
8000be38:	8b 8f 80 f2 	ge %d15,%d15,8
8000be3c:	30 2e       	add.a %a14,%a2
8000be3e:	d9 ff 08 00 	lea %a15,[%a15]8
8000be42:	6e 0b       	jz %d15,8000be58 <_svfprintf_r+0xf68>
8000be44:	60 c4       	mov.a %a4,%d12
8000be46:	60 b5       	mov.a %a5,%d11
8000be48:	d9 a6 1c 10 	lea %a6,[%sp]92
8000be4c:	6d 00 92 0c 	call 8000d770 <__ssprint_r>
8000be50:	df 02 1b 81 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000be54:	d9 af 10 20 	lea %a15,[%sp]144
8000be58:	19 a2 14 00 	ld.w %d2,[%sp]20
8000be5c:	58 11       	ld.w %d15,[%sp]68
8000be5e:	e8 0e       	st.a [%a15]0,%a14
8000be60:	5a f2       	sub %d15,%d2,%d15
8000be62:	68 1f       	st.w [%a15]4,%d15
8000be64:	19 a2 24 10 	ld.w %d2,[%sp]100
8000be68:	1d 00 a0 00 	j 8000bfa8 <_svfprintf_r+0x10b8>
8000be6c:	c2 18       	add %d8,1
8000be6e:	82 13       	mov %d3,1
8000be70:	1b 1e 00 90 	addi %d9,%d14,1
8000be74:	58 05       	ld.w %d15,[%sp]20
8000be76:	59 a8 20 10 	st.w [%sp]96,%d8
8000be7a:	74 ed       	st.w [%a14],%d13
8000be7c:	59 e3 04 00 	st.w [%a14]4,%d3
8000be80:	59 a9 24 10 	st.w [%sp]100,%d9
8000be84:	8b 88 80 82 	ge %d8,%d8,8
8000be88:	ff 2f 05 00 	jge %d15,2,8000be92 <_svfprintf_r+0xfa2>
8000be8c:	80 d2       	mov.d %d2,%a13
8000be8e:	6f 02 81 00 	jz.t %d2,0,8000bf90 <_svfprintf_r+0x10a0>
8000be92:	d9 ef 08 00 	lea %a15,[%a14]8
8000be96:	76 8b       	jz %d8,8000beac <_svfprintf_r+0xfbc>
8000be98:	60 c4       	mov.a %a4,%d12
8000be9a:	60 b5       	mov.a %a5,%d11
8000be9c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bea0:	6d 00 68 0c 	call 8000d770 <__ssprint_r>
8000bea4:	df 02 f1 80 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000bea8:	d9 af 10 20 	lea %a15,[%sp]144
8000beac:	58 08       	ld.w %d15,[%sp]32
8000beae:	19 a2 20 00 	ld.w %d2,[%sp]32
8000beb2:	68 1f       	st.w [%a15]4,%d15
8000beb4:	58 19       	ld.w %d15,[%sp]100
8000beb6:	99 a3 34 00 	ld.a %a3,[%sp]52
8000beba:	42 2f       	add %d15,%d2
8000bebc:	78 19       	st.w [%sp]100,%d15
8000bebe:	58 18       	ld.w %d15,[%sp]96
8000bec0:	e8 03       	st.a [%a15]0,%a3
8000bec2:	c2 1f       	add %d15,1
8000bec4:	78 18       	st.w [%sp]96,%d15
8000bec6:	8b 8f 80 f2 	ge %d15,%d15,8
8000beca:	d9 ff 08 00 	lea %a15,[%a15]8
8000bece:	6e 0b       	jz %d15,8000bee4 <_svfprintf_r+0xff4>
8000bed0:	60 c4       	mov.a %a4,%d12
8000bed2:	60 b5       	mov.a %a5,%d11
8000bed4:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bed8:	6d 00 4c 0c 	call 8000d770 <__ssprint_r>
8000bedc:	df 02 d5 80 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000bee0:	d9 af 10 20 	lea %a15,[%sp]144
8000bee4:	d2 06       	mov %e6,0
8000bee6:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000beea:	19 a5 30 00 	ld.w %d5,[%sp]48
8000beee:	6d 00 66 0f 	call 8000ddba <__nedf2>
8000bef2:	58 05       	ld.w %d15,[%sp]20
8000bef4:	c2 ff       	add %d15,-1
8000bef6:	76 2c       	jz %d2,8000bf0e <_svfprintf_r+0x101e>
8000bef8:	19 a2 24 10 	ld.w %d2,[%sp]100
8000befc:	60 de       	mov.a %a14,%d13
8000befe:	68 1f       	st.w [%a15]4,%d15
8000bf00:	42 2f       	add %d15,%d2
8000bf02:	78 19       	st.w [%sp]100,%d15
8000bf04:	58 18       	ld.w %d15,[%sp]96
8000bf06:	b0 1e       	add.a %a14,1
8000bf08:	e8 0e       	st.a [%a15]0,%a14
8000bf0a:	c2 1f       	add %d15,1
8000bf0c:	3c 31       	j 8000bf6e <_svfprintf_r+0x107e>
8000bf0e:	7b 00 00 88 	movh %d8,32768
8000bf12:	1b 88 d9 80 	addi %d8,%d8,3480
8000bf16:	3b 00 01 90 	mov %d9,16
8000bf1a:	bf 1f 3f 00 	jlt %d15,1,8000bf98 <_svfprintf_r+0x10a8>
8000bf1e:	19 a5 24 10 	ld.w %d5,[%sp]100
8000bf22:	19 a3 20 10 	ld.w %d3,[%sp]96
8000bf26:	8b 1f 81 42 	ge %d4,%d15,17
8000bf2a:	68 08       	st.w [%a15]0,%d8
8000bf2c:	df 04 1c 00 	jeq %d4,0,8000bf64 <_svfprintf_r+0x1074>
8000bf30:	c2 13       	add %d3,1
8000bf32:	1b 05 01 40 	addi %d4,%d5,16
8000bf36:	68 19       	st.w [%a15]4,%d9
8000bf38:	59 a3 20 10 	st.w [%sp]96,%d3
8000bf3c:	59 a4 24 10 	st.w [%sp]100,%d4
8000bf40:	8b 83 80 32 	ge %d3,%d3,8
8000bf44:	d9 ff 08 00 	lea %a15,[%a15]8
8000bf48:	76 3b       	jz %d3,8000bf5e <_svfprintf_r+0x106e>
8000bf4a:	60 c4       	mov.a %a4,%d12
8000bf4c:	60 b5       	mov.a %a5,%d11
8000bf4e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bf52:	6d 00 0f 0c 	call 8000d770 <__ssprint_r>
8000bf56:	df 02 98 80 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000bf5a:	d9 af 10 20 	lea %a15,[%sp]144
8000bf5e:	1b 0f ff ff 	addi %d15,%d15,-16
8000bf62:	3c de       	j 8000bf1e <_svfprintf_r+0x102e>
8000bf64:	12 54       	add %d4,%d15,%d5
8000bf66:	68 1f       	st.w [%a15]4,%d15
8000bf68:	59 a4 24 10 	st.w [%sp]100,%d4
8000bf6c:	9a 13       	add %d15,%d3,1
8000bf6e:	78 18       	st.w [%sp]96,%d15
8000bf70:	8b 8f 80 f2 	ge %d15,%d15,8
8000bf74:	d9 ff 08 00 	lea %a15,[%a15]8
8000bf78:	6e 10       	jz %d15,8000bf98 <_svfprintf_r+0x10a8>
8000bf7a:	60 c4       	mov.a %a4,%d12
8000bf7c:	60 b5       	mov.a %a5,%d11
8000bf7e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bf82:	6d 00 f7 0b 	call 8000d770 <__ssprint_r>
8000bf86:	df 02 80 80 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000bf8a:	d9 af 10 20 	lea %a15,[%sp]144
8000bf8e:	3c 05       	j 8000bf98 <_svfprintf_r+0x10a8>
8000bf90:	df 08 f5 ff 	jne %d8,0,8000bf7a <_svfprintf_r+0x108a>
8000bf94:	d9 ef 08 00 	lea %a15,[%a14]8
8000bf98:	58 0e       	ld.w %d15,[%sp]56
8000bf9a:	d9 a3 0d 10 	lea %a3,[%sp]77
8000bf9e:	68 1f       	st.w [%a15]4,%d15
8000bfa0:	19 a2 38 00 	ld.w %d2,[%sp]56
8000bfa4:	58 19       	ld.w %d15,[%sp]100
8000bfa6:	e8 03       	st.a [%a15]0,%a3
8000bfa8:	42 2f       	add %d15,%d2
8000bfaa:	78 19       	st.w [%sp]100,%d15
8000bfac:	58 18       	ld.w %d15,[%sp]96
8000bfae:	c2 1f       	add %d15,1
8000bfb0:	78 18       	st.w [%sp]96,%d15
8000bfb2:	8b 8f 80 f2 	ge %d15,%d15,8
8000bfb6:	df 0f 8d fd 	jne %d15,0,8000bad0 <_svfprintf_r+0xbe0>
8000bfba:	d9 ff 08 00 	lea %a15,[%a15]8
8000bfbe:	80 df       	mov.d %d15,%a13
8000bfc0:	ae 2d       	jnz.t %d15,2,8000bfda <_svfprintf_r+0x10ea>
8000bfc2:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000bfc6:	0b 2a a0 f1 	max %d15,%d10,%d2
8000bfca:	19 a2 28 00 	ld.w %d2,[%sp]40
8000bfce:	42 f2       	add %d2,%d15
8000bfd0:	58 19       	ld.w %d15,[%sp]100
8000bfd2:	59 a2 28 00 	st.w [%sp]40,%d2
8000bfd6:	6e 49       	jz %d15,8000c068 <_svfprintf_r+0x1178>
8000bfd8:	3c 40       	j 8000c058 <_svfprintf_r+0x1168>
8000bfda:	58 07       	ld.w %d15,[%sp]28
8000bfdc:	3b 00 01 80 	mov %d8,16
8000bfe0:	a2 af       	sub %d15,%d10
8000bfe2:	bf 1f f0 7f 	jlt %d15,1,8000bfc2 <_svfprintf_r+0x10d2>
8000bfe6:	91 00 00 28 	movh.a %a2,32768
8000bfea:	d9 22 e8 60 	lea %a2,[%a2]3496 <80000da8 <blanks.4035>>
8000bfee:	19 a5 24 10 	ld.w %d5,[%sp]100 <80000da8 <blanks.4035>>
8000bff2:	19 a3 20 10 	ld.w %d3,[%sp]96 <80000da8 <blanks.4035>>
8000bff6:	8b 1f 81 42 	ge %d4,%d15,17
8000bffa:	e8 02       	st.a [%a15]0,%a2
8000bffc:	df 04 1c 00 	jeq %d4,0,8000c034 <_svfprintf_r+0x1144>
8000c000:	c2 13       	add %d3,1
8000c002:	1b 05 01 40 	addi %d4,%d5,16
8000c006:	68 18       	st.w [%a15]4,%d8
8000c008:	59 a3 20 10 	st.w [%sp]96,%d3
8000c00c:	59 a4 24 10 	st.w [%sp]100,%d4
8000c010:	8b 83 80 32 	ge %d3,%d3,8
8000c014:	d9 ff 08 00 	lea %a15,[%a15]8
8000c018:	76 3b       	jz %d3,8000c02e <_svfprintf_r+0x113e>
8000c01a:	60 c4       	mov.a %a4,%d12
8000c01c:	60 b5       	mov.a %a5,%d11
8000c01e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c022:	6d 00 a7 0b 	call 8000d770 <__ssprint_r>
8000c026:	df 02 30 80 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000c02a:	d9 af 10 20 	lea %a15,[%sp]144
8000c02e:	1b 0f ff ff 	addi %d15,%d15,-16
8000c032:	3c da       	j 8000bfe6 <_svfprintf_r+0x10f6>
8000c034:	12 54       	add %d4,%d15,%d5
8000c036:	68 1f       	st.w [%a15]4,%d15
8000c038:	9a 13       	add %d15,%d3,1
8000c03a:	78 18       	st.w [%sp]96,%d15
8000c03c:	59 a4 24 10 	st.w [%sp]100,%d4
8000c040:	8b 8f 40 f2 	lt %d15,%d15,8
8000c044:	ee bf       	jnz %d15,8000bfc2 <_svfprintf_r+0x10d2>
8000c046:	60 c4       	mov.a %a4,%d12
8000c048:	60 b5       	mov.a %a5,%d11
8000c04a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c04e:	6d 00 91 0b 	call 8000d770 <__ssprint_r>
8000c052:	df 02 b8 7f 	jeq %d2,0,8000bfc2 <_svfprintf_r+0x10d2>
8000c056:	3c 18       	j 8000c086 <_svfprintf_r+0x1196>
8000c058:	60 c4       	mov.a %a4,%d12
8000c05a:	60 b5       	mov.a %a5,%d11
8000c05c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c060:	6d 00 88 0b 	call 8000d770 <__ssprint_r>
8000c064:	df 02 11 80 	jne %d2,0,8000c086 <_svfprintf_r+0x1196>
8000c068:	82 0f       	mov %d15,0
8000c06a:	78 18       	st.w [%sp]96,%d15
8000c06c:	40 cf       	mov.aa %a15,%a12
8000c06e:	d9 ae 10 20 	lea %a14,[%sp]144
8000c072:	1d ff 77 f7 	j 8000af60 <_svfprintf_r+0x70>
8000c076:	58 19       	ld.w %d15,[%sp]100
8000c078:	6e 07       	jz %d15,8000c086 <_svfprintf_r+0x1196>
8000c07a:	60 c4       	mov.a %a4,%d12
8000c07c:	60 b5       	mov.a %a5,%d11
8000c07e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c082:	6d 00 77 0b 	call 8000d770 <__ssprint_r>
8000c086:	60 b3       	mov.a %a3,%d11
8000c088:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c08c:	8c 36       	ld.h %d15,[%a3]12
8000c08e:	16 40       	and %d15,64
8000c090:	aa f2       	cmov %d2,%d15,-1
8000c092:	00 90       	ret 

8000c094 <_vsnprintf_r>:
8000c094:	20 68       	sub.a %sp,104
8000c096:	40 4f       	mov.aa %a15,%a4
8000c098:	ce 45       	jgez %d4,8000c0a2 <_vsnprintf_r+0xe>
8000c09a:	da 8b       	mov %d15,139
8000c09c:	6c 40       	st.w [%a4]0,%d15
8000c09e:	82 f2       	mov %d2,-1
8000c0a0:	00 90       	ret 
8000c0a2:	02 4f       	mov %d15,%d4
8000c0a4:	3b 80 20 20 	mov %d2,520
8000c0a8:	f9 a2 0c 00 	st.h [%sp]12,%d2
8000c0ac:	92 f2       	add %d2,%d15,-1
8000c0ae:	ea 02       	cmovn %d2,%d15,0
8000c0b0:	f4 a5       	st.a [%sp],%a5
8000c0b2:	b5 a5 10 00 	st.a [%sp]16,%a5
8000c0b6:	59 a2 08 00 	st.w [%sp]8,%d2
8000c0ba:	59 a2 14 00 	st.w [%sp]20,%d2
8000c0be:	40 a5       	mov.aa %a5,%sp
8000c0c0:	82 f2       	mov %d2,-1
8000c0c2:	f9 a2 0e 00 	st.h [%sp]14,%d2
8000c0c6:	6d ff 15 f7 	call 8000aef0 <_svfprintf_r>
8000c0ca:	ff f2 05 00 	jge %d2,-1,8000c0d4 <_vsnprintf_r+0x40>
8000c0ce:	3b b0 08 30 	mov %d3,139
8000c0d2:	68 03       	st.w [%a15]0,%d3
8000c0d4:	6e 04       	jz %d15,8000c0dc <_vsnprintf_r+0x48>
8000c0d6:	d8 00       	ld.a %a15,[%sp]0
8000c0d8:	82 0f       	mov %d15,0
8000c0da:	28 0f       	st.b [%a15]0,%d15
8000c0dc:	00 90       	ret 

8000c0de <vsnprintf>:
8000c0de:	91 00 00 37 	movh.a %a3,28672
8000c0e2:	40 42       	mov.aa %a2,%a4
8000c0e4:	99 34 50 30 	ld.a %a4,[%a3]1232 <700004d0 <_impure_ptr>>
8000c0e8:	40 5f       	mov.aa %a15,%a5
8000c0ea:	40 67       	mov.aa %a7,%a6
8000c0ec:	40 25       	mov.aa %a5,%a2
8000c0ee:	40 f6       	mov.aa %a6,%a15
8000c0f0:	1d ff d2 ff 	j 8000c094 <_vsnprintf_r>

8000c0f4 <quorem>:
8000c0f4:	19 58 10 00 	ld.w %d8,[%a5]16
8000c0f8:	4c 44       	ld.w %d15,[%a4]16
8000c0fa:	82 02       	mov %d2,0
8000c0fc:	3f 8f 88 00 	jlt %d15,%d8,8000c20c <quorem+0x118>
8000c100:	c2 f8       	add %d8,-1
8000c102:	80 4f       	mov.d %d15,%a4
8000c104:	8f 28 00 20 	sh %d2,%d8,2
8000c108:	60 2f       	mov.a %a15,%d2
8000c10a:	1b 4f 01 90 	addi %d9,%d15,20
8000c10e:	d9 5c 14 00 	lea %a12,[%a5]20
8000c112:	01 fc 10 d0 	add.a %a13,%a12,%a15
8000c116:	01 f9 00 f6 	addsc.a %a15,%a15,%d9,0
8000c11a:	54 dc       	ld.w %d12,[%a13]
8000c11c:	4c f0       	ld.w %d15,[%a15]0
8000c11e:	c2 1c       	add %d12,1
8000c120:	4b cf 11 c2 	div.u %e12,%d15,%d12
8000c124:	02 ca       	mov %d10,%d12
8000c126:	df 0c 3d 00 	jeq %d12,0,8000c1a0 <quorem+0xac>
8000c12a:	60 96       	mov.a %a6,%d9
8000c12c:	40 c2       	mov.aa %a2,%a12
8000c12e:	82 05       	mov %d5,0
8000c130:	82 06       	mov %d6,0
8000c132:	54 22       	ld.w %d2,[%a2]
8000c134:	40 63       	mov.aa %a3,%a6
8000c136:	b7 02 10 38 	insert %d3,%d2,0,16,16
8000c13a:	8f 02 1f 20 	sh %d2,%d2,-16
8000c13e:	03 a3 0a 35 	madd %d3,%d5,%d3,%d10
8000c142:	b0 42       	add.a %a2,4
8000c144:	8f 03 1f 40 	sh %d4,%d3,-16
8000c148:	03 a2 0a 24 	madd %d2,%d4,%d2,%d10
8000c14c:	44 34       	ld.w %d4,[%a3+]
8000c14e:	b7 03 10 38 	insert %d3,%d3,0,16,16
8000c152:	b7 04 10 f8 	insert %d15,%d4,0,16,16
8000c156:	8f 02 1f 50 	sh %d5,%d2,-16
8000c15a:	42 f6       	add %d6,%d15
8000c15c:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000c160:	0b 36 80 30 	sub %d3,%d6,%d3
8000c164:	8f 04 1f 40 	sh %d4,%d4,-16
8000c168:	8f 03 3f f0 	sha %d15,%d3,-16
8000c16c:	0b 24 80 20 	sub %d2,%d4,%d2
8000c170:	42 f2       	add %d2,%d15
8000c172:	37 23 10 38 	insert %d3,%d3,%d2,16,16
8000c176:	8f 02 3f 60 	sha %d6,%d2,-16
8000c17a:	80 2f       	mov.d %d15,%a2
8000c17c:	80 d2       	mov.d %d2,%a13
8000c17e:	74 63       	st.w [%a6],%d3
8000c180:	40 36       	mov.aa %a6,%a3
8000c182:	7f f2 d8 ff 	jge.u %d2,%d15,8000c132 <quorem+0x3e>
8000c186:	4c f0       	ld.w %d15,[%a15]0
8000c188:	ee 0c       	jnz %d15,8000c1a0 <quorem+0xac>
8000c18a:	b0 cf       	add.a %a15,-4
8000c18c:	80 f2       	mov.d %d2,%a15
8000c18e:	3f 29 05 80 	jlt.u %d9,%d2,8000c198 <quorem+0xa4>
8000c192:	59 48 10 00 	st.w [%a4]16,%d8
8000c196:	3c 05       	j 8000c1a0 <quorem+0xac>
8000c198:	4c f0       	ld.w %d15,[%a15]0
8000c19a:	ee fc       	jnz %d15,8000c192 <quorem+0x9e>
8000c19c:	c2 f8       	add %d8,-1
8000c19e:	3c f6       	j 8000c18a <quorem+0x96>
8000c1a0:	40 4e       	mov.aa %a14,%a4
8000c1a2:	6d 00 ec 09 	call 8000d57a <__mcmp>
8000c1a6:	bf 02 32 00 	jlt %d2,0,8000c20a <quorem+0x116>
8000c1aa:	60 92       	mov.a %a2,%d9
8000c1ac:	1b 1c 00 a0 	addi %d10,%d12,1
8000c1b0:	82 04       	mov %d4,0
8000c1b2:	40 2f       	mov.aa %a15,%a2
8000c1b4:	44 f3       	ld.w %d3,[%a15+]
8000c1b6:	54 c5       	ld.w %d5,[%a12]
8000c1b8:	b7 03 10 28 	insert %d2,%d3,0,16,16
8000c1bc:	8f 05 1f f0 	sh %d15,%d5,-16
8000c1c0:	42 42       	add %d2,%d4
8000c1c2:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000c1c6:	8f 03 1f 30 	sh %d3,%d3,-16
8000c1ca:	a2 42       	sub %d2,%d4
8000c1cc:	8f 02 3f 40 	sha %d4,%d2,-16
8000c1d0:	a2 f3       	sub %d3,%d15
8000c1d2:	42 43       	add %d3,%d4
8000c1d4:	8f 03 3f 40 	sha %d4,%d3,-16
8000c1d8:	b0 4c       	add.a %a12,4
8000c1da:	37 32 10 38 	insert %d3,%d2,%d3,16,16
8000c1de:	80 df       	mov.d %d15,%a13
8000c1e0:	80 c2       	mov.d %d2,%a12
8000c1e2:	74 23       	st.w [%a2],%d3
8000c1e4:	40 f2       	mov.aa %a2,%a15
8000c1e6:	7f 2f e6 ff 	jge.u %d15,%d2,8000c1b2 <quorem+0xbe>
8000c1ea:	60 92       	mov.a %a2,%d9
8000c1ec:	01 28 02 f6 	addsc.a %a15,%a2,%d8,2
8000c1f0:	4c f0       	ld.w %d15,[%a15]0
8000c1f2:	ee 0c       	jnz %d15,8000c20a <quorem+0x116>
8000c1f4:	b0 cf       	add.a %a15,-4
8000c1f6:	80 f2       	mov.d %d2,%a15
8000c1f8:	3f 29 05 80 	jlt.u %d9,%d2,8000c202 <quorem+0x10e>
8000c1fc:	59 e8 10 00 	st.w [%a14]16,%d8
8000c200:	3c 05       	j 8000c20a <quorem+0x116>
8000c202:	4c f0       	ld.w %d15,[%a15]0
8000c204:	ee fc       	jnz %d15,8000c1fc <quorem+0x108>
8000c206:	c2 f8       	add %d8,-1
8000c208:	3c f6       	j 8000c1f4 <quorem+0x100>
8000c20a:	02 a2       	mov %d2,%d10
8000c20c:	00 90       	ret 
	...

8000c210 <_dtoa_r>:
8000c210:	20 58       	sub.a %sp,88
8000c212:	b5 a5 08 10 	st.a [%sp]72,%a5
8000c216:	99 45 00 10 	ld.a %a5,[%a4]64
8000c21a:	59 a6 1c 00 	st.w [%sp]28,%d6
8000c21e:	59 a7 28 00 	st.w [%sp]40,%d7
8000c222:	b5 a7 38 00 	st.a [%sp]56,%a7
8000c226:	40 4d       	mov.aa %a13,%a4
8000c228:	0b 45 10 88 	mov %e8,%d5,%d4
8000c22c:	40 6c       	mov.aa %a12,%a6
8000c22e:	0b 45 10 c8 	mov %e12,%d5,%d4
8000c232:	bc 5e       	jz.a %a5,8000c24e <_dtoa_r+0x3e>
8000c234:	19 4f 04 10 	ld.w %d15,[%a4]68
8000c238:	82 12       	mov %d2,1
8000c23a:	0f f2 00 20 	sh %d2,%d2,%d15
8000c23e:	6c 51       	st.w [%a5]4,%d15
8000c240:	59 52 08 00 	st.w [%a5]8,%d2
8000c244:	82 0f       	mov %d15,0
8000c246:	6d 00 cc 07 	call 8000d1de <_Bfree>
8000c24a:	59 df 00 10 	st.w [%a13]64,%d15
8000c24e:	ce 96       	jgez %d9,8000c25a <_dtoa_r+0x4a>
8000c250:	82 1f       	mov %d15,1
8000c252:	6c c0       	st.w [%a12]0,%d15
8000c254:	b7 09 81 df 	insert %d13,%d9,0,31,1
8000c258:	3c 03       	j 8000c25e <_dtoa_r+0x4e>
8000c25a:	82 0f       	mov %d15,0
8000c25c:	6c c0       	st.w [%a12]0,%d15
8000c25e:	7b 00 ff 27 	movh %d2,32752
8000c262:	26 d2       	and %d2,%d13
8000c264:	7b 00 ff 37 	movh %d3,32752
8000c268:	5f 32 22 80 	jne %d2,%d3,8000c2ac <_dtoa_r+0x9c>
8000c26c:	99 a3 08 10 	ld.a %a3,[%sp]72
8000c270:	3b f0 70 22 	mov %d2,9999
8000c274:	91 00 00 f8 	movh.a %a15,32768
8000c278:	74 32       	st.w [%a3],%d2
8000c27a:	d9 ff c1 70 	lea %a15,[%a15]3521 <80000dc1 <blanks.4035+0x19>>
8000c27e:	f6 c8       	jnz %d12,8000c28e <_dtoa_r+0x7e>
8000c280:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000c284:	ee 05       	jnz %d15,8000c28e <_dtoa_r+0x7e>
8000c286:	91 00 00 f8 	movh.a %a15,32768
8000c28a:	d9 ff f8 60 	lea %a15,[%a15]3512 <80000db8 <blanks.4035+0x10>>
8000c28e:	99 a3 38 00 	ld.a %a3,[%sp]56 <80000db8 <blanks.4035+0x10>>
8000c292:	40 f2       	mov.aa %a2,%a15
8000c294:	bd 03 26 06 	jz.a %a3,8000cee0 <_dtoa_r+0xcd0>
8000c298:	80 ff       	mov.d %d15,%a15
8000c29a:	79 f3 03 00 	ld.b %d3,[%a15]3 <80000003 <BootModeHeader0+0x3>>
8000c29e:	1b 8f 00 20 	addi %d2,%d15,8
8000c2a2:	c2 3f       	add %d15,3
8000c2a4:	2b 2f 50 f3 	seln %d15,%d3,%d15,%d2
8000c2a8:	6c 30       	st.w [%a3]0,%d15
8000c2aa:	00 90       	ret 
8000c2ac:	0b cd 10 48 	mov %e4,%d13,%d12
8000c2b0:	d2 06       	mov %e6,0
8000c2b2:	0b cd 10 88 	mov %e8,%d13,%d12
8000c2b6:	6d 00 62 0d 	call 8000dd7a <__eqdf2>
8000c2ba:	df 02 13 80 	jne %d2,0,8000c2e0 <_dtoa_r+0xd0>
8000c2be:	99 a3 08 10 	ld.a %a3,[%sp]72
8000c2c2:	d8 0e       	ld.a %a15,[%sp]56
8000c2c4:	82 1f       	mov %d15,1
8000c2c6:	91 00 00 28 	movh.a %a2,32768
8000c2ca:	6c 30       	st.w [%a3]0,%d15
8000c2cc:	d9 22 c5 70 	lea %a2,[%a2]3525 <80000dc5 <blanks.4035+0x1d>>
8000c2d0:	bd 0f 08 06 	jz.a %a15,8000cee0 <_dtoa_r+0xcd0>
8000c2d4:	7b 00 00 f8 	movh %d15,32768
8000c2d8:	1b 6f dc f0 	addi %d15,%d15,3526
8000c2dc:	68 0f       	st.w [%a15]0,%d15
8000c2de:	00 90       	ret 
8000c2e0:	0b cd 10 48 	mov %e4,%d13,%d12
8000c2e4:	40 d4       	mov.aa %a4,%a13
8000c2e6:	d9 a5 14 10 	lea %a5,[%sp]84
8000c2ea:	d9 a6 10 10 	lea %a6,[%sp]80
8000c2ee:	6d 00 cc 09 	call 8000d686 <__d2b>
8000c2f2:	37 0d 6b ba 	extr.u %d11,%d13,20,11
8000c2f6:	40 2e       	mov.aa %a14,%a2
8000c2f8:	19 aa 10 10 	ld.w %d10,[%sp]80
8000c2fc:	76 bd       	jz %d11,8000c316 <_dtoa_r+0x106>
8000c2fe:	b7 09 0c fa 	insert %d15,%d9,0,20,12
8000c302:	0b cd 10 48 	mov %e4,%d13,%d12
8000c306:	7b 00 ff 23 	movh %d2,16368
8000c30a:	0f 2f a0 50 	or %d5,%d15,%d2
8000c30e:	1b 1b c0 bf 	addi %d11,%d11,-1023
8000c312:	82 0f       	mov %d15,0
8000c314:	3c 22       	j 8000c358 <_dtoa_r+0x148>
8000c316:	19 ab 14 10 	ld.w %d11,[%sp]84
8000c31a:	3b e0 be 4f 	mov %d4,-1042
8000c31e:	42 ab       	add %d11,%d10
8000c320:	a2 b4       	sub %d4,%d11
8000c322:	3b f0 be 2f 	mov %d2,-1041
8000c326:	0f 4c 00 40 	sh %d4,%d12,%d4
8000c32a:	3f 2b 0f 00 	jlt %d11,%d2,8000c348 <_dtoa_r+0x138>
8000c32e:	1b 2b 41 30 	addi %d3,%d11,1042
8000c332:	3b e0 c0 4f 	mov %d4,-1010
8000c336:	a2 b4       	sub %d4,%d11
8000c338:	8b 03 00 21 	rsub %d2,%d3,0
8000c33c:	0f 2c 00 20 	sh %d2,%d12,%d2
8000c340:	0f 4d 00 f0 	sh %d15,%d13,%d4
8000c344:	0f f2 a0 40 	or %d4,%d2,%d15
8000c348:	6d ff 94 f1 	call 8000a670 <__floatunsidf>
8000c34c:	0b 23 10 48 	mov %e4,%d3,%d2
8000c350:	9b 03 e1 5f 	addih %d5,%d3,65040
8000c354:	c2 fb       	add %d11,-1
8000c356:	82 1f       	mov %d15,1
8000c358:	b7 00 ab 69 	imask %e6,0,19,11
8000c35c:	78 13       	st.w [%sp]76,%d15
8000c35e:	6d ff ba ef 	call 8000a2d2 <__subdf3>
8000c362:	7b 30 fd 73 	movh %d7,16339
8000c366:	0b 23 10 48 	mov %e4,%d3,%d2
8000c36a:	7b f0 36 66 	movh %d6,25455
8000c36e:	1b 77 7a 78 	addi %d7,%d7,-30809
8000c372:	1b 16 36 64 	addi %d6,%d6,17249
8000c376:	6d ff ce ef 	call 8000a312 <__muldf3>
8000c37a:	7b 70 fc 73 	movh %d7,16327
8000c37e:	0b 23 10 48 	mov %e4,%d3,%d2
8000c382:	7b 10 b6 68 	movh %d6,35681
8000c386:	1b 87 a2 78 	addi %d7,%d7,-30168
8000c38a:	1b 36 8b 6c 	addi %d6,%d6,-14157
8000c38e:	6d ff 86 ef 	call 8000a29a <__adddf3>
8000c392:	02 b4       	mov %d4,%d11
8000c394:	0b 23 10 88 	mov %e8,%d3,%d2
8000c398:	6d ff 1b f1 	call 8000a5ce <__floatsidf>
8000c39c:	7b 30 fd 73 	movh %d7,16339
8000c3a0:	0b 23 10 48 	mov %e4,%d3,%d2
8000c3a4:	7b f0 09 65 	movh %d6,20639
8000c3a8:	1b 37 41 74 	addi %d7,%d7,17427
8000c3ac:	1b b6 9f 67 	addi %d6,%d6,31227
8000c3b0:	6d ff b1 ef 	call 8000a312 <__muldf3>
8000c3b4:	0b 89 10 48 	mov %e4,%d9,%d8
8000c3b8:	0b 23 10 68 	mov %e6,%d3,%d2
8000c3bc:	6d ff 6f ef 	call 8000a29a <__adddf3>
8000c3c0:	0b 23 10 48 	mov %e4,%d3,%d2
8000c3c4:	0b 23 10 88 	mov %e8,%d3,%d2
8000c3c8:	6d 00 79 0d 	call 8000deba <__fixdfsi>
8000c3cc:	0b 89 10 48 	mov %e4,%d9,%d8
8000c3d0:	d2 06       	mov %e6,0
8000c3d2:	59 a2 08 00 	st.w [%sp]8,%d2
8000c3d6:	6d 00 52 0d 	call 8000de7a <__ltdf2>
8000c3da:	ff 02 12 00 	jge %d2,0,8000c3fe <_dtoa_r+0x1ee>
8000c3de:	19 a4 08 00 	ld.w %d4,[%sp]8
8000c3e2:	6d ff f6 f0 	call 8000a5ce <__floatsidf>
8000c3e6:	0b 89 10 48 	mov %e4,%d9,%d8
8000c3ea:	0b 23 10 68 	mov %e6,%d3,%d2
8000c3ee:	6d 00 e6 0c 	call 8000ddba <__nedf2>
8000c3f2:	19 a3 08 00 	ld.w %d3,[%sp]8
8000c3f6:	ab f3 1f 32 	cadd %d3,%d2,%d3,-1
8000c3fa:	59 a3 08 00 	st.w [%sp]8,%d3
8000c3fe:	19 a2 08 00 	ld.w %d2,[%sp]8
8000c402:	82 13       	mov %d3,1
8000c404:	8b 72 a1 f2 	ge.u %d15,%d2,23
8000c408:	59 a3 3c 00 	st.w [%sp]60,%d3
8000c40c:	ee 18       	jnz %d15,8000c43c <_dtoa_r+0x22c>
8000c40e:	91 00 00 f8 	movh.a %a15,32768
8000c412:	d9 ff f0 90 	lea %a15,[%a15]3696 <80000e70 <__mprec_tens>>
8000c416:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000c41a:	0b cd 10 68 	mov %e6,%d13,%d12
8000c41e:	09 f4 40 09 	ld.d %e4,[%a15]
8000c422:	6d 00 ec 0c 	call 8000ddfa <__gtdf2>
8000c426:	8e 28       	jlez %d2,8000c436 <_dtoa_r+0x226>
8000c428:	58 02       	ld.w %d15,[%sp]8
8000c42a:	82 02       	mov %d2,0
8000c42c:	c2 ff       	add %d15,-1
8000c42e:	78 02       	st.w [%sp]8,%d15
8000c430:	59 a2 3c 00 	st.w [%sp]60,%d2
8000c434:	3c 04       	j 8000c43c <_dtoa_r+0x22c>
8000c436:	82 03       	mov %d3,0
8000c438:	59 a3 3c 00 	st.w [%sp]60,%d3
8000c43c:	0b ba 80 b0 	sub %d11,%d10,%d11
8000c440:	9a fb       	add %d15,%d11,-1
8000c442:	82 02       	mov %d2,0
8000c444:	78 06       	st.w [%sp]24,%d15
8000c446:	59 a2 14 00 	st.w [%sp]20,%d2
8000c44a:	ce f6       	jgez %d15,8000c456 <_dtoa_r+0x246>
8000c44c:	32 5f       	rsub %d15
8000c44e:	82 03       	mov %d3,0
8000c450:	78 05       	st.w [%sp]20,%d15
8000c452:	59 a3 18 00 	st.w [%sp]24,%d3
8000c456:	58 02       	ld.w %d15,[%sp]8
8000c458:	0e fa       	jltz %d15,8000c46c <_dtoa_r+0x25c>
8000c45a:	19 a2 18 00 	ld.w %d2,[%sp]24
8000c45e:	78 0d       	st.w [%sp]52,%d15
8000c460:	42 f2       	add %d2,%d15
8000c462:	82 0f       	mov %d15,0
8000c464:	59 a2 18 00 	st.w [%sp]24,%d2
8000c468:	78 08       	st.w [%sp]32,%d15
8000c46a:	3c 0d       	j 8000c484 <_dtoa_r+0x274>
8000c46c:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c470:	19 a3 08 00 	ld.w %d3,[%sp]8
8000c474:	82 0f       	mov %d15,0
8000c476:	a2 32       	sub %d2,%d3
8000c478:	32 53       	rsub %d3
8000c47a:	59 a2 14 00 	st.w [%sp]20,%d2
8000c47e:	59 a3 20 00 	st.w [%sp]32,%d3
8000c482:	78 0d       	st.w [%sp]52,%d15
8000c484:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000c488:	82 18       	mov %d8,1
8000c48a:	ff a2 46 80 	jge.u %d2,10,8000c516 <_dtoa_r+0x306>
8000c48e:	bf 62 06 00 	jlt %d2,6,8000c49a <_dtoa_r+0x28a>
8000c492:	c2 c2       	add %d2,-4
8000c494:	59 a2 1c 00 	st.w [%sp]28,%d2
8000c498:	82 08       	mov %d8,0
8000c49a:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000c49e:	c2 e3       	add %d3,-2
8000c4a0:	ff 43 4b 80 	jge.u %d3,4,8000c536 <_dtoa_r+0x326>
8000c4a4:	91 10 00 f8 	movh.a %a15,32769
8000c4a8:	d9 ff 74 2c 	lea %a15,[%a15]-15180 <8000c4b4 <_dtoa_r+0x2a4>>
8000c4ac:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
8000c4b0:	dc 0f       	ji %a15
8000c4b2:	00 00       	nop 
8000c4b4:	1d 00 08 00 	j 8000c4c4 <_dtoa_r+0x2b4>
8000c4b8:	1d 00 1c 00 	j 8000c4f0 <_dtoa_r+0x2e0>
8000c4bc:	1d 00 08 00 	j 8000c4cc <_dtoa_r+0x2bc>
8000c4c0:	1d 00 1c 00 	j 8000c4f8 <_dtoa_r+0x2e8>
8000c4c4:	82 03       	mov %d3,0
8000c4c6:	59 a3 24 00 	st.w [%sp]36,%d3
8000c4ca:	3c 03       	j 8000c4d0 <_dtoa_r+0x2c0>
8000c4cc:	82 1f       	mov %d15,1
8000c4ce:	78 09       	st.w [%sp]36,%d15
8000c4d0:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c4d4:	59 a2 2c 00 	st.w [%sp]44,%d2
8000c4d8:	59 a2 10 00 	st.w [%sp]16,%d2
8000c4dc:	02 23       	mov %d3,%d2
8000c4de:	ff 12 38 00 	jge %d2,1,8000c54e <_dtoa_r+0x33e>
8000c4e2:	82 13       	mov %d3,1
8000c4e4:	82 1f       	mov %d15,1
8000c4e6:	59 a3 2c 00 	st.w [%sp]44,%d3
8000c4ea:	78 04       	st.w [%sp]16,%d15
8000c4ec:	82 12       	mov %d2,1
8000c4ee:	3c 21       	j 8000c530 <_dtoa_r+0x320>
8000c4f0:	82 03       	mov %d3,0
8000c4f2:	59 a3 24 00 	st.w [%sp]36,%d3
8000c4f6:	3c 03       	j 8000c4fc <_dtoa_r+0x2ec>
8000c4f8:	82 1f       	mov %d15,1
8000c4fa:	78 09       	st.w [%sp]36,%d15
8000c4fc:	19 a3 08 00 	ld.w %d3,[%sp]8
8000c500:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c504:	42 32       	add %d2,%d3
8000c506:	59 a2 2c 00 	st.w [%sp]44,%d2
8000c50a:	c2 12       	add %d2,1
8000c50c:	59 a2 10 00 	st.w [%sp]16,%d2
8000c510:	8b 12 40 33 	max %d3,%d2,1
8000c514:	3c 1d       	j 8000c54e <_dtoa_r+0x33e>
8000c516:	82 0f       	mov %d15,0
8000c518:	82 12       	mov %d2,1
8000c51a:	82 f3       	mov %d3,-1
8000c51c:	78 07       	st.w [%sp]28,%d15
8000c51e:	82 ff       	mov %d15,-1
8000c520:	59 a2 24 00 	st.w [%sp]36,%d2
8000c524:	59 a3 2c 00 	st.w [%sp]44,%d3
8000c528:	78 04       	st.w [%sp]16,%d15
8000c52a:	3b 20 01 30 	mov %d3,18
8000c52e:	82 02       	mov %d2,0
8000c530:	59 a2 28 00 	st.w [%sp]40,%d2
8000c534:	3c 0d       	j 8000c54e <_dtoa_r+0x33e>
8000c536:	82 ff       	mov %d15,-1
8000c538:	82 13       	mov %d3,1
8000c53a:	78 0b       	st.w [%sp]44,%d15
8000c53c:	82 f2       	mov %d2,-1
8000c53e:	82 0f       	mov %d15,0
8000c540:	59 a3 24 00 	st.w [%sp]36,%d3
8000c544:	59 a2 10 00 	st.w [%sp]16,%d2
8000c548:	3b 20 01 30 	mov %d3,18
8000c54c:	78 0a       	st.w [%sp]40,%d15
8000c54e:	82 05       	mov %d5,0
8000c550:	59 d5 04 10 	st.w [%a13]68,%d5
8000c554:	82 45       	mov %d5,4
8000c556:	1b 45 01 00 	addi %d0,%d5,20
8000c55a:	3f 03 09 80 	jlt.u %d3,%d0,8000c56c <_dtoa_r+0x35c>
8000c55e:	19 d0 04 10 	ld.w %d0,[%a13]68
8000c562:	06 15       	sh %d5,1
8000c564:	c2 10       	add %d0,1
8000c566:	59 d0 04 10 	st.w [%a13]68,%d0
8000c56a:	3c f6       	j 8000c556 <_dtoa_r+0x346>
8000c56c:	40 d4       	mov.aa %a4,%a13
8000c56e:	19 d4 04 10 	ld.w %d4,[%a13]68
8000c572:	6d 00 0b 06 	call 8000d188 <_Balloc>
8000c576:	19 a2 10 00 	ld.w %d2,[%sp]16
8000c57a:	b5 a2 0c 00 	st.a [%sp]12,%a2
8000c57e:	8b f2 60 32 	lt.u %d3,%d2,15
8000c582:	b5 d2 00 10 	st.a [%a13]64,%a2
8000c586:	26 38       	and %d8,%d3
8000c588:	df 08 97 01 	jeq %d8,0,8000c8b6 <_dtoa_r+0x6a6>
8000c58c:	19 a3 08 00 	ld.w %d3,[%sp]8
8000c590:	89 ac 40 19 	st.d [%sp]64,%e12
8000c594:	bf 13 3f 00 	jlt %d3,1,8000c612 <_dtoa_r+0x402>
8000c598:	91 00 00 f8 	movh.a %a15,32768
8000c59c:	8f f3 00 31 	and %d3,%d3,15
8000c5a0:	d9 ff f0 90 	lea %a15,[%a15]3696 <80000e70 <__mprec_tens>>
8000c5a4:	19 ae 08 00 	ld.w %d14,[%sp]8 <80000e70 <__mprec_tens>>
8000c5a8:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000c5ac:	86 ce       	sha %d14,-4
8000c5ae:	09 f8 40 09 	ld.d %e8,[%a15]
8000c5b2:	82 2a       	mov %d10,2
8000c5b4:	6f 4e 11 00 	jz.t %d14,4,8000c5d6 <_dtoa_r+0x3c6>
8000c5b8:	91 00 00 f8 	movh.a %a15,32768
8000c5bc:	0b cd 10 48 	mov %e4,%d13,%d12
8000c5c0:	d9 ff c8 90 	lea %a15,[%a15]3656 <80000e48 <__mprec_bigtens>>
8000c5c4:	09 f6 60 09 	ld.d %e6,[%a15]32 <80000020 <_start>>
8000c5c8:	6d ff 77 ef 	call 8000a4b6 <__divdf3>
8000c5cc:	0b 23 10 c8 	mov %e12,%d3,%d2
8000c5d0:	8f fe 00 e1 	and %d14,%d14,15
8000c5d4:	82 3a       	mov %d10,3
8000c5d6:	7b 00 00 b8 	movh %d11,32768
8000c5da:	82 0f       	mov %d15,0
8000c5dc:	1b 8b e4 b0 	addi %d11,%d11,3656
8000c5e0:	df 0e 12 00 	jeq %d14,0,8000c604 <_dtoa_r+0x3f4>
8000c5e4:	6f 0e 0d 00 	jz.t %d14,0,8000c5fe <_dtoa_r+0x3ee>
8000c5e8:	60 b2       	mov.a %a2,%d11
8000c5ea:	d0 2f       	addsc.a %a15,%a2,%d15,3
8000c5ec:	0b 89 10 48 	mov %e4,%d9,%d8
8000c5f0:	09 f6 40 09 	ld.d %e6,[%a15]
8000c5f4:	6d ff 8f ee 	call 8000a312 <__muldf3>
8000c5f8:	0b 23 10 88 	mov %e8,%d3,%d2
8000c5fc:	c2 1a       	add %d10,1
8000c5fe:	86 fe       	sha %d14,-1
8000c600:	c2 1f       	add %d15,1
8000c602:	3c ef       	j 8000c5e0 <_dtoa_r+0x3d0>
8000c604:	0b cd 10 48 	mov %e4,%d13,%d12
8000c608:	0b 89 10 68 	mov %e6,%d9,%d8
8000c60c:	6d ff 55 ef 	call 8000a4b6 <__divdf3>
8000c610:	3c 2c       	j 8000c668 <_dtoa_r+0x458>
8000c612:	19 a8 08 00 	ld.w %d8,[%sp]8
8000c616:	82 2a       	mov %d10,2
8000c618:	32 58       	rsub %d8
8000c61a:	df 08 29 00 	jeq %d8,0,8000c66c <_dtoa_r+0x45c>
8000c61e:	91 00 00 f8 	movh.a %a15,32768
8000c622:	8f f8 00 31 	and %d3,%d8,15
8000c626:	d9 ff f0 90 	lea %a15,[%a15]3696 <80000e70 <__mprec_tens>>
8000c62a:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000c62e:	09 a4 40 19 	ld.d %e4,[%sp]64
8000c632:	09 f6 40 09 	ld.d %e6,[%a15]
8000c636:	7b 00 00 c8 	movh %d12,32768
8000c63a:	6d ff 6c ee 	call 8000a312 <__muldf3>
8000c63e:	82 09       	mov %d9,0
8000c640:	86 c8       	sha %d8,-4
8000c642:	1b 8c e4 c0 	addi %d12,%d12,3656
8000c646:	df 08 11 00 	jeq %d8,0,8000c668 <_dtoa_r+0x458>
8000c64a:	6f 08 0c 00 	jz.t %d8,0,8000c662 <_dtoa_r+0x452>
8000c64e:	60 c3       	mov.a %a3,%d12
8000c650:	01 39 03 f6 	addsc.a %a15,%a3,%d9,3
8000c654:	0b 23 10 48 	mov %e4,%d3,%d2
8000c658:	09 f6 40 09 	ld.d %e6,[%a15]
8000c65c:	c2 1a       	add %d10,1
8000c65e:	6d ff 5a ee 	call 8000a312 <__muldf3>
8000c662:	86 f8       	sha %d8,-1
8000c664:	c2 19       	add %d9,1
8000c666:	3c f0       	j 8000c646 <_dtoa_r+0x436>
8000c668:	0b 23 10 c8 	mov %e12,%d3,%d2
8000c66c:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000c670:	df 02 23 00 	jeq %d2,0,8000c6b6 <_dtoa_r+0x4a6>
8000c674:	0b cd 10 48 	mov %e4,%d13,%d12
8000c678:	b7 00 2a 6a 	imask %e6,0,20,10
8000c67c:	6d 00 ff 0b 	call 8000de7a <__ltdf2>
8000c680:	ff 02 20 00 	jge %d2,0,8000c6c0 <_dtoa_r+0x4b0>
8000c684:	19 a3 10 00 	ld.w %d3,[%sp]16
8000c688:	df 03 21 00 	jeq %d3,0,8000c6ca <_dtoa_r+0x4ba>
8000c68c:	58 0b       	ld.w %d15,[%sp]44
8000c68e:	bf 1f 12 01 	jlt %d15,1,8000c8b2 <_dtoa_r+0x6a2>
8000c692:	19 a2 08 00 	ld.w %d2,[%sp]8
8000c696:	0b cd 10 48 	mov %e4,%d13,%d12
8000c69a:	c2 f2       	add %d2,-1
8000c69c:	82 06       	mov %d6,0
8000c69e:	7b 40 02 74 	movh %d7,16420
8000c6a2:	59 a2 30 00 	st.w [%sp]48,%d2
8000c6a6:	6d ff 36 ee 	call 8000a312 <__muldf3>
8000c6aa:	c2 1a       	add %d10,1
8000c6ac:	0b 23 10 c8 	mov %e12,%d3,%d2
8000c6b0:	99 ac 2c 00 	ld.a %a12,[%sp]44
8000c6b4:	3c 10       	j 8000c6d4 <_dtoa_r+0x4c4>
8000c6b6:	19 a3 08 00 	ld.w %d3,[%sp]8
8000c6ba:	59 a3 30 00 	st.w [%sp]48,%d3
8000c6be:	3c 03       	j 8000c6c4 <_dtoa_r+0x4b4>
8000c6c0:	58 02       	ld.w %d15,[%sp]8
8000c6c2:	78 0c       	st.w [%sp]48,%d15
8000c6c4:	99 ac 10 00 	ld.a %a12,[%sp]16
8000c6c8:	3c 06       	j 8000c6d4 <_dtoa_r+0x4c4>
8000c6ca:	19 a2 08 00 	ld.w %d2,[%sp]8
8000c6ce:	a0 0c       	mov.a %a12,0
8000c6d0:	59 a2 30 00 	st.w [%sp]48,%d2
8000c6d4:	02 a4       	mov %d4,%d10
8000c6d6:	6d ff 7c ef 	call 8000a5ce <__floatsidf>
8000c6da:	0b cd 10 68 	mov %e6,%d13,%d12
8000c6de:	0b 23 10 48 	mov %e4,%d3,%d2
8000c6e2:	6d ff 18 ee 	call 8000a312 <__muldf3>
8000c6e6:	0b 23 10 48 	mov %e4,%d3,%d2
8000c6ea:	82 06       	mov %d6,0
8000c6ec:	7b c0 01 74 	movh %d7,16412
8000c6f0:	6d ff d5 ed 	call 8000a29a <__adddf3>
8000c6f4:	0b 23 10 a8 	mov %e10,%d3,%d2
8000c6f8:	0b 23 10 e8 	mov %e14,%d3,%d2
8000c6fc:	60 b2       	mov.a %a2,%d11
8000c6fe:	11 02 cc ff 	addih.a %a15,%a2,64704
8000c702:	80 ff       	mov.d %d15,%a15
8000c704:	bd 0c 1e 80 	jnz.a %a12,8000c740 <_dtoa_r+0x530>
8000c708:	0b cd 10 48 	mov %e4,%d13,%d12
8000c70c:	82 06       	mov %d6,0
8000c70e:	7b 40 01 74 	movh %d7,16404
8000c712:	6d ff e0 ed 	call 8000a2d2 <__subdf3>
8000c716:	80 f7       	mov.d %d7,%a15
8000c718:	0b 23 10 48 	mov %e4,%d3,%d2
8000c71c:	02 e6       	mov %d6,%d14
8000c71e:	0b 23 10 88 	mov %e8,%d3,%d2
8000c722:	6d 00 6c 0b 	call 8000ddfa <__gtdf2>
8000c726:	ff 12 8e 02 	jge %d2,1,8000cc42 <_dtoa_r+0xa32>
8000c72a:	0b 89 10 48 	mov %e4,%d9,%d8
8000c72e:	02 e6       	mov %d6,%d14
8000c730:	9b 0b cc 77 	addih %d7,%d11,31936
8000c734:	6d 00 a3 0b 	call 8000de7a <__ltdf2>
8000c738:	bf 02 7d 02 	jlt %d2,0,8000cc32 <_dtoa_r+0xa22>
8000c73c:	1d 00 bb 00 	j 8000c8b2 <_dtoa_r+0x6a2>
8000c740:	80 c5       	mov.d %d5,%a12
8000c742:	91 00 00 f8 	movh.a %a15,32768
8000c746:	19 a2 24 00 	ld.w %d2,[%sp]36
8000c74a:	d9 ff f0 90 	lea %a15,[%a15]3696 <80000e70 <__mprec_tens>>
8000c74e:	c2 f5       	add %d5,-1
8000c750:	01 f5 03 f6 	addsc.a %a15,%a15,%d5,3
8000c754:	df 02 57 00 	jeq %d2,0,8000c802 <_dtoa_r+0x5f2>
8000c758:	b7 00 a9 4a 	imask %e4,0,21,9
8000c75c:	09 f6 40 09 	ld.d %e6,[%a15]
8000c760:	6d ff ab ee 	call 8000a4b6 <__divdf3>
8000c764:	0b ef 10 68 	mov %e6,%d15,%d14
8000c768:	0b 23 10 48 	mov %e4,%d3,%d2
8000c76c:	6d ff b3 ed 	call 8000a2d2 <__subdf3>
8000c770:	d8 03       	ld.a %a15,[%sp]12
8000c772:	0b 23 10 a8 	mov %e10,%d3,%d2
8000c776:	0b cd 10 48 	mov %e4,%d13,%d12
8000c77a:	80 fe       	mov.d %d14,%a15
8000c77c:	6d 00 9f 0b 	call 8000deba <__fixdfsi>
8000c780:	02 24       	mov %d4,%d2
8000c782:	02 2f       	mov %d15,%d2
8000c784:	6d ff 25 ef 	call 8000a5ce <__floatsidf>
8000c788:	0b cd 10 48 	mov %e4,%d13,%d12
8000c78c:	0b 23 10 68 	mov %e6,%d3,%d2
8000c790:	c2 1e       	add %d14,1
8000c792:	6d ff a0 ed 	call 8000a2d2 <__subdf3>
8000c796:	1b 0f 03 50 	addi %d5,%d15,48
8000c79a:	28 05       	st.b [%a15]0,%d5
8000c79c:	0b ab 10 68 	mov %e6,%d11,%d10
8000c7a0:	0b 23 10 48 	mov %e4,%d3,%d2
8000c7a4:	0b 23 10 88 	mov %e8,%d3,%d2
8000c7a8:	6d 00 69 0b 	call 8000de7a <__ltdf2>
8000c7ac:	bf 02 86 03 	jlt %d2,0,8000ceb8 <_dtoa_r+0xca8>
8000c7b0:	b7 00 2a 4a 	imask %e4,0,20,10
8000c7b4:	0b 89 10 68 	mov %e6,%d9,%d8
8000c7b8:	6d ff 8d ed 	call 8000a2d2 <__subdf3>
8000c7bc:	0b ab 10 68 	mov %e6,%d11,%d10
8000c7c0:	0b 23 10 48 	mov %e4,%d3,%d2
8000c7c4:	6d 00 5b 0b 	call 8000de7a <__ltdf2>
8000c7c8:	bf 02 ea 00 	jlt %d2,0,8000c99c <_dtoa_r+0x78c>
8000c7cc:	19 a3 0c 00 	ld.w %d3,[%sp]12
8000c7d0:	02 e5       	mov %d5,%d14
8000c7d2:	80 cf       	mov.d %d15,%a12
8000c7d4:	a2 35       	sub %d5,%d3
8000c7d6:	7f f5 6e 00 	jge %d5,%d15,8000c8b2 <_dtoa_r+0x6a2>
8000c7da:	0b ab 10 48 	mov %e4,%d11,%d10
8000c7de:	82 06       	mov %d6,0
8000c7e0:	7b 40 02 74 	movh %d7,16420
8000c7e4:	6d ff 97 ed 	call 8000a312 <__muldf3>
8000c7e8:	0b 89 10 48 	mov %e4,%d9,%d8
8000c7ec:	82 06       	mov %d6,0
8000c7ee:	7b 40 02 74 	movh %d7,16420
8000c7f2:	0b 23 10 a8 	mov %e10,%d3,%d2
8000c7f6:	6d ff 8e ed 	call 8000a312 <__muldf3>
8000c7fa:	60 ef       	mov.a %a15,%d14
8000c7fc:	0b 23 10 c8 	mov %e12,%d3,%d2
8000c800:	3c bb       	j 8000c776 <_dtoa_r+0x566>
8000c802:	0b ef 10 68 	mov %e6,%d15,%d14
8000c806:	09 f4 40 09 	ld.d %e4,[%a15]
8000c80a:	6d ff 84 ed 	call 8000a312 <__muldf3>
8000c80e:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000c812:	0b 23 10 a8 	mov %e10,%d3,%d2
8000c816:	30 c3       	add.a %a3,%a12
8000c818:	99 ac 0c 00 	ld.a %a12,[%sp]12
8000c81c:	80 3e       	mov.d %d14,%a3
8000c81e:	0b cd 10 48 	mov %e4,%d13,%d12
8000c822:	d9 cf 01 00 	lea %a15,[%a12]1
8000c826:	6d 00 4a 0b 	call 8000deba <__fixdfsi>
8000c82a:	02 24       	mov %d4,%d2
8000c82c:	02 2f       	mov %d15,%d2
8000c82e:	6d ff d0 ee 	call 8000a5ce <__floatsidf>
8000c832:	0b cd 10 48 	mov %e4,%d13,%d12
8000c836:	0b 23 10 68 	mov %e6,%d3,%d2
8000c83a:	6d ff 4c ed 	call 8000a2d2 <__subdf3>
8000c83e:	1b 0f 03 50 	addi %d5,%d15,48
8000c842:	0b 23 10 88 	mov %e8,%d3,%d2
8000c846:	80 f2       	mov.d %d2,%a15
8000c848:	34 c5       	st.b [%a12],%d5
8000c84a:	5f e2 29 80 	jne %d2,%d14,8000c89c <_dtoa_r+0x68c>
8000c84e:	0b ab 10 48 	mov %e4,%d11,%d10
8000c852:	b7 00 a9 6a 	imask %e6,0,21,9
8000c856:	6d ff 22 ed 	call 8000a29a <__adddf3>
8000c85a:	0b 89 10 48 	mov %e4,%d9,%d8
8000c85e:	0b 23 10 68 	mov %e6,%d3,%d2
8000c862:	6d 00 cc 0a 	call 8000ddfa <__gtdf2>
8000c866:	ff 12 9b 00 	jge %d2,1,8000c99c <_dtoa_r+0x78c>
8000c86a:	b7 00 a9 4a 	imask %e4,0,21,9
8000c86e:	0b ab 10 68 	mov %e6,%d11,%d10
8000c872:	6d ff 30 ed 	call 8000a2d2 <__subdf3>
8000c876:	0b 89 10 48 	mov %e4,%d9,%d8
8000c87a:	0b 23 10 68 	mov %e6,%d3,%d2
8000c87e:	6d 00 fe 0a 	call 8000de7a <__ltdf2>
8000c882:	ff 02 18 00 	jge %d2,0,8000c8b2 <_dtoa_r+0x6a2>
8000c886:	60 e2       	mov.a %a2,%d14
8000c888:	60 ef       	mov.a %a15,%d14
8000c88a:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000c88e:	b0 ff       	add.a %a15,-1
8000c890:	8b 0f 03 f2 	eq %d15,%d15,48
8000c894:	df 0f 12 03 	jeq %d15,0,8000ceb8 <_dtoa_r+0xca8>
8000c898:	80 fe       	mov.d %d14,%a15
8000c89a:	3c f6       	j 8000c886 <_dtoa_r+0x676>
8000c89c:	0b 89 10 48 	mov %e4,%d9,%d8
8000c8a0:	82 06       	mov %d6,0
8000c8a2:	7b 40 02 74 	movh %d7,16420
8000c8a6:	6d ff 36 ed 	call 8000a312 <__muldf3>
8000c8aa:	40 fc       	mov.aa %a12,%a15
8000c8ac:	0b 23 10 c8 	mov %e12,%d3,%d2
8000c8b0:	3c b7       	j 8000c81e <_dtoa_r+0x60e>
8000c8b2:	09 ac 40 19 	ld.d %e12,[%sp]64
8000c8b6:	19 a3 14 10 	ld.w %d3,[%sp]84
8000c8ba:	19 a2 08 00 	ld.w %d2,[%sp]8
8000c8be:	8b 03 80 52 	ge %d5,%d3,0
8000c8c2:	8b f2 40 54 	and.lt %d5,%d2,15
8000c8c6:	df 05 9e 00 	jeq %d5,0,8000ca02 <_dtoa_r+0x7f2>
8000c8ca:	91 00 00 f8 	movh.a %a15,32768
8000c8ce:	d9 ff f0 90 	lea %a15,[%a15]3696 <80000e70 <__mprec_tens>>
8000c8d2:	19 a3 10 00 	ld.w %d3,[%sp]16 <80000e70 <__mprec_tens>>
8000c8d6:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000c8da:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c8de:	fa 13       	lt %d15,%d3,1
8000c8e0:	87 f2 1f f0 	and.t %d15,%d2,31,%d15,0
8000c8e4:	09 f8 40 09 	ld.d %e8,[%a15]
8000c8e8:	6e 16       	jz %d15,8000c914 <_dtoa_r+0x704>
8000c8ea:	df 03 a4 81 	jne %d3,0,8000cc32 <_dtoa_r+0xa22>
8000c8ee:	0b 89 10 48 	mov %e4,%d9,%d8
8000c8f2:	82 06       	mov %d6,0
8000c8f4:	7b 40 01 74 	movh %d7,16404
8000c8f8:	6d ff 0d ed 	call 8000a312 <__muldf3>
8000c8fc:	0b cd 10 68 	mov %e6,%d13,%d12
8000c900:	0b 23 10 48 	mov %e4,%d3,%d2
8000c904:	a0 0c       	mov.a %a12,0
8000c906:	6d 00 9a 0a 	call 8000de3a <__gedf2>
8000c90a:	a0 0f       	mov.a %a15,0
8000c90c:	ff 02 95 01 	jge %d2,0,8000cc36 <_dtoa_r+0xa26>
8000c910:	1d 00 9d 01 	j 8000cc4a <_dtoa_r+0xa3a>
8000c914:	d8 03       	ld.a %a15,[%sp]12
8000c916:	0b cd 10 a8 	mov %e10,%d13,%d12
8000c91a:	0b 89 10 68 	mov %e6,%d9,%d8
8000c91e:	0b ab 10 48 	mov %e4,%d11,%d10
8000c922:	80 fe       	mov.d %d14,%a15
8000c924:	6d ff c9 ed 	call 8000a4b6 <__divdf3>
8000c928:	0b 23 10 48 	mov %e4,%d3,%d2
8000c92c:	c2 1e       	add %d14,1
8000c92e:	6d 00 c6 0a 	call 8000deba <__fixdfsi>
8000c932:	02 24       	mov %d4,%d2
8000c934:	02 2f       	mov %d15,%d2
8000c936:	6d ff 4c ee 	call 8000a5ce <__floatsidf>
8000c93a:	0b 89 10 68 	mov %e6,%d9,%d8
8000c93e:	0b 23 10 48 	mov %e4,%d3,%d2
8000c942:	6d ff e8 ec 	call 8000a312 <__muldf3>
8000c946:	0b ab 10 48 	mov %e4,%d11,%d10
8000c94a:	0b 23 10 68 	mov %e6,%d3,%d2
8000c94e:	6d ff c2 ec 	call 8000a2d2 <__subdf3>
8000c952:	0b 23 10 48 	mov %e4,%d3,%d2
8000c956:	1b 0f 03 30 	addi %d3,%d15,48
8000c95a:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000c95e:	28 03       	st.b [%a15]0,%d3
8000c960:	02 e3       	mov %d3,%d14
8000c962:	a2 23       	sub %d3,%d2
8000c964:	19 a2 10 00 	ld.w %d2,[%sp]16
8000c968:	5f 23 3c 80 	jne %d3,%d2,8000c9e0 <_dtoa_r+0x7d0>
8000c96c:	0b 45 10 68 	mov %e6,%d5,%d4
8000c970:	6d ff 95 ec 	call 8000a29a <__adddf3>
8000c974:	0b 89 10 68 	mov %e6,%d9,%d8
8000c978:	0b 23 10 48 	mov %e4,%d3,%d2
8000c97c:	0b 23 10 a8 	mov %e10,%d3,%d2
8000c980:	6d 00 3d 0a 	call 8000ddfa <__gtdf2>
8000c984:	4e 2e       	jgtz %d2,8000c9a0 <_dtoa_r+0x790>
8000c986:	0b ab 10 48 	mov %e4,%d11,%d10
8000c98a:	0b 89 10 68 	mov %e6,%d9,%d8
8000c98e:	6d 00 f6 09 	call 8000dd7a <__eqdf2>
8000c992:	df 02 95 82 	jne %d2,0,8000cebc <_dtoa_r+0xcac>
8000c996:	ae 05       	jnz.t %d15,0,8000c9a0 <_dtoa_r+0x790>
8000c998:	1d 00 92 02 	j 8000cebc <_dtoa_r+0xcac>
8000c99c:	58 0c       	ld.w %d15,[%sp]48
8000c99e:	78 02       	st.w [%sp]8,%d15
8000c9a0:	58 03       	ld.w %d15,[%sp]12
8000c9a2:	a2 ef       	sub %d15,%d14
8000c9a4:	46 0f       	not %d15
8000c9a6:	60 e2       	mov.a %a2,%d14
8000c9a8:	60 ef       	mov.a %a15,%d14
8000c9aa:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000c9ae:	b0 ff       	add.a %a15,-1
8000c9b0:	8b 93 03 32 	eq %d3,%d3,57
8000c9b4:	df 03 11 00 	jeq %d3,0,8000c9d6 <_dtoa_r+0x7c6>
8000c9b8:	9f 0f 0d 80 	jned %d15,0,8000c9d2 <_dtoa_r+0x7c2>
8000c9bc:	19 a3 08 00 	ld.w %d3,[%sp]8
8000c9c0:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000c9c4:	c2 13       	add %d3,1
8000c9c6:	da 30       	mov %d15,48
8000c9c8:	59 a3 08 00 	st.w [%sp]8,%d3
8000c9cc:	2c 30       	st.b [%a3]0,%d15
8000c9ce:	40 3f       	mov.aa %a15,%a3
8000c9d0:	3c 03       	j 8000c9d6 <_dtoa_r+0x7c6>
8000c9d2:	80 fe       	mov.d %d14,%a15
8000c9d4:	3c e9       	j 8000c9a6 <_dtoa_r+0x796>
8000c9d6:	0c f0       	ld.bu %d15,[%a15]0
8000c9d8:	c2 1f       	add %d15,1
8000c9da:	28 0f       	st.b [%a15]0,%d15
8000c9dc:	1d 00 70 02 	j 8000cebc <_dtoa_r+0xcac>
8000c9e0:	82 06       	mov %d6,0
8000c9e2:	7b 40 02 74 	movh %d7,16420
8000c9e6:	6d ff 96 ec 	call 8000a312 <__muldf3>
8000c9ea:	d2 06       	mov %e6,0
8000c9ec:	0b 23 10 48 	mov %e4,%d3,%d2
8000c9f0:	0b 23 10 a8 	mov %e10,%d3,%d2
8000c9f4:	60 ef       	mov.a %a15,%d14
8000c9f6:	6d 00 c2 09 	call 8000dd7a <__eqdf2>
8000c9fa:	df 02 90 ff 	jne %d2,0,8000c91a <_dtoa_r+0x70a>
8000c9fe:	1d 00 5f 02 	j 8000cebc <_dtoa_r+0xcac>
8000ca02:	19 a2 24 00 	ld.w %d2,[%sp]36
8000ca06:	58 08       	ld.w %d15,[%sp]32
8000ca08:	19 a8 14 00 	ld.w %d8,[%sp]20
8000ca0c:	a0 0f       	mov.a %a15,0
8000ca0e:	df 02 3b 00 	jeq %d2,0,8000ca84 <_dtoa_r+0x874>
8000ca12:	58 07       	ld.w %d15,[%sp]28
8000ca14:	ff 2f 10 00 	jge %d15,2,8000ca34 <_dtoa_r+0x824>
8000ca18:	58 13       	ld.w %d15,[%sp]76
8000ca1a:	6e 05       	jz %d15,8000ca24 <_dtoa_r+0x814>
8000ca1c:	1b 33 43 30 	addi %d3,%d3,1075
8000ca20:	58 08       	ld.w %d15,[%sp]32
8000ca22:	3c 22       	j 8000ca66 <_dtoa_r+0x856>
8000ca24:	19 a3 10 10 	ld.w %d3,[%sp]80
8000ca28:	58 08       	ld.w %d15,[%sp]32
8000ca2a:	8b 63 03 31 	rsub %d3,%d3,54
8000ca2e:	19 a8 14 00 	ld.w %d8,[%sp]20
8000ca32:	3c 1a       	j 8000ca66 <_dtoa_r+0x856>
8000ca34:	58 04       	ld.w %d15,[%sp]16
8000ca36:	19 a2 20 00 	ld.w %d2,[%sp]32
8000ca3a:	c2 ff       	add %d15,-1
8000ca3c:	3f f2 04 00 	jlt %d2,%d15,8000ca44 <_dtoa_r+0x834>
8000ca40:	5a f2       	sub %d15,%d2,%d15
8000ca42:	3c 0b       	j 8000ca58 <_dtoa_r+0x848>
8000ca44:	19 a3 20 00 	ld.w %d3,[%sp]32
8000ca48:	78 08       	st.w [%sp]32,%d15
8000ca4a:	52 32       	sub %d2,%d15,%d3
8000ca4c:	19 a3 34 00 	ld.w %d3,[%sp]52
8000ca50:	82 0f       	mov %d15,0
8000ca52:	42 23       	add %d3,%d2
8000ca54:	59 a3 34 00 	st.w [%sp]52,%d3
8000ca58:	19 a3 10 00 	ld.w %d3,[%sp]16
8000ca5c:	19 a8 14 00 	ld.w %d8,[%sp]20
8000ca60:	ce 33       	jgez %d3,8000ca66 <_dtoa_r+0x856>
8000ca62:	a2 38       	sub %d8,%d3
8000ca64:	82 03       	mov %d3,0
8000ca66:	19 a2 14 00 	ld.w %d2,[%sp]20
8000ca6a:	40 d4       	mov.aa %a4,%a13
8000ca6c:	42 32       	add %d2,%d3
8000ca6e:	59 a2 14 00 	st.w [%sp]20,%d2
8000ca72:	19 a2 18 00 	ld.w %d2,[%sp]24
8000ca76:	82 14       	mov %d4,1
8000ca78:	42 32       	add %d2,%d3
8000ca7a:	59 a2 18 00 	st.w [%sp]24,%d2
8000ca7e:	6d 00 4e 04 	call 8000d31a <__i2b>
8000ca82:	40 2f       	mov.aa %a15,%a2
8000ca84:	19 a2 18 00 	ld.w %d2,[%sp]24
8000ca88:	8b 18 80 32 	ge %d3,%d8,1
8000ca8c:	8b 12 80 34 	and.ge %d3,%d2,1
8000ca90:	76 3e       	jz %d3,8000caac <_dtoa_r+0x89c>
8000ca92:	0b 82 80 31 	min %d3,%d2,%d8
8000ca96:	19 a2 14 00 	ld.w %d2,[%sp]20
8000ca9a:	a2 38       	sub %d8,%d3
8000ca9c:	a2 32       	sub %d2,%d3
8000ca9e:	59 a2 14 00 	st.w [%sp]20,%d2
8000caa2:	19 a2 18 00 	ld.w %d2,[%sp]24
8000caa6:	a2 32       	sub %d2,%d3
8000caa8:	59 a2 18 00 	st.w [%sp]24,%d2
8000caac:	19 a3 20 00 	ld.w %d3,[%sp]32
8000cab0:	bf 13 27 00 	jlt %d3,1,8000cafe <_dtoa_r+0x8ee>
8000cab4:	19 a2 24 00 	ld.w %d2,[%sp]36
8000cab8:	df 02 1c 00 	jeq %d2,0,8000caf0 <_dtoa_r+0x8e0>
8000cabc:	bf 1f 13 00 	jlt %d15,1,8000cae2 <_dtoa_r+0x8d2>
8000cac0:	40 f5       	mov.aa %a5,%a15
8000cac2:	02 f4       	mov %d4,%d15
8000cac4:	40 d4       	mov.aa %a4,%a13
8000cac6:	6d 00 bf 04 	call 8000d444 <__pow5mult>
8000caca:	40 e6       	mov.aa %a6,%a14
8000cacc:	40 d4       	mov.aa %a4,%a13
8000cace:	40 25       	mov.aa %a5,%a2
8000cad0:	40 2f       	mov.aa %a15,%a2
8000cad2:	6d 00 2c 04 	call 8000d32a <__multiply>
8000cad6:	40 e5       	mov.aa %a5,%a14
8000cad8:	40 2c       	mov.aa %a12,%a2
8000cada:	40 d4       	mov.aa %a4,%a13
8000cadc:	6d 00 81 03 	call 8000d1de <_Bfree>
8000cae0:	40 ce       	mov.aa %a14,%a12
8000cae2:	19 a4 20 00 	ld.w %d4,[%sp]32
8000cae6:	40 d4       	mov.aa %a4,%a13
8000cae8:	a2 f4       	sub %d4,%d15
8000caea:	40 e5       	mov.aa %a5,%a14
8000caec:	76 49       	jz %d4,8000cafe <_dtoa_r+0x8ee>
8000caee:	3c 05       	j 8000caf8 <_dtoa_r+0x8e8>
8000caf0:	19 a4 20 00 	ld.w %d4,[%sp]32
8000caf4:	40 d4       	mov.aa %a4,%a13
8000caf6:	40 e5       	mov.aa %a5,%a14
8000caf8:	6d 00 a6 04 	call 8000d444 <__pow5mult>
8000cafc:	40 2e       	mov.aa %a14,%a2
8000cafe:	40 d4       	mov.aa %a4,%a13
8000cb00:	82 14       	mov %d4,1
8000cb02:	6d 00 0c 04 	call 8000d31a <__i2b>
8000cb06:	19 a3 34 00 	ld.w %d3,[%sp]52
8000cb0a:	40 2c       	mov.aa %a12,%a2
8000cb0c:	8e 3c       	jlez %d3,8000cb24 <_dtoa_r+0x914>
8000cb0e:	40 d4       	mov.aa %a4,%a13
8000cb10:	40 25       	mov.aa %a5,%a2
8000cb12:	02 34       	mov %d4,%d3
8000cb14:	6d 00 98 04 	call 8000d444 <__pow5mult>
8000cb18:	58 07       	ld.w %d15,[%sp]28
8000cb1a:	40 2c       	mov.aa %a12,%a2
8000cb1c:	82 09       	mov %d9,0
8000cb1e:	ff 2f 1f 00 	jge %d15,2,8000cb5c <_dtoa_r+0x94c>
8000cb22:	3c 06       	j 8000cb2e <_dtoa_r+0x91e>
8000cb24:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000cb28:	82 09       	mov %d9,0
8000cb2a:	ff 22 15 00 	jge %d2,2,8000cb54 <_dtoa_r+0x944>
8000cb2e:	82 09       	mov %d9,0
8000cb30:	df 0c 12 80 	jne %d12,0,8000cb54 <_dtoa_r+0x944>
8000cb34:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000cb38:	ee 0e       	jnz %d15,8000cb54 <_dtoa_r+0x944>
8000cb3a:	7b 00 ff f7 	movh %d15,32752
8000cb3e:	26 df       	and %d15,%d13
8000cb40:	6e 0a       	jz %d15,8000cb54 <_dtoa_r+0x944>
8000cb42:	19 a3 14 00 	ld.w %d3,[%sp]20
8000cb46:	58 06       	ld.w %d15,[%sp]24
8000cb48:	c2 13       	add %d3,1
8000cb4a:	c2 1f       	add %d15,1
8000cb4c:	59 a3 14 00 	st.w [%sp]20,%d3
8000cb50:	78 06       	st.w [%sp]24,%d15
8000cb52:	82 19       	mov %d9,1
8000cb54:	19 a3 34 00 	ld.w %d3,[%sp]52
8000cb58:	82 12       	mov %d2,1
8000cb5a:	76 39       	jz %d3,8000cb6c <_dtoa_r+0x95c>
8000cb5c:	4c c4       	ld.w %d15,[%a12]16
8000cb5e:	90 c3       	addsc.a %a3,%a12,%d15,2
8000cb60:	19 34 10 00 	ld.w %d4,[%a3]16
8000cb64:	6d 00 87 03 	call 8000d272 <__hi0bits>
8000cb68:	8b 02 02 21 	rsub %d2,%d2,32
8000cb6c:	58 06       	ld.w %d15,[%sp]24
8000cb6e:	42 2f       	add %d15,%d2
8000cb70:	16 1f       	and %d15,31
8000cb72:	6e 0a       	jz %d15,8000cb86 <_dtoa_r+0x976>
8000cb74:	8b 0f 02 31 	rsub %d3,%d15,32
8000cb78:	8b cf 01 f1 	rsub %d15,%d15,28
8000cb7c:	ff 53 07 00 	jge %d3,5,8000cb8a <_dtoa_r+0x97a>
8000cb80:	df 43 10 00 	jeq %d3,4,8000cba0 <_dtoa_r+0x990>
8000cb84:	02 3f       	mov %d15,%d3
8000cb86:	1b cf 01 f0 	addi %d15,%d15,28
8000cb8a:	19 a2 14 00 	ld.w %d2,[%sp]20
8000cb8e:	19 a3 18 00 	ld.w %d3,[%sp]24
8000cb92:	42 f2       	add %d2,%d15
8000cb94:	42 f3       	add %d3,%d15
8000cb96:	59 a2 14 00 	st.w [%sp]20,%d2
8000cb9a:	42 f8       	add %d8,%d15
8000cb9c:	59 a3 18 00 	st.w [%sp]24,%d3
8000cba0:	58 05       	ld.w %d15,[%sp]20
8000cba2:	8e f7       	jlez %d15,8000cbb0 <_dtoa_r+0x9a0>
8000cba4:	40 e5       	mov.aa %a5,%a14
8000cba6:	40 d4       	mov.aa %a4,%a13
8000cba8:	02 f4       	mov %d4,%d15
8000cbaa:	6d 00 8b 04 	call 8000d4c0 <__lshift>
8000cbae:	40 2e       	mov.aa %a14,%a2
8000cbb0:	19 a2 18 00 	ld.w %d2,[%sp]24
8000cbb4:	8e 27       	jlez %d2,8000cbc2 <_dtoa_r+0x9b2>
8000cbb6:	40 c5       	mov.aa %a5,%a12
8000cbb8:	40 d4       	mov.aa %a4,%a13
8000cbba:	02 24       	mov %d4,%d2
8000cbbc:	6d 00 82 04 	call 8000d4c0 <__lshift>
8000cbc0:	40 2c       	mov.aa %a12,%a2
8000cbc2:	19 a3 3c 00 	ld.w %d3,[%sp]60
8000cbc6:	df 03 20 00 	jeq %d3,0,8000cc06 <_dtoa_r+0x9f6>
8000cbca:	40 e4       	mov.aa %a4,%a14
8000cbcc:	40 c5       	mov.aa %a5,%a12
8000cbce:	6d 00 d6 04 	call 8000d57a <__mcmp>
8000cbd2:	ff 02 1a 00 	jge %d2,0,8000cc06 <_dtoa_r+0x9f6>
8000cbd6:	58 02       	ld.w %d15,[%sp]8
8000cbd8:	40 e5       	mov.aa %a5,%a14
8000cbda:	c2 ff       	add %d15,-1
8000cbdc:	40 d4       	mov.aa %a4,%a13
8000cbde:	fb a0 00 40 	mov %e4,10
8000cbe2:	78 02       	st.w [%sp]8,%d15
8000cbe4:	6d 00 06 03 	call 8000d1f0 <__multadd>
8000cbe8:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000cbec:	19 a3 24 00 	ld.w %d3,[%sp]36
8000cbf0:	59 a2 10 00 	st.w [%sp]16,%d2
8000cbf4:	40 2e       	mov.aa %a14,%a2
8000cbf6:	76 38       	jz %d3,8000cc06 <_dtoa_r+0x9f6>
8000cbf8:	40 f5       	mov.aa %a5,%a15
8000cbfa:	40 d4       	mov.aa %a4,%a13
8000cbfc:	fb a0 00 40 	mov %e4,10
8000cc00:	6d 00 f8 02 	call 8000d1f0 <__multadd>
8000cc04:	40 2f       	mov.aa %a15,%a2
8000cc06:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000cc0a:	19 a3 10 00 	ld.w %d3,[%sp]16
8000cc0e:	8b 32 80 f2 	ge %d15,%d2,3
8000cc12:	8b 13 40 f4 	and.lt %d15,%d3,1
8000cc16:	6e 2a       	jz %d15,8000cc6a <_dtoa_r+0xa5a>
8000cc18:	f6 3f       	jnz %d3,8000cc36 <_dtoa_r+0xa26>
8000cc1a:	40 c5       	mov.aa %a5,%a12
8000cc1c:	40 d4       	mov.aa %a4,%a13
8000cc1e:	d2 54       	mov %e4,5
8000cc20:	6d 00 e8 02 	call 8000d1f0 <__multadd>
8000cc24:	40 e4       	mov.aa %a4,%a14
8000cc26:	40 25       	mov.aa %a5,%a2
8000cc28:	40 2c       	mov.aa %a12,%a2
8000cc2a:	6d 00 a8 04 	call 8000d57a <__mcmp>
8000cc2e:	4e 2e       	jgtz %d2,8000cc4a <_dtoa_r+0xa3a>
8000cc30:	3c 03       	j 8000cc36 <_dtoa_r+0xa26>
8000cc32:	a0 0c       	mov.a %a12,0
8000cc34:	a0 0f       	mov.a %a15,0
8000cc36:	58 0a       	ld.w %d15,[%sp]40
8000cc38:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000cc3c:	46 0f       	not %d15
8000cc3e:	78 02       	st.w [%sp]8,%d15
8000cc40:	3c 11       	j 8000cc62 <_dtoa_r+0xa52>
8000cc42:	58 0c       	ld.w %d15,[%sp]48
8000cc44:	a0 0c       	mov.a %a12,0
8000cc46:	78 02       	st.w [%sp]8,%d15
8000cc48:	a0 0f       	mov.a %a15,0
8000cc4a:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cc4e:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000cc52:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000cc56:	da 31       	mov %d15,49
8000cc58:	c2 12       	add %d2,1
8000cc5a:	c2 1e       	add %d14,1
8000cc5c:	2c 30       	st.b [%a3]0,%d15
8000cc5e:	59 a2 08 00 	st.w [%sp]8,%d2
8000cc62:	80 f8       	mov.d %d8,%a15
8000cc64:	a0 0f       	mov.a %a15,0
8000cc66:	1d 00 14 01 	j 8000ce8e <_dtoa_r+0xc7e>
8000cc6a:	19 a3 24 00 	ld.w %d3,[%sp]36
8000cc6e:	f6 35       	jnz %d3,8000cc78 <_dtoa_r+0xa68>
8000cc70:	19 a8 0c 00 	ld.w %d8,[%sp]12
8000cc74:	1d 00 c2 00 	j 8000cdf8 <_dtoa_r+0xbe8>
8000cc78:	8e 87       	jlez %d8,8000cc86 <_dtoa_r+0xa76>
8000cc7a:	40 f5       	mov.aa %a5,%a15
8000cc7c:	40 d4       	mov.aa %a4,%a13
8000cc7e:	02 84       	mov %d4,%d8
8000cc80:	6d 00 20 04 	call 8000d4c0 <__lshift>
8000cc84:	40 2f       	mov.aa %a15,%a2
8000cc86:	80 f8       	mov.d %d8,%a15
8000cc88:	df 09 16 00 	jeq %d9,0,8000ccb4 <_dtoa_r+0xaa4>
8000cc8c:	40 d4       	mov.aa %a4,%a13
8000cc8e:	48 14       	ld.w %d4,[%a15]4
8000cc90:	6d 00 7c 02 	call 8000d188 <_Balloc>
8000cc94:	48 44       	ld.w %d4,[%a15]16
8000cc96:	d9 24 0c 00 	lea %a4,[%a2]12
8000cc9a:	c2 24       	add %d4,2
8000cc9c:	d9 f5 0c 00 	lea %a5,[%a15]12
8000cca0:	06 24       	sh %d4,2
8000cca2:	80 2f       	mov.d %d15,%a2
8000cca4:	6d 00 64 02 	call 8000d16c <memcpy>
8000cca8:	60 f5       	mov.a %a5,%d15
8000ccaa:	40 d4       	mov.aa %a4,%a13
8000ccac:	82 14       	mov %d4,1
8000ccae:	6d 00 09 04 	call 8000d4c0 <__lshift>
8000ccb2:	80 28       	mov.d %d8,%a2
8000ccb4:	19 a9 0c 00 	ld.w %d9,[%sp]12
8000ccb8:	8f 1c 00 a1 	and %d10,%d12,1
8000ccbc:	40 e4       	mov.aa %a4,%a14
8000ccbe:	40 c5       	mov.aa %a5,%a12
8000ccc0:	6d ff 1a fa 	call 8000c0f4 <quorem>
8000ccc4:	40 e4       	mov.aa %a4,%a14
8000ccc6:	40 f5       	mov.aa %a5,%a15
8000ccc8:	02 2e       	mov %d14,%d2
8000ccca:	1b 02 03 f0 	addi %d15,%d2,48
8000ccce:	6d 00 56 04 	call 8000d57a <__mcmp>
8000ccd2:	60 86       	mov.a %a6,%d8
8000ccd4:	40 d4       	mov.aa %a4,%a13
8000ccd6:	40 c5       	mov.aa %a5,%a12
8000ccd8:	02 2b       	mov %d11,%d2
8000ccda:	6d 00 71 04 	call 8000d5bc <__mdiff>
8000ccde:	19 22 0c 00 	ld.w %d2,[%a2]12
8000cce2:	80 2d       	mov.d %d13,%a2
8000cce4:	82 1c       	mov %d12,1
8000cce6:	f6 26       	jnz %d2,8000ccf2 <_dtoa_r+0xae2>
8000cce8:	40 e4       	mov.aa %a4,%a14
8000ccea:	40 25       	mov.aa %a5,%a2
8000ccec:	6d 00 47 04 	call 8000d57a <__mcmp>
8000ccf0:	02 2c       	mov %d12,%d2
8000ccf2:	60 d5       	mov.a %a5,%d13
8000ccf4:	40 d4       	mov.aa %a4,%a13
8000ccf6:	6d 00 74 02 	call 8000d1de <_Bfree>
8000ccfa:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000ccfe:	1b 19 00 d0 	addi %d13,%d9,1
8000cd02:	a6 c3       	or %d3,%d12
8000cd04:	f6 3f       	jnz %d3,8000cd22 <_dtoa_r+0xb12>
8000cd06:	f6 ae       	jnz %d10,8000cd22 <_dtoa_r+0xb12>
8000cd08:	8b 9f 03 32 	eq %d3,%d15,57
8000cd0c:	40 e2       	mov.aa %a2,%a14
8000cd0e:	df 03 3a 80 	jne %d3,0,8000cd82 <_dtoa_r+0xb72>
8000cd12:	1b 1e 03 20 	addi %d2,%d14,49
8000cd16:	8b 1b 80 b2 	ge %d11,%d11,1
8000cd1a:	2b f2 40 fb 	sel %d15,%d11,%d2,%d15
8000cd1e:	02 de       	mov %d14,%d13
8000cd20:	3c 37       	j 8000cd8e <_dtoa_r+0xb7e>
8000cd22:	ce b5       	jgez %d11,8000cd2c <_dtoa_r+0xb1c>
8000cd24:	02 fa       	mov %d10,%d15
8000cd26:	40 e2       	mov.aa %a2,%a14
8000cd28:	4e ca       	jgtz %d12,8000cd3c <_dtoa_r+0xb2c>
8000cd2a:	3c 1e       	j 8000cd66 <_dtoa_r+0xb56>
8000cd2c:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000cd30:	a6 2b       	or %d11,%d2
8000cd32:	df 0b 20 80 	jne %d11,0,8000cd72 <_dtoa_r+0xb62>
8000cd36:	df 0a 1e 80 	jne %d10,0,8000cd72 <_dtoa_r+0xb62>
8000cd3a:	3c f5       	j 8000cd24 <_dtoa_r+0xb14>
8000cd3c:	40 d4       	mov.aa %a4,%a13
8000cd3e:	40 e5       	mov.aa %a5,%a14
8000cd40:	82 14       	mov %d4,1
8000cd42:	6d 00 bf 03 	call 8000d4c0 <__lshift>
8000cd46:	40 c5       	mov.aa %a5,%a12
8000cd48:	40 24       	mov.aa %a4,%a2
8000cd4a:	b5 a2 04 00 	st.a [%sp]4,%a2
8000cd4e:	6d 00 16 04 	call 8000d57a <__mcmp>
8000cd52:	99 a2 04 00 	ld.a %a2,[%sp]4
8000cd56:	4e 23       	jgtz %d2,8000cd5c <_dtoa_r+0xb4c>
8000cd58:	f6 27       	jnz %d2,8000cd66 <_dtoa_r+0xb56>
8000cd5a:	2e 06       	jz.t %d15,0,8000cd66 <_dtoa_r+0xb56>
8000cd5c:	8b 9f 03 32 	eq %d3,%d15,57
8000cd60:	df 03 11 80 	jne %d3,0,8000cd82 <_dtoa_r+0xb72>
8000cd64:	92 1a       	add %d10,%d15,1
8000cd66:	60 93       	mov.a %a3,%d9
8000cd68:	02 de       	mov %d14,%d13
8000cd6a:	34 3a       	st.b [%a3],%d10
8000cd6c:	40 2e       	mov.aa %a14,%a2
8000cd6e:	1d 00 90 00 	j 8000ce8e <_dtoa_r+0xc7e>
8000cd72:	bf 1c 11 00 	jlt %d12,1,8000cd94 <_dtoa_r+0xb84>
8000cd76:	8b 9f 23 32 	ne %d3,%d15,57
8000cd7a:	40 e2       	mov.aa %a2,%a14
8000cd7c:	02 de       	mov %d14,%d13
8000cd7e:	c2 1f       	add %d15,1
8000cd80:	f6 37       	jnz %d3,8000cd8e <_dtoa_r+0xb7e>
8000cd82:	60 93       	mov.a %a3,%d9
8000cd84:	da 39       	mov %d15,57
8000cd86:	02 de       	mov %d14,%d13
8000cd88:	2c 30       	st.b [%a3]0,%d15
8000cd8a:	40 2e       	mov.aa %a14,%a2
8000cd8c:	3c 5d       	j 8000ce46 <_dtoa_r+0xc36>
8000cd8e:	60 92       	mov.a %a2,%d9
8000cd90:	2c 20       	st.b [%a2]0,%d15
8000cd92:	3c 7e       	j 8000ce8e <_dtoa_r+0xc7e>
8000cd94:	60 93       	mov.a %a3,%d9
8000cd96:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000cd9a:	02 d5       	mov %d5,%d13
8000cd9c:	19 a3 10 00 	ld.w %d3,[%sp]16
8000cda0:	2c 30       	st.b [%a3]0,%d15
8000cda2:	a2 25       	sub %d5,%d2
8000cda4:	02 de       	mov %d14,%d13
8000cda6:	5f 35 41 00 	jeq %d5,%d3,8000ce28 <_dtoa_r+0xc18>
8000cdaa:	40 e5       	mov.aa %a5,%a14
8000cdac:	40 d4       	mov.aa %a4,%a13
8000cdae:	fb a0 00 40 	mov %e4,10
8000cdb2:	6d 00 1f 02 	call 8000d1f0 <__multadd>
8000cdb6:	80 ff       	mov.d %d15,%a15
8000cdb8:	40 2e       	mov.aa %a14,%a2
8000cdba:	40 d4       	mov.aa %a4,%a13
8000cdbc:	40 f5       	mov.aa %a5,%a15
8000cdbe:	fb a0 00 40 	mov %e4,10
8000cdc2:	7e 86       	jne %d15,%d8,8000cdce <_dtoa_r+0xbbe>
8000cdc4:	6d 00 16 02 	call 8000d1f0 <__multadd>
8000cdc8:	40 2f       	mov.aa %a15,%a2
8000cdca:	80 28       	mov.d %d8,%a2
8000cdcc:	3c 0b       	j 8000cde2 <_dtoa_r+0xbd2>
8000cdce:	6d 00 11 02 	call 8000d1f0 <__multadd>
8000cdd2:	60 85       	mov.a %a5,%d8
8000cdd4:	40 d4       	mov.aa %a4,%a13
8000cdd6:	fb a0 00 40 	mov %e4,10
8000cdda:	40 2f       	mov.aa %a15,%a2
8000cddc:	6d 00 0a 02 	call 8000d1f0 <__multadd>
8000cde0:	80 28       	mov.d %d8,%a2
8000cde2:	02 d9       	mov %d9,%d13
8000cde4:	1d ff 6c ff 	j 8000ccbc <_dtoa_r+0xaac>
8000cde8:	40 e5       	mov.aa %a5,%a14
8000cdea:	40 d4       	mov.aa %a4,%a13
8000cdec:	fb a0 00 40 	mov %e4,10
8000cdf0:	6d 00 00 02 	call 8000d1f0 <__multadd>
8000cdf4:	02 98       	mov %d8,%d9
8000cdf6:	40 2e       	mov.aa %a14,%a2
8000cdf8:	40 e4       	mov.aa %a4,%a14
8000cdfa:	40 c5       	mov.aa %a5,%a12
8000cdfc:	6d ff 7c f9 	call 8000c0f4 <quorem>
8000ce00:	1b 18 00 90 	addi %d9,%d8,1
8000ce04:	1b 02 03 f0 	addi %d15,%d2,48
8000ce08:	60 82       	mov.a %a2,%d8
8000ce0a:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000ce0e:	02 95       	mov %d5,%d9
8000ce10:	19 a3 10 00 	ld.w %d3,[%sp]16
8000ce14:	2c 20       	st.b [%a2]0,%d15
8000ce16:	a2 25       	sub %d5,%d2
8000ce18:	3f 35 e8 7f 	jlt %d5,%d3,8000cde8 <_dtoa_r+0xbd8>
8000ce1c:	8b 13 40 33 	max %d3,%d3,1
8000ce20:	02 2e       	mov %d14,%d2
8000ce22:	80 f8       	mov.d %d8,%a15
8000ce24:	42 3e       	add %d14,%d3
8000ce26:	a0 0f       	mov.a %a15,0
8000ce28:	40 e5       	mov.aa %a5,%a14
8000ce2a:	40 d4       	mov.aa %a4,%a13
8000ce2c:	82 14       	mov %d4,1
8000ce2e:	6d 00 49 03 	call 8000d4c0 <__lshift>
8000ce32:	40 c5       	mov.aa %a5,%a12
8000ce34:	40 2e       	mov.aa %a14,%a2
8000ce36:	40 24       	mov.aa %a4,%a2
8000ce38:	6d 00 a1 03 	call 8000d57a <__mcmp>
8000ce3c:	4e 25       	jgtz %d2,8000ce46 <_dtoa_r+0xc36>
8000ce3e:	df 02 1e 80 	jne %d2,0,8000ce7a <_dtoa_r+0xc6a>
8000ce42:	6f 0f 1c 00 	jz.t %d15,0,8000ce7a <_dtoa_r+0xc6a>
8000ce46:	58 03       	ld.w %d15,[%sp]12
8000ce48:	a2 ef       	sub %d15,%d14
8000ce4a:	46 0f       	not %d15
8000ce4c:	60 e2       	mov.a %a2,%d14
8000ce4e:	60 e3       	mov.a %a3,%d14
8000ce50:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000ce54:	b0 f3       	add.a %a3,-1
8000ce56:	8b 93 03 52 	eq %d5,%d3,57
8000ce5a:	76 5d       	jz %d5,8000ce74 <_dtoa_r+0xc64>
8000ce5c:	9f 0f 0a 80 	jned %d15,0,8000ce70 <_dtoa_r+0xc60>
8000ce60:	58 02       	ld.w %d15,[%sp]8
8000ce62:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000ce66:	c2 1f       	add %d15,1
8000ce68:	78 02       	st.w [%sp]8,%d15
8000ce6a:	da 31       	mov %d15,49
8000ce6c:	2c 30       	st.b [%a3]0,%d15
8000ce6e:	3c 10       	j 8000ce8e <_dtoa_r+0xc7e>
8000ce70:	80 3e       	mov.d %d14,%a3
8000ce72:	3c ed       	j 8000ce4c <_dtoa_r+0xc3c>
8000ce74:	c2 13       	add %d3,1
8000ce76:	34 33       	st.b [%a3],%d3
8000ce78:	3c 0b       	j 8000ce8e <_dtoa_r+0xc7e>
8000ce7a:	60 e2       	mov.a %a2,%d14
8000ce7c:	60 e3       	mov.a %a3,%d14
8000ce7e:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000ce82:	b0 f3       	add.a %a3,-1
8000ce84:	8b 0f 03 f2 	eq %d15,%d15,48
8000ce88:	6e 03       	jz %d15,8000ce8e <_dtoa_r+0xc7e>
8000ce8a:	80 3e       	mov.d %d14,%a3
8000ce8c:	3c f7       	j 8000ce7a <_dtoa_r+0xc6a>
8000ce8e:	40 d4       	mov.aa %a4,%a13
8000ce90:	40 c5       	mov.aa %a5,%a12
8000ce92:	6d 00 a6 01 	call 8000d1de <_Bfree>
8000ce96:	df 08 13 00 	jeq %d8,0,8000cebc <_dtoa_r+0xcac>
8000ce9a:	80 f2       	mov.d %d2,%a15
8000ce9c:	8b 02 20 f2 	ne %d15,%d2,0
8000cea0:	0b 82 10 f2 	and.ne %d15,%d2,%d8
8000cea4:	6e 05       	jz %d15,8000ceae <_dtoa_r+0xc9e>
8000cea6:	40 d4       	mov.aa %a4,%a13
8000cea8:	40 f5       	mov.aa %a5,%a15
8000ceaa:	6d 00 9a 01 	call 8000d1de <_Bfree>
8000ceae:	60 85       	mov.a %a5,%d8
8000ceb0:	40 d4       	mov.aa %a4,%a13
8000ceb2:	6d 00 96 01 	call 8000d1de <_Bfree>
8000ceb6:	3c 03       	j 8000cebc <_dtoa_r+0xcac>
8000ceb8:	58 0c       	ld.w %d15,[%sp]48
8000ceba:	78 02       	st.w [%sp]8,%d15
8000cebc:	40 d4       	mov.aa %a4,%a13
8000cebe:	40 e5       	mov.aa %a5,%a14
8000cec0:	6d 00 8f 01 	call 8000d1de <_Bfree>
8000cec4:	60 e2       	mov.a %a2,%d14
8000cec6:	19 a2 08 00 	ld.w %d2,[%sp]8
8000ceca:	99 a3 08 10 	ld.a %a3,[%sp]72
8000cece:	82 0f       	mov %d15,0
8000ced0:	d8 0e       	ld.a %a15,[%sp]56
8000ced2:	2c 20       	st.b [%a2]0,%d15
8000ced4:	c2 12       	add %d2,1
8000ced6:	74 32       	st.w [%a3],%d2
8000ced8:	99 a2 0c 00 	ld.a %a2,[%sp]12
8000cedc:	bc f2       	jz.a %a15,8000cee0 <_dtoa_r+0xcd0>
8000cede:	68 0e       	st.w [%a15]0,%d14
8000cee0:	00 90       	ret 
	...

8000cee4 <_malloc_trim_r>:
8000cee4:	02 4f       	mov %d15,%d4
8000cee6:	40 4f       	mov.aa %a15,%a4
8000cee8:	6d ff ce ef 	call 8000ae84 <__malloc_lock>
8000ceec:	91 00 00 c7 	movh.a %a12,28672
8000cef0:	d9 cc 08 30 	lea %a12,[%a12]200 <700000c8 <__malloc_av_>>
8000cef4:	99 c2 08 00 	ld.a %a2,[%a12]8 <70000008 <g_vadcChannelIDs>>
8000cef8:	3b 00 00 21 	mov %d2,4096
8000cefc:	19 28 04 00 	ld.w %d8,[%a2]4
8000cf00:	8f 38 c0 81 	andn %d8,%d8,3
8000cf04:	5a f8       	sub %d15,%d8,%d15
8000cf06:	1b ff fe f0 	addi %d15,%d15,4079
8000cf0a:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000cf0e:	1b 0f 00 ff 	addi %d15,%d15,-4096
8000cf12:	7f 2f 07 00 	jge %d15,%d2,8000cf20 <_malloc_trim_r+0x3c>
8000cf16:	40 f4       	mov.aa %a4,%a15
8000cf18:	6d ff b7 ef 	call 8000ae86 <__malloc_unlock>
8000cf1c:	82 02       	mov %d2,0
8000cf1e:	00 90       	ret 
8000cf20:	40 f4       	mov.aa %a4,%a15
8000cf22:	82 04       	mov %d4,0
8000cf24:	6d ff b2 ef 	call 8000ae88 <_sbrk_r>
8000cf28:	99 c3 08 00 	ld.a %a3,[%a12]8
8000cf2c:	60 84       	mov.a %a4,%d8
8000cf2e:	30 43       	add.a %a3,%a4
8000cf30:	7d 32 f3 ff 	jne.a %a2,%a3,8000cf16 <_malloc_trim_r+0x32>
8000cf34:	40 f4       	mov.aa %a4,%a15
8000cf36:	8b 0f 00 41 	rsub %d4,%d15,0
8000cf3a:	6d ff a7 ef 	call 8000ae88 <_sbrk_r>
8000cf3e:	80 22       	mov.d %d2,%a2
8000cf40:	df f2 1c 80 	jne %d2,-1,8000cf78 <_malloc_trim_r+0x94>
8000cf44:	40 f4       	mov.aa %a4,%a15
8000cf46:	82 04       	mov %d4,0
8000cf48:	6d ff a0 ef 	call 8000ae88 <_sbrk_r>
8000cf4c:	99 c3 08 00 	ld.a %a3,[%a12]8
8000cf50:	01 32 20 40 	sub.a %a4,%a2,%a3
8000cf54:	80 4f       	mov.d %d15,%a4
8000cf56:	8b 0f 41 22 	lt %d2,%d15,16
8000cf5a:	df 02 de ff 	jne %d2,0,8000cf16 <_malloc_trim_r+0x32>
8000cf5e:	91 00 00 47 	movh.a %a4,28672
8000cf62:	99 44 00 30 	ld.a %a4,[%a4]192 <700000c0 <__malloc_sbrk_base>>
8000cf66:	96 01       	or %d15,1
8000cf68:	6c 31       	st.w [%a3]4,%d15
8000cf6a:	01 42 20 20 	sub.a %a2,%a2,%a4
8000cf6e:	91 00 00 47 	movh.a %a4,28672
8000cf72:	b5 42 98 f0 	st.a [%a4]3032 <70000bd8 <__malloc_current_mallinfo>>,%a2
8000cf76:	3c d0       	j 8000cf16 <_malloc_trim_r+0x32>
8000cf78:	99 c2 08 00 	ld.a %a2,[%a12]8
8000cf7c:	a2 f8       	sub %d8,%d15
8000cf7e:	8f 18 40 81 	or %d8,%d8,1
8000cf82:	59 28 04 00 	st.w [%a2]4,%d8
8000cf86:	91 00 00 27 	movh.a %a2,28672
8000cf8a:	19 22 98 f0 	ld.w %d2,[%a2]3032 <70000bd8 <__malloc_current_mallinfo>>
8000cf8e:	40 f4       	mov.aa %a4,%a15
8000cf90:	5a f2       	sub %d15,%d2,%d15
8000cf92:	59 2f 98 f0 	st.w [%a2]3032 <70000bd8 <__malloc_current_mallinfo>>,%d15
8000cf96:	6d ff 78 ef 	call 8000ae86 <__malloc_unlock>
8000cf9a:	82 12       	mov %d2,1
8000cf9c:	00 90       	ret 

8000cf9e <_free_r>:
8000cf9e:	40 4d       	mov.aa %a13,%a4
8000cfa0:	bd 05 d4 00 	jz.a %a5,8000d148 <_free_r+0x1aa>
8000cfa4:	40 5c       	mov.aa %a12,%a5
8000cfa6:	6d ff 6f ef 	call 8000ae84 <__malloc_lock>
8000cfaa:	19 c4 fc ff 	ld.w %d4,[%a12]-4
8000cfae:	d9 cf f8 ff 	lea %a15,[%a12]-8
8000cfb2:	8f 14 c0 f1 	andn %d15,%d4,1
8000cfb6:	91 00 00 27 	movh.a %a2,28672
8000cfba:	10 f3       	addsc.a %a3,%a15,%d15,0
8000cfbc:	d9 22 08 30 	lea %a2,[%a2]200 <700000c8 <__malloc_av_>>
8000cfc0:	99 24 08 00 	ld.a %a4,[%a2]8 <70000008 <g_vadcChannelIDs>>
8000cfc4:	19 33 04 00 	ld.w %d3,[%a3]4 <70000008 <g_vadcChannelIDs>>
8000cfc8:	8f 14 00 41 	and %d4,%d4,1
8000cfcc:	8f 33 c0 31 	andn %d3,%d3,3
8000cfd0:	7d 43 24 80 	jne.a %a3,%a4,8000d018 <_free_r+0x7a>
8000cfd4:	42 3f       	add %d15,%d3
8000cfd6:	f6 4d       	jnz %d4,8000cff0 <_free_r+0x52>
8000cfd8:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000cfdc:	60 23       	mov.a %a3,%d2
8000cfde:	42 2f       	add %d15,%d2
8000cfe0:	01 3f 20 f0 	sub.a %a15,%a15,%a3
8000cfe4:	c8 33       	ld.a %a3,[%a15]12
8000cfe6:	c8 24       	ld.a %a4,[%a15]8
8000cfe8:	b5 43 0c 00 	st.a [%a4]12,%a3
8000cfec:	b5 34 08 00 	st.a [%a3]8,%a4
8000cff0:	8f 1f 40 21 	or %d2,%d15,1
8000cff4:	68 12       	st.w [%a15]4,%d2
8000cff6:	ec 22       	st.a [%a2]8,%a15
8000cff8:	91 00 00 f7 	movh.a %a15,28672
8000cffc:	19 f2 04 30 	ld.w %d2,[%a15]196 <700000c4 <__malloc_trim_threshold>>
8000d000:	3f 2f 09 80 	jlt.u %d15,%d2,8000d012 <_free_r+0x74>
8000d004:	91 00 00 f7 	movh.a %a15,28672
8000d008:	40 d4       	mov.aa %a4,%a13
8000d00a:	19 f4 c8 00 	ld.w %d4,[%a15]3080 <70000c08 <__malloc_top_pad>>
8000d00e:	6d ff 6b ff 	call 8000cee4 <_malloc_trim_r>
8000d012:	40 d4       	mov.aa %a4,%a13
8000d014:	1d ff 39 ef 	j 8000ae86 <__malloc_unlock>
8000d018:	59 33 04 00 	st.w [%a3]4,%d3
8000d01c:	82 02       	mov %d2,0
8000d01e:	df 04 16 80 	jne %d4,0,8000d04a <_free_r+0xac>
8000d022:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000d026:	60 24       	mov.a %a4,%d2
8000d028:	42 2f       	add %d15,%d2
8000d02a:	01 4f 20 f0 	sub.a %a15,%a15,%a4
8000d02e:	c8 25       	ld.a %a5,[%a15]8
8000d030:	91 00 00 47 	movh.a %a4,28672
8000d034:	d9 44 10 30 	lea %a4,[%a4]208 <700000d0 <__malloc_av_+0x8>>
8000d038:	82 12       	mov %d2,1
8000d03a:	7d 45 08 00 	jeq.a %a5,%a4,8000d04a <_free_r+0xac>
8000d03e:	c8 34       	ld.a %a4,[%a15]12
8000d040:	82 02       	mov %d2,0
8000d042:	b5 54 0c 00 	st.a [%a5]12,%a4
8000d046:	b5 45 08 00 	st.a [%a4]8,%a5
8000d04a:	01 33 00 46 	addsc.a %a4,%a3,%d3,0
8000d04e:	19 44 04 00 	ld.w %d4,[%a4]4
8000d052:	6f 04 18 80 	jnz.t %d4,0,8000d082 <_free_r+0xe4>
8000d056:	42 3f       	add %d15,%d3
8000d058:	99 35 08 00 	ld.a %a5,[%a3]8
8000d05c:	f6 2d       	jnz %d2,8000d076 <_free_r+0xd8>
8000d05e:	91 00 00 47 	movh.a %a4,28672
8000d062:	d9 44 10 30 	lea %a4,[%a4]208 <700000d0 <__malloc_av_+0x8>>
8000d066:	7d 45 08 80 	jne.a %a5,%a4,8000d076 <_free_r+0xd8>
8000d06a:	ec 25       	st.a [%a2]20,%a15
8000d06c:	ec 24       	st.a [%a2]16,%a15
8000d06e:	e8 35       	st.a [%a15]12,%a5
8000d070:	e8 25       	st.a [%a15]8,%a5
8000d072:	82 12       	mov %d2,1
8000d074:	3c 07       	j 8000d082 <_free_r+0xe4>
8000d076:	99 33 0c 00 	ld.a %a3,[%a3]12
8000d07a:	b5 53 0c 00 	st.a [%a5]12,%a3
8000d07e:	b5 35 08 00 	st.a [%a3]8,%a5
8000d082:	8f 1f 40 31 	or %d3,%d15,1
8000d086:	10 f3       	addsc.a %a3,%a15,%d15,0
8000d088:	68 13       	st.w [%a15]4,%d3
8000d08a:	6c 30       	st.w [%a3]0,%d15
8000d08c:	df 02 c3 ff 	jne %d2,0,8000d012 <_free_r+0x74>
8000d090:	3b 00 20 20 	mov %d2,512
8000d094:	7f 2f 12 80 	jge.u %d15,%d2,8000d0b8 <_free_r+0x11a>
8000d098:	19 23 04 00 	ld.w %d3,[%a2]4
8000d09c:	06 df       	sh %d15,-3
8000d09e:	8f ef 3f 20 	sha %d2,%d15,-2
8000d0a2:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
8000d0a6:	59 22 04 00 	st.w [%a2]4,%d2
8000d0aa:	d0 22       	addsc.a %a2,%a2,%d15,3
8000d0ac:	99 23 08 00 	ld.a %a3,[%a2]8
8000d0b0:	e8 32       	st.a [%a15]12,%a2
8000d0b2:	e8 23       	st.a [%a15]8,%a3
8000d0b4:	ec 22       	st.a [%a2]8,%a15
8000d0b6:	3c 46       	j 8000d142 <_free_r+0x1a4>
8000d0b8:	8f af 1f 30 	sh %d3,%d15,-6
8000d0bc:	8f 7f 1f 20 	sh %d2,%d15,-9
8000d0c0:	1b 83 03 30 	addi %d3,%d3,56
8000d0c4:	bf 52 22 80 	jlt.u %d2,5,8000d108 <_free_r+0x16a>
8000d0c8:	8b 52 a1 32 	ge.u %d3,%d2,21
8000d0cc:	f6 34       	jnz %d3,8000d0d4 <_free_r+0x136>
8000d0ce:	1b b2 05 30 	addi %d3,%d2,91
8000d0d2:	3c 1b       	j 8000d108 <_free_r+0x16a>
8000d0d4:	8b 52 a5 32 	ge.u %d3,%d2,85
8000d0d8:	f6 36       	jnz %d3,8000d0e4 <_free_r+0x146>
8000d0da:	8f 4f 1f 30 	sh %d3,%d15,-12
8000d0de:	1b e3 06 30 	addi %d3,%d3,110
8000d0e2:	3c 13       	j 8000d108 <_free_r+0x16a>
8000d0e4:	8b 52 b5 32 	ge.u %d3,%d2,341
8000d0e8:	f6 36       	jnz %d3,8000d0f4 <_free_r+0x156>
8000d0ea:	8f 1f 1f 30 	sh %d3,%d15,-15
8000d0ee:	1b 73 07 30 	addi %d3,%d3,119
8000d0f2:	3c 0b       	j 8000d108 <_free_r+0x16a>
8000d0f4:	3b 50 55 40 	mov %d4,1365
8000d0f8:	3b e0 07 30 	mov %d3,126
8000d0fc:	7f 42 06 80 	jge.u %d2,%d4,8000d108 <_free_r+0x16a>
8000d100:	8f ef 1e 30 	sh %d3,%d15,-18
8000d104:	1b c3 07 30 	addi %d3,%d3,124
8000d108:	01 23 03 66 	addsc.a %a6,%a2,%d3,3
8000d10c:	99 65 08 00 	ld.a %a5,[%a6]8
8000d110:	40 53       	mov.aa %a3,%a5
8000d112:	7d 65 0d 80 	jne.a %a5,%a6,8000d12c <_free_r+0x18e>
8000d116:	4c 21       	ld.w %d15,[%a2]4
8000d118:	86 e3       	sha %d3,-2
8000d11a:	d7 1f 01 33 	insert %d3,%d15,1,%d3,1
8000d11e:	59 23 04 00 	st.w [%a2]4,%d3
8000d122:	3c 0d       	j 8000d13c <_free_r+0x19e>
8000d124:	99 33 08 00 	ld.a %a3,[%a3]8
8000d128:	7d 63 08 00 	jeq.a %a3,%a6,8000d138 <_free_r+0x19a>
8000d12c:	19 32 04 00 	ld.w %d2,[%a3]4
8000d130:	8f 32 c0 21 	andn %d2,%d2,3
8000d134:	3f 2f f8 ff 	jlt.u %d15,%d2,8000d124 <_free_r+0x186>
8000d138:	99 35 0c 00 	ld.a %a5,[%a3]12
8000d13c:	e8 35       	st.a [%a15]12,%a5
8000d13e:	e8 23       	st.a [%a15]8,%a3
8000d140:	ec 52       	st.a [%a5]8,%a15
8000d142:	ec 33       	st.a [%a3]12,%a15
8000d144:	1d ff 67 ff 	j 8000d012 <_free_r+0x74>
8000d148:	00 90       	ret 

8000d14a <_localeconv_r>:
8000d14a:	91 00 00 28 	movh.a %a2,32768
8000d14e:	d9 22 dc 70 	lea %a2,[%a2]3548 <80000ddc <lconv>>
8000d152:	00 90       	ret 

8000d154 <memchr>:
8000d154:	8f f4 0f 41 	and %d4,%d4,255
8000d158:	9f 05 04 80 	jned %d5,0,8000d160 <memchr+0xc>
8000d15c:	a0 02       	mov.a %a2,0
8000d15e:	00 90       	ret 
8000d160:	0c 40       	ld.bu %d15,[%a4]0
8000d162:	3e 43       	jeq %d15,%d4,8000d168 <memchr+0x14>
8000d164:	b0 14       	add.a %a4,1
8000d166:	3c f9       	j 8000d158 <memchr+0x4>
8000d168:	40 42       	mov.aa %a2,%a4
8000d16a:	00 90       	ret 

8000d16c <memcpy>:
8000d16c:	40 42       	mov.aa %a2,%a4
8000d16e:	a0 0f       	mov.a %a15,0
8000d170:	01 f2 10 40 	add.a %a4,%a2,%a15
8000d174:	01 f5 10 30 	add.a %a3,%a5,%a15
8000d178:	9f 04 03 80 	jned %d4,0,8000d17e <memcpy+0x12>
8000d17c:	00 90       	ret 
8000d17e:	79 3f 00 00 	ld.b %d15,[%a3]0
8000d182:	b0 1f       	add.a %a15,1
8000d184:	2c 40       	st.b [%a4]0,%d15
8000d186:	3c f5       	j 8000d170 <memcpy+0x4>

8000d188 <_Balloc>:
8000d188:	19 42 0c 10 	ld.w %d2,[%a4]76
8000d18c:	40 4f       	mov.aa %a15,%a4
8000d18e:	02 4f       	mov %d15,%d4
8000d190:	76 29       	jz %d2,8000d1a2 <_Balloc+0x1a>
8000d192:	99 f3 0c 10 	ld.a %a3,[%a15]76
8000d196:	90 33       	addsc.a %a3,%a3,%d15,2
8000d198:	d4 32       	ld.a %a2,[%a3]
8000d19a:	bc 2f       	jz.a %a2,8000d1b8 <_Balloc+0x30>
8000d19c:	4c 20       	ld.w %d15,[%a2]0
8000d19e:	6c 30       	st.w [%a3]0,%d15
8000d1a0:	3c 1b       	j 8000d1d6 <_Balloc+0x4e>
8000d1a2:	82 44       	mov %d4,4
8000d1a4:	3b 10 02 50 	mov %d5,33
8000d1a8:	6d 00 5c 03 	call 8000d860 <_calloc_r>
8000d1ac:	b5 f2 0c 10 	st.a [%a15]76,%a2
8000d1b0:	bd 02 f1 ff 	jnz.a %a2,8000d192 <_Balloc+0xa>
8000d1b4:	a0 02       	mov.a %a2,0
8000d1b6:	00 90       	ret 
8000d1b8:	82 18       	mov %d8,1
8000d1ba:	0f f8 00 80 	sh %d8,%d8,%d15
8000d1be:	1b 58 00 50 	addi %d5,%d8,5
8000d1c2:	40 f4       	mov.aa %a4,%a15
8000d1c4:	82 14       	mov %d4,1
8000d1c6:	06 25       	sh %d5,2
8000d1c8:	6d 00 4c 03 	call 8000d860 <_calloc_r>
8000d1cc:	bd 02 f4 7f 	jz.a %a2,8000d1b4 <_Balloc+0x2c>
8000d1d0:	6c 21       	st.w [%a2]4,%d15
8000d1d2:	59 28 08 00 	st.w [%a2]8,%d8
8000d1d6:	82 0f       	mov %d15,0
8000d1d8:	6c 24       	st.w [%a2]16,%d15
8000d1da:	6c 23       	st.w [%a2]12,%d15
8000d1dc:	00 90       	ret 

8000d1de <_Bfree>:
8000d1de:	bc 58       	jz.a %a5,8000d1ee <_Bfree+0x10>
8000d1e0:	99 4f 0c 10 	ld.a %a15,[%a4]76
8000d1e4:	4c 51       	ld.w %d15,[%a5]4
8000d1e6:	90 ff       	addsc.a %a15,%a15,%d15,2
8000d1e8:	4c f0       	ld.w %d15,[%a15]0
8000d1ea:	6c 50       	st.w [%a5]0,%d15
8000d1ec:	e8 05       	st.a [%a15]0,%a5
8000d1ee:	00 90       	ret 

8000d1f0 <__multadd>:
8000d1f0:	19 59 10 00 	ld.w %d9,[%a5]16
8000d1f4:	40 4c       	mov.aa %a12,%a4
8000d1f6:	9a f9       	add %d15,%d9,-1
8000d1f8:	8b 19 80 22 	ge %d2,%d9,1
8000d1fc:	40 5f       	mov.aa %a15,%a5
8000d1fe:	02 58       	mov %d8,%d5
8000d200:	d9 53 14 00 	lea %a3,[%a5]20
8000d204:	ab 0f 80 22 	sel %d2,%d2,%d15,0
8000d208:	40 32       	mov.aa %a2,%a3
8000d20a:	44 25       	ld.w %d5,[%a2+]
8000d20c:	b7 05 10 38 	insert %d3,%d5,0,16,16
8000d210:	8f 05 1f f0 	sh %d15,%d5,-16
8000d214:	03 43 0a 38 	madd %d3,%d8,%d3,%d4
8000d218:	8f 03 1f 60 	sh %d6,%d3,-16
8000d21c:	03 4f 0a f6 	madd %d15,%d6,%d15,%d4
8000d220:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000d224:	8f 0f 1f 80 	sh %d8,%d15,-16
8000d228:	74 33       	st.w [%a3],%d3
8000d22a:	40 23       	mov.aa %a3,%a2
8000d22c:	9f 02 ee ff 	jned %d2,0,8000d208 <__multadd+0x18>
8000d230:	df 08 1f 00 	jeq %d8,0,8000d26e <__multadd+0x7e>
8000d234:	4c f2       	ld.w %d15,[%a15]8
8000d236:	3f f9 16 00 	jlt %d9,%d15,8000d262 <__multadd+0x72>
8000d23a:	48 14       	ld.w %d4,[%a15]4
8000d23c:	40 c4       	mov.aa %a4,%a12
8000d23e:	c2 14       	add %d4,1
8000d240:	6d ff a4 ff 	call 8000d188 <_Balloc>
8000d244:	48 44       	ld.w %d4,[%a15]16
8000d246:	d9 f5 0c 00 	lea %a5,[%a15]12
8000d24a:	c2 24       	add %d4,2
8000d24c:	d9 24 0c 00 	lea %a4,[%a2]12
8000d250:	06 24       	sh %d4,2
8000d252:	40 2d       	mov.aa %a13,%a2
8000d254:	6d ff 8c ff 	call 8000d16c <memcpy>
8000d258:	40 f5       	mov.aa %a5,%a15
8000d25a:	40 c4       	mov.aa %a4,%a12
8000d25c:	6d ff c1 ff 	call 8000d1de <_Bfree>
8000d260:	40 df       	mov.aa %a15,%a13
8000d262:	01 f9 02 26 	addsc.a %a2,%a15,%d9,2
8000d266:	c2 19       	add %d9,1
8000d268:	59 28 14 00 	st.w [%a2]20,%d8
8000d26c:	68 49       	st.w [%a15]16,%d9
8000d26e:	40 f2       	mov.aa %a2,%a15
8000d270:	00 90       	ret 

8000d272 <__hi0bits>:
8000d272:	b7 04 10 f0 	insert %d15,%d4,0,0,16
8000d276:	82 02       	mov %d2,0
8000d278:	ee 05       	jnz %d15,8000d282 <__hi0bits+0x10>
8000d27a:	8f 04 01 40 	sh %d4,%d4,16
8000d27e:	3b 00 01 20 	mov %d2,16
8000d282:	b7 04 18 f0 	insert %d15,%d4,0,0,24
8000d286:	ee 05       	jnz %d15,8000d290 <__hi0bits+0x1e>
8000d288:	1b 82 00 20 	addi %d2,%d2,8
8000d28c:	8f 84 00 40 	sh %d4,%d4,8
8000d290:	b7 04 1c f0 	insert %d15,%d4,0,0,28
8000d294:	ee 03       	jnz %d15,8000d29a <__hi0bits+0x28>
8000d296:	c2 42       	add %d2,4
8000d298:	06 44       	sh %d4,4
8000d29a:	b7 04 1e f0 	insert %d15,%d4,0,0,30
8000d29e:	ee 03       	jnz %d15,8000d2a4 <__hi0bits+0x32>
8000d2a0:	c2 22       	add %d2,2
8000d2a2:	06 24       	sh %d4,2
8000d2a4:	0e 47       	jltz %d4,8000d2b2 <__hi0bits+0x40>
8000d2a6:	7b 00 00 f4 	movh %d15,16384
8000d2aa:	26 f4       	and %d4,%d15
8000d2ac:	c2 12       	add %d2,1
8000d2ae:	ab 02 82 24 	sel %d2,%d4,%d2,32
8000d2b2:	00 90       	ret 

8000d2b4 <__lo0bits>:
8000d2b4:	54 43       	ld.w %d3,[%a4]
8000d2b6:	8f 73 00 f1 	and %d15,%d3,7
8000d2ba:	6e 0e       	jz %d15,8000d2d6 <__lo0bits+0x22>
8000d2bc:	82 02       	mov %d2,0
8000d2be:	6f 03 2d 80 	jnz.t %d3,0,8000d318 <__lo0bits+0x64>
8000d2c2:	6f 13 06 00 	jz.t %d3,1,8000d2ce <__lo0bits+0x1a>
8000d2c6:	06 f3       	sh %d3,-1
8000d2c8:	74 43       	st.w [%a4],%d3
8000d2ca:	82 12       	mov %d2,1
8000d2cc:	00 90       	ret 
8000d2ce:	06 e3       	sh %d3,-2
8000d2d0:	74 43       	st.w [%a4],%d3
8000d2d2:	82 22       	mov %d2,2
8000d2d4:	00 90       	ret 
8000d2d6:	b7 03 10 f8 	insert %d15,%d3,0,16,16
8000d2da:	82 04       	mov %d4,0
8000d2dc:	ee 05       	jnz %d15,8000d2e6 <__lo0bits+0x32>
8000d2de:	8f 03 1f 30 	sh %d3,%d3,-16
8000d2e2:	3b 00 01 40 	mov %d4,16
8000d2e6:	02 3f       	mov %d15,%d3
8000d2e8:	16 ff       	and %d15,255
8000d2ea:	ee 04       	jnz %d15,8000d2f2 <__lo0bits+0x3e>
8000d2ec:	1b 84 00 40 	addi %d4,%d4,8
8000d2f0:	06 83       	sh %d3,-8
8000d2f2:	8f f3 00 f1 	and %d15,%d3,15
8000d2f6:	ee 03       	jnz %d15,8000d2fc <__lo0bits+0x48>
8000d2f8:	c2 44       	add %d4,4
8000d2fa:	06 c3       	sh %d3,-4
8000d2fc:	8f 33 00 f1 	and %d15,%d3,3
8000d300:	ee 03       	jnz %d15,8000d306 <__lo0bits+0x52>
8000d302:	c2 24       	add %d4,2
8000d304:	06 e3       	sh %d3,-2
8000d306:	6f 03 07 80 	jnz.t %d3,0,8000d314 <__lo0bits+0x60>
8000d30a:	06 f3       	sh %d3,-1
8000d30c:	3b 00 02 20 	mov %d2,32
8000d310:	76 34       	jz %d3,8000d318 <__lo0bits+0x64>
8000d312:	c2 14       	add %d4,1
8000d314:	74 43       	st.w [%a4],%d3
8000d316:	02 42       	mov %d2,%d4
8000d318:	00 90       	ret 

8000d31a <__i2b>:
8000d31a:	02 4f       	mov %d15,%d4
8000d31c:	82 14       	mov %d4,1
8000d31e:	6d ff 35 ff 	call 8000d188 <_Balloc>
8000d322:	6c 25       	st.w [%a2]20,%d15
8000d324:	82 1f       	mov %d15,1
8000d326:	6c 24       	st.w [%a2]16,%d15
8000d328:	00 90       	ret 

8000d32a <__multiply>:
8000d32a:	19 52 10 00 	ld.w %d2,[%a5]16
8000d32e:	4c 64       	ld.w %d15,[%a6]16
8000d330:	40 5f       	mov.aa %a15,%a5
8000d332:	40 6c       	mov.aa %a12,%a6
8000d334:	7f f2 04 00 	jge %d2,%d15,8000d33c <__multiply+0x12>
8000d338:	40 6f       	mov.aa %a15,%a6
8000d33a:	40 5c       	mov.aa %a12,%a5
8000d33c:	48 4a       	ld.w %d10,[%a15]16
8000d33e:	19 c9 10 00 	ld.w %d9,[%a12]16
8000d342:	4c f2       	ld.w %d15,[%a15]8
8000d344:	0b 9a 00 80 	add %d8,%d10,%d9
8000d348:	48 12       	ld.w %d2,[%a15]4
8000d34a:	0b 8f 20 41 	lt %d4,%d15,%d8
8000d34e:	42 24       	add %d4,%d2
8000d350:	6d ff 1c ff 	call 8000d188 <_Balloc>
8000d354:	d9 23 14 00 	lea %a3,[%a2]20
8000d358:	01 38 02 d6 	addsc.a %a13,%a3,%d8,2
8000d35c:	40 34       	mov.aa %a4,%a3
8000d35e:	82 0f       	mov %d15,0
8000d360:	80 43       	mov.d %d3,%a4
8000d362:	80 d2       	mov.d %d2,%a13
8000d364:	7f 23 04 80 	jge.u %d3,%d2,8000d36c <__multiply+0x42>
8000d368:	64 4f       	st.w [%a4+],%d15
8000d36a:	3c fb       	j 8000d360 <__multiply+0x36>
8000d36c:	d9 ff 14 00 	lea %a15,[%a15]20
8000d370:	d9 cc 14 00 	lea %a12,[%a12]20
8000d374:	80 f3       	mov.d %d3,%a15
8000d376:	80 cf       	mov.d %d15,%a12
8000d378:	13 4a 20 43 	madd %d4,%d3,%d10,4
8000d37c:	13 49 20 0f 	madd %d0,%d15,%d9,4
8000d380:	80 c2       	mov.d %d2,%a12
8000d382:	7f 02 54 80 	jge.u %d2,%d0,8000d42a <__multiply+0x100>
8000d386:	b9 c2 00 00 	ld.hu %d2,[%a12]0
8000d38a:	40 34       	mov.aa %a4,%a3
8000d38c:	40 f6       	mov.aa %a6,%a15
8000d38e:	82 03       	mov %d3,0
8000d390:	df 02 21 00 	jeq %d2,0,8000d3d2 <__multiply+0xa8>
8000d394:	40 45       	mov.aa %a5,%a4
8000d396:	44 67       	ld.w %d7,[%a6+]
8000d398:	44 56       	ld.w %d6,[%a5+]
8000d39a:	b7 07 10 18 	insert %d1,%d7,0,16,16
8000d39e:	b7 06 10 58 	insert %d5,%d6,0,16,16
8000d3a2:	8f 07 1f 70 	sh %d7,%d7,-16
8000d3a6:	03 21 0a 55 	madd %d5,%d5,%d1,%d2
8000d3aa:	8f 06 1f 60 	sh %d6,%d6,-16
8000d3ae:	03 27 0a 66 	madd %d6,%d6,%d7,%d2
8000d3b2:	42 35       	add %d5,%d3
8000d3b4:	8f 05 1f 30 	sh %d3,%d5,-16
8000d3b8:	1a 36       	add %d15,%d6,%d3
8000d3ba:	37 f5 10 58 	insert %d5,%d5,%d15,16,16
8000d3be:	8f 0f 1f 30 	sh %d3,%d15,-16
8000d3c2:	80 6f       	mov.d %d15,%a6
8000d3c4:	74 45       	st.w [%a4],%d5
8000d3c6:	7f 4f 04 80 	jge.u %d15,%d4,8000d3ce <__multiply+0xa4>
8000d3ca:	40 54       	mov.aa %a4,%a5
8000d3cc:	3c e4       	j 8000d394 <__multiply+0x6a>
8000d3ce:	59 43 04 00 	st.w [%a4]4,%d3
8000d3d2:	b9 c2 02 00 	ld.hu %d2,[%a12]2
8000d3d6:	df 02 27 00 	jeq %d2,0,8000d424 <__multiply+0xfa>
8000d3da:	54 33       	ld.w %d3,[%a3]
8000d3dc:	40 34       	mov.aa %a4,%a3
8000d3de:	40 f5       	mov.aa %a5,%a15
8000d3e0:	82 07       	mov %d7,0
8000d3e2:	40 56       	mov.aa %a6,%a5
8000d3e4:	44 66       	ld.w %d6,[%a6+]
8000d3e6:	40 47       	mov.aa %a7,%a4
8000d3e8:	44 75       	ld.w %d5,[%a7+]
8000d3ea:	b7 06 10 68 	insert %d6,%d6,0,16,16
8000d3ee:	8f 05 1f 50 	sh %d5,%d5,-16
8000d3f2:	03 26 0a f5 	madd %d15,%d5,%d6,%d2
8000d3f6:	42 7f       	add %d15,%d7
8000d3f8:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000d3fc:	8f 0f 1f f0 	sh %d15,%d15,-16
8000d400:	74 43       	st.w [%a4],%d3
8000d402:	b9 55 02 00 	ld.hu %d5,[%a5]2
8000d406:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000d40a:	40 65       	mov.aa %a5,%a6
8000d40c:	03 25 0a 33 	madd %d3,%d3,%d5,%d2
8000d410:	42 f3       	add %d3,%d15
8000d412:	80 6f       	mov.d %d15,%a6
8000d414:	8f 03 1f 70 	sh %d7,%d3,-16
8000d418:	7f 4f 04 80 	jge.u %d15,%d4,8000d420 <__multiply+0xf6>
8000d41c:	40 74       	mov.aa %a4,%a7
8000d41e:	3c e2       	j 8000d3e2 <__multiply+0xb8>
8000d420:	59 43 04 00 	st.w [%a4]4,%d3
8000d424:	b0 4c       	add.a %a12,4
8000d426:	b0 43       	add.a %a3,4
8000d428:	3c ac       	j 8000d380 <__multiply+0x56>
8000d42a:	8b 08 40 f3 	max %d15,%d8,0
8000d42e:	9f 0f 05 80 	jned %d15,0,8000d438 <__multiply+0x10e>
8000d432:	59 28 10 00 	st.w [%a2]16,%d8
8000d436:	00 90       	ret 
8000d438:	09 d2 3c f5 	ld.w %d2,[+%a13]-4
8000d43c:	df 02 fb ff 	jne %d2,0,8000d432 <__multiply+0x108>
8000d440:	c2 f8       	add %d8,-1
8000d442:	3c f6       	j 8000d42e <__multiply+0x104>

8000d444 <__pow5mult>:
8000d444:	8f 34 00 21 	and %d2,%d4,3
8000d448:	40 4c       	mov.aa %a12,%a4
8000d44a:	40 5d       	mov.aa %a13,%a5
8000d44c:	02 4f       	mov %d15,%d4
8000d44e:	76 2d       	jz %d2,8000d468 <__pow5mult+0x24>
8000d450:	91 00 00 f8 	movh.a %a15,32768
8000d454:	d9 ff d4 80 	lea %a15,[%a15]3604 <80000e14 <p05.2553>>
8000d458:	01 f2 02 f6 	addsc.a %a15,%a15,%d2,2
8000d45c:	82 05       	mov %d5,0
8000d45e:	19 f4 fc ff 	ld.w %d4,[%a15]-4
8000d462:	6d ff c7 fe 	call 8000d1f0 <__multadd>
8000d466:	40 2d       	mov.aa %a13,%a2
8000d468:	86 ef       	sha %d15,-2
8000d46a:	6e 29       	jz %d15,8000d4bc <__pow5mult+0x78>
8000d46c:	99 cf 08 10 	ld.a %a15,[%a12]72
8000d470:	7c fb       	jnz.a %a15,8000d486 <__pow5mult+0x42>
8000d472:	40 c4       	mov.aa %a4,%a12
8000d474:	3b 10 27 40 	mov %d4,625
8000d478:	6d ff 51 ff 	call 8000d31a <__i2b>
8000d47c:	82 02       	mov %d2,0
8000d47e:	b5 c2 08 10 	st.a [%a12]72,%a2
8000d482:	40 2f       	mov.aa %a15,%a2
8000d484:	74 22       	st.w [%a2],%d2
8000d486:	82 08       	mov %d8,0
8000d488:	2e 0c       	jz.t %d15,0,8000d4a0 <__pow5mult+0x5c>
8000d48a:	40 d5       	mov.aa %a5,%a13
8000d48c:	40 c4       	mov.aa %a4,%a12
8000d48e:	40 f6       	mov.aa %a6,%a15
8000d490:	6d ff 4d ff 	call 8000d32a <__multiply>
8000d494:	40 d5       	mov.aa %a5,%a13
8000d496:	40 2e       	mov.aa %a14,%a2
8000d498:	40 c4       	mov.aa %a4,%a12
8000d49a:	6d ff a2 fe 	call 8000d1de <_Bfree>
8000d49e:	40 ed       	mov.aa %a13,%a14
8000d4a0:	86 ff       	sha %d15,-1
8000d4a2:	6e 0d       	jz %d15,8000d4bc <__pow5mult+0x78>
8000d4a4:	c8 02       	ld.a %a2,[%a15]0
8000d4a6:	bc 23       	jz.a %a2,8000d4ac <__pow5mult+0x68>
8000d4a8:	40 2f       	mov.aa %a15,%a2
8000d4aa:	3c ef       	j 8000d488 <__pow5mult+0x44>
8000d4ac:	40 c4       	mov.aa %a4,%a12
8000d4ae:	40 f5       	mov.aa %a5,%a15
8000d4b0:	40 f6       	mov.aa %a6,%a15
8000d4b2:	6d ff 3c ff 	call 8000d32a <__multiply>
8000d4b6:	e8 02       	st.a [%a15]0,%a2
8000d4b8:	74 28       	st.w [%a2],%d8
8000d4ba:	3c f7       	j 8000d4a8 <__pow5mult+0x64>
8000d4bc:	40 d2       	mov.aa %a2,%a13
8000d4be:	00 90       	ret 

8000d4c0 <__lshift>:
8000d4c0:	19 5b 10 00 	ld.w %d11,[%a5]16
8000d4c4:	8f b4 3f 80 	sha %d8,%d4,-5
8000d4c8:	02 4a       	mov %d10,%d4
8000d4ca:	42 8b       	add %d11,%d8
8000d4cc:	19 54 04 00 	ld.w %d4,[%a5]4
8000d4d0:	4c 52       	ld.w %d15,[%a5]8
8000d4d2:	40 4e       	mov.aa %a14,%a4
8000d4d4:	40 5c       	mov.aa %a12,%a5
8000d4d6:	1b 1b 00 90 	addi %d9,%d11,1
8000d4da:	7f 9f 05 00 	jge %d15,%d9,8000d4e4 <__lshift+0x24>
8000d4de:	c2 14       	add %d4,1
8000d4e0:	06 1f       	sh %d15,1
8000d4e2:	3c fc       	j 8000d4da <__lshift+0x1a>
8000d4e4:	40 e4       	mov.aa %a4,%a14
8000d4e6:	6d ff 51 fe 	call 8000d188 <_Balloc>
8000d4ea:	8b 08 40 f3 	max %d15,%d8,0
8000d4ee:	40 2d       	mov.aa %a13,%a2
8000d4f0:	d9 2f 14 00 	lea %a15,[%a2]20
8000d4f4:	d2 02       	mov %e2,0
8000d4f6:	01 f2 02 26 	addsc.a %a2,%a15,%d2,2
8000d4fa:	9f 0f 03 80 	jned %d15,0,8000d500 <__lshift+0x40>
8000d4fe:	3c 04       	j 8000d506 <__lshift+0x46>
8000d500:	74 23       	st.w [%a2],%d3
8000d502:	c2 12       	add %d2,1
8000d504:	3c f9       	j 8000d4f6 <__lshift+0x36>
8000d506:	8b 08 40 83 	max %d8,%d8,0
8000d50a:	01 f8 02 36 	addsc.a %a3,%a15,%d8,2
8000d50e:	d9 cf 14 00 	lea %a15,[%a12]20
8000d512:	19 c2 10 00 	ld.w %d2,[%a12]16
8000d516:	80 f3       	mov.d %d3,%a15
8000d518:	8f fa 01 41 	and %d4,%d10,31
8000d51c:	13 42 20 23 	madd %d2,%d3,%d2,4
8000d520:	8b 04 02 51 	rsub %d5,%d4,32
8000d524:	82 0f       	mov %d15,0
8000d526:	df 04 1a 00 	jeq %d4,0,8000d55a <__lshift+0x9a>
8000d52a:	40 f5       	mov.aa %a5,%a15
8000d52c:	44 53       	ld.w %d3,[%a5+]
8000d52e:	d9 32 04 00 	lea %a2,[%a3]4
8000d532:	0f 43 00 30 	sh %d3,%d3,%d4
8000d536:	a6 3f       	or %d15,%d3
8000d538:	6c 30       	st.w [%a3]0,%d15
8000d53a:	4c f0       	ld.w %d15,[%a15]0
8000d53c:	8b 05 00 31 	rsub %d3,%d5,0
8000d540:	0f 3f 00 30 	sh %d3,%d15,%d3
8000d544:	02 3f       	mov %d15,%d3
8000d546:	80 53       	mov.d %d3,%a5
8000d548:	40 5f       	mov.aa %a15,%a5
8000d54a:	7f 23 04 80 	jge.u %d3,%d2,8000d552 <__lshift+0x92>
8000d54e:	40 23       	mov.aa %a3,%a2
8000d550:	3c ed       	j 8000d52a <__lshift+0x6a>
8000d552:	c2 2b       	add %d11,2
8000d554:	6c 31       	st.w [%a3]4,%d15
8000d556:	2a b9       	cmov %d9,%d15,%d11
8000d558:	3c 08       	j 8000d568 <__lshift+0xa8>
8000d55a:	4c f0       	ld.w %d15,[%a15]0
8000d55c:	b0 4f       	add.a %a15,4
8000d55e:	80 f3       	mov.d %d3,%a15
8000d560:	6c 30       	st.w [%a3]0,%d15
8000d562:	b0 43       	add.a %a3,4
8000d564:	3f 23 fb ff 	jlt.u %d3,%d2,8000d55a <__lshift+0x9a>
8000d568:	c2 f9       	add %d9,-1
8000d56a:	59 d9 10 00 	st.w [%a13]16,%d9
8000d56e:	40 e4       	mov.aa %a4,%a14
8000d570:	40 c5       	mov.aa %a5,%a12
8000d572:	6d ff 36 fe 	call 8000d1de <_Bfree>
8000d576:	40 d2       	mov.aa %a2,%a13
8000d578:	00 90       	ret 

8000d57a <__mcmp>:
8000d57a:	4c 54       	ld.w %d15,[%a5]16
8000d57c:	19 42 10 00 	ld.w %d2,[%a4]16
8000d580:	a2 f2       	sub %d2,%d15
8000d582:	df 02 1c 80 	jne %d2,0,8000d5ba <__mcmp+0x40>
8000d586:	80 42       	mov.d %d2,%a4
8000d588:	06 2f       	sh %d15,2
8000d58a:	60 f2       	mov.a %a2,%d15
8000d58c:	1b 42 01 30 	addi %d3,%d2,20
8000d590:	d9 55 14 00 	lea %a5,[%a5]20
8000d594:	01 23 00 f6 	addsc.a %a15,%a2,%d3,0
8000d598:	30 25       	add.a %a5,%a2
8000d59a:	09 f2 3c f5 	ld.w %d2,[+%a15]-4
8000d59e:	09 5f 3c f5 	ld.w %d15,[+%a5]-4
8000d5a2:	5f f2 08 00 	jeq %d2,%d15,8000d5b2 <__mcmp+0x38>
8000d5a6:	0b f2 30 21 	lt.u %d2,%d2,%d15
8000d5aa:	82 f3       	mov %d3,-1
8000d5ac:	ab 13 80 22 	sel %d2,%d2,%d3,1
8000d5b0:	00 90       	ret 
8000d5b2:	80 ff       	mov.d %d15,%a15
8000d5b4:	3f f3 f3 ff 	jlt.u %d3,%d15,8000d59a <__mcmp+0x20>
8000d5b8:	82 02       	mov %d2,0
8000d5ba:	00 90       	ret 

8000d5bc <__mdiff>:
8000d5bc:	40 4d       	mov.aa %a13,%a4
8000d5be:	40 5f       	mov.aa %a15,%a5
8000d5c0:	40 54       	mov.aa %a4,%a5
8000d5c2:	40 65       	mov.aa %a5,%a6
8000d5c4:	40 6c       	mov.aa %a12,%a6
8000d5c6:	6d ff da ff 	call 8000d57a <__mcmp>
8000d5ca:	02 2f       	mov %d15,%d2
8000d5cc:	f6 2a       	jnz %d2,8000d5e0 <__mdiff+0x24>
8000d5ce:	40 d4       	mov.aa %a4,%a13
8000d5d0:	82 04       	mov %d4,0
8000d5d2:	6d ff db fd 	call 8000d188 <_Balloc>
8000d5d6:	82 12       	mov %d2,1
8000d5d8:	59 22 10 00 	st.w [%a2]16,%d2
8000d5dc:	6c 25       	st.w [%a2]20,%d15
8000d5de:	00 90       	ret 
8000d5e0:	82 08       	mov %d8,0
8000d5e2:	ce 25       	jgez %d2,8000d5ec <__mdiff+0x30>
8000d5e4:	40 f2       	mov.aa %a2,%a15
8000d5e6:	82 18       	mov %d8,1
8000d5e8:	40 cf       	mov.aa %a15,%a12
8000d5ea:	40 2c       	mov.aa %a12,%a2
8000d5ec:	40 d4       	mov.aa %a4,%a13
8000d5ee:	48 14       	ld.w %d4,[%a15]4
8000d5f0:	6d ff cc fd 	call 8000d188 <_Balloc>
8000d5f4:	48 42       	ld.w %d2,[%a15]16
8000d5f6:	d9 ff 14 00 	lea %a15,[%a15]20
8000d5fa:	80 ff       	mov.d %d15,%a15
8000d5fc:	d9 c4 14 00 	lea %a4,[%a12]20
8000d600:	13 42 20 7f 	madd %d7,%d15,%d2,4
8000d604:	19 c0 10 00 	ld.w %d0,[%a12]16
8000d608:	80 4f       	mov.d %d15,%a4
8000d60a:	59 28 0c 00 	st.w [%a2]12,%d8
8000d60e:	13 40 20 0f 	madd %d0,%d15,%d0,4
8000d612:	d9 25 14 00 	lea %a5,[%a2]20
8000d616:	82 03       	mov %d3,0
8000d618:	44 f6       	ld.w %d6,[%a15+]
8000d61a:	44 45       	ld.w %d5,[%a4+]
8000d61c:	b7 06 10 48 	insert %d4,%d6,0,16,16
8000d620:	b7 05 10 18 	insert %d1,%d5,0,16,16
8000d624:	42 34       	add %d4,%d3
8000d626:	a2 14       	sub %d4,%d1
8000d628:	8f 06 1f 60 	sh %d6,%d6,-16
8000d62c:	8f 05 1f 50 	sh %d5,%d5,-16
8000d630:	8f 04 3f 30 	sha %d3,%d4,-16
8000d634:	0b 56 80 50 	sub %d5,%d6,%d5
8000d638:	1a 35       	add %d15,%d5,%d3
8000d63a:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000d63e:	8f 0f 3f 30 	sha %d3,%d15,-16
8000d642:	80 4f       	mov.d %d15,%a4
8000d644:	d9 53 04 00 	lea %a3,[%a5]4
8000d648:	74 54       	st.w [%a5],%d4
8000d64a:	40 35       	mov.aa %a5,%a3
8000d64c:	3f 0f e6 ff 	jlt.u %d15,%d0,8000d618 <__mdiff+0x5c>
8000d650:	80 ff       	mov.d %d15,%a15
8000d652:	7f 7f 12 80 	jge.u %d15,%d7,8000d676 <__mdiff+0xba>
8000d656:	44 f5       	ld.w %d5,[%a15+]
8000d658:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000d65c:	8f 05 1f 50 	sh %d5,%d5,-16
8000d660:	42 34       	add %d4,%d3
8000d662:	8f 04 3f f0 	sha %d15,%d4,-16
8000d666:	42 5f       	add %d15,%d5
8000d668:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000d66c:	8f 0f 3f 30 	sha %d3,%d15,-16
8000d670:	74 34       	st.w [%a3],%d4
8000d672:	b0 43       	add.a %a3,4
8000d674:	3c ee       	j 8000d650 <__mdiff+0x94>
8000d676:	09 3f 3c f5 	ld.w %d15,[+%a3]-4
8000d67a:	ee 03       	jnz %d15,8000d680 <__mdiff+0xc4>
8000d67c:	c2 f2       	add %d2,-1
8000d67e:	3c fc       	j 8000d676 <__mdiff+0xba>
8000d680:	59 22 10 00 	st.w [%a2]16,%d2
8000d684:	00 90       	ret 

8000d686 <__d2b>:
8000d686:	20 08       	sub.a %sp,8
8000d688:	02 48       	mov %d8,%d4
8000d68a:	82 14       	mov %d4,1
8000d68c:	02 59       	mov %d9,%d5
8000d68e:	40 5d       	mov.aa %a13,%a5
8000d690:	40 6c       	mov.aa %a12,%a6
8000d692:	6d ff 7b fd 	call 8000d188 <_Balloc>
8000d696:	b7 09 0c 2a 	insert %d2,%d9,0,20,12
8000d69a:	37 09 6b 9a 	extr.u %d9,%d9,20,11
8000d69e:	40 2f       	mov.aa %a15,%a2
8000d6a0:	76 93       	jz %d9,8000d6a6 <__d2b+0x20>
8000d6a2:	b7 f2 01 2a 	insert %d2,%d2,15,20,1
8000d6a6:	59 a2 04 00 	st.w [%sp]4,%d2
8000d6aa:	df 08 20 00 	jeq %d8,0,8000d6ea <__d2b+0x64>
8000d6ae:	d9 a4 08 00 	lea %a4,[%sp]8
8000d6b2:	89 48 38 f5 	st.w [+%a4]-8,%d8
8000d6b6:	40 a4       	mov.aa %a4,%sp
8000d6b8:	6d ff fe fd 	call 8000d2b4 <__lo0bits>
8000d6bc:	58 00       	ld.w %d15,[%sp]0
8000d6be:	76 2f       	jz %d2,8000d6dc <__d2b+0x56>
8000d6c0:	19 a4 04 00 	ld.w %d4,[%sp]4
8000d6c4:	8b 02 02 31 	rsub %d3,%d2,32
8000d6c8:	0f 34 00 30 	sh %d3,%d4,%d3
8000d6cc:	a6 3f       	or %d15,%d3
8000d6ce:	68 5f       	st.w [%a15]20,%d15
8000d6d0:	8b 02 00 f1 	rsub %d15,%d2,0
8000d6d4:	0f f4 00 f0 	sh %d15,%d4,%d15
8000d6d8:	78 01       	st.w [%sp]4,%d15
8000d6da:	3c 02       	j 8000d6de <__d2b+0x58>
8000d6dc:	68 5f       	st.w [%a15]20,%d15
8000d6de:	58 01       	ld.w %d15,[%sp]4
8000d6e0:	82 28       	mov %d8,2
8000d6e2:	ea 18       	cmovn %d8,%d15,1
8000d6e4:	68 6f       	st.w [%a15]24,%d15
8000d6e6:	68 48       	st.w [%a15]16,%d8
8000d6e8:	3c 0c       	j 8000d700 <__d2b+0x7a>
8000d6ea:	d9 a4 04 00 	lea %a4,[%sp]4
8000d6ee:	6d ff e3 fd 	call 8000d2b4 <__lo0bits>
8000d6f2:	58 01       	ld.w %d15,[%sp]4
8000d6f4:	1b 02 02 20 	addi %d2,%d2,32
8000d6f8:	68 5f       	st.w [%a15]20,%d15
8000d6fa:	82 1f       	mov %d15,1
8000d6fc:	68 4f       	st.w [%a15]16,%d15
8000d6fe:	82 18       	mov %d8,1
8000d700:	76 98       	jz %d9,8000d710 <__d2b+0x8a>
8000d702:	1b d9 bc 9f 	addi %d9,%d9,-1075
8000d706:	42 29       	add %d9,%d2
8000d708:	74 d9       	st.w [%a13],%d9
8000d70a:	8b 52 03 21 	rsub %d2,%d2,53
8000d70e:	3c 0d       	j 8000d728 <__d2b+0xa2>
8000d710:	01 f8 02 26 	addsc.a %a2,%a15,%d8,2
8000d714:	1b e2 bc 2f 	addi %d2,%d2,-1074
8000d718:	74 d2       	st.w [%a13],%d2
8000d71a:	19 24 10 00 	ld.w %d4,[%a2]16
8000d71e:	6d ff aa fd 	call 8000d272 <__hi0bits>
8000d722:	06 58       	sh %d8,5
8000d724:	0b 28 80 20 	sub %d2,%d8,%d2
8000d728:	74 c2       	st.w [%a12],%d2
8000d72a:	40 f2       	mov.aa %a2,%a15
8000d72c:	00 90       	ret 

8000d72e <__fpclassifyd>:
8000d72e:	0f 45 a0 f0 	or %d15,%d5,%d4
8000d732:	82 22       	mov %d2,2
8000d734:	6e 1d       	jz %d15,8000d76e <__fpclassifyd+0x40>
8000d736:	7b 00 00 38 	movh %d3,32768
8000d73a:	3a 53       	eq %d15,%d3,%d5
8000d73c:	8b 04 00 f4 	and.eq %d15,%d4,0
8000d740:	8b 04 00 62 	eq %d6,%d4,0
8000d744:	ee 15       	jnz %d15,8000d76e <__fpclassifyd+0x40>
8000d746:	b7 05 81 5f 	insert %d5,%d5,0,31,1
8000d74a:	7b 00 fe f7 	movh %d15,32736
8000d74e:	9b 05 ff 3f 	addih %d3,%d5,65520
8000d752:	82 42       	mov %d2,4
8000d754:	3f f3 0d 80 	jlt.u %d3,%d15,8000d76e <__fpclassifyd+0x40>
8000d758:	7b 00 01 f0 	movh %d15,16
8000d75c:	82 32       	mov %d2,3
8000d75e:	3f f5 08 80 	jlt.u %d5,%d15,8000d76e <__fpclassifyd+0x40>
8000d762:	7b 00 ff 27 	movh %d2,32752
8000d766:	0b 25 00 51 	eq %d5,%d5,%d2
8000d76a:	0f 56 80 20 	and %d2,%d6,%d5
8000d76e:	00 90       	ret 

8000d770 <__ssprint_r>:
8000d770:	4c 62       	ld.w %d15,[%a6]8
8000d772:	20 08       	sub.a %sp,8
8000d774:	40 4e       	mov.aa %a14,%a4
8000d776:	40 5f       	mov.aa %a15,%a5
8000d778:	40 6c       	mov.aa %a12,%a6
8000d77a:	54 6c       	ld.w %d12,[%a6]
8000d77c:	6e 30       	jz %d15,8000d7dc <__ssprint_r+0x6c>
8000d77e:	a0 02       	mov.a %a2,0
8000d780:	b5 a2 04 00 	st.a [%sp]4,%a2
8000d784:	82 09       	mov %d9,0
8000d786:	3b 00 48 e0 	mov %d14,1152
8000d78a:	3b f0 b7 df 	mov %d13,-1153
8000d78e:	3c 0a       	j 8000d7a2 <__ssprint_r+0x32>
8000d790:	60 c2       	mov.a %a2,%d12
8000d792:	d4 22       	ld.a %a2,[%a2]
8000d794:	b5 a2 04 00 	st.a [%sp]4,%a2
8000d798:	60 c2       	mov.a %a2,%d12
8000d79a:	1b 8c 00 c0 	addi %d12,%d12,8
8000d79e:	19 29 04 00 	ld.w %d9,[%a2]4
8000d7a2:	df 09 f7 7f 	jeq %d9,0,8000d790 <__ssprint_r+0x20>
8000d7a6:	48 28       	ld.w %d8,[%a15]8
8000d7a8:	3f 89 5a 80 	jlt.u %d9,%d8,8000d85c <__ssprint_r+0xec>
8000d7ac:	88 62       	ld.h %d2,[%a15]12
8000d7ae:	0f e2 80 f0 	and %d15,%d2,%d14
8000d7b2:	ee 19       	jnz %d15,8000d7e4 <__ssprint_r+0x74>
8000d7b4:	3f 89 54 80 	jlt.u %d9,%d8,8000d85c <__ssprint_r+0xec>
8000d7b8:	c8 04       	ld.a %a4,[%a15]0
8000d7ba:	99 a5 04 00 	ld.a %a5,[%sp]4 <0 <NULL>>
8000d7be:	02 84       	mov %d4,%d8
8000d7c0:	6d 00 81 00 	call 8000d8c2 <memmove>
8000d7c4:	4c f2       	ld.w %d15,[%a15]8
8000d7c6:	a2 8f       	sub %d15,%d8
8000d7c8:	68 2f       	st.w [%a15]8,%d15
8000d7ca:	4c f0       	ld.w %d15,[%a15]0
8000d7cc:	42 f8       	add %d8,%d15
8000d7ce:	4c c2       	ld.w %d15,[%a12]8
8000d7d0:	68 08       	st.w [%a15]0,%d8
8000d7d2:	52 99       	sub %d9,%d15,%d9
8000d7d4:	59 c9 08 00 	st.w [%a12]8,%d9
8000d7d8:	df 09 dc ff 	jne %d9,0,8000d790 <__ssprint_r+0x20>
8000d7dc:	82 0f       	mov %d15,0
8000d7de:	6c c1       	st.w [%a12]4,%d15
8000d7e0:	82 02       	mov %d2,0
8000d7e2:	00 90       	ret 
8000d7e4:	c8 45       	ld.a %a5,[%a15]16
8000d7e6:	48 5a       	ld.w %d10,[%a15]20
8000d7e8:	4c f0       	ld.w %d15,[%a15]0
8000d7ea:	80 53       	mov.d %d3,%a5
8000d7ec:	53 3a 20 a0 	mul %d10,%d10,3
8000d7f0:	a2 3f       	sub %d15,%d3
8000d7f2:	82 23       	mov %d3,2
8000d7f4:	4b 3a 01 a2 	div %e10,%d10,%d3
8000d7f8:	92 13       	add %d3,%d15,1
8000d7fa:	42 93       	add %d3,%d9
8000d7fc:	0b 3a b0 a1 	max.u %d10,%d10,%d3
8000d800:	40 e4       	mov.aa %a4,%a14
8000d802:	02 a4       	mov %d4,%d10
8000d804:	6f a2 12 00 	jz.t %d2,10,8000d828 <__ssprint_r+0xb8>
8000d808:	6d ff f1 e8 	call 8000a9ea <_malloc_r>
8000d80c:	40 2d       	mov.aa %a13,%a2
8000d80e:	bd 02 15 00 	jz.a %a2,8000d838 <__ssprint_r+0xc8>
8000d812:	c8 45       	ld.a %a5,[%a15]16
8000d814:	40 24       	mov.aa %a4,%a2
8000d816:	02 f4       	mov %d4,%d15
8000d818:	6d ff aa fc 	call 8000d16c <memcpy>
8000d81c:	88 62       	ld.h %d2,[%a15]12
8000d81e:	26 d2       	and %d2,%d13
8000d820:	8f 02 48 21 	or %d2,%d2,128
8000d824:	a8 62       	st.h [%a15]12,%d2
8000d826:	3c 13       	j 8000d84c <__ssprint_r+0xdc>
8000d828:	6d 00 7d 00 	call 8000d922 <_realloc_r>
8000d82c:	40 2d       	mov.aa %a13,%a2
8000d82e:	7c 2f       	jnz.a %a2,8000d84c <__ssprint_r+0xdc>
8000d830:	c8 45       	ld.a %a5,[%a15]16
8000d832:	40 e4       	mov.aa %a4,%a14
8000d834:	6d ff b5 fb 	call 8000cf9e <_free_r>
8000d838:	da 0c       	mov %d15,12
8000d83a:	6c e0       	st.w [%a14]0,%d15
8000d83c:	8c f6       	ld.h %d15,[%a15]12
8000d83e:	82 f2       	mov %d2,-1
8000d840:	96 40       	or %d15,64
8000d842:	a8 6f       	st.h [%a15]12,%d15
8000d844:	82 0f       	mov %d15,0
8000d846:	6c c2       	st.w [%a12]8,%d15
8000d848:	6c c1       	st.w [%a12]4,%d15
8000d84a:	00 90       	ret 
8000d84c:	e8 4d       	st.a [%a15]16,%a13
8000d84e:	10 dd       	addsc.a %a13,%a13,%d15,0
8000d850:	68 5a       	st.w [%a15]20,%d10
8000d852:	a2 fa       	sub %d10,%d15
8000d854:	e8 0d       	st.a [%a15]0,%a13
8000d856:	02 98       	mov %d8,%d9
8000d858:	68 2a       	st.w [%a15]8,%d10
8000d85a:	3c ad       	j 8000d7b4 <__ssprint_r+0x44>
8000d85c:	02 98       	mov %d8,%d9
8000d85e:	3c ad       	j 8000d7b8 <__ssprint_r+0x48>

8000d860 <_calloc_r>:
8000d860:	e2 54       	mul %d4,%d5
8000d862:	6d ff c4 e8 	call 8000a9ea <_malloc_r>
8000d866:	40 2f       	mov.aa %a15,%a2
8000d868:	a0 02       	mov.a %a2,0
8000d86a:	bd 0f 2b 00 	jz.a %a15,8000d8c0 <_calloc_r+0x60>
8000d86e:	19 f5 fc ff 	ld.w %d5,[%a15]-4
8000d872:	8f 35 c0 51 	andn %d5,%d5,3
8000d876:	c2 c5       	add %d5,-4
8000d878:	8b 55 a2 f2 	ge.u %d15,%d5,37
8000d87c:	ee 1d       	jnz %d15,8000d8b6 <_calloc_r+0x56>
8000d87e:	8b 45 61 f2 	lt.u %d15,%d5,20
8000d882:	40 f2       	mov.aa %a2,%a15
8000d884:	ee 14       	jnz %d15,8000d8ac <_calloc_r+0x4c>
8000d886:	82 0f       	mov %d15,0
8000d888:	68 0f       	st.w [%a15]0,%d15
8000d88a:	68 1f       	st.w [%a15]4,%d15
8000d88c:	8b c5 a1 22 	ge.u %d2,%d5,28
8000d890:	d9 f2 08 00 	lea %a2,[%a15]8
8000d894:	76 2c       	jz %d2,8000d8ac <_calloc_r+0x4c>
8000d896:	68 2f       	st.w [%a15]8,%d15
8000d898:	68 3f       	st.w [%a15]12,%d15
8000d89a:	8b 45 02 52 	eq %d5,%d5,36
8000d89e:	d9 f2 10 00 	lea %a2,[%a15]16
8000d8a2:	76 55       	jz %d5,8000d8ac <_calloc_r+0x4c>
8000d8a4:	68 4f       	st.w [%a15]16,%d15
8000d8a6:	d9 f2 18 00 	lea %a2,[%a15]24
8000d8aa:	68 5f       	st.w [%a15]20,%d15
8000d8ac:	82 0f       	mov %d15,0
8000d8ae:	6c 20       	st.w [%a2]0,%d15
8000d8b0:	6c 21       	st.w [%a2]4,%d15
8000d8b2:	6c 22       	st.w [%a2]8,%d15
8000d8b4:	3c 05       	j 8000d8be <_calloc_r+0x5e>
8000d8b6:	40 f4       	mov.aa %a4,%a15
8000d8b8:	82 04       	mov %d4,0
8000d8ba:	6d 00 2c 00 	call 8000d912 <memset>
8000d8be:	40 f2       	mov.aa %a2,%a15
8000d8c0:	00 90       	ret 

8000d8c2 <memmove>:
8000d8c2:	80 46       	mov.d %d6,%a4
8000d8c4:	80 52       	mov.d %d2,%a5
8000d8c6:	7f 62 16 80 	jge.u %d2,%d6,8000d8f2 <memmove+0x30>
8000d8ca:	0b 42 00 50 	add %d5,%d2,%d4
8000d8ce:	7f 56 12 80 	jge.u %d6,%d5,8000d8f2 <memmove+0x30>
8000d8d2:	60 4f       	mov.a %a15,%d4
8000d8d4:	02 42       	mov %d2,%d4
8000d8d6:	c2 f2       	add %d2,-1
8000d8d8:	fd f0 03 00 	loop %a15,8000d8de <memmove+0x1c>
8000d8dc:	3c 19       	j 8000d90e <memmove+0x4c>
8000d8de:	5a 42       	sub %d15,%d2,%d4
8000d8e0:	60 f2       	mov.a %a2,%d15
8000d8e2:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
8000d8e6:	1a 62       	add %d15,%d2,%d6
8000d8e8:	79 23 00 00 	ld.b %d3,[%a2]0
8000d8ec:	60 f2       	mov.a %a2,%d15
8000d8ee:	34 23       	st.b [%a2],%d3
8000d8f0:	3c f3       	j 8000d8d6 <memmove+0x14>
8000d8f2:	60 4f       	mov.a %a15,%d4
8000d8f4:	a0 02       	mov.a %a2,0
8000d8f6:	01 26 00 46 	addsc.a %a4,%a2,%d6,0
8000d8fa:	01 22 00 36 	addsc.a %a3,%a2,%d2,0
8000d8fe:	fd f0 03 00 	loop %a15,8000d904 <memmove+0x42>
8000d902:	3c 06       	j 8000d90e <memmove+0x4c>
8000d904:	79 33 00 00 	ld.b %d3,[%a3]0
8000d908:	b0 12       	add.a %a2,1
8000d90a:	34 43       	st.b [%a4],%d3
8000d90c:	3c f5       	j 8000d8f6 <memmove+0x34>
8000d90e:	60 62       	mov.a %a2,%d6
8000d910:	00 90       	ret 

8000d912 <memset>:
8000d912:	40 42       	mov.aa %a2,%a4
8000d914:	40 4f       	mov.aa %a15,%a4
8000d916:	9f 05 03 80 	jned %d5,0,8000d91c <memset+0xa>
8000d91a:	00 90       	ret 
8000d91c:	28 04       	st.b [%a15]0,%d4
8000d91e:	b0 1f       	add.a %a15,1
8000d920:	3c fb       	j 8000d916 <memset+0x4>

8000d922 <_realloc_r>:
8000d922:	40 4d       	mov.aa %a13,%a4
8000d924:	40 5f       	mov.aa %a15,%a5
8000d926:	02 49       	mov %d9,%d4
8000d928:	7c 53       	jnz.a %a5,8000d92e <_realloc_r+0xc>
8000d92a:	1d ff 60 e8 	j 8000a9ea <_malloc_r>
8000d92e:	6d ff ab ea 	call 8000ae84 <__malloc_lock>
8000d932:	1b b9 00 20 	addi %d2,%d9,11
8000d936:	8b 72 61 f2 	lt.u %d15,%d2,23
8000d93a:	8f 72 c0 21 	andn %d2,%d2,7
8000d93e:	ab 02 a1 ff 	seln %d15,%d15,%d2,16
8000d942:	19 f3 fc ff 	ld.w %d3,[%a15]-4
8000d946:	0b 9f 30 21 	lt.u %d2,%d15,%d9
8000d94a:	8b 0f 20 25 	or.lt %d2,%d15,0
8000d94e:	d9 fe f8 ff 	lea %a14,[%a15]-8
8000d952:	8f 33 c0 81 	andn %d8,%d3,3
8000d956:	76 25       	jz %d2,8000d960 <_realloc_r+0x3e>
8000d958:	da 0c       	mov %d15,12
8000d95a:	6c d0       	st.w [%a13]0,%d15
8000d95c:	1d 00 56 01 	j 8000dc08 <_realloc_r+0x2e6>
8000d960:	7f f8 ac 01 	jge %d8,%d15,8000dcb8 <_realloc_r+0x396>
8000d964:	7b 00 00 c7 	movh %d12,28672
8000d968:	60 c3       	mov.a %a3,%d12
8000d96a:	01 e8 00 26 	addsc.a %a2,%a14,%d8,0
8000d96e:	d9 34 08 30 	lea %a4,[%a3]200
8000d972:	99 43 08 00 	ld.a %a3,[%a4]8
8000d976:	80 4c       	mov.d %d12,%a4
8000d978:	19 2b 04 00 	ld.w %d11,[%a2]4
8000d97c:	7d 32 0a 00 	jeq.a %a2,%a3,8000d990 <_realloc_r+0x6e>
8000d980:	8f 1b c0 21 	andn %d2,%d11,1
8000d984:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
8000d988:	19 42 04 00 	ld.w %d2,[%a4]4
8000d98c:	6f 02 2b 80 	jnz.t %d2,0,8000d9e2 <_realloc_r+0xc0>
8000d990:	8f 3b c0 b1 	andn %d11,%d11,3
8000d994:	0b 8b 00 20 	add %d2,%d11,%d8
8000d998:	7d 32 1b 80 	jne.a %a2,%a3,8000d9ce <_realloc_r+0xac>
8000d99c:	1b 0f 01 40 	addi %d4,%d15,16
8000d9a0:	3f 42 23 00 	jlt %d2,%d4,8000d9e6 <_realloc_r+0xc4>
8000d9a4:	10 ee       	addsc.a %a14,%a14,%d15,0
8000d9a6:	60 c2       	mov.a %a2,%d12
8000d9a8:	a2 f2       	sub %d2,%d15
8000d9aa:	b5 2e 08 00 	st.a [%a2]8,%a14
8000d9ae:	8f 12 40 21 	or %d2,%d2,1
8000d9b2:	59 e2 04 00 	st.w [%a14]4,%d2
8000d9b6:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000d9ba:	40 d4       	mov.aa %a4,%a13
8000d9bc:	8f 12 00 21 	and %d2,%d2,1
8000d9c0:	a6 2f       	or %d15,%d2
8000d9c2:	59 ff fc ff 	st.w [%a15]-4,%d15
8000d9c6:	6d ff 60 ea 	call 8000ae86 <__malloc_unlock>
8000d9ca:	40 f2       	mov.aa %a2,%a15
8000d9cc:	00 90       	ret 
8000d9ce:	3f f2 0c 00 	jlt %d2,%d15,8000d9e6 <_realloc_r+0xc4>
8000d9d2:	cc 23       	ld.a %a15,[%a2]12
8000d9d4:	99 22 08 00 	ld.a %a2,[%a2]8
8000d9d8:	02 28       	mov %d8,%d2
8000d9da:	ec 23       	st.a [%a2]12,%a15
8000d9dc:	e8 22       	st.a [%a15]8,%a2
8000d9de:	1d 00 6d 01 	j 8000dcb8 <_realloc_r+0x396>
8000d9e2:	82 0b       	mov %d11,0
8000d9e4:	a0 02       	mov.a %a2,0
8000d9e6:	6f 03 08 81 	jnz.t %d3,0,8000dbf6 <_realloc_r+0x2d4>
8000d9ea:	99 fc f8 ff 	ld.a %a12,[%a15]-8
8000d9ee:	01 ce 20 c0 	sub.a %a12,%a14,%a12
8000d9f2:	19 ca 04 00 	ld.w %d10,[%a12]4
8000d9f6:	8f 3a c0 a1 	andn %d10,%d10,3
8000d9fa:	42 8a       	add %d10,%d8
8000d9fc:	bd 02 b3 00 	jz.a %a2,8000db62 <_realloc_r+0x240>
8000da00:	42 ab       	add %d11,%d10
8000da02:	7d 32 5f 80 	jne.a %a2,%a3,8000dac0 <_realloc_r+0x19e>
8000da06:	1b 0f 01 20 	addi %d2,%d15,16
8000da0a:	3f 2b ac 00 	jlt %d11,%d2,8000db62 <_realloc_r+0x240>
8000da0e:	40 ce       	mov.aa %a14,%a12
8000da10:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000da14:	09 e3 88 05 	ld.a %a3,[+%a14]8
8000da18:	1b c8 ff 4f 	addi %d4,%d8,-4
8000da1c:	8b 54 a2 22 	ge.u %d2,%d4,37
8000da20:	b5 32 0c 00 	st.a [%a3]12,%a2
8000da24:	b5 23 08 00 	st.a [%a2]8,%a3
8000da28:	df 02 36 80 	jne %d2,0,8000da94 <_realloc_r+0x172>
8000da2c:	8b 44 61 22 	lt.u %d2,%d4,20
8000da30:	40 e3       	mov.aa %a3,%a14
8000da32:	df 02 28 80 	jne %d2,0,8000da82 <_realloc_r+0x160>
8000da36:	48 02       	ld.w %d2,[%a15]0
8000da38:	59 c2 08 00 	st.w [%a12]8,%d2
8000da3c:	48 13       	ld.w %d3,[%a15]4
8000da3e:	8b c4 a1 22 	ge.u %d2,%d4,28
8000da42:	59 c3 0c 00 	st.w [%a12]12,%d3
8000da46:	f6 26       	jnz %d2,8000da52 <_realloc_r+0x130>
8000da48:	d9 c3 10 00 	lea %a3,[%a12]16
8000da4c:	d9 ff 08 00 	lea %a15,[%a15]8
8000da50:	3c 19       	j 8000da82 <_realloc_r+0x160>
8000da52:	48 22       	ld.w %d2,[%a15]8
8000da54:	8b 44 02 82 	eq %d8,%d4,36
8000da58:	59 c2 10 00 	st.w [%a12]16,%d2
8000da5c:	48 33       	ld.w %d3,[%a15]12
8000da5e:	59 c3 14 00 	st.w [%a12]20,%d3
8000da62:	f6 86       	jnz %d8,8000da6e <_realloc_r+0x14c>
8000da64:	d9 c3 18 00 	lea %a3,[%a12]24
8000da68:	d9 ff 10 00 	lea %a15,[%a15]16
8000da6c:	3c 0b       	j 8000da82 <_realloc_r+0x160>
8000da6e:	48 42       	ld.w %d2,[%a15]16
8000da70:	d9 c3 20 00 	lea %a3,[%a12]32
8000da74:	59 c2 18 00 	st.w [%a12]24,%d2
8000da78:	48 53       	ld.w %d3,[%a15]20
8000da7a:	d9 ff 18 00 	lea %a15,[%a15]24
8000da7e:	59 c3 1c 00 	st.w [%a12]28,%d3
8000da82:	48 02       	ld.w %d2,[%a15]0
8000da84:	74 32       	st.w [%a3],%d2
8000da86:	48 13       	ld.w %d3,[%a15]4
8000da88:	59 33 04 00 	st.w [%a3]4,%d3
8000da8c:	48 22       	ld.w %d2,[%a15]8
8000da8e:	59 32 08 00 	st.w [%a3]8,%d2
8000da92:	3c 05       	j 8000da9c <_realloc_r+0x17a>
8000da94:	40 e4       	mov.aa %a4,%a14
8000da96:	40 f5       	mov.aa %a5,%a15
8000da98:	6d ff 15 ff 	call 8000d8c2 <memmove>
8000da9c:	10 cf       	addsc.a %a15,%a12,%d15,0
8000da9e:	60 c2       	mov.a %a2,%d12
8000daa0:	a2 fb       	sub %d11,%d15
8000daa2:	ec 22       	st.a [%a2]8,%a15
8000daa4:	8f 1b 40 b1 	or %d11,%d11,1
8000daa8:	68 1b       	st.w [%a15]4,%d11
8000daaa:	19 c2 04 00 	ld.w %d2,[%a12]4
8000daae:	40 d4       	mov.aa %a4,%a13
8000dab0:	8f 12 00 21 	and %d2,%d2,1
8000dab4:	a6 2f       	or %d15,%d2
8000dab6:	6c c1       	st.w [%a12]4,%d15
8000dab8:	6d ff e7 e9 	call 8000ae86 <__malloc_unlock>
8000dabc:	40 e2       	mov.aa %a2,%a14
8000dabe:	00 90       	ret 
8000dac0:	3f fb 51 00 	jlt %d11,%d15,8000db62 <_realloc_r+0x240>
8000dac4:	99 23 0c 00 	ld.a %a3,[%a2]12
8000dac8:	99 22 08 00 	ld.a %a2,[%a2]8
8000dacc:	40 c4       	mov.aa %a4,%a12
8000dace:	1b c8 ff 4f 	addi %d4,%d8,-4
8000dad2:	b5 23 0c 00 	st.a [%a2]12,%a3
8000dad6:	b5 32 08 00 	st.a [%a3]8,%a2
8000dada:	09 43 88 05 	ld.a %a3,[+%a4]8
8000dade:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000dae2:	8b 54 a2 22 	ge.u %d2,%d4,37
8000dae6:	b5 32 0c 00 	st.a [%a3]12,%a2
8000daea:	b5 23 08 00 	st.a [%a2]8,%a3
8000daee:	df 02 35 80 	jne %d2,0,8000db58 <_realloc_r+0x236>
8000daf2:	8b 44 61 22 	lt.u %d2,%d4,20
8000daf6:	df 02 28 80 	jne %d2,0,8000db46 <_realloc_r+0x224>
8000dafa:	48 02       	ld.w %d2,[%a15]0
8000dafc:	59 c2 08 00 	st.w [%a12]8,%d2
8000db00:	48 13       	ld.w %d3,[%a15]4
8000db02:	8b c4 a1 22 	ge.u %d2,%d4,28
8000db06:	59 c3 0c 00 	st.w [%a12]12,%d3
8000db0a:	f6 26       	jnz %d2,8000db16 <_realloc_r+0x1f4>
8000db0c:	d9 c4 10 00 	lea %a4,[%a12]16
8000db10:	d9 ff 08 00 	lea %a15,[%a15]8
8000db14:	3c 19       	j 8000db46 <_realloc_r+0x224>
8000db16:	48 22       	ld.w %d2,[%a15]8
8000db18:	8b 44 02 82 	eq %d8,%d4,36
8000db1c:	59 c2 10 00 	st.w [%a12]16,%d2
8000db20:	48 33       	ld.w %d3,[%a15]12
8000db22:	59 c3 14 00 	st.w [%a12]20,%d3
8000db26:	f6 86       	jnz %d8,8000db32 <_realloc_r+0x210>
8000db28:	d9 c4 18 00 	lea %a4,[%a12]24
8000db2c:	d9 ff 10 00 	lea %a15,[%a15]16
8000db30:	3c 0b       	j 8000db46 <_realloc_r+0x224>
8000db32:	48 42       	ld.w %d2,[%a15]16
8000db34:	d9 c4 20 00 	lea %a4,[%a12]32
8000db38:	59 c2 18 00 	st.w [%a12]24,%d2
8000db3c:	48 53       	ld.w %d3,[%a15]20
8000db3e:	d9 ff 18 00 	lea %a15,[%a15]24
8000db42:	59 c3 1c 00 	st.w [%a12]28,%d3
8000db46:	48 02       	ld.w %d2,[%a15]0
8000db48:	74 42       	st.w [%a4],%d2
8000db4a:	48 13       	ld.w %d3,[%a15]4
8000db4c:	59 43 04 00 	st.w [%a4]4,%d3
8000db50:	48 22       	ld.w %d2,[%a15]8
8000db52:	59 42 08 00 	st.w [%a4]8,%d2
8000db56:	3c 04       	j 8000db5e <_realloc_r+0x23c>
8000db58:	40 f5       	mov.aa %a5,%a15
8000db5a:	6d ff b4 fe 	call 8000d8c2 <memmove>
8000db5e:	02 b8       	mov %d8,%d11
8000db60:	3c 45       	j 8000dbea <_realloc_r+0x2c8>
8000db62:	3f fa 4a 00 	jlt %d10,%d15,8000dbf6 <_realloc_r+0x2d4>
8000db66:	40 c4       	mov.aa %a4,%a12
8000db68:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000db6c:	09 43 88 05 	ld.a %a3,[+%a4]8
8000db70:	1b c8 ff 4f 	addi %d4,%d8,-4
8000db74:	8b 54 a2 22 	ge.u %d2,%d4,37
8000db78:	b5 32 0c 00 	st.a [%a3]12,%a2
8000db7c:	b5 23 08 00 	st.a [%a2]8,%a3
8000db80:	df 02 37 80 	jne %d2,0,8000dbee <_realloc_r+0x2cc>
8000db84:	8b 44 61 22 	lt.u %d2,%d4,20
8000db88:	df 02 28 80 	jne %d2,0,8000dbd8 <_realloc_r+0x2b6>
8000db8c:	48 03       	ld.w %d3,[%a15]0
8000db8e:	59 c3 08 00 	st.w [%a12]8,%d3
8000db92:	48 12       	ld.w %d2,[%a15]4
8000db94:	59 c2 0c 00 	st.w [%a12]12,%d2
8000db98:	8b c4 a1 22 	ge.u %d2,%d4,28
8000db9c:	f6 26       	jnz %d2,8000dba8 <_realloc_r+0x286>
8000db9e:	d9 c4 10 00 	lea %a4,[%a12]16
8000dba2:	d9 ff 08 00 	lea %a15,[%a15]8
8000dba6:	3c 19       	j 8000dbd8 <_realloc_r+0x2b6>
8000dba8:	48 23       	ld.w %d3,[%a15]8
8000dbaa:	8b 44 02 82 	eq %d8,%d4,36
8000dbae:	59 c3 10 00 	st.w [%a12]16,%d3
8000dbb2:	48 32       	ld.w %d2,[%a15]12
8000dbb4:	59 c2 14 00 	st.w [%a12]20,%d2
8000dbb8:	f6 86       	jnz %d8,8000dbc4 <_realloc_r+0x2a2>
8000dbba:	d9 c4 18 00 	lea %a4,[%a12]24
8000dbbe:	d9 ff 10 00 	lea %a15,[%a15]16
8000dbc2:	3c 0b       	j 8000dbd8 <_realloc_r+0x2b6>
8000dbc4:	48 43       	ld.w %d3,[%a15]16
8000dbc6:	d9 c4 20 00 	lea %a4,[%a12]32
8000dbca:	59 c3 18 00 	st.w [%a12]24,%d3
8000dbce:	48 52       	ld.w %d2,[%a15]20
8000dbd0:	d9 ff 18 00 	lea %a15,[%a15]24
8000dbd4:	59 c2 1c 00 	st.w [%a12]28,%d2
8000dbd8:	48 03       	ld.w %d3,[%a15]0
8000dbda:	74 43       	st.w [%a4],%d3
8000dbdc:	48 12       	ld.w %d2,[%a15]4
8000dbde:	59 42 04 00 	st.w [%a4]4,%d2
8000dbe2:	48 23       	ld.w %d3,[%a15]8
8000dbe4:	59 43 08 00 	st.w [%a4]8,%d3
8000dbe8:	02 a8       	mov %d8,%d10
8000dbea:	40 ce       	mov.aa %a14,%a12
8000dbec:	3c 66       	j 8000dcb8 <_realloc_r+0x396>
8000dbee:	40 f5       	mov.aa %a5,%a15
8000dbf0:	6d ff 69 fe 	call 8000d8c2 <memmove>
8000dbf4:	3c fa       	j 8000dbe8 <_realloc_r+0x2c6>
8000dbf6:	40 d4       	mov.aa %a4,%a13
8000dbf8:	02 94       	mov %d4,%d9
8000dbfa:	6d ff f8 e6 	call 8000a9ea <_malloc_r>
8000dbfe:	40 2c       	mov.aa %a12,%a2
8000dc00:	7c 26       	jnz.a %a2,8000dc0c <_realloc_r+0x2ea>
8000dc02:	40 d4       	mov.aa %a4,%a13
8000dc04:	6d ff 41 e9 	call 8000ae86 <__malloc_unlock>
8000dc08:	a0 02       	mov.a %a2,0
8000dc0a:	00 90       	ret 
8000dc0c:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000dc10:	d9 23 f8 ff 	lea %a3,[%a2]-8
8000dc14:	8f 12 c0 21 	andn %d2,%d2,1
8000dc18:	01 e2 00 26 	addsc.a %a2,%a14,%d2,0
8000dc1c:	80 32       	mov.d %d2,%a3
8000dc1e:	80 23       	mov.d %d3,%a2
8000dc20:	5f 32 08 80 	jne %d2,%d3,8000dc30 <_realloc_r+0x30e>
8000dc24:	19 c2 fc ff 	ld.w %d2,[%a12]-4
8000dc28:	8f 32 c0 21 	andn %d2,%d2,3
8000dc2c:	42 28       	add %d8,%d2
8000dc2e:	3c 45       	j 8000dcb8 <_realloc_r+0x396>
8000dc30:	1b c8 ff 4f 	addi %d4,%d8,-4
8000dc34:	8b 54 a2 f2 	ge.u %d15,%d4,37
8000dc38:	ee 33       	jnz %d15,8000dc9e <_realloc_r+0x37c>
8000dc3a:	8b 44 61 f2 	lt.u %d15,%d4,20
8000dc3e:	40 c3       	mov.aa %a3,%a12
8000dc40:	40 f2       	mov.aa %a2,%a15
8000dc42:	ee 23       	jnz %d15,8000dc88 <_realloc_r+0x366>
8000dc44:	4c f0       	ld.w %d15,[%a15]0
8000dc46:	d9 c3 08 00 	lea %a3,[%a12]8
8000dc4a:	6c c0       	st.w [%a12]0,%d15
8000dc4c:	48 12       	ld.w %d2,[%a15]4
8000dc4e:	8b c4 a1 f2 	ge.u %d15,%d4,28
8000dc52:	59 c2 04 00 	st.w [%a12]4,%d2
8000dc56:	d9 f2 08 00 	lea %a2,[%a15]8
8000dc5a:	6e 17       	jz %d15,8000dc88 <_realloc_r+0x366>
8000dc5c:	48 23       	ld.w %d3,[%a15]8
8000dc5e:	8b 44 02 82 	eq %d8,%d4,36
8000dc62:	59 c3 08 00 	st.w [%a12]8,%d3
8000dc66:	4c f3       	ld.w %d15,[%a15]12
8000dc68:	d9 c3 10 00 	lea %a3,[%a12]16
8000dc6c:	6c c3       	st.w [%a12]12,%d15
8000dc6e:	d9 f2 10 00 	lea %a2,[%a15]16
8000dc72:	76 8b       	jz %d8,8000dc88 <_realloc_r+0x366>
8000dc74:	48 42       	ld.w %d2,[%a15]16
8000dc76:	d9 c3 18 00 	lea %a3,[%a12]24
8000dc7a:	59 c2 10 00 	st.w [%a12]16,%d2
8000dc7e:	48 53       	ld.w %d3,[%a15]20
8000dc80:	d9 f2 18 00 	lea %a2,[%a15]24
8000dc84:	59 c3 14 00 	st.w [%a12]20,%d3
8000dc88:	4c 20       	ld.w %d15,[%a2]0
8000dc8a:	6c 30       	st.w [%a3]0,%d15
8000dc8c:	19 22 04 00 	ld.w %d2,[%a2]4
8000dc90:	59 32 04 00 	st.w [%a3]4,%d2
8000dc94:	19 23 08 00 	ld.w %d3,[%a2]8
8000dc98:	59 33 08 00 	st.w [%a3]8,%d3
8000dc9c:	3c 05       	j 8000dca6 <_realloc_r+0x384>
8000dc9e:	40 c4       	mov.aa %a4,%a12
8000dca0:	40 f5       	mov.aa %a5,%a15
8000dca2:	6d ff 10 fe 	call 8000d8c2 <memmove>
8000dca6:	40 d4       	mov.aa %a4,%a13
8000dca8:	40 f5       	mov.aa %a5,%a15
8000dcaa:	6d ff 7a f9 	call 8000cf9e <_free_r>
8000dcae:	40 d4       	mov.aa %a4,%a13
8000dcb0:	6d ff eb e8 	call 8000ae86 <__malloc_unlock>
8000dcb4:	40 c2       	mov.aa %a2,%a12
8000dcb6:	00 90       	ret 
8000dcb8:	0b f8 80 20 	sub %d2,%d8,%d15
8000dcbc:	8b 02 61 42 	lt.u %d4,%d2,16
8000dcc0:	19 e3 04 00 	ld.w %d3,[%a14]4
8000dcc4:	df 04 16 80 	jne %d4,0,8000dcf0 <_realloc_r+0x3ce>
8000dcc8:	8f 13 00 31 	and %d3,%d3,1
8000dccc:	10 e5       	addsc.a %a5,%a14,%d15,0
8000dcce:	a6 3f       	or %d15,%d3
8000dcd0:	6c e1       	st.w [%a14]4,%d15
8000dcd2:	01 52 00 f6 	addsc.a %a15,%a5,%d2,0
8000dcd6:	8f 12 40 f1 	or %d15,%d2,1
8000dcda:	b7 10 21 20 	imask %e2,1,0,1
8000dcde:	6c 51       	st.w [%a5]4,%d15
8000dce0:	49 f2 44 08 	ldmst [%a15]4,%e2
8000dce4:	40 d4       	mov.aa %a4,%a13
8000dce6:	d9 55 08 00 	lea %a5,[%a5]8
8000dcea:	6d ff 5a f9 	call 8000cf9e <_free_r>
8000dcee:	3c 0c       	j 8000dd06 <_realloc_r+0x3e4>
8000dcf0:	8f 13 00 31 	and %d3,%d3,1
8000dcf4:	a6 83       	or %d3,%d8
8000dcf6:	59 e3 04 00 	st.w [%a14]4,%d3
8000dcfa:	01 e8 00 f6 	addsc.a %a15,%a14,%d8,0
8000dcfe:	b7 10 21 20 	imask %e2,1,0,1
8000dd02:	49 f2 44 08 	ldmst [%a15]4,%e2
8000dd06:	40 d4       	mov.aa %a4,%a13
8000dd08:	6d ff bf e8 	call 8000ae86 <__malloc_unlock>
8000dd0c:	d9 e2 08 00 	lea %a2,[%a14]8
8000dd10:	00 90       	ret 

8000dd12 <_exit>:
8000dd12:	76 43       	jz %d4,8000dd18 <_exit+0x6>
8000dd14:	60 4e       	mov.a %a14,%d4
8000dd16:	3c 04       	j 8000dd1e <_exit+0xc>
8000dd18:	bb d0 00 f9 	mov.u %d15,36877
8000dd1c:	60 fe       	mov.a %a14,%d15
8000dd1e:	00 a0       	debug 
8000dd20:	3c 00       	j 8000dd20 <_exit+0xe>

8000dd22 <sbrk>:
8000dd22:	91 00 00 f7 	movh.a %a15,28672
8000dd26:	19 ff b8 30 	ld.w %d15,[%a15]2296 <700008f8 <heap_top.2289>>
8000dd2a:	7b 00 00 27 	movh %d2,28672
8000dd2e:	42 f4       	add %d4,%d15
8000dd30:	1b 02 c2 20 	addi %d2,%d2,3104
8000dd34:	7f 42 09 80 	jge.u %d2,%d4,8000dd46 <sbrk+0x24>
8000dd38:	6d 00 13 00 	call 8000dd5e <__errno>
8000dd3c:	da 0c       	mov %d15,12
8000dd3e:	6c 20       	st.w [%a2]0,%d15
8000dd40:	a0 02       	mov.a %a2,0
8000dd42:	b0 f2       	add.a %a2,-1
8000dd44:	00 90       	ret 
8000dd46:	7b 00 00 27 	movh %d2,28672
8000dd4a:	1b 02 c2 20 	addi %d2,%d2,3104
8000dd4e:	7f 24 04 80 	jge.u %d4,%d2,8000dd56 <sbrk+0x34>
8000dd52:	6d 00 0b 00 	call 8000dd68 <abort>
8000dd56:	59 f4 b8 30 	st.w [%a15]2296,%d4
8000dd5a:	60 f2       	mov.a %a2,%d15
8000dd5c:	00 90       	ret 

8000dd5e <__errno>:
8000dd5e:	91 00 00 27 	movh.a %a2,28672
8000dd62:	d9 22 d8 00 	lea %a2,[%a2]3096 <70000c18 <_my_errno>>
8000dd66:	00 90       	ret 

8000dd68 <abort>:
8000dd68:	00 a0       	debug 
8000dd6a:	7b e0 ea fd 	movh %d15,57006
8000dd6e:	1b ff ee fb 	addi %d15,%d15,-16657
8000dd72:	60 fe       	mov.a %a14,%d15
8000dd74:	1d ff cf ff 	j 8000dd12 <_exit>
8000dd78:	3c 00       	j 8000dd78 <abort+0x10>

8000dd7a <__eqdf2>:
8000dd7a:	20 38       	sub.a %sp,56
8000dd7c:	40 a4       	mov.aa %a4,%sp
8000dd7e:	d9 a5 10 00 	lea %a5,[%sp]16
8000dd82:	89 a4 40 09 	st.d [%sp],%e4
8000dd86:	89 a6 48 09 	st.d [%sp]8,%e6
8000dd8a:	6d ff 6a e5 	call 8000a85e <__unpack_d>
8000dd8e:	d9 a4 08 00 	lea %a4,[%sp]8
8000dd92:	d9 a5 24 00 	lea %a5,[%sp]36
8000dd96:	6d ff 64 e5 	call 8000a85e <__unpack_d>
8000dd9a:	39 af 10 00 	ld.bu %d15,[%sp]16
8000dd9e:	82 12       	mov %d2,1
8000dda0:	bf 2f 0c 80 	jlt.u %d15,2,8000ddb8 <__eqdf2+0x3e>
8000dda4:	39 af 24 00 	ld.bu %d15,[%sp]36
8000dda8:	bf 2f 08 80 	jlt.u %d15,2,8000ddb8 <__eqdf2+0x3e>
8000ddac:	d9 a4 10 00 	lea %a4,[%sp]16
8000ddb0:	d9 a5 24 00 	lea %a5,[%sp]36
8000ddb4:	6d 00 0d 01 	call 8000dfce <__fpcmp_parts_d>
8000ddb8:	00 90       	ret 

8000ddba <__nedf2>:
8000ddba:	20 38       	sub.a %sp,56
8000ddbc:	40 a4       	mov.aa %a4,%sp
8000ddbe:	d9 a5 10 00 	lea %a5,[%sp]16
8000ddc2:	89 a4 40 09 	st.d [%sp],%e4
8000ddc6:	89 a6 48 09 	st.d [%sp]8,%e6
8000ddca:	6d ff 4a e5 	call 8000a85e <__unpack_d>
8000ddce:	d9 a4 08 00 	lea %a4,[%sp]8
8000ddd2:	d9 a5 24 00 	lea %a5,[%sp]36
8000ddd6:	6d ff 44 e5 	call 8000a85e <__unpack_d>
8000ddda:	39 af 10 00 	ld.bu %d15,[%sp]16
8000ddde:	82 12       	mov %d2,1
8000dde0:	bf 2f 0c 80 	jlt.u %d15,2,8000ddf8 <__nedf2+0x3e>
8000dde4:	39 af 24 00 	ld.bu %d15,[%sp]36
8000dde8:	bf 2f 08 80 	jlt.u %d15,2,8000ddf8 <__nedf2+0x3e>
8000ddec:	d9 a4 10 00 	lea %a4,[%sp]16
8000ddf0:	d9 a5 24 00 	lea %a5,[%sp]36
8000ddf4:	6d 00 ed 00 	call 8000dfce <__fpcmp_parts_d>
8000ddf8:	00 90       	ret 

8000ddfa <__gtdf2>:
8000ddfa:	20 38       	sub.a %sp,56
8000ddfc:	40 a4       	mov.aa %a4,%sp
8000ddfe:	d9 a5 10 00 	lea %a5,[%sp]16
8000de02:	89 a4 40 09 	st.d [%sp],%e4
8000de06:	89 a6 48 09 	st.d [%sp]8,%e6
8000de0a:	6d ff 2a e5 	call 8000a85e <__unpack_d>
8000de0e:	d9 a4 08 00 	lea %a4,[%sp]8
8000de12:	d9 a5 24 00 	lea %a5,[%sp]36
8000de16:	6d ff 24 e5 	call 8000a85e <__unpack_d>
8000de1a:	39 af 10 00 	ld.bu %d15,[%sp]16
8000de1e:	82 f2       	mov %d2,-1
8000de20:	bf 2f 0c 80 	jlt.u %d15,2,8000de38 <__gtdf2+0x3e>
8000de24:	39 af 24 00 	ld.bu %d15,[%sp]36
8000de28:	bf 2f 08 80 	jlt.u %d15,2,8000de38 <__gtdf2+0x3e>
8000de2c:	d9 a4 10 00 	lea %a4,[%sp]16
8000de30:	d9 a5 24 00 	lea %a5,[%sp]36
8000de34:	6d 00 cd 00 	call 8000dfce <__fpcmp_parts_d>
8000de38:	00 90       	ret 

8000de3a <__gedf2>:
8000de3a:	20 38       	sub.a %sp,56
8000de3c:	40 a4       	mov.aa %a4,%sp
8000de3e:	d9 a5 10 00 	lea %a5,[%sp]16
8000de42:	89 a4 40 09 	st.d [%sp],%e4
8000de46:	89 a6 48 09 	st.d [%sp]8,%e6
8000de4a:	6d ff 0a e5 	call 8000a85e <__unpack_d>
8000de4e:	d9 a4 08 00 	lea %a4,[%sp]8
8000de52:	d9 a5 24 00 	lea %a5,[%sp]36
8000de56:	6d ff 04 e5 	call 8000a85e <__unpack_d>
8000de5a:	39 af 10 00 	ld.bu %d15,[%sp]16
8000de5e:	82 f2       	mov %d2,-1
8000de60:	bf 2f 0c 80 	jlt.u %d15,2,8000de78 <__gedf2+0x3e>
8000de64:	39 af 24 00 	ld.bu %d15,[%sp]36
8000de68:	bf 2f 08 80 	jlt.u %d15,2,8000de78 <__gedf2+0x3e>
8000de6c:	d9 a4 10 00 	lea %a4,[%sp]16
8000de70:	d9 a5 24 00 	lea %a5,[%sp]36
8000de74:	6d 00 ad 00 	call 8000dfce <__fpcmp_parts_d>
8000de78:	00 90       	ret 

8000de7a <__ltdf2>:
8000de7a:	20 38       	sub.a %sp,56
8000de7c:	40 a4       	mov.aa %a4,%sp
8000de7e:	d9 a5 10 00 	lea %a5,[%sp]16
8000de82:	89 a4 40 09 	st.d [%sp],%e4
8000de86:	89 a6 48 09 	st.d [%sp]8,%e6
8000de8a:	6d ff ea e4 	call 8000a85e <__unpack_d>
8000de8e:	d9 a4 08 00 	lea %a4,[%sp]8
8000de92:	d9 a5 24 00 	lea %a5,[%sp]36
8000de96:	6d ff e4 e4 	call 8000a85e <__unpack_d>
8000de9a:	39 af 10 00 	ld.bu %d15,[%sp]16
8000de9e:	82 12       	mov %d2,1
8000dea0:	bf 2f 0c 80 	jlt.u %d15,2,8000deb8 <__ltdf2+0x3e>
8000dea4:	39 af 24 00 	ld.bu %d15,[%sp]36
8000dea8:	bf 2f 08 80 	jlt.u %d15,2,8000deb8 <__ltdf2+0x3e>
8000deac:	d9 a4 10 00 	lea %a4,[%sp]16
8000deb0:	d9 a5 24 00 	lea %a5,[%sp]36
8000deb4:	6d 00 8d 00 	call 8000dfce <__fpcmp_parts_d>
8000deb8:	00 90       	ret 

8000deba <__fixdfsi>:
8000deba:	20 20       	sub.a %sp,32
8000debc:	d9 a4 20 00 	lea %a4,[%sp]32
8000dec0:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000dec4:	d9 a5 0c 00 	lea %a5,[%sp]12
8000dec8:	6d ff cb e4 	call 8000a85e <__unpack_d>
8000decc:	0c ac       	ld.bu %d15,[%sp]12
8000dece:	82 02       	mov %d2,0
8000ded0:	bf 3f 1b 80 	jlt.u %d15,3,8000df06 <__fixdfsi+0x4c>
8000ded4:	5e 48       	jne %d15,4,8000dee4 <__fixdfsi+0x2a>
8000ded6:	7b 00 00 28 	movh %d2,32768
8000deda:	58 04       	ld.w %d15,[%sp]16
8000dedc:	1b f2 ff 3f 	addi %d3,%d2,-1
8000dee0:	6a 32       	cmovn %d2,%d15,%d3
8000dee2:	00 90       	ret 
8000dee4:	19 a6 14 00 	ld.w %d6,[%sp]20
8000dee8:	82 02       	mov %d2,0
8000deea:	0e 6e       	jltz %d6,8000df06 <__fixdfsi+0x4c>
8000deec:	8b f6 81 f2 	ge %d15,%d6,31
8000def0:	ee f3       	jnz %d15,8000ded6 <__fixdfsi+0x1c>
8000def2:	09 a4 58 09 	ld.d %e4,[%sp]24
8000def6:	8b c6 03 61 	rsub %d6,%d6,60
8000defa:	6d ff b0 e0 	call 8000a05a <__lshrdi3>
8000defe:	58 04       	ld.w %d15,[%sp]16
8000df00:	8b 02 00 41 	rsub %d4,%d2,0
8000df04:	2a 42       	cmov %d2,%d15,%d4
8000df06:	00 90       	ret 

8000df08 <__udivdi3>:
8000df08:	0f 67 a0 20 	or %d2,%d7,%d6
8000df0c:	0b 45 10 a8 	mov %e10,%d5,%d4
8000df10:	02 6f       	mov %d15,%d6
8000df12:	02 7c       	mov %d12,%d7
8000df14:	d2 f8       	mov %e8,-1
8000df16:	df 02 46 00 	jeq %d2,0,8000dfa2 <__udivdi3+0x9a>
8000df1a:	8f 07 40 21 	or %d2,%d7,0
8000df1e:	f6 2d       	jnz %d2,8000df38 <__udivdi3+0x30>
8000df20:	4b 6b 11 82 	div.u %e8,%d11,%d6
8000df24:	d2 04       	mov %e4,0
8000df26:	02 a4       	mov %d4,%d10
8000df28:	42 95       	add %d5,%d9
8000df2a:	6d 00 a5 00 	call 8000e074 <__udiv6432>
8000df2e:	82 04       	mov %d4,0
8000df30:	02 85       	mov %d5,%d8
8000df32:	13 12 40 84 	madd.u %e8,%e4,%d2,1
8000df36:	3c 36       	j 8000dfa2 <__udivdi3+0x9a>
8000df38:	0b 7b 00 21 	eq %d2,%d11,%d7
8000df3c:	0b 64 30 22 	and.lt.u %d2,%d4,%d6
8000df40:	0b 7b a0 22 	or.lt.u %d2,%d11,%d7
8000df44:	d2 08       	mov %e8,0
8000df46:	df 02 2e 80 	jne %d2,0,8000dfa2 <__udivdi3+0x9a>
8000df4a:	77 4b 80 5f 	dextr %d5,%d11,%d4,31
8000df4e:	0f 07 b0 d1 	clz %d13,%d7
8000df52:	60 5f       	mov.a %a15,%d5
8000df54:	0b 67 10 48 	mov %e4,%d7,%d6
8000df58:	02 d6       	mov %d6,%d13
8000df5a:	6d ff a4 e3 	call 8000a6a2 <__ashldi3>
8000df5e:	8f fb 1f e0 	sh %d14,%d11,-1
8000df62:	80 f4       	mov.d %d4,%a15
8000df64:	02 36       	mov %d6,%d3
8000df66:	02 e5       	mov %d5,%d14
8000df68:	6d 00 86 00 	call 8000e074 <__udiv6432>
8000df6c:	8b fd 01 d1 	rsub %d13,%d13,31
8000df70:	8b 0d 00 31 	rsub %d3,%d13,0
8000df74:	0f 32 00 30 	sh %d3,%d2,%d3
8000df78:	02 32       	mov %d2,%d3
8000df7a:	8b f2 9f 80 	addx %d8,%d2,-1
8000df7e:	23 f8 68 aa 	msub.u %e10,%e10,%d8,%d15
8000df82:	82 03       	mov %d3,0
8000df84:	8b f3 bf 90 	addc %d9,%d3,-1
8000df88:	23 c8 0a bb 	msub %d11,%d11,%d8,%d12
8000df8c:	23 f9 0a bb 	msub %d11,%d11,%d9,%d15
8000df90:	0b cb 00 41 	eq %d4,%d11,%d12
8000df94:	0b fa 30 42 	and.lt.u %d4,%d10,%d15
8000df98:	0b cb a0 42 	or.lt.u %d4,%d11,%d12
8000df9c:	f6 43       	jnz %d4,8000dfa2 <__udivdi3+0x9a>
8000df9e:	0b 23 10 88 	mov %e8,%d3,%d2
8000dfa2:	0b 89 10 28 	mov %e2,%d9,%d8
8000dfa6:	00 90       	ret 

8000dfa8 <__umoddi3>:
8000dfa8:	0f 67 a0 90 	or %d9,%d7,%d6
8000dfac:	02 6f       	mov %d15,%d6
8000dfae:	d2 00       	mov %e0,0
8000dfb0:	76 9c       	jz %d9,8000dfc8 <__umoddi3+0x20>
8000dfb2:	02 7a       	mov %d10,%d7
8000dfb4:	0b 45 10 88 	mov %e8,%d5,%d4
8000dfb8:	6d ff a8 ff 	call 8000df08 <__udivdi3>
8000dfbc:	23 f2 68 08 	msub.u %e0,%e8,%d2,%d15
8000dfc0:	23 a2 0a 11 	msub %d1,%d1,%d2,%d10
8000dfc4:	23 f3 0a 11 	msub %d1,%d1,%d3,%d15
8000dfc8:	0b 01 10 28 	mov %e2,%d1,%d0
8000dfcc:	00 90       	ret 

8000dfce <__fpcmp_parts_d>:
8000dfce:	14 43       	ld.bu %d3,[%a4]
8000dfd0:	82 12       	mov %d2,1
8000dfd2:	bf 23 50 80 	jlt.u %d3,2,8000e072 <__fpcmp_parts_d+0xa4>
8000dfd6:	0c 50       	ld.bu %d15,[%a5]0
8000dfd8:	bf 2f 4d 80 	jlt.u %d15,2,8000e072 <__fpcmp_parts_d+0xa4>
8000dfdc:	8b 43 00 42 	eq %d4,%d3,4
8000dfe0:	8b 4f 00 22 	eq %d2,%d15,4
8000dfe4:	0f 24 80 50 	and %d5,%d4,%d2
8000dfe8:	76 56       	jz %d5,8000dff4 <__fpcmp_parts_d+0x26>
8000dfea:	19 52 04 00 	ld.w %d2,[%a5]4
8000dfee:	4c 41       	ld.w %d15,[%a4]4
8000dff0:	a2 f2       	sub %d2,%d15
8000dff2:	00 90       	ret 
8000dff4:	76 47       	jz %d4,8000e002 <__fpcmp_parts_d+0x34>
8000dff6:	19 42 04 00 	ld.w %d2,[%a4]4
8000dffa:	82 1f       	mov %d15,1
8000dffc:	ab ff bf 22 	seln %d2,%d2,%d15,-1
8000e000:	00 90       	ret 
8000e002:	76 27       	jz %d2,8000e010 <__fpcmp_parts_d+0x42>
8000e004:	19 52 04 00 	ld.w %d2,[%a5]4
8000e008:	82 ff       	mov %d15,-1
8000e00a:	ab 1f a0 22 	seln %d2,%d2,%d15,1
8000e00e:	00 90       	ret 
8000e010:	df 23 06 80 	jne %d3,2,8000e01c <__fpcmp_parts_d+0x4e>
8000e014:	82 02       	mov %d2,0
8000e016:	df 2f f7 ff 	jne %d15,2,8000e004 <__fpcmp_parts_d+0x36>
8000e01a:	00 90       	ret 
8000e01c:	df 2f ed 7f 	jeq %d15,2,8000dff6 <__fpcmp_parts_d+0x28>
8000e020:	19 45 04 00 	ld.w %d5,[%a4]4
8000e024:	4c 51       	ld.w %d15,[%a5]4
8000e026:	5f f5 19 80 	jne %d5,%d15,8000e058 <__fpcmp_parts_d+0x8a>
8000e02a:	19 42 08 00 	ld.w %d2,[%a4]8
8000e02e:	4c 52       	ld.w %d15,[%a5]8
8000e030:	3f 2f 14 00 	jlt %d15,%d2,8000e058 <__fpcmp_parts_d+0x8a>
8000e034:	3f f2 1c 00 	jlt %d2,%d15,8000e06c <__fpcmp_parts_d+0x9e>
8000e038:	19 43 10 00 	ld.w %d3,[%a4]16
8000e03c:	19 54 10 00 	ld.w %d4,[%a5]16
8000e040:	19 47 0c 00 	ld.w %d7,[%a4]12
8000e044:	19 56 0c 00 	ld.w %d6,[%a5]12
8000e048:	0b 43 00 21 	eq %d2,%d3,%d4
8000e04c:	0b 76 50 22 	and.ge.u %d2,%d6,%d7
8000e050:	0b 43 a0 22 	or.lt.u %d2,%d3,%d4
8000e054:	3a 43       	eq %d15,%d3,%d4
8000e056:	f6 25       	jnz %d2,8000e060 <__fpcmp_parts_d+0x92>
8000e058:	82 12       	mov %d2,1
8000e05a:	ab f2 bf 25 	seln %d2,%d5,%d2,-1
8000e05e:	00 90       	ret 
8000e060:	0b 67 50 f2 	and.ge.u %d15,%d7,%d6
8000e064:	0b 34 a0 f2 	or.lt.u %d15,%d4,%d3
8000e068:	82 02       	mov %d2,0
8000e06a:	ee 04       	jnz %d15,8000e072 <__fpcmp_parts_d+0xa4>
8000e06c:	82 f2       	mov %d2,-1
8000e06e:	ab 12 a0 25 	seln %d2,%d5,%d2,1
8000e072:	00 90       	ret 

8000e074 <__udiv6432>:
8000e074:	02 53       	mov %d3,%d5
8000e076:	82 f2       	mov %d2,-1
8000e078:	7f 65 4b 80 	jge.u %d5,%d6,8000e10e <__udiv6432+0x9a>
8000e07c:	0f 06 b0 21 	clz %d2,%d6
8000e080:	0f 26 00 60 	sh %d6,%d6,%d2
8000e084:	17 45 80 52 	dextr %d5,%d5,%d4,%d2
8000e088:	2b 35 40 32 	sel %d3,%d2,%d5,%d3
8000e08c:	8f 06 1f 70 	sh %d7,%d6,-16
8000e090:	4b 73 11 02 	div.u %e0,%d3,%d7
8000e094:	b7 06 10 88 	insert %d8,%d6,0,16,16
8000e098:	0f 24 00 20 	sh %d2,%d4,%d2
8000e09c:	02 05       	mov %d5,%d0
8000e09e:	23 07 0a 13 	msub %d1,%d3,%d7,%d0
8000e0a2:	e2 80       	mul %d0,%d8
8000e0a4:	8f 02 1f b0 	sh %d11,%d2,-16
8000e0a8:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000e0ac:	82 0c       	mov %d12,0
8000e0ae:	7b 10 00 90 	movh %d9,1
8000e0b2:	7f 95 09 80 	jge.u %d5,%d9,8000e0c4 <__udiv6432+0x50>
8000e0b6:	8f 01 01 f0 	sh %d15,%d1,16
8000e0ba:	0b 0c 00 a0 	add %d10,%d12,%d0
8000e0be:	42 bf       	add %d15,%d11
8000e0c0:	7f af 07 80 	jge.u %d15,%d10,8000e0ce <__udiv6432+0x5a>
8000e0c4:	42 71       	add %d1,%d7
8000e0c6:	c2 f5       	add %d5,-1
8000e0c8:	a2 8c       	sub %d12,%d8
8000e0ca:	3f 91 f4 ff 	jlt.u %d1,%d9,8000e0b2 <__udiv6432+0x3e>
8000e0ce:	8f 03 01 30 	sh %d3,%d3,16
8000e0d2:	42 3b       	add %d11,%d3
8000e0d4:	23 65 0a 6b 	msub %d6,%d11,%d5,%d6
8000e0d8:	82 0a       	mov %d10,0
8000e0da:	4b 76 11 02 	div.u %e0,%d6,%d7
8000e0de:	7b 10 00 10 	movh %d1,1
8000e0e2:	02 03       	mov %d3,%d0
8000e0e4:	23 07 0a 66 	msub %d6,%d6,%d7,%d0
8000e0e8:	e2 80       	mul %d0,%d8
8000e0ea:	7f 13 09 80 	jge.u %d3,%d1,8000e0fc <__udiv6432+0x88>
8000e0ee:	8f 06 01 f0 	sh %d15,%d6,16
8000e0f2:	0b 0a 00 90 	add %d9,%d10,%d0
8000e0f6:	42 2f       	add %d15,%d2
8000e0f8:	7f 9f 07 80 	jge.u %d15,%d9,8000e106 <__udiv6432+0x92>
8000e0fc:	42 76       	add %d6,%d7
8000e0fe:	c2 f3       	add %d3,-1
8000e100:	a2 8a       	sub %d10,%d8
8000e102:	3f 16 f4 ff 	jlt.u %d6,%d1,8000e0ea <__udiv6432+0x76>
8000e106:	8f 05 01 50 	sh %d5,%d5,16
8000e10a:	0b 53 00 20 	add %d2,%d3,%d5
8000e10e:	00 90       	ret 
